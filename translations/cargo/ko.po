msgid ""
msgstr ""
"Project-Id-Version: The Cargo Book\n"
"POT-Creation-Date: 2025-10-16T13:24:00+09:00\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"PO-Revision-Date: 2025-10-16T13:24:00+09:00\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"

#: src/SUMMARY.md:1
msgid "Summary"
msgstr "요약"

#: src/SUMMARY.md:3
msgid "Introduction"
msgstr "소개"

#: src/SUMMARY.md:5 src/getting-started/index.md:1
#: src/guide/continuous-integration.md:3
msgid "Getting Started"
msgstr "시작하기"

#: src/SUMMARY.md:6 src/getting-started/installation.md:1
msgid "Installation"
msgstr "설치"

#: src/SUMMARY.md:7 src/getting-started/first-steps.md:1
msgid "First Steps with Cargo"
msgstr "Cargo 첫 걸음"

#: src/SUMMARY.md:9 src/guide/index.md:1
msgid "Cargo Guide"
msgstr "Cargo 가이드"

#: src/SUMMARY.md:10 src/guide/why-cargo-exists.md:1
msgid "Why Cargo Exists"
msgstr "Cargo가 존재하는 이유"

#: src/SUMMARY.md:11 src/guide/creating-a-new-project.md:1
msgid "Creating a New Package"
msgstr "새 패키지 만들기"

#: src/SUMMARY.md:12
msgid "Working on an Existing Package"
msgstr "기존 패키지 작업하기"

#: src/SUMMARY.md:13 src/guide/dependencies.md:1
msgid "Dependencies"
msgstr "의존성"

#: src/SUMMARY.md:14 src/guide/project-layout.md:1
msgid "Package Layout"
msgstr "패키지 레이아웃"

#: src/SUMMARY.md:15 src/guide/cargo-toml-vs-cargo-lock.md:1
msgid "Cargo.toml vs Cargo.lock"
msgstr "Cargo.toml vs Cargo.lock"

#: src/SUMMARY.md:16 src/guide/tests.md:1 src/reference/cargo-targets.md:84
msgid "Tests"
msgstr "테스트"

#: src/SUMMARY.md:17 src/guide/continuous-integration.md:1
msgid "Continuous Integration"
msgstr "지속적 통합"

#: src/SUMMARY.md:18 src/reference/publishing.md:1
msgid "Publishing on crates.io"
msgstr "crates.io에 게시하기"

#: src/SUMMARY.md:19 src/guide/cargo-home.md:1
msgid "Cargo Home"
msgstr "Cargo 홈"

#: src/SUMMARY.md:21 src/reference/index.md:1
msgid "Cargo Reference"
msgstr "Cargo 레퍼런스"

#: src/SUMMARY.md:22 src/reference/manifest.md:1
msgid "The Manifest Format"
msgstr "매니페스트 형식"

#: src/SUMMARY.md:23 src/reference/cargo-targets.md:1
msgid "Cargo Targets"
msgstr "Cargo 타겟"

#: src/SUMMARY.md:24 src/reference/resolver.md:206
msgid "Rust version"
msgstr "Rust 버전"

#: src/SUMMARY.md:25 src/reference/workspaces.md:1
msgid "Workspaces"
msgstr "워크스페이스"

#: src/SUMMARY.md:26 src/reference/specifying-dependencies.md:1
msgid "Specifying Dependencies"
msgstr "의존성 지정하기"

#: src/SUMMARY.md:27 src/reference/overriding-dependencies.md:1
msgid "Overriding Dependencies"
msgstr "의존성 재정의하기"

#: src/SUMMARY.md:28 src/reference/source-replacement.md:1
msgid "Source Replacement"
msgstr "소스 교체"

#: src/SUMMARY.md:29 src/reference/resolver.md:1
msgid "Dependency Resolution"
msgstr "의존성 해결"

#: src/SUMMARY.md:30 src/reference/resolver.md:288 src/reference/features.md:1
#: src/reference/unstable.md:1965
msgid "Features"
msgstr "기능"

#: src/SUMMARY.md:31 src/reference/features-examples.md:1
msgid "Features Examples"
msgstr "기능 예제"

#: src/SUMMARY.md:32 src/reference/profiles.md:1
msgid "Profiles"
msgstr "프로파일"

#: src/SUMMARY.md:33 src/reference/source-replacement.md:37
#: src/reference/config.md:1 src/reference/future-incompat-report.md:24
#: src/reference/unstable.md:113
msgid "Configuration"
msgstr "설정"

#: src/SUMMARY.md:34 src/reference/environment-variables.md:1
msgid "Environment Variables"
msgstr "환경 변수"

#: src/SUMMARY.md:35 src/reference/build-scripts.md:1
msgid "Build Scripts"
msgstr "빌드 스크립트"

#: src/SUMMARY.md:36 src/reference/build-script-examples.md:1
msgid "Build Script Examples"
msgstr "빌드 스크립트 예제"

#: src/SUMMARY.md:37
msgid "Build Cache"
msgstr "빌드 캐시"

#: src/SUMMARY.md:38 src/reference/pkgid-spec.md:1
msgid "Package ID Specifications"
msgstr "패키지 ID 명세"

#: src/SUMMARY.md:39
msgid "External Tools"
msgstr "외부 도구"

#: src/SUMMARY.md:40 src/reference/registries.md:1
#: src/reference/unstable.md:116
msgid "Registries"
msgstr "레지스트리"

#: src/SUMMARY.md:41 src/reference/registry-authentication.md:1
msgid "Registry Authentication"
msgstr "레지스트리 인증"

#: src/SUMMARY.md:42 src/reference/credential-provider-protocol.md:1
msgid "Credential Provider Protocol"
msgstr "자격 증명 제공자 프로토콜"

#: src/SUMMARY.md:43 src/reference/running-a-registry.md:1
msgid "Running a Registry"
msgstr "레지스트리 운영하기"

#: src/SUMMARY.md:44
msgid "Registry Index"
msgstr "레지스트리 인덱스"

#: src/SUMMARY.md:45
msgid "Registry Web API"
msgstr "레지스트리 웹 API"

#: src/SUMMARY.md:46 src/reference/semver.md:1
msgid "SemVer Compatibility"
msgstr "SemVer 호환성"

#: src/SUMMARY.md:47 src/reference/future-incompat-report.md:1
#: src/reference/unstable.md:2027
msgid "Future incompat report"
msgstr "미래 비호환성 보고서"

#: src/SUMMARY.md:48 src/reference/timings.md:1
msgid "Reporting build timings"
msgstr "빌드 시간 보고"

#: src/SUMMARY.md:49 src/reference/lints.md:1
msgid "Lints"
msgstr "린트"

#: src/SUMMARY.md:50 src/reference/unstable.md:1
msgid "Unstable Features"
msgstr "불안정한 기능"

#: src/SUMMARY.md:52 src/commands/index.md:1
msgid "Cargo Commands"
msgstr "Cargo 명령어"

#: src/SUMMARY.md:53 src/commands/general-commands.md:1
#: src/commands/cargo.md:126
msgid "General Commands"
msgstr "일반 명령어"

#: src/SUMMARY.md:54
msgid "cargo"
msgstr "cargo"

#: src/SUMMARY.md:55
msgid "cargo help"
msgstr "cargo help"

#: src/SUMMARY.md:56
msgid "cargo version"
msgstr "cargo version"

#: src/SUMMARY.md:57 src/commands/cargo.md:22 src/commands/build-commands.md:1
msgid "Build Commands"
msgstr "빌드 명령어"

#: src/SUMMARY.md:58
msgid "cargo bench"
msgstr "cargo bench"

#: src/SUMMARY.md:59
msgid "cargo build"
msgstr "cargo build"

#: src/SUMMARY.md:60
msgid "cargo check"
msgstr "cargo check"

#: src/SUMMARY.md:61
msgid "cargo clean"
msgstr "cargo clean"

#: src/SUMMARY.md:62
msgid "cargo clippy"
msgstr "cargo clippy"

#: src/SUMMARY.md:63
msgid "cargo doc"
msgstr "cargo doc"

#: src/SUMMARY.md:64
msgid "cargo fetch"
msgstr "cargo fetch"

#: src/SUMMARY.md:65
msgid "cargo fix"
msgstr "cargo fix"

#: src/SUMMARY.md:66
msgid "cargo fmt"
msgstr "cargo fmt"

#: src/SUMMARY.md:67
msgid "cargo miri"
msgstr "cargo miri"

#: src/SUMMARY.md:68
msgid "cargo report"
msgstr "cargo report"

#: src/SUMMARY.md:69
msgid "cargo run"
msgstr "cargo run"

#: src/SUMMARY.md:70
msgid "cargo rustc"
msgstr "cargo rustc"

#: src/SUMMARY.md:71
msgid "cargo rustdoc"
msgstr "cargo rustdoc"

#: src/SUMMARY.md:72 src/guide/continuous-integration.md:122
msgid "cargo test"
msgstr "cargo test"

#: src/SUMMARY.md:73 src/commands/cargo.md:57
#: src/commands/manifest-commands.md:1
msgid "Manifest Commands"
msgstr "매니페스트 명령어"

#: src/SUMMARY.md:74
msgid "cargo add"
msgstr "cargo add"

#: src/SUMMARY.md:75
msgid "cargo generate-lockfile"
msgstr "cargo generate-lockfile"

#: src/SUMMARY.md:76
msgid "cargo info"
msgstr "cargo info"

#: src/SUMMARY.md:77
msgid "cargo locate-project"
msgstr "cargo locate-project"

#: src/SUMMARY.md:78
msgid "cargo metadata"
msgstr "cargo metadata"

#: src/SUMMARY.md:79
msgid "cargo pkgid"
msgstr "cargo pkgid"

#: src/SUMMARY.md:80
msgid "cargo remove"
msgstr "cargo remove"

#: src/SUMMARY.md:81
msgid "cargo tree"
msgstr "cargo tree"

#: src/SUMMARY.md:82
msgid "cargo update"
msgstr "cargo update"

#: src/SUMMARY.md:83
msgid "cargo vendor"
msgstr "cargo vendor"

#: src/SUMMARY.md:84 src/commands/cargo.md:89
#: src/commands/package-commands.md:1
msgid "Package Commands"
msgstr "패키지 명령어"

#: src/SUMMARY.md:85
msgid "cargo init"
msgstr "cargo init"

#: src/SUMMARY.md:86
msgid "cargo install"
msgstr "cargo install"

#: src/SUMMARY.md:87
msgid "cargo new"
msgstr "cargo new"

#: src/SUMMARY.md:88
msgid "cargo search"
msgstr "cargo search"

#: src/SUMMARY.md:89
msgid "cargo uninstall"
msgstr "cargo uninstall"

#: src/SUMMARY.md:90 src/commands/cargo.md:106
#: src/commands/publishing-commands.md:1
msgid "Publishing Commands"
msgstr "게시 명령어"

#: src/SUMMARY.md:91
msgid "cargo login"
msgstr "cargo login"

#: src/SUMMARY.md:92
msgid "cargo logout"
msgstr "cargo logout"

#: src/SUMMARY.md:93
msgid "cargo owner"
msgstr "cargo owner"

#: src/SUMMARY.md:94
msgid "cargo package"
msgstr "cargo package"

#: src/SUMMARY.md:95
msgid "cargo publish"
msgstr "cargo publish"

#: src/SUMMARY.md:96
msgid "cargo yank"
msgstr "cargo yank"

#: src/SUMMARY.md:97
msgid "Deprecated and Removed"
msgstr "사용 중단 및 제거됨"

#: src/SUMMARY.md:99
msgid "FAQ"
msgstr "자주 묻는 질문"

#: src/SUMMARY.md:100 src/CHANGELOG.md:1
msgid "Changelog"
msgstr "변경 로그"

#: src/SUMMARY.md:101
msgid "Appendix: Glossary"
msgstr "부록: 용어집"

#: src/SUMMARY.md:102
msgid "Appendix: Git Authentication"
msgstr "부록: Git 인증"

#: src/index.md:1
msgid "The Cargo Book"
msgstr "Cargo 북"

#: src/index.md:3
msgid "![Cargo Logo](images/Cargo-Logo-Small.png)"
msgstr "![Cargo 로고](images/Cargo-Logo-Small.png)"

#: src/index.md:5
msgid ""
"Cargo is the [Rust](https://www.rust-lang.org/) [_package manager_](./"
"appendix/glossary.md#package-manager \"\\\"package manager\\\" (glossary "
"entry)\"). Cargo downloads your Rust [package](./appendix/"
"glossary.md#package \"\\\"package\\\" (glossary entry)\")'s dependencies, "
"compiles your packages, makes distributable packages, and uploads them to "
"[crates.io](https://crates.io/), the Rust community’s [_package registry_](./"
"appendix/glossary.md#package-registry \"\\\"package registry\\\" (glossary "
"entry)\"). You can contribute to this book on [GitHub](https://github.com/"
"rust-lang/cargo/tree/master/src/doc)."
msgstr ""
"Cargo는 [Rust](https://www.rust-lang.org/)의 [_패키지 관리자_](./appendix/glossary.md#package-manager "
"\\\"패키지 관리자\\\" (용어집 항목)\")입니다. Cargo는 Rust [패키지](./appendix/glossary.md#package "
"\\\"패키지\\\" (용어집 항목)\")의 의존성을 다운로드하고, 패키지를 컴파일하고, 배포 가능한 패키지를 만들고, Rust "
"커뮤니티의 [_패키지 레지스트리_](./appendix/glossary.md#package-registry "\\\"패키지 레지스트리\\\" "
"(용어집 항목)\")인 [crates.io](https://crates.io/)에 업로드합니다. [GitHub](https://github.com/rust-lang/"
"cargo/tree/master/src/doc)에서 이 책에 기여할 수 있습니다."

#: src/index.md:10
msgid "Sections"
msgstr "섹션"

#: src/index.md:12
msgid "**[Getting Started](getting-started/index.md)**"
msgstr "**[시작하기](getting-started/index.md)**"

#: src/index.md:14
msgid ""
"To get started with Cargo, install Cargo (and Rust) and set up your first "
"[_crate_](./appendix/glossary.md#crate \"\\\"crate\\\" (glossary entry)\")."
msgstr "Cargo를 시작하려면 Cargo(및 Rust)를 설치하고 첫 번째 [_크레이트_](./appendix/glossary.md#crate \"\\\"crate\\\" (glossary entry)\")를 설정하세요."

#: src/index.md:17
msgid "**[Cargo Guide](guide/index.md)**"
msgstr "**[Cargo 가이드](guide/index.md)**"

#: src/index.md:19
msgid ""
"The guide will give you all you need to know about how to use Cargo to "
"develop Rust packages."
msgstr "가이드는 Rust 패키지를 개발하기 위해 Cargo를 사용하는 방법에 대해 알아야 할 모든 것을 제공합니다."

#: src/index.md:22
msgid "**[Cargo Reference](reference/index.md)**"
msgstr "**[Cargo 레퍼런스](reference/index.md)**"

#: src/index.md:24 src/reference/index.md:3
msgid "The reference covers the details of various areas of Cargo."
msgstr "레퍼런스는 Cargo의 다양한 영역에 대한 세부 사항을 다룹니다."

#: src/index.md:26
msgid "**[Cargo Commands](commands/index.md)**"
msgstr "**[Cargo 명령어](commands/index.md)**"

#: src/index.md:28
msgid ""
"The commands will let you interact with Cargo using its command-line "
"interface."
msgstr "명령어들은 명령줄 인터페이스를 사용하여 Cargo와 상호작용할 수 있게 해줍니다."

#: src/index.md:30
msgid "**[Frequently Asked Questions](faq.md)**"
msgstr "**[자주 묻는 질문](faq.md)**"

#: src/index.md:32
msgid "**Appendices:**"
msgstr "**부록:**"

#: src/index.md:33
msgid "[Glossary](appendix/glossary.md)"
msgstr "[용어집](appendix/glossary.md)"

#: src/index.md:34
msgid "[Git Authentication](appendix/git-authentication.md)"
msgstr "[Git 인증](appendix/git-authentication.md)"

#: src/index.md:36
msgid "**Other Documentation:**"
msgstr "**기타 문서:**"

#: src/index.md:37
msgid ""
"[Changelog](CHANGELOG.md) \\--- Detailed notes about changes in Cargo in "
"each release."
msgstr "[변경 로그](CHANGELOG.md) --- 각 릴리스의 Cargo 변경 사항에 대한 자세한 정보입니다."

#: src/index.md:39
msgid ""
"[Rust documentation website](https://doc.rust-lang.org/) --- Links to "
"official Rust documentation and tools."
msgstr "[Rust 문서 웹사이트](https://doc.rust-lang.org/) --- 공식 Rust 문서 및 도구 링크입니다."

#: src/getting-started/index.md:3
msgid ""
"To get started with Cargo, install Cargo (and Rust) and set up your first "
"[_crate_](../appendix/glossary.md#crate \"\\\"crate\\\" (glossary entry)\")."
msgstr "Cargo를 시작하려면 Cargo(및 Rust)를 설치하고 첫 번째 [_크레이트_](../appendix/glossary.md#crate \"\\\"crate\\\" (glossary entry)\")를 설정하세요."

#: src/getting-started/index.md:6
msgid "[Installation](installation.md)"
msgstr "[설치](installation.md)"

#: src/getting-started/index.md:7
msgid "[First steps with Cargo](first-steps.md)"
msgstr "[Cargo 첫 걸음](first-steps.md)"

#: src/getting-started/installation.md:3
msgid "Install Rust and Cargo"
msgstr "Rust와 Cargo 설치하기"

#: src/getting-started/installation.md:5
msgid ""
"The easiest way to get Cargo is to install the current stable release of "
"[Rust](https://www.rust-lang.org/) by using [rustup](https://rustup.rs/). "
"Installing Rust using `rustup` will also install `cargo`."
msgstr ""
"Cargo를 얻는 가장 쉬운 방법은 [rustup](https://rustup.rs/)을 사용하여 현재 안정 버전의 "
"[Rust](https://www.rust-lang.org/)를 설치하는 것입니다. `rustup`을 사용하여 Rust를 설치하면 `cargo`도 함께 "
"설치됩니다."

#: src/getting-started/installation.md:8
msgid "On Linux and macOS systems, this is done as follows:"
msgstr "리눅스와 macOS 시스템에서는 다음과 같이 할 수 있습니다:"

#: src/getting-started/installation.md:10
msgid ""
"```console\n"
"curl https://sh.rustup.rs -sSf | sh\n"
"```"
msgstr ""
"```console\n"
"curl https://sh.rustup.rs -sSf | sh\n"
"```"

#: src/getting-started/installation.md:14
msgid ""
"It will download a script, and start the installation. If everything goes "
"well, you’ll see this appear:"
msgstr "스크립트를 다운로드하고 설치를 시작합니다. 모든 것이 순조롭게 진행되면 다음과 같은 메시지가 나타납니다:"

#: src/getting-started/installation.md:21
msgid ""
"On Windows, download and run [rustup-init.exe](https://win.rustup.rs/). It "
"will start the installation in a console and present the above message on "
"success."
msgstr ""
"윈도우에서는 [rustup-init.exe](https://win.rustup.rs/)를 다운로드하여 실행하세요. "
"콘솔에서 설치가 시작되고 성공하면 위와 같은 메시지가 나타납니다."

#: src/getting-started/installation.md:24
msgid ""
"After this, you can use the `rustup` command to also install `beta` or "
"`nightly` channels for Rust and Cargo."
msgstr "이후 `rustup` 명령어를 사용하여 Rust와 Cargo의 `beta` 또는 `nightly` 채널을 설치할 수도 있습니다."

#: src/getting-started/installation.md:27
msgid ""
"For other installation options and information, visit the [install](https://"
"www.rust-lang.org/tools/install) page of the Rust website."
msgstr "다른 설치 옵션 및 정보는 Rust 웹사이트의 [설치](https://www.rust-lang.org/tools/install) 페이지를 참조하세요."

#: src/getting-started/installation.md:30
msgid "Build and Install Cargo from Source"
msgstr "소스에서 Cargo 빌드 및 설치하기"

#: src/getting-started/installation.md:32
msgid ""
"Alternatively, you can [build Cargo from source](https://github.com/rust-"
"lang/cargo#compiling-from-source)."
msgstr "또는 [소스에서 Cargo를 빌드](https://github.com/rust-lang/cargo#compiling-from-source)할 수도 있습니다."

#: src/getting-started/first-steps.md:3
msgid ""
"This section provides a quick sense for the `cargo` command line tool. We "
"demonstrate its ability to generate a new [_**package**_](../appendix/"
"glossary.md#package \"\\\"package\\\" (glossary entry)\") for us, its "
"ability to compile the [_**crate**_](../appendix/glossary.md#crate \"\\"
"\"crate\\\" (glossary entry)\") within the package, and its ability to run "
"the resulting program."
msgstr ""
"이 섹션에서는 `cargo` 명령줄 도구에 대한 간략한 개요를 제공합니다. 새로운 [_**패키지**_](../appendix/"
"glossary.md#package \"\\\"package\\\" (glossary entry)\")를 생성하고, 패키지 내의 [_**크레이트**_](../appendix/"
"glossary.md#crate \"\\\"crate\\\" (glossary entry)\")를 컴파일하고, 결과 프로그램을 실행하는 기능을 "
"보여줍니다."

#: src/getting-started/first-steps.md:8
msgid "To start a new package with Cargo, use `cargo new`:"
msgstr "Cargo로 새 패키지를 시작하려면 `cargo new`를 사용하세요:"

#: src/getting-started/first-steps.md:14
msgid ""
"Cargo defaults to `--bin` to make a binary program. To make a library, we "
"would pass `--lib`, instead."
msgstr "Cargo는 기본적으로 바이너리 프로그램을 만들기 위해 `--bin`을 사용합니다. 라이브러리를 만들려면 대신 `--lib`를 전달합니다."

#: src/getting-started/first-steps.md:17 src/guide/creating-a-new-project.md:13
msgid "Let’s check out what Cargo has generated for us:"
msgstr "Cargo가 우리를 위해 무엇을 생성했는지 확인해 봅시다:"

#: src/getting-started/first-steps.md:30
msgid ""
"This is all we need to get started. First, let’s check out `Cargo.toml`:"
msgstr "시작하는 데 필요한 모든 것입니다. 먼저 `Cargo.toml`을 확인해 봅시다:"

#: src/getting-started/first-steps.md:32
msgid ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"```"

#: src/getting-started/first-steps.md:41
msgid ""
"This is called a [_**manifest**_](../appendix/glossary.md#manifest \"\\"
"\"manifest\\\" (glossary entry)\"), and it contains all of the metadata that "
"Cargo needs to compile your package."
msgstr ""
"이것을 [_**매니페스트**_](../appendix/glossary.md#manifest \"\\\"manifest\\\" (glossary "
"entry)\")라고 하며, Cargo가 패키지를 컴파일하는 데 필요한 모든 메타데이터를 포함합니다."

#: src/getting-started/first-steps.md:44 src/guide/creating-a-new-project.md:42
msgid "Here’s what’s in `src/main.rs`:"
msgstr "`src/main.rs`의 내용은 다음과 같습니다:"

#: src/getting-started/first-steps.md:52
msgid ""
"Cargo generated a “hello world” program for us, otherwise known as a "
"[_**binary crate**_](../appendix/glossary.md#crate \"\\\"crate\\\" (glossary "
"entry)\"). Let’s compile it:"
msgstr ""
"Cargo는 우리를 위해 “hello world” 프로그램을 생성했습니다. 이를 [_**바이너리 크레이트**_](../appendix/"
"glossary.md#crate \"\\\"crate\\\" (glossary entry)\")라고도 합니다. 컴파일해 봅시다:"

#: src/getting-started/first-steps.md:55 src/guide/creating-a-new-project.md:53
msgid ""
"```console\n"
"$ cargo build\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"```"
msgstr ""
"```console\n"
"$ cargo build\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"```"

#: src/getting-started/first-steps.md:60 src/guide/creating-a-new-project.md:58
msgid "And then run it:"
msgstr "그리고 실행합니다:"

#: src/getting-started/first-steps.md:67
msgid ""
"We can also use `cargo run` to compile and then run it, all in one step:"
msgstr "또한 `cargo run`을 사용하여 한 번에 컴파일하고 실행할 수도 있습니다:"

#: src/getting-started/first-steps.md:69
msgid ""
"```console\n"
"$ cargo run\n"
"     Fresh hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"   Running `target/hello_world`\n"
"Hello, world!\n"
"```"
msgstr ""
"```console\n"
"$ cargo run\n"
"     Fresh hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"   Running `target/hello_world`\n"
"Hello, world!\n"
"```"

#: src/getting-started/first-steps.md:76
msgid "Going further"
msgstr "더 나아가기"

#: src/getting-started/first-steps.md:78
msgid ""
"For more details on using Cargo, check out the [Cargo Guide](../guide/"
"index.md)"
msgstr "Cargo 사용에 대한 자세한 내용은 [Cargo 가이드](../guide/index.md)를 확인하세요."

#: src/guide/index.md:3
msgid ""
"This guide will give you all that you need to know about how to use Cargo to "
"develop Rust packages."
msgstr "이 가이드는 Rust 패키지를 개발하기 위해 Cargo를 사용하는 방법에 대해 알아야 할 모든 것을 제공합니다."

#: src/guide/index.md:6
msgid "[Why Cargo Exists](why-cargo-exists.md)"
msgstr "[Cargo가 존재하는 이유](why-cargo-exists.md)"

#: src/guide/index.md:7
msgid "[Creating a New Package](creating-a-new-project.md)"
msgstr "[새 패키지 만들기](creating-a-new-project.md)"

#: src/guide/index.md:8
msgid ""
"[Working on an Existing Cargo Package](working-on-an-existing-project.md)"
msgstr "[기존 Cargo 패키지 작업하기](working-on-an-existing-project.md)"

#: src/guide/index.md:9
msgid "[Dependencies](dependencies.md)"
msgstr "[의존성](dependencies.md)"

#: src/guide/index.md:10
msgid "[Package Layout](project-layout.md)"
msgstr "[패키지 레이아웃](project-layout.md)"

#: src/guide/index.md:11
msgid "[Cargo.toml vs Cargo.lock](cargo-toml-vs-cargo-lock.md)"
msgstr "[Cargo.toml vs Cargo.lock](cargo-toml-vs-cargo-lock.md)"

#: src/guide/index.md:12
msgid "[Tests](tests.md)"
msgstr "[테스트](tests.md)"

#: src/guide/index.md:13
msgid "[Continuous Integration](continuous-integration.md)"
msgstr "[지속적 통합](continuous-integration.md)"

#: src/guide/index.md:14
msgid "[Publishing on crates.io](../reference/publishing.md)"
msgstr "[crates.io에 게시하기](../reference/publishing.md)"

#: src/guide/index.md:15
msgid "[Cargo Home](cargo-home.md)"
msgstr "[Cargo 홈](cargo-home.md)"

#: src/guide/why-cargo-exists.md:3
msgid "Preliminaries"
msgstr "사전 준비"

#: src/guide/why-cargo-exists.md:5
msgid ""
"In Rust, as you may know, a library or executable program is called a "
"[_crate_](../appendix/glossary.md#crate \"\\\"crate\\\" (glossary entry)\"). "
"Crates are compiled using the Rust compiler, `rustc`. When starting with "
"Rust, the first source code most people encounter is that of the classic "
"“hello world” program, which they compile by invoking `rustc` directly:"
msgstr ""
"아시다시피 Rust에서는 라이브러리나 실행 프로그램을 [_크레이트_](../appendix/glossary.md#crate "
"\\\"crate\\\" (glossary entry)\")라고 합니다. 크레이트는 Rust 컴파일러인 `rustc`를 사용하여 컴파일됩니다. "
"Rust를 시작할 때 대부분의 사람들이 처음 접하는 소스 코드는 고전적인 “hello world” 프로그램의 소스 코드이며, `rustc`를 "
"직접 호출하여 컴파일합니다:"

#: src/guide/why-cargo-exists.md:17
msgid ""
"Note that the above command required that you specify the file name "
"explicitly. If you were to directly use `rustc` to compile a different "
"program, a different command line invocation would be required. If you "
"needed to specify any specific compiler flags or include external "
"dependencies, then the needed command would be even more specific (and "
"complex)."
msgstr ""
"위의 명령어는 파일 이름을 명시적으로 지정해야 했습니다. 다른 프로그램을 컴파일하기 위해 `rustc`를 직접 "
"사용하려면 다른 명령줄 호출이 필요합니다. 특정 컴파일러 플래그를 지정하거나 외부 의존성을 포함해야 하는 경우 필요한 "
"명령어는 더욱 구체적이고 복잡해집니다."

#: src/guide/why-cargo-exists.md:23
msgid ""
"Furthermore, most non-trivial programs will likely have dependencies on "
"external libraries, and will therefore also depend transitively on _their_ "
"dependencies. Obtaining the correct versions of all the necessary "
"dependencies and keeping them up to date would be hard and error-prone if "
"done by hand."
msgstr ""
"또한, 대부분의 간단하지 않은 프로그램은 외부 라이브러리에 대한 의존성을 가질 가능성이 높으며, 따라서 _그들의_ "
"의존성에도 전이적으로 의존하게 됩니다. 필요한 모든 의존성의 올바른 버전을 얻고 최신 상태로 유지하는 것은 수동으로 "
"수행하면 어렵고 오류가 발생하기 쉽습니다."

#: src/guide/why-cargo-exists.md:29
msgid ""
"Rather than work only with crates and `rustc`, you can avoid the "
"difficulties involved with performing the above tasks by introducing a "
"higher-level [\"_package_\"](../appendix/glossary.md#package \"\\\"package\\"
"\" (glossary entry)\") abstraction and by using a [_package manager_](../"
"appendix/glossary.md#package-manager \"\\\"package manager\\\" (glossary "
"entry)\")."
msgstr "크레이트와 `rustc`만으로 작업하는 대신, 상위 수준의 [\"_패키지_\"](../appendix/glossary.md#package \"\\\"패키지\\\" (용어집 항목)\") 추상화를 도입하고 [_패키지 관리자_](../appendix/glossary.md#package-manager \"\\\"패키지 관리자\\\" (용어집 항목)\")를 사용하여 위 작업을 수행하는 데 따르는 어려움을 피할 수 있습니다."

#: src/guide/why-cargo-exists.md:34
msgid "Enter: Cargo"
msgstr "Cargo 등장"

#: src/guide/why-cargo-exists.md:36
msgid ""
"_Cargo_ is the Rust package manager. It is a tool that allows Rust "
"[_packages_](../appendix/glossary.md#package \"\\\"package\\\" (glossary "
"entry)\") to declare their various dependencies and ensure that you’ll "
"always get a repeatable build."
msgstr ""
"_Cargo_는 Rust 패키지 관리자입니다. Rust [_패키지_](../appendix/glossary.md#package "
"\\\"패키지\\\" (용어집 항목)\")가 다양한 의존성을 선언하고 항상 반복 가능한 빌드를 얻을 수 있도록 보장하는 "
"도구입니다."

#: src/guide/why-cargo-exists.md:40
msgid "To accomplish this goal, Cargo does four things:"
msgstr "이 목표를 달성하기 위해 Cargo는 네 가지 작업을 수행합니다:"

#: src/guide/why-cargo-exists.md:42
msgid "Introduces two metadata files with various bits of package information."
msgstr "다양한 패키지 정보가 포함된 두 개의 메타데이터 파일을 도입합니다."

#: src/guide/why-cargo-exists.md:43
msgid "Fetches and builds your package’s dependencies."
msgstr "패키지의 의존성을 가져와 빌드합니다."

#: src/guide/why-cargo-exists.md:44
msgid ""
"Invokes `rustc` or another build tool with the correct parameters to build "
"your package."
msgstr "패키지를 빌드하기 위해 올바른 매개변수로 `rustc` 또는 다른 빌드 도구를 호출합니다."

#: src/guide/why-cargo-exists.md:46
msgid "Introduces conventions to make working with Rust packages easier."
msgstr "Rust 패키지 작업을 더 쉽게 만들기 위한 규칙을 도입합니다."

#: src/guide/why-cargo-exists.md:48
msgid ""
"To a large extent, Cargo normalizes the commands needed to build a given "
"program or library; this is one aspect to the above mentioned conventions. "
"As we show later, the same command can be used to build different "
"[_artifacts_](../appendix/glossary.md#artifact \"\\\"artifact\\\" (glossary "
"entry)\"), regardless of their names. Rather than invoke `rustc` directly, "
"you can instead invoke something generic such as `cargo build` and let cargo "
"worry about constructing the correct `rustc` invocation. Furthermore, Cargo "
"will automatically fetch any dependencies you have defined for your artifact "
"from a [_registry_](../appendix/glossary.md#registry \"\\\"registry\\\" "
"(glossary entry)\"), and arrange for them to be added into your build as "
"needed."
msgstr ""
"Cargo는 주어진 프로그램이나 라이브러리를 빌드하는 데 필요한 명령어를 상당 부분 표준화합니다. 이것이 위에서 언급한 "
"규칙의 한 측면입니다. 나중에 보여주겠지만, 이름에 관계없이 동일한 명령어를 사용하여 다른 [_산출물_](../appendix/glossary.md#artifact "
"\\\"산출물\\\" (용어집 항목)\")을 빌드할 수 있습니다. `rustc`를 직접 호출하는 대신 `cargo build`와 같은 일반적인 "
"명령어를 호출하고 Cargo가 올바른 `rustc` 호출을 구성하도록 할 수 있습니다. 또한 Cargo는 [_레지스트리_](../appendix/glossary.md#registry "
"\\\"레지스트리\\\" (용어집 항목)\")에서 산출물에 대해 정의한 모든 의존성을 자동으로 가져와 필요에 따라 빌드에 "
"추가하도록 정렬합니다."

#: src/guide/why-cargo-exists.md:58
msgid ""
"It is only a slight exaggeration to say that once you know how to build one "
"Cargo-based project, you know how to build _all_ of them."
msgstr "하나의 Cargo 기반 프로젝트를 빌드하는 방법을 알면 _모든_ 프로젝트를 빌드하는 방법을 안다고 말하는 것은 약간의 과장일 뿐입니다."

#: src/guide/creating-a-new-project.md:3
msgid ""
"To start a new [package](../appendix/glossary.md#package \"\\\"package\\\" "
"(glossary entry)\") with Cargo, use `cargo new`:"
msgstr "Cargo로 새 [패키지](../appendix/glossary.md#package \"\\\"패키지\\\" (용어집 항목)\")를 시작하려면 `cargo new`를 사용하세요:"

#: src/guide/creating-a-new-project.md:9
msgid ""
"We’re passing `--bin` because we’re making a binary program: if we were "
"making a library, we’d pass `--lib`. This also initializes a new `git` "
"repository by default. If you don't want it to do that, pass `--vcs none`."
msgstr ""
"바이너리 프로그램을 만들고 있으므로 `--bin`을 전달합니다. 라이브러리를 만들고 있었다면 `--lib`를 전달했을 "
"것입니다. 이것은 또한 기본적으로 새로운 `git` 저장소를 초기화합니다. 원하지 않으면 `--vcs none`을 "
"전달하세요."

#: src/guide/creating-a-new-project.md:26
msgid "Let’s take a closer look at `Cargo.toml`:"
msgstr "`Cargo.toml`을 자세히 살펴봅시다:"

#: src/guide/creating-a-new-project.md:28
msgid ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"\n"
"```"

#: src/guide/creating-a-new-project.md:38
msgid ""
"This is called a [_**manifest**_](../appendix/glossary.md#manifest \"\\"
"\"manifest\\\" (glossary entry)\"), and it contains all of the metadata that "
"Cargo needs to compile your package. This file is written in the [TOML]"
"(https://toml.io/) format (pronounced /tɑməl/)."
msgstr ""
"이것을 [_**매니페스트**_](../appendix/glossary.md#manifest \"\\\"매니페스트\\\" (용어집 "
"항목)\")라고 하며, Cargo가 패키지를 컴파일하는 데 필요한 모든 메타데이터를 포함합니다. 이 파일은 [TOML](https://toml.io/) "
"형식(/tɑməl/로 발음)으로 작성되었습니다."

#: src/guide/creating-a-new-project.md:50
msgid ""
"Cargo generated a “hello world” program for you, otherwise known as a "
"[_binary crate_](../appendix/glossary.md#crate \"\\\"crate\\\" (glossary "
"entry)\"). Let’s compile it:"
msgstr ""
"Cargo는 “hello world” 프로그램을 생성했습니다. 이를 [_바이너리 크레이트_](../appendix/glossary.md#crate "
"\\\"크레이트\\\" (용어집 항목)\")라고도 합니다. 컴파일해 봅시다:"

#: src/guide/creating-a-new-project.md:65
msgid ""
"You can also use `cargo run` to compile and then run it, all in one step "
"(You won't see the `Compiling` line if you have not made any changes since "
"you last compiled):"
msgstr ""
"`cargo run`을 사용하여 한 번에 컴파일하고 실행할 수도 있습니다 (마지막으로 컴파일한 이후 변경 사항이 없으면 `Compiling` "
"줄이 표시되지 않습니다):"

#: src/guide/creating-a-new-project.md:69
msgid ""
"```console\n"
"$ cargo run\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"     Running `target/debug/hello_world`\n"
"Hello, world!\n"
"```"
msgstr ""
"```console\n"
"$ cargo run\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"     Running `target/debug/hello_world`\n"
"Hello, world!\n"
"```"

#: src/guide/creating-a-new-project.md:76
msgid ""
"You’ll now notice a new file, `Cargo.lock`. It contains information about "
"your dependencies. Since there are none yet, it’s not very interesting."
msgstr "이제 `Cargo.lock`이라는 새 파일이 표시됩니다. 여기에는 의존성에 대한 정보가 포함되어 있습니다. 아직 의존성이 없으므로 그다지 흥미롭지 않습니다."

#: src/guide/creating-a-new-project.md:79
msgid ""
"Once you’re ready for release, you can use `cargo build --release` to "
"compile your files with optimizations turned on:"
msgstr "릴리스 준비가 되면 `cargo build --release`를 사용하여 최적화가 켜진 상태로 파일을 컴파일할 수 있습니다:"

#: src/guide/creating-a-new-project.md:82
msgid ""
"```console\n"
"$ cargo build --release\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"```"
msgstr ""
"```console\n"
"$ cargo build --release\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"```"

#: src/guide/creating-a-new-project.md:87
msgid ""
"`cargo build --release` puts the resulting binary in `target/release` "
"instead of `target/debug`."
msgstr "`cargo build --release`는 결과 바이너리를 `target/debug` 대신 `target/release`에 넣습니다."

#: src/guide/creating-a-new-project.md:90
msgid ""
"Compiling in debug mode is the default for development. Compilation time is "
"shorter since the compiler doesn't do optimizations, but the code will run "
"slower. Release mode takes longer to compile, but the code will run faster."
msgstr ""
"디버그 모드에서 컴파일하는 것이 개발의 기본값입니다. 컴파일러가 최적화를 수행하지 않기 때문에 컴파일 시간이 더 "
"짧지만 코드는 더 느리게 실행됩니다. 릴리스 모드는 컴파일하는 데 시간이 더 오래 걸리지만 코드는 더 빠르게 "
"실행됩니다."

#: src/guide/working-on-an-existing-project.md:1
msgid "Working on an Existing Cargo Package"
msgstr "기존 Cargo 패키지 작업하기"

#: src/guide/working-on-an-existing-project.md:3
msgid ""
"If you download an existing [package](../appendix/glossary.md#package \"\\"
"\"package\\\" (glossary entry)\") that uses Cargo, it’s really easy to get "
"going."
msgstr "Cargo를 사용하는 기존 [패키지](../appendix/glossary.md#package \"\\\"패키지\\\" (용어집 항목)\")를 다운로드하면 시작하기가 정말 쉽습니다."

#: src/guide/working-on-an-existing-project.md:6
msgid ""
"First, get the package from somewhere. In this example, we’ll use `regex` "
"cloned from its repository on GitHub:"
msgstr "먼저 어딘가에서 패키지를 가져옵니다. 이 예에서는 GitHub의 저장소에서 복제한 `regex`를 사용합니다:"

#: src/guide/working-on-an-existing-project.md:9
msgid ""
"```console\n"
"$ git clone https://github.com/rust-lang/regex.git\n"
"$ cd regex\n"
"```"
msgstr ""
"```console\n"
"$ git clone https://github.com/rust-lang/regex.git\n"
"$ cd regex\n"
"```"

#: src/guide/working-on-an-existing-project.md:14
msgid "To build, use `cargo build`:"
msgstr "빌드하려면 `cargo build`를 사용하세요:"

#: src/guide/working-on-an-existing-project.md:16
msgid ""
"```console\n"
"$ cargo build\n"
"   Compiling regex v1.5.0 (file:///path/to/package/regex)\n"
"```"
msgstr ""
"```console\n"
"$ cargo build\n"
"   Compiling regex v1.5.0 (file:///path/to/package/regex)\n"
"```"

#: src/guide/working-on-an-existing-project.md:21
msgid ""
"This will fetch all of the dependencies and then build them, along with the "
"package."
msgstr "이렇게 하면 모든 의존성을 가져와 패키지와 함께 빌드합니다."

#: src/guide/dependencies.md:3
msgid ""
"[crates.io](https://crates.io/) is the Rust community's central [_package "
"registry_](../appendix/glossary.md#package-registry \"\\\"package-registry\\"
"\" (glossary entry)\") that serves as a location to discover and download "
"[packages](../appendix/glossary.md#package \"\\\"package\\\" (glossary entry)"
"\"). `cargo` is configured to use it by default to find requested packages."
msgstr "[crates.io](https://crates.io/)는 Rust 커뮤니티의 중앙 [_패키지 레지스트리_](../appendix/glossary.md#package-registry \"\\\"패키지 레지스트리\\\" (용어집 항목)\")로, [패키지](../appendix/glossary.md#package \"\\\"패키지\\\" (용어집 항목)\")를 검색하고 다운로드하는 위치 역할을 합니다. `cargo`는 요청된 패키지를 찾기 위해 기본적으로 이를 사용하도록 구성되어 있습니다."

#: src/guide/dependencies.md:8
msgid ""
"To depend on a library hosted on [crates.io](https://crates.io/), add it to "
"your `Cargo.toml`."
msgstr "[crates.io](https://crates.io/)에서 호스팅되는 라이브러리에 의존하려면 `Cargo.toml`에 추가하세요."

#: src/guide/dependencies.md:12
msgid "Adding a dependency"
msgstr "의존성 추가하기"

#: src/guide/dependencies.md:14
msgid ""
"If your `Cargo.toml` doesn't already have a `[dependencies]` section, add "
"that, then list the [crate](../appendix/glossary.md#crate \"\\\"crate\\\" "
"(glossary entry)\") name and version that you would like to use. This "
"example adds a dependency on the `time` crate:"
msgstr ""
"`Cargo.toml`에 아직 `[dependencies]` 섹션이 없으면 추가한 다음 사용하려는 [크레이트](../appendix/glossary.md#crate "
"\\\"크레이트\\\" (용어집 항목)\") 이름과 버전을 나열하세요. 이 예에서는 `time` 크레이트에 대한 의존성을 "
"추가합니다:"

#: src/guide/dependencies.md:18 src/reference/specifying-dependencies.md:17
msgid ""
"```toml\n"
"[dependencies]\n"
"time = \"0.1.12\"\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"time = \"0.1.12\"\n"
"```"

#: src/guide/dependencies.md:23
msgid ""
"The version string is a [SemVer](https://semver.org) version requirement. "
"The [specifying dependencies](../reference/specifying-dependencies.md) docs "
"have more information about the options you have here."
msgstr ""
"버전 문자열은 [SemVer](https://semver.org) 버전 요구 사항입니다. [의존성 지정하기](../reference/specifying-dependencies.md) "
"문서에서 여기에 있는 옵션에 대한 자세한 정보를 확인할 수 있습니다."

#: src/guide/dependencies.md:29
msgid ""
"If you also wanted to add a dependency on the `regex` crate, you would not "
"need to add `[dependencies]` for each crate listed. Here's what your whole "
"`Cargo.toml` file would look like with dependencies on the `time` and "
"`regex` crates:"
msgstr ""
"`regex` 크레이트에 대한 의존성도 추가하려면 나열된 각 크레이트에 대해 `[dependencies]`를 추가할 필요가 "
"없습니다. `time` 및 `regex` 크레이트에 대한 의존성이 있는 전체 `Cargo.toml` 파일은 다음과 같습니다:"

#: src/guide/dependencies.md:34
msgid ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"time = \"0.1.12\"\n"
"regex = \"0.1.41\"\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"time = \"0.1.12\"\n"
"regex = \"0.1.41\"\n"
"```"

#: src/guide/dependencies.md:45
msgid ""
"Re-run `cargo build`, and Cargo will fetch the new dependencies and all of "
"their dependencies, compile them all, and update the `Cargo.lock`:"
msgstr "`cargo build`를 다시 실행하면 Cargo가 새 의존성과 모든 의존성을 가져와 모두 컴파일하고 `Cargo.lock`을 업데이트합니다:"

#: src/guide/dependencies.md:48
msgid ""
"```console\n"
"$ cargo build\n"
"      Updating crates.io index\n"
"   Downloading memchr v0.1.5\n"
"   Downloading libc v0.1.10\n"
"   Downloading regex-syntax v0.2.1\n"
"   Downloading memchr v0.1.5\n"
"   Downloading aho-corasick v0.3.0\n"
"   Downloading regex v0.1.41\n"
"     Compiling memchr v0.1.5\n"
"     Compiling libc v0.1.10\n"
"     Compiling regex-syntax v0.2.1\n"
"     Compiling memchr v0.1.5\n"
"     Compiling aho-corasick v0.3.0\n"
"     Compiling regex v0.1.41\n"
"     Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"```"
msgstr ""
"```console\n"
"$ cargo build\n"
"      Updating crates.io index\n"
"   Downloading memchr v0.1.5\n"
"   Downloading libc v0.1.10\n"
"   Downloading regex-syntax v0.2.1\n"
"   Downloading memchr v0.1.5\n"
"   Downloading aho-corasick v0.3.0\n"
"   Downloading regex v0.1.41\n"
"     Compiling memchr v0.1.5\n"
"     Compiling libc v0.1.10\n"
"     Compiling regex-syntax v0.2.1\n"
"     Compiling memchr v0.1.5\n"
"     Compiling aho-corasick v0.3.0\n"
"     Compiling regex v0.1.41\n"
"     Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"```"

#: src/guide/dependencies.md:66
msgid ""
"`Cargo.lock` contains the exact information about which revision was used "
"for all of these dependencies."
msgstr "`Cargo.lock`에는 이러한 모든 의존성에 사용된 리비전에 대한 정확한 정보가 포함되어 있습니다."

#: src/guide/dependencies.md:69
msgid ""
"Now, if `regex` gets updated, you will still build with the same revision "
"until you choose to run `cargo update`."
msgstr "이제 `regex`가 업데이트되더라도 `cargo update`를 실행하기로 선택할 때까지 동일한 리비전으로 빌드됩니다."

#: src/guide/dependencies.md:72
msgid "You can now use the `regex` library in `main.rs`."
msgstr "이제 `main.rs`에서 `regex` 라이브러리를 사용할 수 있습니다."

#: src/guide/dependencies.md:78
msgid "r\"^\\d{4}-\\d{2}-\\d{2}$\""
msgstr "r\"^\\d{4}-\\d{2}-\\d{2}$\""

#: src/guide/dependencies.md:79
msgid "\"Did our date match? {}$\""
msgstr "\"날짜가 일치했나요? {}$\""

#: src/guide/dependencies.md:79
msgid "\"2014-01-01\""
msgstr "\"2014-01-01\""

#: src/guide/dependencies.md:83
msgid "Running it will show:"
msgstr "실행하면 다음과 같이 표시됩니다:"

#: src/guide/project-layout.md:3
msgid ""
"Cargo uses conventions for file placement to make it easy to dive into a new "
"Cargo [package](../appendix/glossary.md#package \"\\\"package\\\" (glossary "
"entry)\"):"
msgstr ""
"Cargo는 파일 배치에 대한 규칙을 사용하여 새로운 Cargo [패키지](../appendix/glossary.md#package "
"\\\"패키지\\\" (용어집 항목)\")에 쉽게 뛰어들 수 있도록 합니다:"

#: src/guide/project-layout.md:36
msgid ""
"`Cargo.toml` and `Cargo.lock` are stored in the root of your package "
"(_package root_)."
msgstr "`Cargo.toml`과 `Cargo.lock`은 패키지의 루트(_패키지 루트_)에 저장됩니다."

#: src/guide/project-layout.md:38
msgid "Source code goes in the `src` directory."
msgstr "소스 코드는 `src` 디렉토리에 있습니다."

#: src/guide/project-layout.md:39
msgid "The default library file is `src/lib.rs`."
msgstr "기본 라이브러리 파일은 `src/lib.rs`입니다."

#: src/guide/project-layout.md:40
msgid "The default executable file is `src/main.rs`."
msgstr "기본 실행 파일은 `src/main.rs`입니다."

#: src/guide/project-layout.md:41
msgid "Other executables can be placed in `src/bin/`."
msgstr "다른 실행 파일은 `src/bin/`에 넣을 수 있습니다."

#: src/guide/project-layout.md:42
msgid "Benchmarks go in the `benches` directory."
msgstr "벤치마크는 `benches` 디렉토리에 있습니다."

#: src/guide/project-layout.md:43
msgid "Examples go in the `examples` directory."
msgstr "예제는 `examples` 디렉토리에 있습니다."

#: src/guide/project-layout.md:44
msgid "Integration tests go in the `tests` directory."
msgstr "통합 테스트는 `tests` 디렉토리에 있습니다."

#: src/guide/project-layout.md:46
msgid ""
"If a binary, example, bench, or integration test consists of multiple source "
"files, place a `main.rs` file along with the extra [_modules_](../appendix/"
"glossary.md#module \"\\\"module\\\" (glossary entry)\") within a "
"subdirectory of the `src/bin`, `examples`, `benches`, or `tests` directory. "
"The name of the executable will be the directory name."
msgstr ""
"바이너리, 예제, 벤치 또는 통합 테스트가 여러 소스 파일로 구성된 경우 `src/bin`, `examples`, `benches` 또는 `tests` "
"디렉토리의 하위 디렉토리 내에 추가 [_모듈_](../appendix/glossary.md#module \"\\\"모듈\\\" (용어집 항목)\")과 "
"함께 `main.rs` 파일을 배치하세요. 실행 파일의 이름은 디렉토리 이름이 됩니다."

#: src/guide/project-layout.md:51
msgid ""
"You can learn more about Rust's module system in [the book](../../book/"
"ch07-00-managing-growing-projects-with-packages-crates-and-modules.html)."
msgstr "Rust의 모듈 시스템에 대한 자세한 내용은 [책](../../book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html)에서 배울 수 있습니다."

#: src/guide/project-layout.md:53
msgid ""
"See [Configuring a target](../reference/cargo-targets.md#configuring-a-"
"target) for more details on manually configuring targets. See [Target auto-"
"discovery](../reference/cargo-targets.md#target-auto-discovery) for more "
"information on controlling how Cargo automatically infers target names."
msgstr ""
"수동으로 타겟을 구성하는 방법에 대한 자세한 내용은 [타겟 구성하기](../reference/cargo-targets.md#configuring-a-"
"target)를 참조하세요. Cargo가 타겟 이름을 자동으로 유추하는 방법을 제어하는 방법에 대한 자세한 내용은 [타겟 자동 "
"검색](../reference/cargo-targets.md#target-auto-discovery)을 참조하세요."

#: src/guide/cargo-toml-vs-cargo-lock.md:3
msgid ""
"`Cargo.toml` and `Cargo.lock` serve two different purposes. Before we talk "
"about them, here’s a summary:"
msgstr "`Cargo.toml`과 `Cargo.lock`은 두 가지 다른 목적을 가지고 있습니다. 그것들에 대해 이야기하기 전에 요약은 다음과 같습니다:"

#: src/guide/cargo-toml-vs-cargo-lock.md:6
msgid ""
"`Cargo.toml` is about describing your dependencies in a broad sense, and is "
"written by you."
msgstr "`Cargo.toml`은 넓은 의미에서 의존성을 설명하는 것이며, 당신이 작성합니다."

#: src/guide/cargo-toml-vs-cargo-lock.md:8
msgid ""
"`Cargo.lock` contains exact information about your dependencies. It is "
"maintained by Cargo and should not be manually edited."
msgstr "`Cargo.lock`은 의존성에 대한 정확한 정보를 포함합니다. Cargo에 의해 유지 관리되며 수동으로 편집해서는 안 됩니다."

#: src/guide/cargo-toml-vs-cargo-lock.md:11
msgid ""
"When in doubt, check `Cargo.lock` into the version control system (e.g. "
"Git). For a better understanding of why and what the alternatives might be, "
"see [“Why have Cargo.lock in version control?” in the FAQ](../faq.md#why-"
"have-cargolock-in-version-control). We recommend pairing this with "
"[Verifying Latest Dependencies](continuous-integration.md#verifying-latest-"
"dependencies)"
msgstr ""
"확실하지 않은 경우 `Cargo.lock`을 버전 관리 시스템(예: Git)에 체크인하세요. 이유와 대안이 무엇인지 더 잘 "
"이해하려면 FAQ의 [“왜 Cargo.lock을 버전 관리에 두어야 하나요?”](../faq.md#why-have-cargolock-in-version-control)를 "
"참조하세요. 이것을 [최신 의존성 확인](continuous-integration.md#verifying-latest-dependencies)과 함께 사용하는 것을 "
"권장합니다."

#: src/guide/cargo-toml-vs-cargo-lock.md:17
msgid "Let’s dig in a little bit more."
msgstr "조금 더 자세히 알아봅시다."

#: src/guide/cargo-toml-vs-cargo-lock.md:19
msgid ""
"`Cargo.toml` is a [**manifest**](../appendix/glossary.md#manifest \"\\"
"\"manifest\\\" (glossary entry)\") file in which you can specify a bunch of "
"different metadata about your package. For example, you can say that you "
"depend on another package:"
msgstr ""
"`Cargo.toml`은 패키지에 대한 다양한 메타데이터를 지정할 수 있는 [**매니페스트**](../appendix/glossary.md#manifest "
"\\\"매니페스트\\\" (용어집 항목)\") 파일입니다. 예를 들어, 다른 패키지에 의존한다고 말할 수 있습니다:"

#: src/guide/cargo-toml-vs-cargo-lock.md:23
#: src/guide/cargo-toml-vs-cargo-lock.md:59
msgid ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"\n"
"[dependencies]\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"\n"
"[dependencies]\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"```"

#: src/guide/cargo-toml-vs-cargo-lock.md:32
msgid ""
"This package has a single dependency, on the `regex` library. It states in "
"this case to rely on a particular Git repository that lives on GitHub. Since "
"you haven’t specified any other information, Cargo assumes that you intend "
"to use the latest commit on the default branch to build our package."
msgstr ""
"이 패키지는 `regex` 라이브러리에 대한 단일 의존성을 가지고 있습니다. 이 경우 GitHub에 있는 특정 Git "
"저장소에 의존한다고 명시합니다. 다른 정보를 지정하지 않았으므로 Cargo는 기본 브랜치의 최신 커밋을 사용하여 "
"패키지를 빌드하려는 것으로 가정합니다."

#: src/guide/cargo-toml-vs-cargo-lock.md:37
msgid ""
"Sound good? Well, there’s one problem: If you build this package today, and "
"then you send a copy to me, and I build this package tomorrow, something bad "
"could happen. There could be more commits to `regex` in the meantime, and my "
"build would include new commits while yours would not. Therefore, we would "
"get different builds. This would be bad because we want reproducible builds."
msgstr ""
"좋게 들리나요? 음, 한 가지 문제가 있습니다. 오늘 이 패키지를 빌드하고 내일 저에게 사본을 보내면 제가 내일 이 "
"패키지를 빌드할 때 나쁜 일이 일어날 수 있습니다. 그 사이에 `regex`에 더 많은 커밋이 있을 수 있으며, 제 빌드에는 "
"새 커밋이 포함되지만 당신의 빌드에는 포함되지 않을 것입니다. 따라서 우리는 다른 빌드를 얻게 될 것입니다. 이것은 "
"재현 가능한 빌드를 원하기 때문에 나쁜 일입니다."

#: src/guide/cargo-toml-vs-cargo-lock.md:43
msgid ""
"You could fix this problem by defining a specific `rev` value in our "
"`Cargo.toml`, so Cargo could know exactly which revision to use when "
"building the package:"
msgstr "`Cargo.toml`에 특정 `rev` 값을 정의하여 이 문제를 해결할 수 있습니다. 그러면 Cargo가 패키지를 빌드할 때 사용할 리비전을 정확히 알 수 있습니다:"

#: src/guide/cargo-toml-vs-cargo-lock.md:46
msgid ""
"```toml\n"
"[dependencies]\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\", rev = "
"\"9f9f693\" }\n"
"```"
msgstr ""
"```toml\n"
"[dependencies]\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\", rev = "
"\"9f9f693\" }\n"
"```"

#: src/guide/cargo-toml-vs-cargo-lock.md:51
msgid ""
"Now our builds will be the same. But there’s a big drawback: now you have to "
"manually think about SHA-1s every time you want to update our library. This "
"is both tedious and error prone."
msgstr "이제 우리의 빌드는 동일할 것입니다. 그러나 큰 단점이 있습니다. 이제 라이브러리를 업데이트할 때마다 수동으로 SHA-1을 생각해야 합니다. 이것은 지루하고 오류가 발생하기 쉽습니다."

#: src/guide/cargo-toml-vs-cargo-lock.md:55
msgid ""
"Enter the `Cargo.lock`. Because of its existence, you don’t need to manually "
"keep track of the exact revisions: Cargo will do it for you. When you have a "
"manifest like this:"
msgstr "`Cargo.lock`을 입력하세요. 그것의 존재 때문에 정확한 리비전을 수동으로 추적할 필요가 없습니다. Cargo가 대신 해줄 것입니다. 다음과 같은 매니페스트가 있을 때:"

#: src/guide/cargo-toml-vs-cargo-lock.md:68
msgid ""
"Cargo will take the latest commit and write that information out into your "
"`Cargo.lock` when you build for the first time. That file will look like "
"this:"
msgstr "Cargo는 최신 커밋을 가져와 처음 빌드할 때 해당 정보를 `Cargo.lock`에 씁니다. 해당 파일은 다음과 같습니다:"

#: src/guide/cargo-toml-vs-cargo-lock.md:71
msgid ""
"```toml\n"
"[[package]]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"dependencies = [\n"
" \"regex 1.5.0 (git+https://github.com/rust-lang/"
"regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831)\",\n"
"]\n"
"\n"
"[[package]]\n"
"name = \"regex\"\n"
"version = \"1.5.0\"\n"
"source = \"git+https://github.com/rust-lang/"
"regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831\"\n"
"```"
msgstr ""
"```toml\n"
"[[package]]\n"
"name = \"hello_world\"\n"
"version = \"0.1.0\"\n"
"dependencies = [\n"
" \"regex 1.5.0 (git+https://github.com/rust-lang/"
"regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831)\",\n"
"]\n"
"\n"
"[[package]]\n"
"name = \"regex\"\n"
"version = \"1.5.0\"\n"
"source = \"git+https://github.com/rust-lang/"
"regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831\"\n"
"```"

#: src/guide/cargo-toml-vs-cargo-lock.md:85
msgid ""
"You can see that there’s a lot more information here, including the exact "
"revision you used to build. Now when you give your package to someone else, "
"they’ll use the exact same SHA, even though you didn’t specify it in your "
"`Cargo.toml`."
msgstr ""
"빌드에 사용한 정확한 리비전을 포함하여 여기에 훨씬 더 많은 정보가 있음을 알 수 있습니다. 이제 다른 사람에게 "
"패키지를 줄 때 `Cargo.toml`에 지정하지 않았더라도 정확히 동일한 SHA를 사용하게 됩니다."

#: src/guide/cargo-toml-vs-cargo-lock.md:90
msgid ""
"When you're ready to opt in to a new version of the library, Cargo can re-"
"calculate the dependencies and update things for you:"
msgstr "라이브러리의 새 버전을 사용하기로 결정할 준비가 되면 Cargo가 의존성을 다시 계산하고 업데이트할 수 있습니다:"

#: src/guide/cargo-toml-vs-cargo-lock.md:98
msgid ""
"This will write out a new `Cargo.lock` with the new version information. "
"Note that the argument to `cargo update` is actually a [Package ID "
"Specification](../reference/pkgid-spec.md) and `regex` is just a short "
"specification."
msgstr ""
"이렇게 하면 새 버전 정보가 포함된 새 `Cargo.lock`이 작성됩니다. `cargo update`에 대한 인수는 실제로 "
"[패키지 ID 명세](../reference/pkgid-spec.md)이며 `regex`는 짧은 명세일 뿐입니다."

#: src/guide/tests.md:3
msgid ""
"Cargo can run your tests with the `cargo test` command. Cargo looks for "
"tests to run in two places: in each of your `src` files and any tests in "
"`tests/`. Tests in your `src` files should be unit tests and [documentation "
"tests](../../rustdoc/write-documentation/documentation-tests.html). Tests in "
"`tests/` should be integration-style tests. As such, you’ll need to import "
"your crates into the files in `tests`."
msgstr ""
"Cargo는 `cargo test` 명령어로 테스트를 실행할 수 있습니다. Cargo는 두 곳에서 실행할 테스트를 찾습니다: 각 "
"`src` 파일과 `tests/`의 모든 테스트. `src` 파일의 테스트는 단위 테스트와 [문서 테스트](../../rustdoc/write-documentation/documentation-tests.html)여야 "
"합니다. `tests/`의 테스트는 통합 스타일 테스트여야 합니다. 따라서 `tests`의 파일로 크레이트를 가져와야 합니다."

#: src/guide/tests.md:9
msgid ""
"Here's an example of running `cargo test` in our [package](../appendix/"
"glossary.md#package \"\\\"package\\\" (glossary entry)\"), which currently "
"has no tests:"
msgstr ""
"현재 테스트가 없는 [패키지](../appendix/glossary.md#package \"\\\"패키지\\\" (용어집 항목)\")에서 `cargo test`를 "
"실행하는 예는 다음과 같습니다:"

#: src/guide/tests.md:12
msgid ""
"```console\n"
"$ cargo test\n"
"   Compiling regex v1.5.0 (https://github.com/rust-lang/regex.git#9f9f693)\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"     Running target/test/hello_world-9c2b65bbb79eabce\n"
"\n"
"running 0 tests\n"
"\n"
"test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n"
"```"
msgstr ""
"```console\n"
"$ cargo test\n"
"   Compiling regex v1.5.0 (https://github.com/rust-lang/regex.git#9f9f693)\n"
"   Compiling hello_world v0.1.0 (file:///path/to/package/hello_world)\n"
"     Running target/test/hello_world-9c2b65bbb79eabce\n"
"\n"
"running 0 tests\n"
"\n"
"test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n"
"```"

#: src/guide/tests.md:23
msgid ""
"If your package had tests, you would see more output with the correct number "
"of tests."
msgstr "패키지에 테스트가 있었다면 올바른 수의 테스트와 함께 더 많은 출력이 표시되었을 것입니다."

#: src/guide/tests.md:26
msgid "You can also run a specific test by passing a filter:"
msgstr "필터를 전달하여 특정 테스트를 실행할 수도 있습니다:"

#: src/guide/tests.md:32
msgid "This will run any test with `foo` in its name."
msgstr "이것은 이름에 `foo`가 있는 모든 테스트를 실행합니다."

#: src/guide/tests.md:34
msgid ""
"`cargo test` runs additional checks as well. It will compile any examples "
"you’ve included to ensure they still compile. It also runs documentation "
"tests to ensure your code samples from documentation comments compile. "
"Please see the [testing guide](../../book/ch11-00-testing.html) in the Rust "
"documentation for a general view of writing and organizing tests. See [Cargo "
"Targets: Tests](../reference/cargo-targets.html#tests) to learn more about "
"different styles of tests in Cargo."
msgstr ""
"`cargo test`는 추가 검사도 실행합니다. 포함된 모든 예제를 컴파일하여 여전히 컴파일되는지 확인합니다. 또한 문서 "
"주석의 코드 샘플이 컴파일되는지 확인하기 위해 문서 테스트를 실행합니다. 테스트 작성 및 구성에 대한 일반적인 내용은 "
"Rust 문서의 [테스팅 가이드](../../book/ch11-00-testing.html)를 참조하세요. Cargo의 다양한 테스트 스타일에 대해 "
"자세히 알아보려면 [Cargo 타겟: 테스트](../reference/cargo-targets.html#tests)를 참조하세요."

#: src/guide/continuous-integration.md:5
msgid "A basic CI will build and test your projects:"
msgstr "기본 CI는 프로젝트를 빌드하고 테스트합니다:"

#: src/guide/continuous-integration.md:7
msgid "GitHub Actions"
msgstr "GitHub Actions"

#: src/guide/continuous-integration.md:9
msgid ""
"To test your package on GitHub Actions, here is a sample `.github/workflows/"
"ci.yml` file:"
msgstr "GitHub Actions에서 패키지를 테스트하려면 다음은 샘플 `.github/workflows/ci.yml` 파일입니다:"

#: src/guide/continuous-integration.md:12
#: src/guide/continuous-integration.md:23
#: src/guide/continuous-integration.md:165
msgid "name"
msgstr "name"

#: src/guide/continuous-integration.md:12
msgid "Cargo Build & Test"
msgstr "Cargo 빌드 및 테스트"

#: src/guide/continuous-integration.md:15
msgid "push"
msgstr "push"

#: src/guide/continuous-integration.md:16
msgid "pull_request"
msgstr "pull_request"

#: src/guide/continuous-integration.md:17
#: src/guide/continuous-integration.md:168
msgid "env"
msgstr "env"

#: src/guide/continuous-integration.md:19
msgid "CARGO_TERM_COLOR"
msgstr "CARGO_TERM_COLOR"

#: src/guide/continuous-integration.md:19
msgid "always"
msgstr "always"

#: src/guide/continuous-integration.md:20
#: src/guide/continuous-integration.md:114
#: src/guide/continuous-integration.md:163
#: src/guide/continuous-integration.md:194
msgid "jobs"
msgstr "jobs"

#: src/guide/continuous-integration.md:22
msgid "build_and_test"
msgstr "build_and_test"

#: src/guide/continuous-integration.md:23
msgid "Rust project - latest"
msgstr "Rust 프로젝트 - 최신"

#: src/guide/continuous-integration.md:24
#: src/guide/continuous-integration.md:166
#: src/guide/continuous-integration.md:196
msgid "runs-on"
msgstr "runs-on"

#: src/guide/continuous-integration.md:24
#: src/guide/continuous-integration.md:166
#: src/guide/continuous-integration.md:196
msgid "ubuntu-latest"
msgstr "ubuntu-latest"

#: src/guide/continuous-integration.md:25
msgid "strategy"
msgstr "strategy"

#: src/guide/continuous-integration.md:26
msgid "matrix"
msgstr "matrix"

#: src/guide/continuous-integration.md:27
msgid "toolchain"
msgstr "toolchain"

#: src/guide/continuous-integration.md:28
#: src/guide/continuous-integration.md:87
msgid "stable"
msgstr "stable"

#: src/guide/continuous-integration.md:29
msgid "beta"
msgstr "beta"

#: src/guide/continuous-integration.md:30
#: src/guide/continuous-integration.md:92
msgid "nightly"
msgstr "nightly"

#: src/guide/continuous-integration.md:31
#: src/guide/continuous-integration.md:120
#: src/guide/continuous-integration.md:170
#: src/guide/continuous-integration.md:197
msgid "steps"
msgstr "steps"

#: src/guide/continuous-integration.md:32
#: src/guide/continuous-integration.md:171
#: src/guide/continuous-integration.md:198
#: src/guide/continuous-integration.md:199
msgid "uses"
msgstr "uses"

#: src/guide/continuous-integration.md:32
#: src/guide/continuous-integration.md:171
#: src/guide/continuous-integration.md:198
msgid "actions/checkout@v4"
msgstr "actions/checkout@v4"

#: src/guide/continuous-integration.md:33
#: src/guide/continuous-integration.md:34
#: src/guide/continuous-integration.md:35
#: src/guide/continuous-integration.md:122
#: src/guide/continuous-integration.md:172
#: src/guide/continuous-integration.md:173
#: src/guide/continuous-integration.md:174
#: src/guide/continuous-integration.md:175
#: src/guide/continuous-integration.md:200
msgid "run"
msgstr "run"

#: src/guide/continuous-integration.md:33
msgid ""
"rustup update ${{ matrix.toolchain }} && rustup default $"
"{{ matrix.toolchain }}"
msgstr "rustup update ${{ matrix.toolchain }} && rustup default ${{ matrix.toolchain }}"

#: src/guide/continuous-integration.md:34
#: src/guide/continuous-integration.md:53
#: src/guide/continuous-integration.md:60
#: src/guide/continuous-integration.md:174
msgid "cargo build --verbose"
msgstr "cargo build --verbose"

#: src/guide/continuous-integration.md:35
#: src/guide/continuous-integration.md:54
#: src/guide/continuous-integration.md:61
#: src/guide/continuous-integration.md:175
msgid "cargo test --verbose"
msgstr "cargo test --verbose"

#: src/guide/continuous-integration.md:39
msgid ""
"This will test all three release channels (note a failure in any toolchain "
"version will fail the entire job). You can also click `\"Actions\" > \"new "
"workflow\"` in the GitHub UI and select Rust to add the [default "
"configuration](https://github.com/actions/starter-workflows/blob/main/ci/"
"rust.yml) to your repo. See [GitHub Actions documentation](https://"
"docs.github.com/en/actions) for more information."
msgstr ""
"이렇게 하면 세 개의 릴리스 채널을 모두 테스트합니다(툴체인 버전 중 하나라도 실패하면 전체 작업이 실패합니다). "
"GitHub UI에서 `\"Actions\" > \"new workflow\"`를 클릭하고 Rust를 선택하여 [기본 구성](https://github.com/actions/starter-workflows/blob/main/ci/"
"rust.yml)을 저장소에 추가할 수도 있습니다. 자세한 내용은 [GitHub Actions 문서](https://docs.github.com/en/actions)를 "
"참조하세요."

#: src/guide/continuous-integration.md:41
msgid "GitLab CI"
msgstr "GitLab CI"

#: src/guide/continuous-integration.md:43
msgid ""
"To test your package on GitLab CI, here is a sample `.gitlab-ci.yml` file:"
msgstr "GitLab CI에서 패키지를 테스트하려면 다음은 샘플 `.gitlab-ci.yml` 파일입니다:"

#: src/guide/continuous-integration.md:46
msgid "stages"
msgstr "stages"

#: src/guide/continuous-integration.md:47
#: src/guide/continuous-integration.md:50
#: src/guide/continuous-integration.md:57
#: src/guide/continuous-integration.md:116
msgid "build"
msgstr "build"

#: src/guide/continuous-integration.md:48
msgid "rust-latest"
msgstr "rust-latest"

#: src/guide/continuous-integration.md:50
#: src/guide/continuous-integration.md:57
msgid "stage"
msgstr "stage"

#: src/guide/continuous-integration.md:51
#: src/guide/continuous-integration.md:58
#: src/guide/continuous-integration.md:77
#: src/guide/continuous-integration.md:119
msgid "image"
msgstr "image"

#: src/guide/continuous-integration.md:51
msgid "rust:latest"
msgstr "rust:latest"

#: src/guide/continuous-integration.md:52
#: src/guide/continuous-integration.md:59 src/reference/unstable.md:1391
msgid "script"
msgstr "script"

#: src/guide/continuous-integration.md:55
msgid "rust-nightly"
msgstr "rust-nightly"

#: src/guide/continuous-integration.md:58
msgid "rustlang/rust:nightly"
msgstr "rustlang/rust:nightly"

#: src/guide/continuous-integration.md:62
msgid "allow_failure"
msgstr "allow_failure"

#: src/guide/continuous-integration.md:65
msgid ""
"This will test on the stable channel and nightly channel, but any breakage "
"in nightly will not fail your overall build. Please see the [GitLab CI "
"documentation](https://docs.gitlab.com/ce/ci/yaml/index.html) for more "
"information."
msgstr ""
"이렇게 하면 안정 채널과 나이틀리 채널에서 테스트하지만 나이틀리의 모든 중단은 전체 빌드를 실패시키지 않습니다. "
"자세한 내용은 [GitLab CI 문서](https://docs.gitlab.com/ce/ci/yaml/index.html)를 참조하세요."

#: src/guide/continuous-integration.md:70
msgid "builds.sr.ht"
msgstr "builds.sr.ht"

#: src/guide/continuous-integration.md:72
msgid ""
"To test your package on sr.ht, here is a sample `.build.yml` file. Be sure "
"to change `<your repo>` and `<your project>` to the repo to clone and the "
"directory where it was cloned."
msgstr "sr.ht에서 패키지를 테스트하려면 다음은 샘플 `.build.yml` 파일입니다. `<your repo>`와 `<your project>`를 복제할 저장소와 복제된 디렉토리로 변경해야 합니다."

#: src/guide/continuous-integration.md:77
msgid "archlinux"
msgstr "archlinux"

#: src/guide/continuous-integration.md:77
msgid "packages"
msgstr "packages"

#: src/guide/continuous-integration.md:79
msgid "rustup"
msgstr "rustup"

#: src/guide/continuous-integration.md:79
msgid "sources"
msgstr "sources"

#: src/guide/continuous-integration.md:81
msgid "<your repo>"
msgstr "<your repo>"

#: src/guide/continuous-integration.md:81
msgid "tasks"
msgstr "tasks"

#: src/guide/continuous-integration.md:83
msgid "setup"
msgstr "setup"

#: src/guide/continuous-integration.md:83
msgid ""
"      rustup toolchain install nightly stable\n"
"      cd <your project>/\n"
"      rustup run stable cargo fetch\n"
msgstr ""
"      rustup toolchain install nightly stable\n"
"      cd <your project>/\n"
"      rustup run stable cargo fetch\n"

#: src/guide/continuous-integration.md:87
msgid ""
"      rustup default stable\n"
"      cd <your project>/\n"
"      cargo build --verbose\n"
"      cargo test --verbose\n"
msgstr ""
"      rustup default stable\n"
"      cd <your project>/\n"
"      cargo build --verbose\n"
"      cargo test --verbose\n"

#: src/guide/continuous-integration.md:92
msgid ""
"      rustup default nightly\n"
"      cd <your project>/\n"
"      cargo build --verbose ||:\n"
"      cargo test --verbose  ||:\n"
msgstr ""
"      rustup default nightly\n"
"      cd <your project>/\n"
"      cargo build --verbose ||:\n"
"      cargo test --verbose  ||:\n"

#: src/guide/continuous-integration.md:97
msgid "docs"
msgstr "docs"

#: src/guide/continuous-integration.md:97
msgid ""
"      cd <your project>/\n"
"      rustup run stable cargo doc --no-deps\n"
"      rustup run nightly cargo doc --no-deps ||:\n"
msgstr ""
"      cd <your project>/\n"
"      rustup run stable cargo doc --no-deps\n"
"      rustup run nightly cargo doc --no-deps ||:\n"

#: src/guide/continuous-integration.md:103
msgid ""
"This will test and build documentation on the stable channel and nightly "
"channel, but any breakage in nightly will not fail your overall build. "
"Please see the [builds.sr.ht documentation](https://man.sr.ht/builds.sr.ht/) "
"for more information."
msgstr ""
"이렇게 하면 안정 채널과 나이틀리 채널에서 문서를 테스트하고 빌드하지만 나이틀리의 모든 중단은 전체 빌드를 "
"실패시키지 않습니다. 자세한 내용은 [builds.sr.ht 문서](https://man.sr.ht/builds.sr.ht/)를 참조하세요."

#: src/guide/continuous-integration.md:109
msgid "CircleCI"
msgstr "CircleCI"

#: src/guide/continuous-integration.md:111
msgid ""
"To test your package on CircleCI, here is a sample `.circleci/config.yml` "
"file:"
msgstr "CircleCI에서 패키지를 테스트하려면 다음은 샘플 `.circleci/config.yml` 파일입니다:"

#: src/guide/continuous-integration.md:114
msgid "version"
msgstr "version"

#: src/guide/continuous-integration.md:117
msgid "docker"
msgstr "docker"

#: src/guide/continuous-integration.md:118
msgid ""
"# check https://circleci.com/developer/images/image/cimg/rust#image-tags for "
"latest\n"
msgstr ""
"# 최신 정보는 https://circleci.com/developer/images/image/cimg/rust#image-tags를 확인하세요\n"

#: src/guide/continuous-integration.md:119
msgid "cimg/rust:1.77.2"
msgstr "cimg/rust:1.77.2"

#: src/guide/continuous-integration.md:121
msgid "checkout"
msgstr "checkout"

#: src/guide/continuous-integration.md:125
msgid ""
"To run more complex pipelines, including flaky test detection, caching, and "
"artifact management, please see [CircleCI Configuration Reference](https://"
"circleci.com/docs/configuration-reference/)."
msgstr ""
"불안정한 테스트 감지, 캐싱 및 산출물 관리를 포함한 더 복잡한 파이프라인을 실행하려면 [CircleCI 구성 "
"참조](https://circleci.com/docs/configuration-reference/)를 참조하세요."

#: src/guide/continuous-integration.md:127
msgid "Verifying Latest Dependencies"
msgstr "최신 의존성 확인"

#: src/guide/continuous-integration.md:129
msgid ""
"When [specifying dependencies](../reference/specifying-dependencies.md) in "
"`Cargo.toml`, they generally match a range of versions. Exhaustively testing "
"all version combination would be unwieldy. Verifying the latest versions "
"would at least test for users who run [`cargo add`](../commands/cargo-"
"add.md) or [`cargo install`](../commands/cargo-install.md)."
msgstr ""
"`Cargo.toml`에서 [의존성을 지정할 때](../reference/specifying-dependencies.md) 일반적으로 버전 범위와 "
"일치합니다. 모든 버전 조합을 철저히 테스트하는 것은 번거로울 것입니다. 최신 버전을 확인하면 최소한 "
"[`cargo add`](../commands/cargo-add.md) 또는 [`cargo install`](../commands/cargo-install.md)을 실행하는 "
"사용자에 대해 테스트할 수 있습니다."

#: src/guide/continuous-integration.md:135
msgid "When testing the latest versions some considerations are:"
msgstr "최신 버전을 테스트할 때 고려해야 할 몇 가지 사항은 다음과 같습니다:"

#: src/guide/continuous-integration.md:136
msgid "Minimizing external factors affecting local development or CI"
msgstr "로컬 개발 또는 CI에 영향을 미치는 외부 요인 최소화"

#: src/guide/continuous-integration.md:137
msgid "Rate of new dependencies being published"
msgstr "새로운 의존성이 게시되는 속도"

#: src/guide/continuous-integration.md:138
msgid "Level of risk a project is willing to accept"
msgstr "프로젝트가 수용할 의향이 있는 위험 수준"

#: src/guide/continuous-integration.md:139
msgid ""
"CI costs, including indirect costs like if a CI service has a maximum for "
"parallel runners, causing new jobs to be serialized when at the maximum."
msgstr ""
"CI 서비스에 병렬 실행기에 대한 최대값이 있어 최대값에 도달하면 새 작업이 직렬화되는 것과 같은 간접 비용을 포함한 CI "
"비용."

#: src/guide/continuous-integration.md:142
msgid "Some potential solutions include:"
msgstr "몇 가지 잠재적인 해결책은 다음과 같습니다:"

#: src/guide/continuous-integration.md:143
msgid ""
"[Not checking in the `Cargo.lock`](../faq.md#why-have-cargolock-in-version-"
"control)"
msgstr "[`Cargo.lock`을 체크인하지 않기](../faq.md#why-have-cargolock-in-version-control)"

#: src/guide/continuous-integration.md:144
msgid "Depending on PR velocity, many versions may go untested"
msgstr "PR 속도에 따라 많은 버전이 테스트되지 않을 수 있습니다."

#: src/guide/continuous-integration.md:145
msgid "This comes at the cost of determinism"
msgstr "이것은 결정성을 희생시킵니다."

#: src/guide/continuous-integration.md:146
msgid ""
"Have a CI job verify the latest dependencies but mark it to \"continue on "
"failure\""
msgstr "최신 의존성을 확인하는 CI 작업을 수행하되 \"실패 시 계속\"으로 표시합니다."

#: src/guide/continuous-integration.md:147
msgid "Depending on the CI service, failures might not be obvious"
msgstr "CI 서비스에 따라 실패가 명확하지 않을 수 있습니다."

#: src/guide/continuous-integration.md:148
msgid "Depending on PR velocity, may use more resources than necessary"
msgstr "PR 속도에 따라 필요 이상으로 많은 리소스를 사용할 수 있습니다."

#: src/guide/continuous-integration.md:149
msgid "Have a scheduled CI job to verify latest dependencies"
msgstr "최신 의존성을 확인하기 위해 예약된 CI 작업을 수행합니다."

#: src/guide/continuous-integration.md:150
msgid ""
"A hosted CI service may disable scheduled jobs for repositories that haven't "
"been touched in a while, affecting passively maintained packages"
msgstr "호스팅된 CI 서비스는 한동안 건드리지 않은 저장소에 대해 예약된 작업을 비활성화하여 수동적으로 유지 관리되는 패키지에 영향을 줄 수 있습니다."
"호스팅된 CI 서비스는 한동안 건드리지 않은 저장소에 대해 예약된 작업을 비활성화하여 수동적으로 유지 관리되는 "
"패키지에 영향을 줄 수 있습니다."

#: src/guide/continuous-integration.md:152
msgid ""
"Depending on the CI service, notifications might not be routed to people who "
"can act on the failure"
msgstr "CI 서비스에 따라 실패에 대해 조치를 취할 수 있는 사람들에게 알림이 전달되지 않을 수 있습니다."

#: src/guide/continuous-integration.md:154
msgid ""
"If not balanced with dependency publish rate, may not test enough versions "
"or may do redundant testing"
msgstr "의존성 게시 속도와 균형을 이루지 않으면 충분한 버전을 테스트하지 못하거나 중복 테스트를 수행할 수 있습니다."

#: src/guide/continuous-integration.md:156
msgid ""
"Regularly update dependencies through PRs, like with [Dependabot](https://"
"docs.github.com/en/code-security/dependabot/working-with-dependabot) or "
"[RenovateBot](https://renovatebot.com/)"
msgstr ""
"[Dependabot](https://docs.github.com/en/code-security/dependabot/working-with-dependabot) 또는 "
"[RenovateBot](https://renovatebot.com/)과 같이 PR을 통해 정기적으로 의존성을 업데이트합니다."

#: src/guide/continuous-integration.md:157
msgid ""
"Can isolate dependencies to their own PR or roll them up into a single PR"
msgstr "의존성을 자체 PR로 격리하거나 단일 PR로 롤업할 수 있습니다."

#: src/guide/continuous-integration.md:158
msgid "Only uses the resources necessary"
msgstr "필요한 리소스만 사용합니다."

#: src/guide/continuous-integration.md:159
msgid ""
"Can configure the frequency to balance CI resources and coverage of "
"dependency versions"
msgstr "CI 리소스와 의존성 버전의 적용 범위를 균형 있게 조정하기 위해 빈도를 구성할 수 있습니다."

#: src/guide/continuous-integration.md:161
msgid "An example CI job to verify latest dependencies, using GitHub Actions:"
msgstr "GitHub Actions를 사용하여 최신 의존성을 확인하는 CI 작업의 예:"

#: src/guide/continuous-integration.md:164
msgid "latest_deps"
msgstr "latest_deps"

#: src/guide/continuous-integration.md:165
msgid "Latest Dependencies"
msgstr "최신 의존성"

#: src/guide/continuous-integration.md:167
msgid "continue-on-error"
msgstr "continue-on-error"

#: src/guide/continuous-integration.md:169
msgid "CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS"
msgstr "CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS"

#: src/guide/continuous-integration.md:169
msgid "allow"
msgstr "allow"

#: src/guide/continuous-integration.md:172
msgid "rustup update stable && rustup default stable"
msgstr "rustup update stable && rustup default stable"

#: src/guide/continuous-integration.md:173
msgid "cargo update --verbose"
msgstr "cargo update --verbose"

#: src/guide/continuous-integration.md:177 src/commands/cargo-metadata.md:341
msgid "Notes:"
msgstr "참고:"

#: src/guide/continuous-integration.md:178
msgid ""
"[`CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS`](../reference/"
"config.md#resolverincompatible-rust-versions) is set to ensure the [resolver]"
"(../reference/resolver.md) doesn't limit selected dependencies because of "
"your project's [Rust version](../reference/rust-version.md)."
msgstr ""
"[`CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS`](../reference/config.md#resolverincompatible-rust-versions)는 "
"[리졸버](../reference/resolver.md)가 프로젝트의 [Rust 버전](../reference/rust-version.md) 때문에 선택된 의존성을 "
"제한하지 않도록 설정됩니다."

#: src/guide/continuous-integration.md:180
msgid ""
"For projects with higher risks of per-platform or per-Rust version failures, "
"more combinations may want to be tested."
msgstr "플랫폼별 또는 Rust 버전별 실패 위험이 높은 프로젝트의 경우 더 많은 조합을 테스트하는 것이 좋습니다."

#: src/guide/continuous-integration.md:183
msgid "Verifying `rust-version`"
msgstr "`rust-version` 확인"

#: src/guide/continuous-integration.md:185
msgid ""
"When publishing packages that specify [`rust-version`](../reference/"
"manifest.md#the-rust-version-field), it is important to verify the "
"correctness of that field."
msgstr "[`rust-version`](../reference/manifest.md#the-rust-version-field)을 지정하는 패키지를 게시할 때 해당 필드의 정확성을 확인하는 것이 중요합니다."

#: src/guide/continuous-integration.md:188
msgid "Some third-party tools that can help with this include:"
msgstr "이에 도움이 될 수 있는 일부 타사 도구는 다음과 같습니다:"

#: src/guide/continuous-integration.md:189
msgid "[`cargo-msrv`](https://crates.io/crates/cargo-msrv)"
msgstr "[`cargo-msrv`](https://crates.io/crates/cargo-msrv)"

#: src/guide/continuous-integration.md:190
msgid "[`cargo-hack`](https://crates.io/crates/cargo-hack)"
msgstr "[`cargo-hack`](https://crates.io/crates/cargo-hack)"

#: src/guide/continuous-integration.md:192
msgid "An example of one way to do this, using GitHub Actions:"
msgstr "GitHub Actions를 사용하여 이 작업을 수행하는 한 가지 방법의 예:"

#: src/guide/continuous-integration.md:195
msgid "msrv"
msgstr "msrv"

#: src/guide/continuous-integration.md:199
msgid "taiki-e/install-action@cargo-hack"
msgstr "taiki-e/install-action@cargo-hack"

#: src/guide/continuous-integration.md:200
msgid ""
"cargo hack check --rust-version --workspace --all-targets --ignore-private"
msgstr "cargo hack check --rust-version --workspace --all-targets --ignore-private"

#: src/guide/continuous-integration.md:202
msgid "This tries to balance thoroughness with turnaround time:"
msgstr "이것은 철저함과 처리 시간의 균형을 맞추려고 합니다:"

#: src/guide/continuous-integration.md:203
msgid ""
"A single platform is used as most projects are platform-agnostic, trusting "
"platform-specific dependencies to verify their behavior."
msgstr "대부분의 프로젝트는 플랫폼에 구애받지 않으므로 단일 플랫폼이 사용되며, 플랫폼별 의존성이 동작을 확인하도록 신뢰합니다."

#: src/guide/continuous-integration.md:204
msgid ""
"`cargo check` is used as most issues contributors will run into are API "
"availability and not behavior."
msgstr "대부분의 기여자가 겪게 될 문제는 동작이 아닌 API 가용성이므로 `cargo check`가 사용됩니다."

#: src/guide/continuous-integration.md:205
msgid ""
"Unpublished packages are skipped as this assumes only consumers of the "
"verified project, through a registry, will care about `rust-version`."
msgstr "게시되지 않은 패키지는 레지스트리를 통해 확인된 프로젝트의 소비자만이 `rust-version`에 관심을 가질 것이라고 가정하므로 건너뜁니다."

#: src/reference/publishing.md:3
msgid ""
"Once you've got a library that you'd like to share with the world, it's time "
"to publish it on [crates.io](https://crates.io/)! Publishing a crate is when "
"a specific version is uploaded to be hosted on [crates.io](https://"
"crates.io/)."
msgstr ""
"세상과 공유하고 싶은 라이브러리가 생겼다면 이제 [crates.io](https://crates.io/)에 게시할 시간입니다! "
"크레이트를 게시한다는 것은 특정 버전을 [crates.io](https://crates.io/)에 호스팅하기 위해 업로드하는 "
"것입니다."

#: src/reference/publishing.md:7
msgid ""
"Take care when publishing a crate, because a publish is **permanent**. The "
"version can never be overwritten, and the code cannot be deleted. There is "
"no limit to the number of versions which can be published, however."
msgstr ""
"크레이트를 게시할 때는 주의하세요. 게시는 **영구적**이기 때문입니다. 버전은 덮어쓸 수 없으며 코드는 "
"삭제할 수 없습니다. 그러나 게시할 수 있는 버전 수에는 제한이 없습니다."

#: src/reference/publishing.md:11
msgid "Before your first publish"
msgstr "첫 게시 전"

#: src/reference/publishing.md:13
msgid ""
"First things first, you’ll need an account on [crates.io](https://"
"crates.io/) to acquire an API token. To do so, [visit the home page](https://"
"crates.io/) and log in via a GitHub account (required for now). You will "
"also need to provide and verify your email address on the [Account Settings]"
"(https://crates.io/settings/profile) page. Once that is done [create an API "
"token](https://crates.io/settings/tokens), make sure you copy it. Once you "
"leave the page you will not be able to see it again."
msgstr ""
"먼저 API 토큰을 얻으려면 [crates.io](https://crates.io/)에 계정이 필요합니다. 그렇게 하려면 "
"[홈페이지를 방문](https://crates.io/)하여 GitHub 계정을 통해 로그인하세요(현재 필수). 또한 [계정 "
"설정](https://crates.io/settings/profile) 페이지에서 이메일 주소를 제공하고 확인해야 합니다. 완료되면 [API "
"토큰을 생성](https://crates.io/settings/tokens)하고 복사해야 합니다. 페이지를 떠나면 다시 볼 수 "
"없습니다."

#: src/reference/publishing.md:20
msgid "Then run the [`cargo login`](../commands/cargo-login.md) command."
msgstr "그런 다음 [`cargo login`](../commands/cargo-login.md) 명령어를 실행하세요."

#: src/reference/publishing.md:26
msgid "Then at the prompt put in the token specified."
msgstr "그런 다음 프롬프트에 지정된 토큰을 입력하세요."

#: src/reference/publishing.md:27
msgid ""
"```console\n"
"please paste the API Token found on https://crates.io/me below\n"
"abcdefghijklmnopqrstuvwxyz012345\n"
"```"
msgstr ""
"```console\n"
"please paste the API Token found on https://crates.io/me below\n"
"abcdefghijklmnopqrstuvwxyz012345\n"
"```"

#: src/reference/publishing.md:32
msgid ""
"This command will inform Cargo of your API token and store it locally in "
"your `~/.cargo/credentials.toml`. Note that this token is a **secret** and "
"should not be shared with anyone else. If it leaks for any reason, you "
"should revoke it immediately."
msgstr ""
"이 명령어는 Cargo에 API 토큰을 알리고 로컬의 `~/.cargo/credentials.toml`에 저장합니다. 이 토큰은 "
"**비밀**이며 다른 사람과 공유해서는 안 됩니다. 어떤 이유로든 유출되면 즉시 해지해야 합니다."

#: src/reference/publishing.md:37
msgid ""
"**Note**: The [`cargo logout`](../commands/cargo-logout.md) command can be "
"used to remove the token from `credentials.toml`. This can be useful if you "
"no longer need it stored on the local machine."
msgstr ""
"**참고**: [`cargo logout`](../commands/cargo-logout.md) 명령어를 사용하여 `credentials.toml`에서 "
"토큰을 제거할 수 있습니다. 로컬 컴퓨터에 더 이상 저장할 필요가 없는 경우 유용할 수 있습니다."

#: src/reference/publishing.md:41
msgid "Before publishing a new crate"
msgstr "새 크레이트 게시 전"

#: src/reference/publishing.md:43
msgid ""
"Keep in mind that crate names on [crates.io](https://crates.io/) are "
"allocated on a first-come-first-serve basis. Once a crate name is taken, it "
"cannot be used for another crate."
msgstr ""
"[crates.io](https://crates.io/)의 크레이트 이름은 선착순으로 할당된다는 점을 명심하세요. 크레이트 이름이 "
"사용되면 다른 크레이트에 사용할 수 없습니다."

#: src/reference/publishing.md:46
msgid ""
"Check out the [metadata you can specify](manifest.md) in `Cargo.toml` to "
"ensure your crate can be discovered more easily! Before publishing, make "
"sure you have filled out the following fields:"
msgstr ""
"`Cargo.toml`에서 [지정할 수 있는 메타데이터](manifest.md)를 확인하여 크레이트를 더 쉽게 찾을 수 있도록 "
"하세요! 게시하기 전에 다음 필드를 채웠는지 확인하세요:"

#: src/reference/publishing.md:50
msgid ""
"[`license` or `license-file`](manifest.md#the-license-and-license-file-"
"fields)"
msgstr "[`license` 또는 `license-file`](manifest.md#the-license-and-license-file-fields)"

#: src/reference/publishing.md:51
msgid "[`description`](manifest.md#the-description-field)"
msgstr "[`설명`](manifest.md#the-description-field)"

#: src/reference/publishing.md:52
msgid "[`homepage`](manifest.md#the-homepage-field)"
msgstr "[`홈페이지`](manifest.md#the-homepage-field)"

#: src/reference/publishing.md:53
msgid "[`repository`](manifest.md#the-repository-field)"
msgstr "[`저장소`](manifest.md#the-repository-field)"

#: src/reference/publishing.md:54
msgid "[`readme`](manifest.md#the-readme-field)"
msgstr "[`README`](manifest.md#the-readme-field)"

#: src/reference/publishing.md:56
msgid "It would also be a good idea to include some [`keywords`](manifest.md#the-keywords-field) and [`categories`](manifest.md#the-categories-field), though they are not required."
msgstr "필수는 아니지만 [`keywords`](manifest.md#the-keywords-field) 및 [`categories`](manifest.md#the-categories-field)를 포함하는 것도 좋은 생각입니다."

#: src/reference/publishing.md:59
msgid ""
"If you are publishing a library, you may also want to consult the [Rust API "
"Guidelines](https://rust-lang.github.io/api-guidelines/)."
msgstr "라이브러리를 게시하는 경우 [Rust API 가이드라인](https://rust-lang.github.io/api-guidelines/)을 참조할 수도 있습니다."

#: src/reference/publishing.md:62
msgid "Packaging a crate"
msgstr "크레이트 패키징하기"

#: src/reference/publishing.md:64
msgid "The next step is to package up your crate and upload it to [crates.io](https://crates.io/). For this we’ll use the [`cargo publish`](../commands/cargo-publish.md) subcommand. This command performs the following steps:"
msgstr "다음 단계는 크레이트를 패키징하여 [crates.io](https://crates.io/)에 업로드하는 것입니다. 이를 위해 [`cargo publish`](../commands/cargo-publish.md) 하위 명령을 사용합니다. 이 명령어는 다음 단계를 수행합니다:"

#: src/reference/publishing.md:68
msgid "Perform some verification checks on your package."
msgstr "패키지에 대한 일부 검증 검사를 수행합니다."

#: src/reference/publishing.md:69
msgid "Compress your source code into a `.crate` file."
msgstr "소스 코드를 `.crate` 파일로 압축합니다."

#: src/reference/publishing.md:70
msgid ""
"Extract the `.crate` file into a temporary directory and verify that it "
"compiles."
msgstr ".crate` 파일을 임시 디렉토리에 추출하고 컴파일되는지 확인합니다."

#: src/reference/publishing.md:72
msgid "Upload the `.crate` file to [crates.io](https://crates.io/)."
msgstr "`.crate` 파일을 [crates.io](https://crates.io/)에 업로드합니다."

#: src/reference/publishing.md:73
msgid ""
"The registry will perform some additional checks on the uploaded package "
"before adding it."
msgstr "레지스트리는 업로드된 패키지를 추가하기 전에 몇 가지 추가 검사를 수행합니다."

#: src/reference/publishing.md:76
msgid ""
"It is recommended that you first run `cargo publish --dry-run` (or [`cargo "
"package`](../commands/cargo-package.md) which is equivalent) to ensure there "
"aren't any warnings or errors before publishing. This will perform the first "
"three steps listed above."
msgstr "게시하기 전에 경고나 오류가 없는지 확인하기 위해 먼저 `cargo publish --dry-run`(또는 동등한 [`cargo package`](../commands/cargo-package.md))을 실행하는 것이 좋습니다. 이렇게 하면 위에 나열된 처음 세 단계가 수행됩니다."

#: src/reference/publishing.md:84
msgid ""
"You can inspect the generated `.crate` file in the `target/package` "
"directory. [crates.io](https://crates.io/) currently has a 10MB size limit "
"on the `.crate` file. You may want to check the size of the `.crate` file to "
"ensure you didn't accidentally package up large assets that are not required "
"to build your package, such as test data, website documentation, or code "
"generation. You can check which files are included with the following "
"command:"
msgstr "생성된 `.crate` 파일은 `target/package` 디렉토리에서 검사할 수 있습니다. [crates.io](https://crates.io/)는 현재 `.crate` 파일에 10MB 크기 제한이 있습니다. `.crate` 파일의 크기를 확인하여 테스트 데이터, 웹사이트 문서 또는 코드 생성과 같이 패키지를 빌드하는 데 필요하지 않은 큰 자산을 실수로 패키징하지 않았는지 확인할 수 있습니다. 다음 명령으로 포함된 파일을 확인할 수 있습니다."

#: src/reference/publishing.md:95
msgid ""
"Cargo will automatically ignore files ignored by your version control system "
"when packaging, but if you want to specify an extra set of files to ignore "
"you can use the [`exclude` key](manifest.md#the-exclude-and-include-fields) "
"in the manifest:"
msgstr "Cargo는 패키징할 때 버전 관리 시스템에서 무시된 파일을 자동으로 무시하지만, 무시할 추가 파일 집합을 지정하려면 매니페스트에서 [`exclude` 키](manifest.md#the-exclude-and-include-fields)를 사용할 수 있습니다."

#: src/reference/publishing.md:100
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"exclude = [\n"
"    \"public/assets/*\",\n"
"    \"videos/*\",\n"
"]\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"# ...\n"
"exclude = [\n"
"    \"public/assets/*\",\n"
"    \"videos/*\",\n"
"]\n"
"```"

#: src/reference/publishing.md:109
msgid ""
"If you’d rather explicitly list the files to include, Cargo also supports an "
"`include` key, which if set, overrides the `exclude` key:"
msgstr "포함할 파일을 명시적으로 나열하려면 Cargo는 `include` 키도 지원하며, 이 키를 설정하면 `exclude` 키를 재정의합니다."

#: src/reference/publishing.md:112
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"include = [\n"
"    \"**/*.rs\",\n"
"    \"Cargo.toml\",\n"
"]\n"
"```"
msgstr ""
"```toml\n"
"[package]\n"
"# ...\n"
"include = [\n"
"    \"**/*.rs\",\n"
"    \"Cargo.toml\",\n"
"]\n"
"```"

#: src/reference/publishing.md:121
msgid "Uploading the crate"
msgstr "크레이트 업로드하기"

#: src/reference/publishing.md:123
msgid ""
"When you are ready to publish, use the [`cargo publish`](../commands/cargo-"
"publish.md) command to upload to [crates.io](https://crates.io/):"
msgstr "게시할 준비가 되면 [`cargo publish`](../commands/cargo-publish.md) 명령을 사용하여 [crates.io](https://crates.io/)에 업로드합니다."

#: src/reference/publishing.md:130
msgid "And that’s it, you’ve now published your first crate!"
msgstr "이것으로 첫 번째 크레이트를 게시했습니다!"

#: src/reference/publishing.md:132
msgid "Publishing a new version of an existing crate"
msgstr "기존 크레이트의 새 버전 게시하기"

#: src/reference/publishing.md:134
msgid ""
"In order to release a new version, change [the `version` value]"
"(manifest.md#the-version-field) specified in your `Cargo.toml` manifest. "
"Keep in mind [the SemVer rules](semver.md) which provide guidelines on what "
"is a compatible change. Then run [`cargo publish`](../commands/cargo-"
"publish.md) as described above to upload the new version."
msgstr "새 버전을 릴리스하려면 `Cargo.toml` 매니페스트에 지정된 [`version` 값](manifest.md#the-version-field)을 변경하세요. 호환되는 변경 사항이 무엇인지에 대한 지침을 제공하는 [SemVer 규칙](semver.md)을 염두에 두세요. 그런 다음 위에서 설명한 대로 [`cargo publish`](../commands/cargo-publish.md)를 실행하여 새 버전을 업로드하세요."

#: src/reference/publishing.md:138
msgid ""
"**Recommendation:** Consider the full release process and automate what you "
"can."
msgstr "**권장 사항:** 전체 릴리스 프로세스를 고려하고 가능한 한 자동화하세요."

#: src/reference/publishing.md:140
msgid "Each version should include:"
msgstr "각 버전에는 다음이 포함되어야 합니다:"

#: src/reference/publishing.md:141
msgid ""
"A changelog entry, preferably [manually curated](https://keepachangelog.com/"
"en/1.0.0/) though a generated one is better than nothing"
msgstr "변경 로그 항목, [수동으로 관리](https://keepachangelog.com/en/1.0.0/)하는 것이 좋지만 생성된 것이 없는 것보다는 낫습니다."

#: src/reference/publishing.md:142
msgid ""
"A [git tag](https://git-scm.com/book/en/v2/Git-Basics-Tagging) pointing to "
"the published commit"
msgstr "게시된 커밋을 가리키는 [git 태그](https://git-scm.com/book/en/v2/Git-Basics-Tagging)"

#: src/reference/publishing.md:144
msgid ""
"Examples of third-party tools that are representative of different workflows "
"include (in alphabetical order):"
msgstr "다양한 워크플로를 대표하는 타사 도구의 예는 다음과 같습니다(알파벳순):"

#: src/reference/publishing.md:145
msgid "[cargo-release](https://crates.io/crates/cargo-release)"
msgstr "[cargo-release](https://crates.io/crates/cargo-release)"

#: src/reference/publishing.md:146
msgid "[cargo-smart-release](https://crates.io/crates/cargo-smart-release)"
msgstr "[cargo-smart-release](https://crates.io/crates/cargo-smart-release)"

#: src/reference/publishing.md:147
msgid "[release-plz](https://crates.io/crates/release-plz)"
msgstr "[release-plz](https://crates.io/crates/release-plz)"

#: src/reference/publishing.md:149
msgid "For more, see [crates.io](https://crates.io/search?q=cargo%20release)."
msgstr "자세한 내용은 [crates.io](https://crates.io/search?q=cargo%20release)를 참조하세요."

#: src/reference/publishing.md:151
msgid "Managing a crates.io-based crate"
msgstr "crates.io 기반 크레이트 관리하기"

#: src/reference/publishing.md:153
msgid ""
"Management of crates is primarily done through the command line `cargo` tool "
"rather than the [crates.io](https://crates.io/) web interface. For this, "
"there are a few subcommands to manage a crate."
msgstr "크레이트 관리는 주로 [crates.io](https://crates.io/) 웹 인터페이스보다는 명령줄 `cargo` 도구를 통해 이루어집니다. 이를 위해 크레이트를 관리하는 몇 가지 하위 명령이 있습니다."

#: src/reference/publishing.md:157
msgid "`cargo yank`"
msgstr "`cargo yank`"

#: src/reference/publishing.md:159
msgid ""
"Occasions may arise where you publish a version of a crate that actually "
"ends up being broken for one reason or another (syntax error, forgot to "
"include a file, etc.). For situations such as this, Cargo supports a “yank” "
"of a version of a crate."
msgstr "구문 오류, 파일 포함 누락 등 여러 가지 이유로 인해 크레이트 버전이 손상되는 경우가 발생할 수 있습니다. 이러한 상황을 위해 Cargo는 크레이트 버전의 “yank”를 지원합니다."

#: src/reference/publishing.md:169
msgid ""
"A yank **does not** delete any code. This feature is not intended for "
"deleting accidentally uploaded secrets, for example. If that happens, you "
"must reset those secrets immediately."
msgstr "yank는 코드를 삭제하지 **않습니다**. 이 기능은 실수로 업로드된 비밀을 삭제하기 위한 것이 아닙니다. 예를 들어, 그런 일이 발생하면 즉시 해당 비밀을 재설정해야 합니다."

#: src/reference/publishing.md:173
msgid ""
"The semantics of a yanked version are that no new dependencies can be "
"created against that version, but all existing dependencies continue to "
"work. One of the major goals of [crates.io](https://crates.io/) is to act as "
"a permanent archive of crates that does not change over time, and allowing "
"deletion of a version would go against this goal. Essentially a yank means "
"that all packages with a `Cargo.lock` will not break, while any future "
"`Cargo.lock` files generated will not list the yanked version."
msgstr "yank된 버전의 의미는 해당 버전에 대해 새로운 의존성을 생성할 수 없지만, 기존의 모든 의존성은 계속 작동한다는 것입니다. [crates.io](https://crates.io/)의 주요 목표 중 하나는 시간이 지나도 변경되지 않는 크레이트의 영구 아카이브 역할을 하는 것이며, 버전 삭제를 허용하는 것은 이 목표에 위배됩니다. 본질적으로 yank는 `Cargo.lock`이 있는 모든 패키지는 손상되지 않지만, 향후 생성될 `Cargo.lock` 파일에는 yank된 버전이 나열되지 않음을 의미합니다."

#: src/reference/publishing.md:181
msgid "`cargo owner`"
msgstr "`cargo owner`"

#: src/reference/publishing.md:183
msgid ""
"A crate is often developed by more than one person, or the primary "
"maintainer may change over time! The owner of a crate is the only person "
"allowed to publish new versions of the crate, but an owner may designate "
"additional owners."
msgstr "크레이트는 종종 한 명 이상의 개발자가 개발하거나, 주 유지보수자가 시간이 지남에 따라 변경될 수 있습니다! 크레이트 소유자는 크레이트의 새 버전을 게시할 수 있는 유일한 사람이지만, 소유자는 추가 소유자를 지정할 수 있습니다."

#: src/reference/publishing.md:194
msgid ""
"The owner IDs given to these commands must be GitHub user names or GitHub "
"teams."
msgstr "이 명령에 제공되는 소유자 ID는 GitHub 사용자 이름 또는 GitHub 팀이어야 합니다."

#: src/reference/publishing.md:196
msgid ""
"If a user name is given to `--add`, that user is invited as a “named” owner, "
"with full rights to the crate. In addition to being able to publish or yank "
"versions of the crate, they have the ability to add or remove owners, "
"_including_ the owner that made _them_ an owner. Needless to say, you "
"shouldn’t make people you don’t fully trust into a named owner. In order to "
"become a named owner, a user must have logged into [crates.io](https://"
"crates.io/) previously."
msgstr "`--add`에 사용자 이름이 주어지면 해당 사용자는 크레이트에 대한 모든 권한을 가진 “지정된” 소유자로 초대됩니다. 크레이트 버전을 게시하거나 yank할 수 있을 뿐만 아니라, 소유자를 추가하거나 제거할 수 있으며, _자신을_ 소유자로 만든 소유자도 포함됩니다. 말할 필요도 없이, 완전히 신뢰하지 않는 사람을 지정된 소유자로 만들어서는 안 됩니다. 지정된 소유자가 되려면 사용자는 이전에 [crates.io](https://crates.io/)에 로그인해야 합니다."

#: src/reference/publishing.md:203
msgid ""
"If a team name is given to `--add`, that team is invited as a “team” owner, "
"with restricted right to the crate. While they have permission to publish or "
"yank versions of the crate, they _do not_ have the ability to add or remove "
"owners. In addition to being more convenient for managing groups of owners, "
"teams are just a bit more secure against owners becoming malicious."
msgstr "`--add`에 팀 이름이 주어지면 해당 팀은 크레이트에 대한 제한된 권한을 가진 “팀” 소유자로 초대됩니다. 이들은 크레이트 버전을 게시하거나 yank할 수 있는 권한은 있지만, 소유자를 추가하거나 제거할 수 있는 권한은 _없습니다_. 소유자 그룹을 관리하는 데 더 편리할 뿐만 아니라, 팀은 소유자가 악의적으로 변하는 것에 대해 약간 더 안전합니다."

#: src/reference/publishing.md:209
msgid ""
"The syntax for teams is currently `github:org:team` (see examples above). In "
"order to invite a team as an owner one must be a member of that team. No "
"such restriction applies to removing a team as an owner."
msgstr "팀에 대한 구문은 현재 `github:org:team`입니다(위 예시 참조). 팀을 소유자로 초대하려면 해당 팀의 구성원이어야 합니다. 팀을 소유자에서 제거하는 데는 이러한 제한이 적용되지 않습니다."

#: src/reference/publishing.md:213
msgid "GitHub permissions"
msgstr "GitHub 권한"

#: src/reference/publishing.md:215
msgid ""
"Team membership is not something GitHub provides simple public access to, "
"and it is likely for you to encounter the following message when working "
"with them:"
msgstr "팀 멤버십은 GitHub에서 간단한 공개 액세스를 제공하는 것이 아니므로, 팀과 작업할 때 다음 메시지를 만날 가능성이 높습니다:"

#: src/reference/publishing.md:218
msgid ""
"It looks like you don’t have permission to query a necessary property from "
"GitHub to complete this request. You may need to re-authenticate on "
"[crates.io](https://crates.io/) to grant permission to read GitHub org "
"memberships."
msgstr "이 요청을 완료하는 데 필요한 속성을 GitHub에서 쿼리할 권한이 없는 것 같습니다. GitHub 조직 멤버십을 읽을 권한을 부여하려면 [crates.io](https://crates.io/)에서 다시 인증해야 할 수 있습니다."

#: src/reference/publishing.md:222
msgid ""
"This is basically a catch-all for “you tried to query a team, and one of the "
"five levels of membership access control denied this”. That is not an "
"exaggeration. GitHub’s support for team access control is Enterprise Grade."
msgstr "이것은 기본적으로 “팀을 쿼리하려고 했지만, 멤버십 액세스 제어의 다섯 가지 수준 중 하나가 이를 거부했습니다”에 대한 포괄적인 설명입니다. 과장이 아닙니다. GitHub의 팀 액세스 제어 지원은 엔터프라이즈 등급입니다."

#: src/reference/publishing.md:226
msgid ""
"The most likely cause of this is simply that you last logged in before this "
"feature was added. We originally requested _no_ permissions from GitHub when "
"authenticating users, because we didn’t actually ever use the user’s token "
"for anything other than logging them in. However to query team membership on "
"your behalf, we now require [the `read:org` scope](https://"
"developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-"
"apps/)."
msgstr "가장 가능성이 높은 원인은 이 기능이 추가되기 전에 마지막으로 로그인했기 때문입니다. 우리는 원래 사용자 인증 시 GitHub에 _어떤_ 권한도 요청하지 않았습니다. 왜냐하면 사용자 토큰을 로그인 외에는 사용하지 않았기 때문입니다. 그러나 이제 사용자를 대신하여 팀 멤버십을 쿼리하려면 [`read:org` 범위](https://developer.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/)가 필요합니다."

#: src/reference/publishing.md:232
msgid ""
"You are free to deny us this scope, and everything that worked before teams "
"were introduced will keep working. However you will never be able to add a "
"team as an owner, or publish a crate as a team owner. If you ever attempt to "
"do this, you will get the error above. You may also see this error if you "
"ever try to publish a crate that you don’t own at all, but otherwise happens "
"to have a team."
msgstr "이 범위에 대한 접근을 거부할 수 있으며, 팀이 도입되기 전에 작동했던 모든 기능은 계속 작동합니다. 그러나 팀을 소유자로 추가하거나 팀 소유자로 크레이트를 게시할 수는 없습니다. 이를 시도하면 위와 같은 오류가 발생합니다. 또한 소유하지 않은 크레이트를 게시하려고 시도했지만 팀이 있는 경우에도 이 오류가 발생할 수 있습니다."

#: src/reference/publishing.md:238
msgid ""
"If you ever change your mind, or just aren’t sure if [crates.io](https://"
"crates.io/) has sufficient permission, you can always go to <https://"
"crates.io/> and re-authenticate, which will prompt you for permission if "
"[crates.io](https://crates.io/) doesn’t have all the scopes it would like to."
msgstr "마음을 바꾸거나 [crates.io](https://crates.io/)에 충분한 권한이 있는지 확실하지 않은 경우, 언제든지 <https://crates.io/>로 이동하여 다시 인증할 수 있습니다. 그러면 [crates.io](https://crates.io/)에 필요한 모든 범위가 없는 경우 권한을 요청하는 메시지가 표시됩니다."

#: src/reference/publishing.md:243
msgid ""
"An additional barrier to querying GitHub is that the organization may be "
"actively denying third party access. To check this, you can go to:"
msgstr "GitHub를 쿼리하는 데 추가적인 장벽은 조직이 타사 액세스를 적극적으로 거부할 수 있다는 것입니다. 이를 확인하려면 다음으로 이동하세요:"

#: src/reference/publishing.md:246
msgid ""
"```text\n"
"https://github.com/organizations/:org/settings/oauth_application_policy\n"
"```"
msgstr ""
"```text\n"
"https://github.com/organizations/:org/settings/oauth_application_policy\n"
"```"

#: src/reference/publishing.md:250
msgid ""
"where `:org` is the name of the organization (e.g., `rust-lang`). You may "
"see something like:"
msgstr "여기서 `:org`는 조직의 이름입니다(예: `rust-lang`). 다음과 같은 것을 볼 수 있습니다:"

#: src/reference/publishing.md:253
msgid "![Organization Access Control](../images/org-level-acl.png)"
msgstr "![Organization Access Control](../images/org-level-acl.png)"

#: src/reference/publishing.md:255
msgid ""
"Where you may choose to explicitly remove [crates.io](https://crates.io/) "
"from your organization’s blacklist, or simply press the “Remove "
"Restrictions” button to allow all third party applications to access this "
"data."
msgstr "여기서 [crates.io](https://crates.io/)를 조직의 블랙리스트에서 명시적으로 제거하거나, 단순히 “제한 제거” 버튼을 눌러 모든 타사 애플리케이션이 이 데이터에 액세스하도록 허용할 수 있습니다."

#: src/reference/publishing.md:259
msgid ""
"Alternatively, when [crates.io](https://crates.io/) requested the `read:org` "
"scope, you could have explicitly whitelisted [crates.io](https://crates.io/) "
"querying the org in question by pressing the “Grant Access” button next to "
"its name:"
msgstr "또는 [crates.io](https://crates.io/)가 `read:org` 범위를 요청했을 때, 이름 옆에 있는 “액세스 허용” 버튼을 눌러 해당 조직을 쿼리하는 [crates.io](https://crates.io/)를 명시적으로 화이트리스트에 추가할 수 있습니다:"

#: src/reference/publishing.md:263
msgid "![Authentication Access Control](../images/auth-level-acl.png)"
msgstr "![Authentication Access Control](../images/auth-level-acl.png)"

#: src/reference/publishing.md:265
msgid "Troubleshooting GitHub team access errors"
msgstr "GitHub 팀 액세스 오류 문제 해결"

#: src/reference/publishing.md:267
msgid ""
"When trying to add a GitHub team as crate owner, you may see an error like:"
msgstr "GitHub 팀을 크레이트 소유자로 추가하려고 할 때 다음과 같은 오류가 발생할 수 있습니다:"

#: src/reference/publishing.md:272
msgid ""
"In that case, you should go to [the GitHub Application settings page]\n"
"(https://github.com/settings/applications) and check if crates.io is listed "
"in the `Authorized OAuth Apps` tab. If it isn\'t, you should go to <https://"
"crates.io/> and authorize it. Then go back to the Application Settings page "
"on GitHub, click on the crates.io application in the list, and make sure you "
"or your organization is listed in the \"Organization access\" list with a "
"green check mark. If there\'s a button labeled `Grant` or `Request`, you "
"should grant the access or request the org owner to do so."
msgstr "이 경우 [GitHub 애플리케이션 설정 페이지](https://github.com/settings/applications)로 이동하여 `Authorized OAuth Apps` 탭에 crates.io가 나열되어 있는지 확인해야 합니다. 나열되어 있지 않다면 <https://crates.io/>로 이동하여 승인해야 합니다. 그런 다음 GitHub의 애플리케이션 설정 페이지로 돌아가 목록에서 crates.io 애플리케이션을 클릭하고, 귀하 또는 귀하의 조직이 녹색 체크 표시와 함께 “조직 액세스” 목록에 있는지 확인하세요. `Grant` 또는 `Request` 레이블이 있는 버튼이 있다면 액세스를 허용하거나 조직 소유자에게 요청해야 합니다."

#: src/guide/cargo-home.md:3
msgid ""
"The \"Cargo home\" functions as a download and source cache. When building a "
"[crate](../appendix/glossary.md#crate \"\\\"crate\\\" (glossary entry)\"), "
"Cargo stores downloaded build dependencies in the Cargo home. You can alter "
"the location of the Cargo home by setting the `CARGO_HOME` [environmental "
"variable](../reference/environment-variables.md). The [home](https://"
"crates.io/crates/home) crate provides an API for getting this location if "
"you need this information inside your Rust crate. By default, the Cargo home "
"is located in `$HOME/.cargo/`."
msgstr "“Cargo 홈”은 다운로드 및 소스 캐시 역할을 합니다. [크레이트](../appendix/glossary.md#crate \"\\\"crate\\\" (용어집 항목)\")를 빌드할 때 Cargo는 다운로드된 빌드 의존성을 Cargo 홈에 저장합니다. `CARGO_HOME` [환경 변수](../reference/environment-variables.md)를 설정하여 Cargo 홈의 위치를 변경할 수 있습니다. [home](https://crates.io/crates/home) 크레이트는 Rust 크레이트 내에서 이 정보가 필요한 경우 이 위치를 가져오는 API를 제공합니다. 기본적으로 Cargo 홈은 `$HOME/.cargo/`에 있습니다."

#: src/guide/cargo-home.md:9
msgid ""
"Please note that the internal structure of the Cargo home is not stabilized "
"and may be subject to change at any time."
msgstr "Cargo 홈의 내부 구조는 안정화되지 않았으며 언제든지 변경될 수 있다는 점에 유의하세요."
#: src/guide/cargo-home.md:11
msgid "The Cargo home consists of following components:"
msgstr "Cargo 홈은 다음 구성 요소로 이루어져 있습니다:"

#: src/guide/cargo-home.md:13
msgid "Files:"
msgstr "파일:"

#: src/guide/cargo-home.md:15
msgid ""
"`config.toml` Cargo's global configuration file, see the [config entry in "
"the reference](../reference/config.md)."
msgstr "`config.toml` Cargo의 전역 설정 파일입니다. [참조의 config 항목](../reference/config.md)을 확인하세요."

#: src/guide/cargo-home.md:18
msgid ""
"`credentials.toml` Private login credentials from [`cargo login`](../"
"commands/cargo-login.md) in order to log in to a [registry](../appendix/"
"glossary.md#registry \"\\\"registry\\\" (glossary entry)\")."
msgstr "`credentials.toml` [레지스트리](../appendix/glossary.md#registry \"\\\"registry\\\" (용어집 항목)\")에 로그인하기 위한 [`cargo login`](../commands/cargo-login.md)의 개인 로그인 자격 증명입니다."
#: src/guide/cargo-home.md:21
msgid ""
"`.crates.toml`, `.crates2.json` These hidden files contain [package](../"
"appendix/glossary.md#package \"\\\"package\\\" (glossary entry)\") "
"information of crates installed via [`cargo install`](../commands/cargo-"
"install.md). Do NOT edit by hand!"
msgstr "`.crates.toml`, `.crates2.json` 이 숨김 파일들은 [`cargo install`](../commands/cargo-install.md)을 통해 설치된 크레이트의 [패키지](../appendix/glossary.md#package \"\\\"패키지\\\" (용어집 항목)\") 정보를 담고 있습니다. 직접 편집하지 마세요!"

#: src/guide/cargo-home.md:24
msgid "Directories:"
msgstr "디렉토리:"

#: src/guide/cargo-home.md:26
msgid ""
"`bin` The bin directory contains executables of crates that were installed "
"via [`cargo install`](../commands/cargo-install.md) or [`rustup`](https://"
"rust-lang.github.io/rustup/). To be able to make these binaries accessible, "
"add the path of the directory to your `$PATH` environment variable."
msgstr "`bin` bin 디렉토리에는 [`cargo install`](../commands/cargo-install.md) 또는 [`rustup`](https://rust-lang.github.io/rustup/)를 통해 설치된 크레이트의 실행 파일이 포함되어 있습니다. 이 바이너리들을 접근 가능하게 하려면 디렉토리의 경로를 `$PATH` 환경 변수에 추가하세요."

#: src/guide/cargo-home.md:30
msgid "`git` Git sources are stored here:"
msgstr "`git` Git 소스는 여기에 저장됩니다:"

#: src/guide/cargo-home.md:33
msgstr "`git/db` 크레이트가 Git 저장소에 의존하는 경우, Cargo는 해당 저장소를 이 디렉토리에 bare repo로 복제하고 필요한 경우 업데이트합니다."

#: src/guide/cargo-home.md:36
msgstr "`git/checkouts` Git 소스가 사용되는 경우, `git/db` 내의 bare repo에서 필요한 repo 커밋이 이 디렉토리로 체크아웃됩니다. 이는 해당 의존성에 지정된 커밋의 repo에 포함된 실제 파일을 컴파일러에 제공합니다. 동일한 repo의 다른 커밋을 여러 번 체크아웃할 수 있습니다."

#: src/guide/cargo-home.md:41
msgid ""
"`registry` Packages and metadata of crate registries (such as [crates.io]"
"(https://crates.io/)) are located here."
msgstr "`registry` [crates.io](https://crates.io/)와 같은 크레이트 레지스트리의 패키지 및 메타데이터가 여기에 있습니다."

#: src/guide/cargo-home.md:44
msgid ""
"`registry/index` The index is a bare git repository which contains the "
"metadata (versions, dependencies etc) of all available crates of a registry."
msgstr "`registry/index` 인덱스는 레지스트리의 모든 사용 가능한 크레이트의 메타데이터(버전, 의존성 등)를 포함하는 bare git 저장소입니다."

#: src/guide/cargo-home.md:47
msgid ""
"`registry/cache` Downloaded dependencies are stored in the cache. The crates "
"are compressed gzip archives named with a `.crate` extension."
msgstr "`registry/cache` 다운로드된 의존성은 캐시에 저장됩니다. 크레이트는 `.crate` 확장자로 이름이 지정된 압축된 gzip 아카이브입니다."

#: src/guide/cargo-home.md:50
msgid ""
"`registry/src` If a downloaded `.crate` archive is required by a package, it "
"is unpacked into `registry/src` folder where rustc will find the `.rs` files."
msgstr "`registry/src` 다운로드한 `.crate` 아카이브가 패키지에 필요한 경우, `registry/src` 폴더에 압축이 풀리고 rustc가 `.rs` 파일을 찾을 수 있습니다."

#: src/guide/cargo-home.md:54
msgid "Caching the Cargo home in CI"
msgstr "CI에서 Cargo 홈 캐싱하기"

#: src/guide/cargo-home.md:56
msgid ""
"To avoid redownloading all crate dependencies during continuous integration, "
"you can cache the `$CARGO_HOME` directory. However, caching the entire "
"directory is often inefficient as it will contain downloaded sources twice. "
"If we depend on a crate such as `serde 1.0.92` and cache the entire "
"`$CARGO_HOME` we would actually cache the sources twice, the "
"`serde-1.0.92.crate` inside `registry/cache` and the extracted `.rs` files "
"of serde inside `registry/src`. That can unnecessarily slow down the build "
"as downloading, extracting, recompressing and reuploading the cache to the "
"CI servers can take some time."
msgstr "지속적인 통합 중에 모든 크레이트 의존성을 다시 다운로드하지 않으려면 `$CARGO_HOME` 디렉토리를 캐시할 수 있습니다. 그러나 전체 디렉토리를 캐시하는 것은 다운로드된 소스를 두 번 포함하므로 비효율적인 경우가 많습니다. `serde 1.0.92`와 같은 크레이트에 의존하고 전체 `$CARGO_HOME`을 캐시하면 실제로는 소스를 두 번 캐시하게 됩니다. `registry/cache` 내부의 `serde-1.0.92.crate`와 `registry/src` 내부의 serde의 압축 해제된 `.rs` 파일입니다. 캐시를 다운로드, 압축 해제, 재압축 및 CI 서버에 다시 업로드하는 데 시간이 걸릴 수 있으므로 빌드 속도가 불필요하게 느려질 수 있습니다."

#: src/guide/cargo-home.md:61
msgid ""
"If you wish to cache binaries installed with [`cargo install`](../commands/"
"cargo-install.md), you need to cache the `bin/` folder and the "
"`.crates.toml` and `.crates2.json` files."
msgstr "[`cargo install`](../commands/cargo-install.md)로 설치된 바이너리를 캐시하려면 `bin/` 폴더와 `.crates.toml` 및 `.crates2.json` 파일을 캐시해야 합니다."

#: src/guide/cargo-home.md:63
msgid ""
"It should be sufficient to cache the following files and directories across "
"builds:"
msgstr "빌드 간에 다음 파일 및 디렉토리를 캐시하는 것으로 충분합니다:"

#: src/guide/cargo-home.md:65
msgid "`.crates.toml`"
msgstr "`.crates.toml`"

#: src/guide/cargo-home.md:66
msgid "`.crates2.json`"
msgstr "`.crates2.json`"

#: src/guide/cargo-home.md:67
msgid "`bin/`"
msgstr "`bin/`"

#: src/guide/cargo-home.md:68
msgid "`registry/index/`"
msgstr "`registry/index/`"

#: src/guide/cargo-home.md:69
msgid "`registry/cache/`"
msgstr "`registry/cache/`"

#: src/guide/cargo-home.md:70
msgid "`git/db/`"
msgstr "`git/db/`"

#: src/guide/cargo-home.md:74
msgid "Vendoring all dependencies of a project"
msgstr "프로젝트의 모든 의존성 벤더링하기"

#: src/guide/cargo-home.md:76
msgid "See the [`cargo vendor`](../commands/cargo-vendor.md) subcommand."
msgstr "[`cargo vendor`](../commands/cargo-vendor.md) 하위 명령을 참조하세요."

#: src/guide/cargo-home.md:80
msgid "Clearing the cache"
msgstr "캐시 지우기"

#: src/guide/cargo-home.md:82
msgid ""
"In theory, you can always remove any part of the cache and Cargo will do its "
"best to restore sources if a crate needs them either by reextracting an "
"archive or checking out a bare repo or by simply redownloading the sources "
"from the web."
msgstr "이론적으로 캐시의 일부를 언제든지 제거할 수 있으며, Cargo는 크레이트에 소스가 필요한 경우 아카이브를 다시 추출하거나 bare repo를 체크아웃하거나 웹에서 소스를 다시 다운로드하여 소스를 복원하기 위해 최선을 다할 것입니다."

#: src/guide/cargo-home.md:84
msgid ""
"Alternatively, the [cargo-cache](https://crates.io/crates/cargo-cache) crate "
"provides a simple CLI tool to only clear selected parts of the cache or show "
"sizes of its components in your command-line."
msgstr "또는 [cargo-cache](https://crates.io/crates/cargo-cache) 크레이트는 캐시의 선택된 부분만 지우거나 명령줄에서 구성 요소의 크기를 표시하는 간단한 CLI 도구를 제공합니다."

#: src/reference/index.md:5
msgid "[The Manifest Format](manifest.md)"
msgstr "[매니페스트 형식](manifest.md)"

#: src/reference/index.md:6
msgid "[Cargo Targets](cargo-targets.md)"
msgstr "[Cargo 타겟](cargo-targets.md)"

#: src/reference/index.md:7
msgid "[Rust version](rust-version.md)"
msgstr "[Rust 버전](rust-version.md)"

#: src/reference/index.md:8
msgid "[Workspaces](workspaces.md)"
msgstr "[워크스페이스](workspaces.md)"

#: src/reference/index.md:9
msgid "[Specifying Dependencies](specifying-dependencies.md)"
msgstr "[의존성 지정하기](specifying-dependencies.md)"

#: src/reference/index.md:10
msgid "[Overriding Dependencies](overriding-dependencies.md)"
msgstr "[의존성 재정의하기](overriding-dependencies.md)"

#: src/reference/index.md:11
msgid "[Source Replacement](source-replacement.md)"
msgstr "[소스 교체](source-replacement.md)"

#: src/reference/index.md:12
msgid "[Dependency Resolution](resolver.md)"
msgstr "[의존성 해결](resolver.md)"

#: src/reference/index.md:13
msgid "[Features](features.md)"
msgstr "[기능](features.md)"

#: src/reference/index.md:14
msgid "[Features Examples](features-examples.md)"
msgstr "[기능 예제](features-examples.md)"

#: src/reference/index.md:15
msgid "[Profiles](profiles.md)"
msgstr "[프로파일](profiles.md)"

#: src/reference/index.md:16
msgid "[Configuration](config.md)"
msgstr "[설정](config.md)"

#: src/reference/index.md:17
msgid "[Environment Variables](environment-variables.md)"
msgstr "[환경 변수](environment-variables.md)"

#: src/reference/index.md:18
msgid "[Build Scripts](build-scripts.md)"
msgstr "[빌드 스크립트](build-scripts.md)"

#: src/reference/index.md:19
msgid "[Build Script Examples](build-script-examples.md)"
msgstr "[빌드 스크립트 예제](build-script-examples.md)"

#: src/reference/index.md:20
msgid "[Build Cache](build-cache.md)"
msgstr "[빌드 캐시](build-cache.md)"

#: src/reference/index.md:21
msgid "[Package ID Specifications](pkgid-spec.md)"
msgstr "[패키지 ID 명세](pkgid-spec.md)"

#: src/reference/index.md:22
msgid "[External Tools](external-tools.md)"
msgstr "[외부 도구](external-tools.md)"

#: src/reference/index.md:23
msgid "[Registries](registries.md)"
msgstr "[레지스트리](registries.md)"

#: src/reference/index.md:24
msgid "[Registry Authentication](registry-authentication.md)"
msgstr "[레지스트리 인증](registry-authentication.md)"

#: src/reference/index.md:25
msgid "[Credential Provider Protocol](credential-provider-protocol.md)"
msgstr "[자격 증명 제공자 프로토콜](credential-provider-protocol.md)"

#: src/reference/index.md:26
msgid "[Running a Registry](running-a-registry.md)"
msgstr "[레지스트리 운영하기](running-a-registry.md)"

#: src/reference/index.md:27
msgid "[Registry Index](registry-index.md)"
msgstr "[레지스트리 인덱스](registry-index.md)"

#: src/reference/index.md:28
msgid "[Registry Web API](registry-web-api.md)"
msgstr "[레지스트리 웹 API](registry-web-api.md)"

#: src/reference/index.md:29
msgid "[SemVer Compatibility](semver.md)"
msgstr "[SemVer 호환성](semver.md)"

#: src/reference/index.md:30
msgid "[Future incompat report](future-incompat-report.md)"
msgstr "[미래 비호환성 보고서](future-incompat-report.md)"

#: src/reference/index.md:31
msgid "[Reporting build timings](timings.md)"
msgstr "[빌드 시간 보고](timings.md)"

#: src/reference/index.md:32
msgid "[Lints](lints.md)"
msgstr "[린트](lints.md)"

#: src/reference/index.md:33
msgid "[Unstable Features](unstable.md)"
msgstr "[불안정한 기능](unstable.md)"

#: src/reference/manifest.md:3
msgid ""
"The `Cargo.toml` file for each package is called its _manifest_. It is "
"written in the [TOML](https://toml.io/) format. It contains metadata that is "
"needed to compile the package. Checkout the `cargo locate-project` section "
"for more detail on how cargo finds the manifest file."
msgstr "각 패키지의 `Cargo.toml` 파일은 _매니페스트_라고 합니다. [TOML](https://toml.io/) 형식으로 작성됩니다. 패키지를 컴파일하는 데 필요한 메타데이터를 포함합니다. cargo가 매니페스트 파일을 찾는 방법에 대한 자세한 내용은 `cargo locate-project` 섹션을 확인하세요."

#: src/reference/manifest.md:7
msgid "Every manifest file consists of the following sections:"
msgstr "모든 매니페스트 파일은 다음 섹션으로 구성됩니다:"

#: src/reference/manifest.md:9
msgid "[`cargo-features`](unstable.md) --- Unstable, nightly-only features."
msgstr "[`cargo-features`](unstable.md) --- 불안정한, 나이틀리 전용 기능입니다."

#: src/reference/manifest.md:10
msgid "[`[package]`](#the-package-section) --- Defines a package."
msgstr "[`[package]`](#the-package-section) --- 패키지를 정의합니다."

#: src/reference/manifest.md:11
msgid "[`name`](#the-name-field) --- The name of the package."
msgstr "[`name`](#the-name-field) --- 패키지의 이름입니다."

#: src/reference/manifest.md:12
msgid "[`version`](#the-version-field) --- The version of the package."
msgstr "[`version`](#the-version-field) --- 패키지의 버전입니다."

#: src/reference/manifest.md:13
msgid "[`authors`](#the-authors-field) --- The authors of the package."
msgstr "[`authors`](#the-authors-field) --- 패키지의 저자입니다."

#: src/reference/manifest.md:14
msgid "[`edition`](#the-edition-field) --- The Rust edition."
msgstr "[`edition`](#the-edition-field) --- Rust 에디션입니다."

#: src/reference/manifest.md:15
msgid ""
"[`rust-version`](rust-version.md) --- The minimal supported Rust version."
msgstr "[`rust-version`](rust-version.md) --- 최소 지원 Rust 버전입니다."

#: src/reference/manifest.md:16
msgid ""
"[`description`](#the-description-field) --- A description of the package."
msgstr "[`description`](#the-description-field) --- 패키지에 대한 설명입니다."

#: src/reference/manifest.md:17
msgid ""
"[`documentation`](#the-documentation-field) --- URL of the package "
"documentation."
msgstr "[`documentation`](#the-documentation-field) --- 패키지 문서의 URL입니다."

#: src/reference/manifest.md:18
msgid "[`readme`](#the-readme-field) --- Path to the package's README file."
msgstr "[`readme`](#the-readme-field) --- 패키지의 README 파일 경로입니다."

#: src/reference/manifest.md:19
msgid "[`homepage`](#the-homepage-field) --- URL of the package homepage."
msgstr "[`homepage`](#the-homepage-field) --- 패키지 홈페이지의 URL입니다."

#: src/reference/manifest.md:20
msgid ""
"[`repository`](#the-repository-field) --- URL of the package source "
"repository."
msgstr "[`repository`](#the-repository-field) --- 패키지 소스 저장소의 URL입니다."

#: src/reference/manifest.md:21
msgid ""
"[`license`](#the-license-and-license-file-fields) --- The package license."
msgstr "[`license`](#the-license-and-license-file-fields) --- 패키지 라이선스입니다."

#: src/reference/manifest.md:22
msgid ""
"[`license-file`](#the-license-and-license-file-fields) --- Path to the text "
"of the license."
msgstr "[`license-file`](#the-license-and-license-file-fields) --- 라이선스 텍스트 파일의 경로입니다."

#: src/reference/manifest.md:23
msgid "[`keywords`](#the-keywords-field) --- Keywords for the package."
msgstr "[`keywords`](#the-keywords-field) --- 패키지의 키워드입니다."

#: src/reference/manifest.md:24
msgid "[`categories`](#the-categories-field) --- Categories of the package."
msgstr "[`categories`](#the-categories-field) --- 패키지의 카테고리입니다."

#: src/reference/manifest.md:25
msgid ""
"[`workspace`](#the-workspace-field) --- Path to the workspace for the "
"package."
msgstr "[`workspace`](#the-workspace-field) --- 패키지의 워크스페이스 경로입니다."

#: src/reference/manifest.md:26
msgid "[`build`](#the-build-field) --- Path to the package build script."
msgstr "[`build`](#the-build-field) --- 패키지 빌드 스크립트의 경로입니다."

#: src/reference/manifest.md:27
msgid ""
"[`links`](#the-links-field) --- Name of the native library the package links "
"with."
msgstr ""

#: src/reference/manifest.md:28
msgid ""
"[`exclude`](#the-exclude-and-include-fields) --- Files to exclude when "
"publishing."
msgstr ""

#: src/reference/manifest.md:29
msgid ""
"[`include`](#the-exclude-and-include-fields) --- Files to include when "
"publishing."
msgstr ""

#: src/reference/manifest.md:30
msgid ""
"[`publish`](#the-publish-field) --- Can be used to prevent publishing the "
"package."
msgstr ""

#: src/reference/manifest.md:31 src/reference/workspaces.md:28
msgid ""
"[`metadata`](#the-metadata-table) --- Extra settings for external tools."
msgstr ""

#: src/reference/manifest.md:32
msgid ""
"[`default-run`](#the-default-run-field) --- The default binary to run by "
"[`cargo run`](../commands/cargo-run.md)."
msgstr ""

#: src/reference/manifest.md:33
msgid ""
"[`autolib`](cargo-targets.md#target-auto-discovery) --- Disables library "
"auto discovery."
msgstr ""

#: src/reference/manifest.md:34
msgid ""
"[`autobins`](cargo-targets.md#target-auto-discovery) --- Disables binary "
"auto discovery."
msgstr ""

#: src/reference/manifest.md:35
msgid ""
"[`autoexamples`](cargo-targets.md#target-auto-discovery) --- Disables "
"example auto discovery."
msgstr ""

#: src/reference/manifest.md:36
msgid ""
"[`autotests`](cargo-targets.md#target-auto-discovery) --- Disables test auto "
"discovery."
msgstr ""

#: src/reference/manifest.md:37
msgid ""
"[`autobenches`](cargo-targets.md#target-auto-discovery) --- Disables bench "
"auto discovery."
msgstr ""

#: src/reference/manifest.md:38 src/reference/workspaces.md:21
msgid ""
"[`resolver`](resolver.md#resolver-versions) --- Sets the dependency resolver "
"to use."
msgstr ""

#: src/reference/manifest.md:39
msgid ""
"Target tables: (see [configuration](cargo-targets.md#configuring-a-target) "
"for settings)"
msgstr ""

#: src/reference/manifest.md:40
msgid "[`[lib]`](cargo-targets.md#library) --- Library target settings."
msgstr ""

#: src/reference/manifest.md:41
msgid "[`[[bin]]`](cargo-targets.md#binaries) --- Binary target settings."
msgstr ""

#: src/reference/manifest.md:42
msgid "[`[[example]]`](cargo-targets.md#examples) --- Example target settings."
msgstr ""

#: src/reference/manifest.md:43
msgid "[`[[test]]`](cargo-targets.md#tests) --- Test target settings."
msgstr ""

#: src/reference/manifest.md:44
msgid ""
"[`[[bench]]`](cargo-targets.md#benchmarks) --- Benchmark target settings."
msgstr ""

#: src/reference/manifest.md:45
msgid "Dependency tables:"
msgstr ""

#: src/reference/manifest.md:46
msgid ""
"[`[dependencies]`](specifying-dependencies.md) --- Package library "
"dependencies."
msgstr ""

#: src/reference/manifest.md:47
msgid ""
"[`[dev-dependencies]`](specifying-dependencies.md#development-dependencies) "
"--- Dependencies for examples, tests, and benchmarks."
msgstr ""

#: src/reference/manifest.md:48
msgid ""
"[`[build-dependencies]`](specifying-dependencies.md#build-dependencies) --- "
"Dependencies for build scripts."
msgstr ""

#: src/reference/manifest.md:49
msgid ""
"[`[target]`](specifying-dependencies.md#platform-specific-dependencies) --- "
"Platform-specific dependencies."
msgstr ""

#: src/reference/manifest.md:50
msgid "[`[badges]`](#the-badges-section) --- Badges to display on a registry."
msgstr ""

#: src/reference/manifest.md:51
msgid "[`[features]`](features.md) --- Conditional compilation features."
msgstr ""

#: src/reference/manifest.md:52
msgid "[`[lints]`](#the-lints-section) --- Configure linters for this package."
msgstr ""

#: src/reference/manifest.md:53 src/reference/workspaces.md:29
msgid ""
"[`[patch]`](overriding-dependencies.md#the-patch-section) --- Override "
"dependencies."
msgstr ""

#: src/reference/manifest.md:54 src/reference/workspaces.md:30
msgid ""
"[`[replace]`](overriding-dependencies.md#the-replace-section) --- Override "
"dependencies (deprecated)."
msgstr ""

#: src/reference/manifest.md:55 src/reference/workspaces.md:31
msgid "[`[profile]`](profiles.md) --- Compiler settings and optimizations."
msgstr ""

#: src/reference/manifest.md:56
msgid "[`[workspace]`](workspaces.md) --- The workspace definition."
msgstr ""

#: src/reference/manifest.md:58
msgid "The `[package]` section"
msgstr ""

#: src/reference/manifest.md:60
msgid "The first section in a `Cargo.toml` is `[package]`."
msgstr ""

#: src/reference/manifest.md:62
msgid ""
"```toml\n"
"[package]\n"
"name = \"hello_world\" # the name of the package\n"
"version = \"0.1.0\"    # the current version, obeying semver\n"
"```"
msgstr ""

#: src/reference/manifest.md:68
msgid ""
"The only field required by Cargo is [`name`](#the-name-field). If publishing "
"to a registry, the registry may require additional fields. See the notes "
"below and [the publishing chapter](publishing.md) for requirements for "
"publishing to [crates.io](https://crates.io/)."
msgstr ""

#: src/reference/manifest.md:73 src/reference/cargo-targets.md:194
msgid "The `name` field"
msgstr ""

#: src/reference/manifest.md:75
msgid ""
"The package name is an identifier used to refer to the package. It is used "
"when listed as a dependency in another package, and as the default name of "
"inferred lib and bin targets."
msgstr ""

#: src/reference/manifest.md:79
msgid ""
"The name must use only [alphanumeric](../../std/"
"primitive.char.html#method.is_alphanumeric) characters or `-` or `_`, and "
"cannot be empty."
msgstr ""

#: src/reference/manifest.md:81
msgid ""
"Note that [`cargo new`](../commands/cargo-new.md) and [`cargo init`](../"
"commands/cargo-init.md) impose some additional restrictions on the package "
"name, such as enforcing that it is a valid Rust identifier and not a "
"keyword. [crates.io](https://crates.io/) imposes even more restrictions, "
"such as:"
msgstr ""

#: src/reference/manifest.md:85
msgid "Only ASCII characters are allowed."
msgstr ""

#: src/reference/manifest.md:86
msgid "Do not use reserved names."
msgstr ""

#: src/reference/manifest.md:87
msgid "Do not use special Windows names such as \"nul\"."
msgstr ""

#: src/reference/manifest.md:88
msgid "Use a maximum of 64 characters of length."
msgstr ""

#: src/reference/manifest.md:92
msgid "The `version` field"
msgstr ""

#: src/reference/manifest.md:94
msgid ""
"The `version` field is formatted according to the [SemVer](https://"
"semver.org) specification:"
msgstr ""

#: src/reference/manifest.md:96
msgid ""
"Versions must have three numeric parts, the major version, the minor "
"version, and the patch version."
msgstr ""

#: src/reference/manifest.md:99
msgid ""
"A pre-release part can be added after a dash such as `1.0.0-alpha`. The pre-"
"release part may be separated with periods to distinguish separate "
"components. Numeric components will use numeric comparison while everything "
"else will be compared lexicographically. For example, `1.0.0-alpha.11` is "
"higher than `1.0.0-alpha.4`."
msgstr ""

#: src/reference/manifest.md:105
msgid ""
"A metadata part can be added after a plus, such as `1.0.0+21AF26D3`. This is "
"for informational purposes only and is generally ignored by Cargo."
msgstr ""

#: src/reference/manifest.md:108
msgid ""
"Cargo bakes in the concept of [Semantic Versioning](https://semver.org/), so "
"versions are considered [compatible](semver.md) if their left-most non-zero "
"major/minor/patch component is the same. See the [Resolver](resolver.md) "
"chapter for more information on how Cargo uses versions to resolve "
"dependencies."
msgstr ""

#: src/reference/manifest.md:113
msgid ""
"This field is optional and defaults to `0.0.0`.  The field is required for "
"publishing packages."
msgstr ""

#: src/reference/manifest.md:115
msgid "**MSRV:** Before 1.75, this field was required"
msgstr ""

#: src/reference/manifest.md:121
msgid "The `authors` field"
msgstr ""

#: src/reference/manifest.md:123
msgid "**Warning**: This field is deprecated"
msgstr ""

#: src/reference/manifest.md:125
msgid ""
"The optional `authors` field lists in an array the people or organizations "
"that are considered the \"authors\" of the package. An optional email "
"address may be included within angled brackets at the end of each author "
"entry."
msgstr ""

#: src/reference/manifest.md:129
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"authors = [\"Graydon Hoare\", \"Fnu Lnu <no-reply@rust-lang.org>\"]\n"
"```"
msgstr ""

#: src/reference/manifest.md:135
msgid ""
"This field is surfaced in package metadata and in the `CARGO_PKG_AUTHORS` "
"environment variable within `build.rs` for backwards compatibility."
msgstr ""

#: src/reference/manifest.md:138 src/reference/cargo-targets.md:271
msgid "The `edition` field"
msgstr ""

#: src/reference/manifest.md:140
msgid ""
"The `edition` key is an optional key that affects which [Rust Edition](../../"
"edition-guide/index.html) your package is compiled with. Setting the "
"`edition` key in `[package]` will affect all targets/crates in the package, "
"including test suites, benchmarks, binaries, examples, etc."
msgstr ""

#: src/reference/manifest.md:151
msgid ""
"Most manifests have the `edition` field filled in automatically by [`cargo "
"new`](../commands/cargo-new.md) with the latest stable edition. By default "
"`cargo new` creates a manifest with the 2024 edition currently."
msgstr ""

#: src/reference/manifest.md:155
msgid ""
"If the `edition` field is not present in `Cargo.toml`, then the 2015 edition "
"is assumed for backwards compatibility. Note that all manifests created with "
"[`cargo new`](../commands/cargo-new.md) will not use this historical "
"fallback because they will have `edition` explicitly specified to a newer "
"value."
msgstr ""

#: src/reference/manifest.md:160
msgid "The `rust-version` field"
msgstr ""

#: src/reference/manifest.md:162
msgid ""
"The `rust-version` field tells cargo what version of the Rust toolchain you "
"support for your package. See [the Rust version chapter](rust-version.md) "
"for more detail."
msgstr ""

#: src/reference/manifest.md:166
msgid "The `description` field"
msgstr ""

#: src/reference/manifest.md:168
msgid ""
"The description is a short blurb about the package. [crates.io](https://"
"crates.io/) will display this with your package. This should be plain text "
"(not Markdown)."
msgstr ""

#: src/reference/manifest.md:171
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"description = \"A short description of my package\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:177
msgid ""
"**Note**: [crates.io](https://crates.io/) requires the `description` to be "
"set."
msgstr ""

#: src/reference/manifest.md:179
msgid "The `documentation` field"
msgstr ""

#: src/reference/manifest.md:181
msgid ""
"The `documentation` field specifies a URL to a website hosting the crate's "
"documentation. If no URL is specified in the manifest file, [crates.io]"
"(https://crates.io/) will automatically link your crate to the corresponding "
"[docs.rs](https://docs.rs/) page when the documentation has been built and "
"is available (see [docs.rs queue](https://docs.rs/releases/queue))."
msgstr ""

#: src/reference/manifest.md:186
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"documentation = \"https://docs.rs/bitflags\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:194
msgid "The `readme` field"
msgstr ""

#: src/reference/manifest.md:196
msgid ""
"The `readme` field should be the path to a file in the package root "
"(relative to this `Cargo.toml`) that contains general information about the "
"package. This file will be transferred to the registry when you publish. "
"[crates.io](https://crates.io/) will interpret it as Markdown and render it "
"on the crate's page."
msgstr ""

#: src/reference/manifest.md:201
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"readme = \"README.md\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:207
msgid ""
"If no value is specified for this field, and a file named `README.md`, "
"`README.txt` or `README` exists in the package root, then the name of that "
"file will be used. You can suppress this behavior by setting this field to "
"`false`. If the field is set to `true`, a default value of `README.md` will "
"be assumed."
msgstr ""

#: src/reference/manifest.md:213
msgid "The `homepage` field"
msgstr ""

#: src/reference/manifest.md:215
msgid ""
"The `homepage` field should be a URL to a site that is the home page for "
"your package."
msgstr ""

#: src/reference/manifest.md:218
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"homepage = \"https://serde.rs\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:224
msgid ""
"A value should only be set for `homepage` if there is a dedicated website "
"for the crate other than the source repository or API documentation. Do not "
"make `homepage` redundant with either the `documentation` or `repository` "
"values."
msgstr ""

#: src/reference/manifest.md:228
msgid "The `repository` field"
msgstr ""

#: src/reference/manifest.md:230
msgid ""
"The `repository` field should be a URL to the source repository for your "
"package."
msgstr ""

#: src/reference/manifest.md:233
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"repository = \"https://github.com/rust-lang/cargo\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:239
msgid "The `license` and `license-file` fields"
msgstr ""

#: src/reference/manifest.md:241
msgid ""
"The `license` field contains the name of the software license that the "
"package is released under. The `license-file` field contains the path to a "
"file containing the text of the license (relative to this `Cargo.toml`)."
msgstr ""

#: src/reference/manifest.md:245
msgid ""
"[crates.io](https://crates.io/) interprets the `license` field as an [SPDX "
"2.3 license expression](https://spdx.github.io/spdx-spec/v2.3/SPDX-license-"
"expressions/). The name must be a known license from the [SPDX license list "
"3.20](https://github.com/spdx/license-list-data/tree/v3.20). See the [SPDX "
"site](https://spdx.org) for more information."
msgstr ""

#: src/reference/manifest.md:250
msgid ""
"SPDX license expressions support AND and OR operators to combine multiple "
"licenses.[^slash]"
msgstr ""

#: src/reference/manifest.md:253
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"license = \"MIT OR Apache-2.0\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:259
msgid ""
"Using `OR` indicates the user may choose either license. Using `AND` "
"indicates the user must comply with both licenses simultaneously. The `WITH` "
"operator indicates a license with a special exception. Some examples:"
msgstr ""

#: src/reference/manifest.md:263
msgid "`MIT OR Apache-2.0`"
msgstr ""

#: src/reference/manifest.md:264
msgid "`LGPL-2.1-only AND MIT AND BSD-2-Clause`"
msgstr ""

#: src/reference/manifest.md:265
msgid "`GPL-2.0-or-later WITH Bison-exception-2.2`"
msgstr ""

#: src/reference/manifest.md:267
msgid ""
"If a package is using a nonstandard license, then the `license-file` field "
"may be specified in lieu of the `license` field."
msgstr ""

#: src/reference/manifest.md:270
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"license-file = \"LICENSE.txt\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:276
msgid ""
"**Note**: [crates.io](https://crates.io/) requires either `license` or "
"`license-file` to be set."
msgstr ""

#: src/reference/manifest.md:278
msgid ""
"Previously multiple licenses could be separated with a `/`, but that usage "
"is deprecated."
msgstr ""

#: src/reference/manifest.md:281
msgid "The `keywords` field"
msgstr ""

#: src/reference/manifest.md:283
msgid ""
"The `keywords` field is an array of strings that describe this package. This "
"can help when searching for the package on a registry, and you may choose "
"any words that would help someone find this crate."
msgstr ""

#: src/reference/manifest.md:287
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"keywords = [\"gamedev\", \"graphics\"]\n"
"```"
msgstr ""

#: src/reference/manifest.md:293
msgid ""
"**Note**: [crates.io](https://crates.io/) allows a maximum of 5 keywords. "
"Each keyword must be ASCII text, have at most 20 characters, start with an "
"alphanumeric character, and only contain letters, numbers, `_`, `-` or `+`."
msgstr ""

#: src/reference/manifest.md:297
msgid "The `categories` field"
msgstr ""

#: src/reference/manifest.md:299
msgid ""
"The `categories` field is an array of strings of the categories this package "
"belongs to."
msgstr ""

#: src/reference/manifest.md:302
msgid ""
"```toml\n"
"categories = [\"command-line-utilities\", \"development-tools::cargo-"
"plugins\"]\n"
"```"
msgstr ""

#: src/reference/manifest.md:306
msgid ""
"**Note**: [crates.io](https://crates.io/) has a maximum of 5 categories. "
"Each category should match one of the strings available at <https://"
"crates.io/category_slugs>, and must match exactly."
msgstr ""

#: src/reference/manifest.md:310
msgid "The `workspace` field"
msgstr ""

#: src/reference/manifest.md:312
msgid ""
"The `workspace` field can be used to configure the workspace that this "
"package will be a member of. If not specified this will be inferred as the "
"first Cargo.toml with `[workspace]` upwards in the filesystem. Setting this "
"is useful if the member is not inside a subdirectory of the workspace root."
msgstr ""

#: src/reference/manifest.md:317
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"workspace = \"path/to/workspace/root\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:323
msgid ""
"This field cannot be specified if the manifest already has a `[workspace]` "
"table defined. That is, a crate cannot both be a root crate in a workspace "
"(contain `[workspace]`) and also be a member crate of another workspace "
"(contain `package.workspace`)."
msgstr ""

#: src/reference/manifest.md:328
msgid "For more information, see the [workspaces chapter](workspaces.md)."
msgstr ""

#: src/reference/manifest.md:330
msgid "The `build` field"
msgstr ""

#: src/reference/manifest.md:332
msgid ""
"The `build` field specifies a file in the package root which is a [build "
"script](build-scripts.md) for building native code. More information can be "
"found in the [build script guide](build-scripts.md)."
msgstr ""

#: src/reference/manifest.md:338
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"build = \"build.rs\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:344
msgid ""
"The default is `\"build.rs\"`, which loads the script from a file named "
"`build.rs` in the root of the package. Use `build = "
"\"custom_build_name.rs\"` to specify a path to a different file or `build = "
"false` to disable automatic detection of the build script."
msgstr ""

#: src/reference/manifest.md:349
msgid "The `links` field"
msgstr ""

#: src/reference/manifest.md:351
msgid ""
"The `links` field specifies the name of a native library that is being "
"linked to. More information can be found in the [`links`](build-"
"scripts.md#the-links-manifest-key) section of the build script guide."
msgstr ""

#: src/reference/manifest.md:357
msgid ""
"For example, a crate that links a native library called \"git2\" (e.g. "
"`libgit2.a` on Linux) may specify:"
msgstr ""

#: src/reference/manifest.md:360
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"links = \"git2\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:366
msgid "The `exclude` and `include` fields"
msgstr ""

#: src/reference/manifest.md:368
msgid ""
"The `exclude` and `include` fields can be used to explicitly specify which "
"files are included when packaging a project to be [published]"
"(publishing.md), and certain kinds of change tracking (described below). The "
"patterns specified in the `exclude` field identify a set of files that are "
"not included, and the patterns in `include` specify files that are "
"explicitly included. You may run [`cargo package --list`](../commands/cargo-"
"package.md) to verify which files will be included in the package."
msgstr ""

#: src/reference/manifest.md:377
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"exclude = [\"/ci\", \"images/\", \".*\"]\n"
"```"
msgstr ""

#: src/reference/manifest.md:383
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"include = [\"/src\", \"COPYRIGHT\", \"/examples\", \"!/examples/"
"big_example\"]\n"
"```"
msgstr ""

#: src/reference/manifest.md:389
msgid ""
"The default if neither field is specified is to include all files from the "
"root of the package, except for the exclusions listed below."
msgstr ""

#: src/reference/manifest.md:392
msgid ""
"If `include` is not specified, then the following files will be excluded:"
msgstr ""

#: src/reference/manifest.md:394
msgid ""
"If the package is not in a git repository, all \"hidden\" files starting "
"with a dot will be skipped."
msgstr ""

#: src/reference/manifest.md:396
msgid ""
"If the package is in a git repository, any files that are ignored by the "
"[gitignore](https://git-scm.com/docs/gitignore) rules of the repository and "
"global git configuration will be skipped."
msgstr ""

#: src/reference/manifest.md:400
msgid ""
"Regardless of whether `exclude` or `include` is specified, the following "
"files are always excluded:"
msgstr ""

#: src/reference/manifest.md:403
msgid ""
"Any sub-packages will be skipped (any subdirectory that contains a "
"`Cargo.toml` file)."
msgstr ""

#: src/reference/manifest.md:405
msgid "A directory named `target` in the root of the package will be skipped."
msgstr ""

#: src/reference/manifest.md:407
msgid "The following files are always included:"
msgstr ""

#: src/reference/manifest.md:409
msgid ""
"The `Cargo.toml` file of the package itself is always included, it does not "
"need to be listed in `include`."
msgstr ""

#: src/reference/manifest.md:411
msgid ""
"A minimized `Cargo.lock` is automatically included if the package contains a "
"binary or example target, see [`cargo package`](../commands/cargo-"
"package.md) for more information."
msgstr ""

#: src/reference/manifest.md:413
msgid ""
"If a [`license-file`](#the-license-and-license-file-fields) is specified, it "
"is always included."
msgstr ""

#: src/reference/manifest.md:416
msgid ""
"The options are mutually exclusive; setting `include` will override an "
"`exclude`. If you need to have exclusions to a set of `include` files, use "
"the `!` operator described below."
msgstr ""

#: src/reference/manifest.md:420
msgid ""
"The patterns should be [gitignore](https://git-scm.com/docs/gitignore)\\-"
"style patterns. Briefly:"
msgstr ""

#: src/reference/manifest.md:422
msgid ""
"`foo` matches any file or directory with the name `foo` anywhere in the "
"package. This is equivalent to the pattern `**/foo`."
msgstr ""

#: src/reference/manifest.md:424
msgid ""
"`/foo` matches any file or directory with the name `foo` only in the root of "
"the package."
msgstr ""

#: src/reference/manifest.md:426
msgid ""
"`foo/` matches any _directory_ with the name `foo` anywhere in the package."
msgstr ""

#: src/reference/manifest.md:427
msgid "Common glob patterns like `*`, `?`, and `[]` are supported:"
msgstr ""

#: src/reference/manifest.md:428
msgid ""
"`*` matches zero or more characters except `/`.  For example, `*.html` "
"matches any file or directory with the `.html` extension anywhere in the "
"package."
msgstr ""

#: src/reference/manifest.md:431
msgid ""
"`?` matches any character except `/`. For example, `foo?` matches `food`, "
"but not `foo`."
msgstr ""

#: src/reference/manifest.md:433
msgid ""
"`[]` allows for matching a range of characters. For example, `[ab]` matches "
"either `a` or `b`. `[a-z]` matches letters a through z."
msgstr ""

#: src/reference/manifest.md:435
msgid ""
"`**/` prefix matches in any directory. For example, `**/foo/bar` matches the "
"file or directory `bar` anywhere that is directly under directory `foo`."
msgstr ""

#: src/reference/manifest.md:437
msgid ""
"`/**` suffix matches everything inside. For example, `foo/**` matches all "
"files inside directory `foo`, including all files in subdirectories below "
"`foo`."
msgstr ""

#: src/reference/manifest.md:440
msgid ""
"`/**/` matches zero or more directories. For example, `a/**/b` matches `a/"
"b`, `a/x/b`, `a/x/y/b`, and so on."
msgstr ""

#: src/reference/manifest.md:442
msgid ""
"`!` prefix negates a pattern. For example, a pattern of `src/*.rs` and `!"
"foo.rs` would match all files with the `.rs` extension inside the `src` "
"directory, except for any file named `foo.rs`."
msgstr ""

#: src/reference/manifest.md:446
msgid ""
"The include/exclude list is also used for change tracking in some "
"situations. For targets built with `rustdoc`, it is used to determine the "
"list of files to track to determine if the target should be rebuilt. If the "
"package has a [build script](build-scripts.md) that does not emit any `rerun-"
"if-*` directives, then the include/exclude list is used for tracking if the "
"build script should be re-run if any of those files change."
msgstr ""

#: src/reference/manifest.md:455
msgid "The `publish` field"
msgstr ""

#: src/reference/manifest.md:457
msgid ""
"The `publish` field can be used to control which registries names the "
"package may be published to:"
msgstr ""

#: src/reference/manifest.md:459
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"publish = [\"some-registry-name\"]\n"
"```"
msgstr ""

#: src/reference/manifest.md:465
msgid ""
"To prevent a package from being published to a registry (like crates.io) by "
"mistake, for instance to keep a package private in a company, you can omit "
"the [`version`](#the-version-field) field. If you'd like to be more "
"explicit, you can disable publishing:"
msgstr ""

#: src/reference/manifest.md:475
msgid ""
"If publish array contains a single registry, `cargo publish` command will "
"use it when `--registry` flag is not specified."
msgstr ""

#: src/reference/manifest.md:478 src/reference/workspaces.md:264
msgid "The `metadata` table"
msgstr ""

#: src/reference/manifest.md:480
msgid ""
"Cargo by default will warn about unused keys in `Cargo.toml` to assist in "
"detecting typos and such. The `package.metadata` table, however, is "
"completely ignored by Cargo and will not be warned about. This section can "
"be used for tools which would like to store package configuration in "
"`Cargo.toml`. For example:"
msgstr ""

#: src/reference/manifest.md:486
msgid ""
"```toml\n"
"[package]\n"
"name = \"...\"\n"
"# ...\n"
"\n"
"# Metadata used when generating an Android APK, for example.\n"
"[package.metadata.android]\n"
"package-name = \"my-awesome-android-app\"\n"
"assets = \"path/to/static\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:497
msgid ""
"You'll need to look in the documentation for your tool to see how to use "
"this field. For Rust Projects that use `package.metadata` tables, see:"
msgstr ""

#: src/reference/manifest.md:499
msgid "[docs.rs](https://docs.rs/about/metadata)"
msgstr ""

#: src/reference/manifest.md:501
msgid ""
"There is a similar table at the workspace level at [`workspace.metadata`]"
"(workspaces.md#the-metadata-table). While cargo does not specify a format "
"for the content of either of these tables, it is suggested that external "
"tools may wish to use them in a consistent fashion, such as referring to the "
"data in `workspace.metadata` if data is missing from `package.metadata`, if "
"that makes sense for the tool in question."
msgstr ""

#: src/reference/manifest.md:510
msgid "The `default-run` field"
msgstr ""

#: src/reference/manifest.md:512
msgid ""
"The `default-run` field in the `[package]` section of the manifest can be "
"used to specify a default binary picked by [`cargo run`](../commands/cargo-"
"run.md). For example, when there is both `src/bin/a.rs` and `src/bin/b.rs`:"
msgstr ""

#: src/reference/manifest.md:516
msgid ""
"```toml\n"
"[package]\n"
"default-run = \"a\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:521
msgid "The `[lints]` section"
msgstr ""

#: src/reference/manifest.md:523
msgid ""
"Override the default level of lints from different tools by assigning them "
"to a new level in a table, for example:"
msgstr ""

#: src/reference/manifest.md:525
msgid ""
"```toml\n"
"[lints.rust]\n"
"unsafe_code = \"forbid\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:530
msgid "This is short-hand for:"
msgstr ""

#: src/reference/manifest.md:531
msgid ""
"```toml\n"
"[lints.rust]\n"
"unsafe_code = { level = \"forbid\", priority = 0 }\n"
"```"
msgstr ""

#: src/reference/manifest.md:536
msgid ""
"`level` corresponds to the [lint levels](https://doc.rust-lang.org/rustc/"
"lints/levels.html) in `rustc`:"
msgstr ""

#: src/reference/manifest.md:537
msgid "`forbid`"
msgstr ""

#: src/reference/manifest.md:538
msgid "`deny`"
msgstr ""

#: src/reference/manifest.md:539
msgid "`warn`"
msgstr ""

#: src/reference/manifest.md:540
msgid "`allow`"
msgstr ""

#: src/reference/manifest.md:542
msgid ""
"`priority` is a signed integer that controls which lints or lint groups "
"override other lint groups:"
msgstr ""

#: src/reference/manifest.md:543
msgid ""
"lower (particularly negative) numbers have lower priority, being overridden "
"by higher numbers, and show up first on the command-line to tools like "
"`rustc`"
msgstr ""

#: src/reference/manifest.md:547
msgid ""
"To know which table under `[lints]` a particular lint belongs under, it is "
"the part before `::` in the lint name.  If there isn't a `::`, then the tool "
"is `rust`.  For example a warning about `unsafe_code` would be "
"`lints.rust.unsafe_code` but a lint about `clippy::enum_glob_use` would be "
"`lints.clippy.enum_glob_use`."
msgstr ""

#: src/reference/manifest.md:552
msgid "For example:"
msgstr ""

#: src/reference/manifest.md:553
msgid ""
"```toml\n"
"[lints.rust]\n"
"unsafe_code = \"forbid\"\n"
"\n"
"[lints.clippy]\n"
"enum_glob_use = \"deny\"\n"
"```"
msgstr ""

#: src/reference/manifest.md:561
msgid ""
"Generally, these will only affect local development of the current package. "
"Cargo only applies these to the current package and not to dependencies. As "
"for dependents, Cargo suppresses lints from non-path dependencies with "
"features like [`--cap-lints`](../../rustc/lints/levels.html#capping-lints)."
msgstr ""

#: src/reference/manifest.md:566 src/reference/workspaces.md:262
msgid "**MSRV:** Respected as of 1.74"
msgstr ""

#: src/reference/manifest.md:568
msgid "The `[badges]` section"
msgstr ""

#: src/reference/manifest.md:570
msgid ""
"The `[badges]` section is for specifying status badges that can be displayed "
"on a registry website when the package is published."
msgstr ""

#: src/reference/manifest.md:573
msgid ""
"Note: [crates.io](https://crates.io/) previously displayed badges next to a "
"crate on its website, but that functionality has been removed. Packages "
"should place badges in its README file which will be displayed on [crates.io]"
"(https://crates.io/) (see [the `readme` field](#the-readme-field))."
msgstr ""

#: src/reference/manifest.md:578
msgid ""
"```toml\n"
"[badges]\n"
"# The `maintenance` table indicates the status of the maintenance of\n"
"# the crate. This may be used by a registry, but is currently not\n"
"# used by crates.io. See https://github.com/rust-lang/crates.io/issues/2437\n"
"# and https://github.com/rust-lang/crates.io/issues/2438 for more details.\n"
"#\n"
"# The `status` field is required. Available options are:\n"
"# - `actively-developed`: New features are being added and bugs are being "
"fixed.\n"
"# - `passively-maintained`: There are no plans for new features, but the "
"maintainer intends to\n"
"#   respond to issues that get filed.\n"
"# - `as-is`: The crate is feature complete, the maintainer does not intend "
"to continue working on\n"
"#   it or providing support, but it works for the purposes it was designed "
"for.\n"
"# - `experimental`: The author wants to share it with the community but is "
"not intending to meet\n"
"#   anyone's particular use case.\n"
"# - `looking-for-maintainer`: The current maintainer would like to transfer "
"the crate to someone\n"
"#   else.\n"
"# - `deprecated`: The maintainer does not recommend using this crate (the "
"description of the crate\n"
"#   can describe why, there could be a better solution available or there "
"could be problems with\n"
"#   the crate that the author does not want to fix).\n"
"# - `none`: Displays no badge on crates.io, since the maintainer has not "
"chosen to specify\n"
"#   their intentions, potential crate users will need to investigate on "
"their own.\n"
"maintenance = { status = \"...\" }\n"
"```"
msgstr ""

#: src/reference/manifest.md:603
msgid "Dependency sections"
msgstr ""

#: src/reference/manifest.md:605
msgid ""
"See the [specifying dependencies page](specifying-dependencies.md) for "
"information on the `[dependencies]`, `[dev-dependencies]`, `[build-"
"dependencies]`, and target-specific `[target.*.dependencies]` sections."
msgstr ""

#: src/reference/manifest.md:609
msgid "The `[profile.*]` sections"
msgstr ""

#: src/reference/manifest.md:611
msgid ""
"The `[profile]` tables provide a way to customize compiler settings such as "
"optimizations and debug settings. See [the Profiles chapter](profiles.md) "
"for more detail."
msgstr ""

#: src/reference/cargo-targets.md:3
msgid ""
"Cargo packages consist of _targets_ which correspond to source files which "
"can be compiled into a crate. Packages can have [library](#library), [binary]"
"(#binaries), [example](#examples), [test](#tests), and [benchmark]"
"(#benchmarks) targets. The list of targets can be configured in the "
"`Cargo.toml` manifest, often [inferred automatically](#target-auto-"
"discovery) by the [directory layout](../guide/project-layout.md) of the "
"source files."
msgstr ""

#: src/reference/cargo-targets.md:10
msgid ""
"See [Configuring a target](#configuring-a-target) below for details on "
"configuring the settings for a target."
msgstr ""

#: src/reference/cargo-targets.md:13
msgid "Library"
msgstr ""

#: src/reference/cargo-targets.md:15
msgid ""
"The library target defines a \"library\" that can be used and linked by "
"other libraries and executables. The filename defaults to `src/lib.rs`, and "
"the name of the library defaults to the name of the package, with any dashes "
"replaced with underscores. A package can have only one library. The settings "
"for the library can be [customized](#configuring-a-target) in the `[lib]` "
"table in `Cargo.toml`."
msgstr ""

#: src/reference/cargo-targets.md:21
msgid ""
"```toml\n"
"# Example of customizing the library in Cargo.toml.\n"
"[lib]\n"
"crate-type = [\"cdylib\"]\n"
"bench = false\n"
"```"
msgstr ""

#: src/reference/cargo-targets.md:28
msgid "Binaries"
msgstr ""

#: src/reference/cargo-targets.md:30
msgid ""
"Binary targets are executable programs that can be run after being compiled. "
"A binary's source can be `src/main.rs` and/or stored in the [`src/bin/` "
"directory](../guide/project-layout.md). For `src/main.rs`, the default "
"binary name is the package name. The settings for each binary can be "
"[customized](#configuring-a-target) in the`[[bin]]` tables in `Cargo.toml`."
msgstr ""

#: src/reference/cargo-targets.md:36
msgid ""
"Binaries can use the public API of the package's library. They are also "
"linked with the [`[dependencies]`](specifying-dependencies.md) defined in "
"`Cargo.toml`."
msgstr ""

#: src/reference/cargo-targets.md:39
msgid ""
"You can run individual binaries with the [`cargo run`](../commands/cargo-"
"run.md) command with the `--bin <bin-name>` option. [`cargo install`](../"
"commands/cargo-install.md) can be used to copy the executable to a common "
"location."
msgstr ""

#: src/reference/cargo-targets.md:43
msgid ""
"```toml\n"
"# Example of customizing binaries in Cargo.toml.\n"
"[[bin]]\n"
"name = \"cool-tool\"\n"
"test = false\n"
"bench = false\n"
"\n"
"[[bin]]\n"
"name = \"frobnicator\"\n"
"required-features = [\"frobnicate\"]\n"
"```"
msgstr ""

#: src/reference/cargo-targets.md:55
msgid "Examples"
msgstr ""

#: src/reference/cargo-targets.md:57
msgid ""
"Files located under the [`examples` directory](../guide/project-layout.md) "
"are example uses of the functionality provided by the library. When "
"compiled, they are placed in the [`target/debug/examples` directory](build-"
"cache.md)."
msgstr ""

#: src/reference/cargo-targets.md:61
msgid ""
"Examples can use the public API of the package's library. They are also "
"linked with the [`[dependencies]`](specifying-dependencies.md) and [`[dev-"
"dependencies]`](specifying-dependencies.md#development-dependencies) defined "
"in `Cargo.toml`."
msgstr ""

#: src/reference/cargo-targets.md:65
msgid ""
"By default, examples are executable binaries (with a `main()` function). You "
"can specify the [`crate-type` field](#the-crate-type-field) to make an "
"example be compiled as a library:"
msgstr ""

#: src/reference/cargo-targets.md:69
msgid ""
"```toml\n"
"[[example]]\n"
"name = \"foo\"\n"
"crate-type = [\"staticlib\"]\n"
"```"
msgstr ""

#: src/reference/cargo-targets.md:75
msgid ""
"You can run individual executable examples with the [`cargo run`](../"
"commands/cargo-run.md) command with the `--example <example-name>` option. "
"Library examples can be built with [`cargo build`](../commands/cargo-"
"build.md) with the `--example <example-name>` option. [`cargo install`](../"
"commands/cargo-install.md) with the `--example <example-name>` option can be "
"used to copy executable binaries to a common location. Examples are compiled "
"by [`cargo test`](../commands/cargo-test.md) by default to protect them from "
"bit-rotting. Set [the `test` field](#the-test-field) to `true` if you have "
"`#[test]` functions in the example that you want to run with [`cargo test`]"
"(../commands/cargo-test.md)."
msgstr ""

#: src/reference/cargo-targets.md:86
msgid "There are two styles of tests within a Cargo project:"
msgstr ""

#: src/reference/cargo-targets.md:88
msgid ""
"_Unit tests_ which are functions marked with the [`#[test]` attribute](../../"
"reference/attributes/testing.html#the-test-attribute) located within your "
"library or binaries (or any target enabled with [the `test` field](#the-test-"
"field)). These tests have access to private APIs located within the target "
"they are defined in."
msgstr ""

#: src/reference/cargo-targets.md:92
msgid ""
"_Integration tests_ which is a separate executable binary, also containing "
"`#[test]` functions, which is linked with the project's library and has "
"access to its _public_ API."
msgstr ""

#: src/reference/cargo-targets.md:96
msgid ""
"Tests are run with the [`cargo test`](../commands/cargo-test.md) command. By "
"default, Cargo and `rustc` use the [libtest harness](../../rustc/tests/"
"index.html) which is responsible for collecting functions annotated with the "
"[`#[test]` attribute](../../reference/attributes/testing.html#the-test-"
"attribute) and executing them in parallel, reporting the success and failure "
"of each test. See [the `harness` field](#the-harness-field) if you want to "
"use a different harness or test strategy."
msgstr ""

#: src/reference/cargo-targets.md:103
msgid ""
"**Note**: There is another special style of test in Cargo: [documentation "
"tests](../../rustdoc/documentation-tests.html). They are handled by "
"`rustdoc` and have a slightly different execution model. For more "
"information, please see [`cargo test`](../commands/cargo-"
"test.md#documentation-tests)."
msgstr ""

#: src/reference/cargo-targets.md:111
msgid "Integration tests"
msgstr ""

#: src/reference/cargo-targets.md:113
msgid ""
"Files located under the [`tests` directory](../guide/project-layout.md) are "
"integration tests. When you run [`cargo test`](../commands/cargo-test.md), "
"Cargo will compile each of these files as a separate crate, and execute them."
msgstr ""

#: src/reference/cargo-targets.md:117
msgid ""
"Integration tests can use the public API of the package's library. They are "
"also linked with the [`[dependencies]`](specifying-dependencies.md) and "
"[`[dev-dependencies]`](specifying-dependencies.md#development-dependencies) "
"defined in `Cargo.toml`."
msgstr ""

#: src/reference/cargo-targets.md:121
msgid ""
"If you want to share code among multiple integration tests, you can place it "
"in a separate module such as `tests/common/mod.rs` and then put `mod "
"common;` in each test to import it."
msgstr ""

#: src/reference/cargo-targets.md:125
msgid ""
"Each integration test results in a separate executable binary, and [`cargo "
"test`](../commands/cargo-test.md) will run them serially. In some cases this "
"can be inefficient, as it can take longer to compile, and may not make full "
"use of multiple CPUs when running the tests. If you have a lot of "
"integration tests, you may want to consider creating a single integration "
"test, and split the tests into multiple modules. The libtest harness will "
"automatically find all of the `#[test]` annotated functions and run them in "
"parallel. You can pass module names to [`cargo test`](../commands/cargo-"
"test.md) to only run the tests within that module."
msgstr ""

#: src/reference/cargo-targets.md:134
msgid ""
"Binary targets are automatically built if there is an integration test. This "
"allows an integration test to execute the binary to exercise and test its "
"behavior. The `CARGO_BIN_EXE_<name>` [environment variable](environment-"
"variables.md#environment-variables-cargo-sets-for-crates) is set when the "
"integration test is built so that it can use the [`env` macro](../../std/"
"macro.env.html) to locate the executable."
msgstr ""

#: src/reference/cargo-targets.md:143
msgid "Benchmarks"
msgstr ""

#: src/reference/cargo-targets.md:145
msgid ""
"Benchmarks provide a way to test the performance of your code using the "
"[`cargo bench`](../commands/cargo-bench.md) command. They follow the same "
"structure as [tests](#tests), with each benchmark function annotated with "
"the `#[bench]` attribute. Similarly to tests:"
msgstr ""

#: src/reference/cargo-targets.md:150
msgid ""
"Benchmarks are placed in the [`benches` directory](../guide/project-"
"layout.md)."
msgstr ""

#: src/reference/cargo-targets.md:151
msgid ""
"Benchmark functions defined in libraries and binaries have access to the "
"_private_ API within the target they are defined in. Benchmarks in the "
"`benches` directory may use the _public_ API."
msgstr ""

#: src/reference/cargo-targets.md:154
msgid ""
"[The `bench` field](#the-bench-field) can be used to define which targets "
"are benchmarked by default."
msgstr ""

#: src/reference/cargo-targets.md:156
msgid ""
"[The `harness` field](#the-harness-field) can be used to disable the built-"
"in harness."
msgstr ""

#: src/reference/cargo-targets.md:159
msgid ""
"**Note**: The [`#[bench]` attribute](../../unstable-book/library-features/"
"test.html) is currently unstable and only available on the [nightly channel]"
"(../../book/appendix-07-nightly-rust.html). There are some packages "
"available on [crates.io](https://crates.io/keywords/benchmark) that may help "
"with running benchmarks on the stable channel, such as [Criterion](https://"
"crates.io/crates/criterion)."
msgstr ""

#: src/reference/cargo-targets.md:166
msgid "Configuring a target"
msgstr ""

#: src/reference/cargo-targets.md:168
msgid ""
"All of the  `[lib]`, `[[bin]]`, `[[example]]`, `[[test]]`, and `[[bench]]` "
"sections in `Cargo.toml` support similar configuration for specifying how a "
"target should be built. The double-bracket sections like `[[bin]]` are "
"[array-of-table of TOML](https://toml.io/en/v1.0.0-rc.3#array-of-tables), "
"which means you can write more than one `[[bin]]` section to make several "
"executables in your crate. You can only specify one library, so `[lib]` is a "
"normal TOML table."
msgstr ""

#: src/reference/cargo-targets.md:176
msgid ""
"The following is an overview of the TOML settings for each target, with each "
"field described in detail below."
msgstr ""

#: src/reference/cargo-targets.md:179
msgid ""
"```toml\n"
"[lib]\n"
"name = \"foo\"           # The name of the target.\n"
"path = \"src/lib.rs\"    # The source file of the target.\n"
"test = true            # Is tested by default.\n"
"doctest = true         # Documentation examples are tested by default.\n"
"bench = true           # Is benchmarked by default.\n"
"doc = true             # Is documented by default.\n"
"proc-macro = false     # Set to `true` for a proc-macro library.\n"
"harness = true         # Use libtest harness.\n"
"edition = \"2015\"       # The edition of the target.\n"
"crate-type = [\"lib\"]   # The crate types to generate.\n"
"required-features = [] # Features required to build this target (N/A for "
"lib).\n"
"```"
msgstr ""

#: src/reference/cargo-targets.md:196
msgid ""
"The `name` field specifies the name of the target, which corresponds to the "
"filename of the artifact that will be generated. For a library, this is the "
"crate name that dependencies will use to reference it."
msgstr ""

#: src/reference/cargo-targets.md:200
msgid ""
"For the library target, this defaults to the name of the package , with any "
"dashes replaced with underscores. For the default binary (`src/main.rs`), it "
"also defaults to the name of the package, with no replacement for dashes. "
"For [auto discovered](#target-auto-discovery) targets, it defaults to the "
"directory or file name."
msgstr ""

#: src/reference/cargo-targets.md:206
msgid "This is required for all targets except `[lib]`."
msgstr ""

#: src/reference/cargo-targets.md:208
msgid "The `path` field"
msgstr ""

#: src/reference/cargo-targets.md:210
msgid ""
"The `path` field specifies where the source for the crate is located, "
"relative to the `Cargo.toml` file."
msgstr ""

#: src/reference/cargo-targets.md:213
msgid ""
"If not specified, the [inferred path](#target-auto-discovery) is used based "
"on the target name."
msgstr ""

#: src/reference/cargo-targets.md:216
msgid "The `test` field"
msgstr ""

#: src/reference/cargo-targets.md:218
msgid ""
"The `test` field indicates whether or not the target is tested by default by "
"[`cargo test`](../commands/cargo-test.md). The default is `true` for lib, "
"bins, and tests."
msgstr ""

#: src/reference/cargo-targets.md:221
msgid ""
"**Note**: Examples are built by [`cargo test`](../commands/cargo-test.md) by "
"default to ensure they continue to compile, but they are not _tested_ by "
"default. Setting `test = true` for an example will also build it as a test "
"and run any [`#[test]`](../../reference/attributes/testing.html#the-test-"
"attribute) functions defined in the example."
msgstr ""

#: src/reference/cargo-targets.md:226
msgid "The `doctest` field"
msgstr ""

#: src/reference/cargo-targets.md:228
msgid ""
"The `doctest` field indicates whether or not [documentation examples](../../"
"rustdoc/documentation-tests.html) are tested by default by [`cargo test`](../"
"commands/cargo-test.md). This is only relevant for libraries, it has no "
"effect on other sections. The default is `true` for the library."
msgstr ""

#: src/reference/cargo-targets.md:232
msgid "The `bench` field"
msgstr ""

#: src/reference/cargo-targets.md:234
msgid ""
"The `bench` field indicates whether or not the target is benchmarked by "
"default by [`cargo bench`](../commands/cargo-bench.md). The default is "
"`true` for lib, bins, and benchmarks."
msgstr ""

#: src/reference/cargo-targets.md:238
msgid "The `doc` field"
msgstr ""

#: src/reference/cargo-targets.md:240
msgid ""
"The `doc` field indicates whether or not the target is included in the "
"documentation generated by [`cargo doc`](../commands/cargo-doc.md) by "
"default. The default is `true` for libraries and binaries."
msgstr ""

#: src/reference/cargo-targets.md:244
msgid ""
"**Note**: The binary will be skipped if its name is the same as the lib "
"target."
msgstr ""

#: src/reference/cargo-targets.md:247
msgid "The `plugin` field"
msgstr ""

#: src/reference/cargo-targets.md:249 src/reference/config.md:612
#: src/reference/config.md:616 src/reference/config.md:1215
msgid "This option is deprecated and unused."
msgstr ""

#: src/reference/cargo-targets.md:251
msgid "The `proc-macro` field"
msgstr ""

#: src/reference/cargo-targets.md:253
msgid ""
"The `proc-macro` field indicates that the library is a [procedural macro]"
"(../../book/ch19-06-macros.html) ([reference](../../reference/procedural-"
"macros.html)). This is only valid for the `[lib]` target."
msgstr ""

#: src/reference/cargo-targets.md:257
msgid "The `harness` field"
msgstr ""

#: src/reference/cargo-targets.md:259
msgid ""
"The `harness` field indicates that the [`--test` flag](../../rustc/command-"
"line-arguments.html#option-test) will be passed to `rustc` which will "
"automatically include the libtest library which is the driver for collecting "
"and running tests marked with the [`#[test]` attribute](../../reference/"
"attributes/testing.html#the-test-attribute) or benchmarks with the "
"`#[bench]` attribute. The default is `true` for all targets."
msgstr ""

#: src/reference/cargo-targets.md:265
msgid ""
"If set to `false`, then you are responsible for defining a `main()` function "
"to run tests and benchmarks."
msgstr ""

#: src/reference/cargo-targets.md:268
msgid ""
"Tests have the [`cfg(test)` conditional expression](../../reference/"
"conditional-compilation.html#test) enabled whether or not the harness is "
"enabled."
msgstr ""

#: src/reference/cargo-targets.md:273
msgid ""
"The `edition` field defines the [Rust edition](../../edition-guide/"
"index.html) the target will use. If not specified, it defaults to the "
"[`edition` field](manifest.md#the-edition-field) for the `[package]`. This "
"field should usually not be set, and is only intended for advanced scenarios "
"such as incrementally transitioning a large package to a new edition."
msgstr ""

#: src/reference/cargo-targets.md:279
msgid "The `crate-type` field"
msgstr ""

#: src/reference/cargo-targets.md:281
msgid ""
"The `crate-type` field defines the [crate types](../../reference/"
"linkage.html) that will be generated by the target. It is an array of "
"strings, allowing you to specify multiple crate types for a single target. "
"This can only be specified for libraries and examples. Binaries, tests, and "
"benchmarks are always the \"bin\" crate type. The defaults are:"
msgstr ""

#: src/reference/cargo-targets.md:287 src/appendix/glossary.md:181
msgid "Target"
msgstr ""

#: src/reference/cargo-targets.md:287
msgid "Crate Type"
msgstr ""

#: src/reference/cargo-targets.md:289
msgid "Normal library"
msgstr ""

#: src/reference/cargo-targets.md:289
msgid "`\"lib\"`"
msgstr ""

#: src/reference/cargo-targets.md:290
msgid "Proc-macro library"
msgstr ""

#: src/reference/cargo-targets.md:290
msgid "`\"proc-macro\"`"
msgstr ""

#: src/reference/cargo-targets.md:291 src/reference/build-cache.md:29
#: src/reference/lints.md:22
msgid "Example"
msgstr ""

#: src/reference/cargo-targets.md:291
msgid "`\"bin\"`"
msgstr ""

#: src/reference/cargo-targets.md:293
msgid ""
"The available options are `bin`, `lib`, `rlib`, `dylib`, `cdylib`, "
"`staticlib`, and `proc-macro`. You can read more about the different crate "
"types in the [Rust Reference Manual](../../reference/linkage.html)."
msgstr ""

#: src/reference/cargo-targets.md:297
msgid "The `required-features` field"
msgstr ""

#: src/reference/cargo-targets.md:299
msgid ""
"The `required-features` field specifies which [features](features.md) the "
"target needs in order to be built. If any of the required features are not "
"enabled, the target will be skipped. This is only relevant for the "
"`[[bin]]`, `[[bench]]`, `[[test]]`, and `[[example]]` sections, it has no "
"effect on `[lib]`."
msgstr ""

#: src/reference/cargo-targets.md:304
msgid ""
"```toml\n"
"[features]\n"
"# ...\n"
"postgres = []\n"
"sqlite = []\n"
"tools = []\n"
"\n"
"[[bin]]\n"
"name = \"my-pg-tool\"\n"
"required-features = [\"postgres\", \"tools\"]\n"
"```"
msgstr ""

#: src/reference/cargo-targets.md:317
msgid "Target auto-discovery"
msgstr ""

#: src/reference/cargo-targets.md:319
msgid ""
"By default, Cargo automatically determines the targets to build based on the "
"[layout of the files](../guide/project-layout.md) on the filesystem. The "
"target configuration tables, such as `[lib]`, `[[bin]]`, `[[test]]`, "
"`[[bench]]`, or `[[example]]`, can be used to add additional targets that "
"don't follow the standard directory layout."
msgstr ""

#: src/reference/cargo-targets.md:325
msgid ""
"The automatic target discovery can be disabled so that only manually "
"configured targets will be built. Setting the keys `autolib`, `autobins`, "
"`autoexamples`, `autotests`, or `autobenches` to `false` in the `[package]` "
"section will disable auto-discovery of the corresponding target type."
msgstr ""

#: src/reference/cargo-targets.md:340
msgid ""
"Disabling automatic discovery should only be needed for specialized "
"situations. For example, if you have a library where you want a _module_ "
"named `bin`, this would present a problem because Cargo would usually "
"attempt to compile anything in the `bin` directory as an executable. Here is "
"a sample layout of this scenario:"
msgstr ""

#: src/reference/cargo-targets.md:354
msgid ""
"To prevent Cargo from inferring `src/bin/mod.rs` as an executable, set "
"`autobins = false` in `Cargo.toml` to disable auto-discovery:"
msgstr ""

#: src/reference/cargo-targets.md:363
msgid ""
"**Note**: For packages with the 2015 edition, the default for auto-discovery "
"is `false` if at least one target is manually defined in `Cargo.toml`. "
"Beginning with the 2018 edition, the default is always `true`."
msgstr ""

#: src/reference/cargo-targets.md:367
msgid ""
"**MSRV:** Respected as of 1.27 for `autobins`, `autoexamples`, `autotests`, "
"and `autobenches`"
msgstr ""

#: src/reference/cargo-targets.md:369
msgid "**MSRV:** Respected as of 1.83 for `autolib`"
msgstr ""

#: src/reference/rust-version.md:1
msgid "Rust Version"
msgstr ""

#: src/reference/rust-version.md:3
msgid ""
"The `rust-version` field is an optional key that tells cargo what version of "
"the Rust toolchain you support for your package."
msgstr ""

#: src/reference/rust-version.md:6
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"rust-version = \"1.56\"\n"
"```"
msgstr ""

#: src/reference/rust-version.md:12
msgid ""
"The Rust version must be a bare version number with at least one component; "
"it cannot include semver operators or pre-release identifiers. Compiler pre-"
"release identifiers such as -nightly will be ignored while checking the Rust "
"version."
msgstr ""

#: src/reference/rust-version.md:16
msgid "**MSRV:** Respected as of 1.56"
msgstr ""

#: src/reference/rust-version.md:18
msgid "Uses"
msgstr ""

#: src/reference/rust-version.md:20
msgid "**Diagnostics:**"
msgstr ""

#: src/reference/rust-version.md:22
msgid ""
"When your package is compiled on an unsupported toolchain, Cargo will "
"provide clearer diagnostics about the insufficient toolchain version rather "
"than reporting invalid syntax or missing functionality in the standard "
"library. This affects all [Cargo targets](cargo-targets.md) in the package, "
"including binaries, examples, test suites, benchmarks, etc."
msgstr ""

#: src/reference/rust-version.md:27
msgid "**Development aid:**"
msgstr ""

#: src/reference/rust-version.md:29
msgid ""
"`cargo add` will auto-select the dependency's version requirement to be the "
"latest version compatible with your `rust-version`. If that isn't the latest "
"version, `cargo add` will inform users so they can make the choice on "
"whether to keep it or update your `rust-version`."
msgstr ""

#: src/reference/rust-version.md:32
msgid ""
"The [resolver](resolver.md#rust-version) may take Rust version into account "
"when picking dependencies."
msgstr ""

#: src/reference/rust-version.md:34
msgid ""
"Other tools may also take advantage of it, like `cargo clippy`'s "
"[`incompatible_msrv` lint](https://rust-lang.github.io/rust-clippy/stable/"
"index.html#/incompatible_msrv)."
msgstr ""

#: src/reference/rust-version.md:37
msgid ""
"**Note:** The `rust-version` may be ignored using the `--ignore-rust-"
"version` option."
msgstr ""

#: src/reference/rust-version.md:39
msgid "Support Expectations"
msgstr ""

#: src/reference/rust-version.md:41
msgid ""
"These are general expectations; some packages may document when they do not "
"follow these."
msgstr ""

#: src/reference/rust-version.md:43
msgid "**Complete:**"
msgstr ""

#: src/reference/rust-version.md:45
msgid ""
"All functionality, including binaries and API, are available on the "
"supported Rust versions under every [feature](features.md)."
msgstr ""

#: src/reference/rust-version.md:47
msgid "**Verified:**"
msgstr ""

#: src/reference/rust-version.md:49
msgid ""
"A package's functionality is verified on its supported Rust versions, "
"including automated testing. See also our [Rust version CI guide](../guide/"
"continuous-integration.md#verifying-rust-version)."
msgstr ""

#: src/reference/rust-version.md:53
msgid "**Patchable:**"
msgstr ""

#: src/reference/rust-version.md:55
msgid ""
"When licenses allow it, users can [override their local dependency]"
"(overriding-dependencies.md) with a fork of your package. In this situation, "
"Cargo may load the entire workspace for the patched dependency which should "
"work on the supported Rust versions, even if other packages in the workspace "
"have different supported Rust versions."
msgstr ""

#: src/reference/rust-version.md:59
msgid "**Dependency Support:**"
msgstr ""

#: src/reference/rust-version.md:61
msgid ""
"In support of the above, it is expected that each dependency's version-"
"requirement supports at least one version compatible with your `rust-"
"version`. However, it is **not** expected that the dependency specification "
"excludes versions incompatible with your `rust-version`. In fact, supporting "
"both allows you to balance the needs of users that support older Rust "
"versions with those that don't."
msgstr ""

#: src/reference/rust-version.md:67
msgid "Setting and Updating Rust Version"
msgstr ""

#: src/reference/rust-version.md:69
msgid "What Rust versions to support is a trade off between"
msgstr ""

#: src/reference/rust-version.md:70
msgid ""
"Costs for the maintainer in not using newer features of the Rust toolchain "
"or their dependencies"
msgstr ""

#: src/reference/rust-version.md:71
msgid ""
"Costs to users who would benefit from a package using newer features of a "
"toolchain, e.g. reducing build times by migrating to a feature in the "
"standard library from a polyfill"
msgstr ""

#: src/reference/rust-version.md:72
msgid "Availability of a package to users supporting older Rust versions"
msgstr ""

#: src/reference/rust-version.md:74
msgid ""
"**Note:** [Changing `rust-version`](semver.md#env-new-rust) is assumed to be "
"a minor incompatibility"
msgstr ""

#: src/reference/rust-version.md:76
msgid ""
"**Recommendation:** Choose a policy for what Rust versions to support and "
"when that is changed so users can compare it with their own policy and, if "
"it isn't compatible, decide whether the loss of general improvements or the "
"risk of a blocking bug that won't be fixed is acceptable or not."
msgstr ""

#: src/reference/rust-version.md:80
msgid ""
"The simplest policy to support is to always use the latest Rust version."
msgstr ""

#: src/reference/rust-version.md:82
msgid ""
"Depending on your risk profile, the next simplest approach is to continue to "
"support old major or minor versions of your package that support older Rust "
"versions."
msgstr ""

#: src/reference/rust-version.md:84
msgid "Selecting supported Rust versions"
msgstr ""

#: src/reference/rust-version.md:86
msgid ""
"Users of your package are most likely to track their supported Rust versions "
"to:"
msgstr ""

#: src/reference/rust-version.md:87
msgid ""
"Their Rust toolchain vendor's support policy, e.g. The Rust Project or a "
"Linux distribution"
msgstr ""

#: src/reference/rust-version.md:88
msgid ""
"Note: the Rust Project only offers bug fixes and security updates for the "
"latest version."
msgstr ""

#: src/reference/rust-version.md:89
msgid ""
"A fixed schedule for users to re-verify their packages with the new "
"toolchain, e.g. the first release of the year, every 5 releases."
msgstr ""

#: src/reference/rust-version.md:91
msgid ""
"In addition, users are unlikely to be using the new Rust version immediately "
"but need time to notice and re-verify or might not be aligned on the exact "
"same schedule.."
msgstr ""

#: src/reference/rust-version.md:93
msgid "Example version policies:"
msgstr ""

#: src/reference/rust-version.md:94
msgid ""
"\"N-2\", meaning \"latest version with a 2 release grace window for "
"updating\""
msgstr ""

#: src/reference/rust-version.md:95
msgid "Every even release with a 2 release grace window for updating"
msgstr ""

#: src/reference/rust-version.md:96
msgid ""
"Every version from this calendar year with a one year grace window for "
"updating"
msgstr ""

#: src/reference/rust-version.md:98
msgid ""
"**Note:** To find the minimum `rust-version` compatible with your project as-"
"is, you can use third-party tools like [`cargo-msrv`](https://crates.io/"
"crates/cargo-msrv)."
msgstr ""

#: src/reference/rust-version.md:100
msgid "Update timeline"
msgstr ""

#: src/reference/rust-version.md:102
msgid ""
"When your policy specifies you no longer need to support a Rust version, you "
"can update `rust-version` immediately or when needed."
msgstr ""

#: src/reference/rust-version.md:104
msgid ""
"By allowing `rust-version` to drift from your policy, you offer users more "
"of a grace window for upgrading. However, this is too unpredictable to be "
"relied on for aligning with the Rust version users track."
msgstr ""

#: src/reference/rust-version.md:108
msgid ""
"The further `rust-version` drifts from your specified policy, the more "
"likely users are to infer a policy you did not intend, leading to "
"frustration at the unmet expectations."
msgstr ""

#: src/reference/rust-version.md:112
msgid ""
"When drift is allowed, there is the question of what is \"justifiable "
"enough\" to drop supported Versions. Each person can come to a reasonably "
"different justification; working through that discussion can be frustrating "
"for the involved parties. This will disempower those who would want to avoid "
"that type of conflict, which is particularly the case for new or casual "
"contributors who either feel that they are not in a position to raise the "
"question or that the conflict may hurt the chance of their change being "
"merged."
msgstr ""

#: src/reference/rust-version.md:121
msgid "Multiple Policies in a Workspace"
msgstr ""

#: src/reference/rust-version.md:123
msgid "Cargo allows supporting multiple policies within one workspace."
msgstr ""

#: src/reference/rust-version.md:125
msgid ""
"Verifying specific packages under specific Rust versions can get "
"complicated. Tools like [`cargo-hack`](https://crates.io/crates/cargo-hack) "
"can help."
msgstr ""

#: src/reference/rust-version.md:128
msgid ""
"For any dependency shared across policies, the lowest common versions must "
"be used as Cargo [unifies SemVer-compatible versions](resolver.md#semver-"
"compatibility), potentially limiting access to features of the shared "
"dependency for the workspace member with the higher `rust-version`."
msgstr ""

#: src/reference/rust-version.md:133
msgid ""
"To allow users to patch a dependency on one of your workspace members, every "
"package in the workspace would need to be loadable in the oldest Rust "
"version supported by the workspace."
msgstr ""

#: src/reference/rust-version.md:136
msgid ""
"When using [`incompatible-rust-versions = \"fallback\"`]"
"(config.md#resolverincompatible-rust-versions), the Rust version of one "
"package can affect dependency versions selected for another package with a "
"different Rust version. See the [resolver](resolver.md#rust-version) chapter "
"for more details."
msgstr ""

#: src/reference/rust-version.md:140
msgid "One or More Policies"
msgstr ""

#: src/reference/rust-version.md:142
msgid ""
"One way to mitigate the downsides of supporting older Rust versions is to "
"apply your policy to older major or minor versions of your package that you "
"continue to support. You likely still need a policy for what Rust versions "
"the development branch support compared to the release branches for those "
"major or minor versions."
msgstr ""

#: src/reference/rust-version.md:145
msgid ""
"Only updating the development branch when \"needed\"' can help reduce the "
"number of supported release branches."
msgstr ""

#: src/reference/rust-version.md:147
msgid ""
"There is the question of what can be backported into these release branches. "
"By backporting new functionality between minor versions, the next available "
"version would be missing it which could be considered a breaking change, "
"violating SemVer. Backporting changes also comes with the risk of "
"introducing bugs."
msgstr ""

#: src/reference/rust-version.md:152
msgid ""
"Supporting older versions comes at a cost. This cost is dependent on the "
"risk and impact of bugs within the package and what is acceptable for "
"backporting. Creating the release branches on-demand and putting the "
"backport burden on the community are ways to balance this cost."
msgstr ""

#: src/reference/rust-version.md:156
msgid ""
"There is not yet a way for dependency management tools to report that a non-"
"latest version is still supported, shifting the responsibility to users to "
"notice this in documentation."
msgstr ""

#: src/reference/rust-version.md:159
msgid "For example, a Rust version support policy could look like:"
msgstr ""

#: src/reference/rust-version.md:160
msgid ""
"The development branch tracks to the latest stable release from the Rust "
"Project, updated when needed"
msgstr ""

#: src/reference/rust-version.md:161
msgid "The minor version will be raised when changing `rust-version`"
msgstr ""

#: src/reference/rust-version.md:162
msgid ""
"The project supports every version for this calendar year, with another year "
"grace window"
msgstr ""

#: src/reference/rust-version.md:163
msgid ""
"The last minor version that supports a supported Rust version will receive "
"community provided bug fixes"
msgstr ""

#: src/reference/rust-version.md:164
msgid ""
"Fixes must be backported to all supported minor releases between the "
"development branch and the needed supported Rust version"
msgstr ""

#: src/reference/workspaces.md:3
msgid ""
"A _workspace_ is a collection of one or more packages, called _workspace "
"members_, that are managed together."
msgstr ""

#: src/reference/workspaces.md:6
msgid "The key points of workspaces are:"
msgstr ""

#: src/reference/workspaces.md:8
msgid ""
"Common commands can run across all workspace members, like `cargo check --"
"workspace`."
msgstr ""

#: src/reference/workspaces.md:9
msgid ""
"All packages share a common [`Cargo.lock`](../guide/cargo-toml-vs-cargo-"
"lock.md) file which resides in the _workspace root_."
msgstr ""

#: src/reference/workspaces.md:11
msgid ""
"All packages share a common [output directory](build-cache.md), which "
"defaults to a directory named `target` in the _workspace root_."
msgstr ""

#: src/reference/workspaces.md:13
msgid ""
"Sharing package metadata, like with [`workspace.package`](#the-package-"
"table)."
msgstr ""

#: src/reference/workspaces.md:14
msgid ""
"The [`[patch]`](overriding-dependencies.md#the-patch-section), [`[replace]`]"
"(overriding-dependencies.md#the-replace-section) and [`[profile.*]`]"
"(profiles.md) sections in `Cargo.toml` are only recognized in the _root_ "
"manifest, and ignored in member crates' manifests."
msgstr ""

#: src/reference/workspaces.md:18
msgid "The root `Cargo.toml` of a workspace supports the following sections:"
msgstr ""

#: src/reference/workspaces.md:20
msgid "[`[workspace]`](#the-workspace-section) --- Defines a workspace."
msgstr ""

#: src/reference/workspaces.md:22
msgid ""
"[`members`](#the-members-and-exclude-fields) --- Packages to include in the "
"workspace."
msgstr ""

#: src/reference/workspaces.md:23
msgid ""
"[`exclude`](#the-members-and-exclude-fields) --- Packages to exclude from "
"the workspace."
msgstr ""

#: src/reference/workspaces.md:24
msgid ""
"[`default-members`](#the-default-members-field) --- Packages to operate on "
"when a specific package wasn't selected."
msgstr ""

#: src/reference/workspaces.md:25
msgid "[`package`](#the-package-table) --- Keys for inheriting in packages."
msgstr ""

#: src/reference/workspaces.md:26
msgid ""
"[`dependencies`](#the-dependencies-table) --- Keys for inheriting in package "
"dependencies."
msgstr ""

#: src/reference/workspaces.md:27
msgid "[`lints`](#the-lints-table) --- Keys for inheriting in package lints."
msgstr ""

#: src/reference/workspaces.md:33
msgid "The `[workspace]` section"
msgstr ""

#: src/reference/workspaces.md:35
msgid ""
"To create a workspace, you add the `[workspace]` table to a `Cargo.toml`:"
msgstr ""

#: src/reference/workspaces.md:41
msgid ""
"At minimum, a workspace has to have a member, either with a root package or "
"as a virtual manifest."
msgstr ""

#: src/reference/workspaces.md:44
msgid "Root package"
msgstr ""

#: src/reference/workspaces.md:46
msgid ""
"If the [`[workspace]` section](#the-workspace-section) is added to a "
"`Cargo.toml` that already defines a `[package]`, the package is the _root "
"package_ of the workspace. The _workspace root_ is the directory where the "
"workspace's `Cargo.toml` is located."
msgstr ""

#: src/reference/workspaces.md:51
msgid ""
"```toml\n"
"[workspace]\n"
"\n"
"[package]\n"
"name = \"hello_world\" # the name of the package\n"
"version = \"0.1.0\"    # the current version, obeying semver\n"
"```"
msgstr ""

#: src/reference/workspaces.md:59
msgid "Virtual workspace"
msgstr ""

#: src/reference/workspaces.md:61
msgid ""
"Alternatively, a `Cargo.toml` file can be created with a `[workspace]` "
"section but without a [`[package]` section](manifest.md#the-package-"
"section). This is called a _virtual manifest_. This is typically useful when "
"there isn't a \"primary\" package, or you want to keep all the packages "
"organized in separate directories."
msgstr ""

#: src/reference/workspaces.md:66
msgid ""
"```toml\n"
"# [PROJECT_DIR]/Cargo.toml\n"
"[workspace]\n"
"members = [\"hello_world\"]\n"
"resolver = \"3\"\n"
"```"
msgstr ""

#: src/reference/workspaces.md:73
msgid ""
"```toml\n"
"# [PROJECT_DIR]/hello_world/Cargo.toml\n"
"[package]\n"
"name = \"hello_world\" # the name of the package\n"
"version = \"0.1.0\"    # the current version, obeying semver\n"
"edition = \"2024\"     # the edition, will have no effect on a resolver used "
"in the workspace\n"
"```"
msgstr ""

#: src/reference/workspaces.md:81
msgid "By having a workspace without a root package,"
msgstr ""

#: src/reference/workspaces.md:83
msgid ""
"[`resolver`](resolver.md#resolver-versions) must be set explicitly in "
"virtual workspaces as they have no [`package.edition`](manifest.md#the-"
"edition-field) to infer it from [resolver version](resolver.md#resolver-"
"versions)."
msgstr ""

#: src/reference/workspaces.md:87
msgid ""
"Commands run in the workspace root will run against all workspace members by "
"default, see [`default-members`](#the-default-members-field)."
msgstr ""

#: src/reference/workspaces.md:90
msgid "The `members` and `exclude` fields"
msgstr ""

#: src/reference/workspaces.md:92
msgid ""
"The `members` and `exclude` fields define which packages are members of the "
"workspace:"
msgstr ""

#: src/reference/workspaces.md:95
msgid ""
"```toml\n"
"[workspace]\n"
"members = [\"member1\", \"path/to/member2\", \"crates/*\"]\n"
"exclude = [\"crates/foo\", \"path/to/other\"]\n"
"```"
msgstr ""

#: src/reference/workspaces.md:101
msgid ""
"All [`path` dependencies](specifying-dependencies.md#specifying-path-"
"dependencies) residing in the workspace directory automatically become "
"members. Additional members can be listed with the `members` key, which "
"should be an array of strings containing directories with `Cargo.toml` files."
msgstr ""

#: src/reference/workspaces.md:105
msgid ""
"The `members` list also supports [globs](https://docs.rs/glob/0.3.0/glob/"
"struct.Pattern.html) to match multiple paths, using typical filename glob "
"patterns like `*` and `?`."
msgstr ""

#: src/reference/workspaces.md:108
msgid ""
"The `exclude` key can be used to prevent paths from being included in a "
"workspace. This can be useful if some path dependencies aren't desired to be "
"in the workspace at all, or using a glob pattern and you want to remove a "
"directory."
msgstr ""

#: src/reference/workspaces.md:113
msgid ""
"When inside a subdirectory within the workspace, Cargo will automatically "
"search the parent directories for a `Cargo.toml` file with a `[workspace]` "
"definition to determine which workspace to use. The [`package.workspace`]"
"(manifest.md#the-workspace-field) manifest key can be used in member crates "
"to point at a workspace's root to override this automatic search. The manual "
"setting can be useful if the member is not inside a subdirectory of the "
"workspace root."
msgstr ""

#: src/reference/workspaces.md:120
msgid "Package selection"
msgstr ""

#: src/reference/workspaces.md:122
msgid ""
"In a workspace, package-related Cargo commands like [`cargo build`](../"
"commands/cargo-build.md) can use the `-p` / `--package` or `--workspace` "
"command-line flags to determine which packages to operate on. If neither of "
"those flags are specified, Cargo will use the package in the current working "
"directory. However, if the current directory is a workspace root, the "
"[`default-members`](#the-default-members-field) will be used."
msgstr ""

#: src/reference/workspaces.md:128
msgid "The `default-members` field"
msgstr ""

#: src/reference/workspaces.md:130
msgid ""
"The `default-members` field specifies paths of [members](#the-members-and-"
"exclude-fields) to operate on when in the workspace root and the package "
"selection flags are not used:"
msgstr ""

#: src/reference/workspaces.md:134
msgid ""
"```toml\n"
"[workspace]\n"
"members = [\"path/to/member1\", \"path/to/member2\", \"path/to/member3/*\"]\n"
"default-members = [\"path/to/member2\", \"path/to/member3/foo\"]\n"
"```"
msgstr ""

#: src/reference/workspaces.md:140
msgid ""
"Note: when a [root package](#root-package) is present, you can only operate "
"on it using `--package` and `--workspace` flags."
msgstr ""

#: src/reference/workspaces.md:143
msgid ""
"When unspecified, the [root package](#root-package) will be used. In the "
"case of a [virtual workspace](#virtual-workspace), all members will be used "
"(as if `--workspace` were specified on the command-line)."
msgstr ""

#: src/reference/workspaces.md:147
msgid "The `package` table"
msgstr ""

#: src/reference/workspaces.md:149
msgid ""
"The `workspace.package` table is where you define keys that can be inherited "
"by members of a workspace. These keys can be inherited by defining them in "
"the member package with `{key}.workspace = true`."
msgstr ""

#: src/reference/workspaces.md:153
msgid "Keys that are supported:"
msgstr ""

#: src/reference/workspaces.md:157
msgid "`authors`"
msgstr ""

#: src/reference/workspaces.md:157
msgid "`categories`"
msgstr ""

#: src/reference/workspaces.md:158
msgid "`description`"
msgstr ""

#: src/reference/workspaces.md:158
msgid "`documentation`"
msgstr ""

#: src/reference/workspaces.md:159
msgid "`edition`"
msgstr ""

#: src/reference/workspaces.md:159
msgid "`exclude`"
msgstr ""

#: src/reference/workspaces.md:160
msgid "`homepage`"
msgstr ""

#: src/reference/workspaces.md:160
msgid "`include`"
msgstr ""

#: src/reference/workspaces.md:161
msgid "`keywords`"
msgstr ""

#: src/reference/workspaces.md:161
msgid "`license`"
msgstr ""

#: src/reference/workspaces.md:162
msgid "`license-file`"
msgstr ""

#: src/reference/workspaces.md:162
msgid "`publish`"
msgstr ""

#: src/reference/workspaces.md:163
msgid "`readme`"
msgstr ""

#: src/reference/workspaces.md:163
msgid "`repository`"
msgstr ""

#: src/reference/workspaces.md:164
msgid "`rust-version`"
msgstr ""

#: src/reference/workspaces.md:164
msgid "`version`"
msgstr ""

#: src/reference/workspaces.md:166
msgid "`license-file` and `readme` are relative to the workspace root"
msgstr ""

#: src/reference/workspaces.md:167
msgid "`include` and `exclude` are relative to your package root"
msgstr ""

#: src/reference/workspaces.md:169 src/reference/workspaces.md:205
#: src/reference/workspaces.md:241 src/reference/unstable.md:532
#: src/reference/unstable.md:984 src/reference/unstable.md:1021
#: src/reference/unstable.md:1036 src/reference/unstable.md:1326
msgid "Example:"
msgstr ""

#: src/reference/workspaces.md:170
msgid ""
"```toml\n"
"# [PROJECT_DIR]/Cargo.toml\n"
"[workspace]\n"
"members = [\"bar\"]\n"
"\n"
"[workspace.package]\n"
"version = \"1.2.3\"\n"
"authors = [\"Nice Folks\"]\n"
"description = \"A short description of my package\"\n"
"documentation = \"https://example.com/bar\"\n"
"```"
msgstr ""

#: src/reference/workspaces.md:182
msgid ""
"```toml\n"
"# [PROJECT_DIR]/bar/Cargo.toml\n"
"[package]\n"
"name = \"bar\"\n"
"version.workspace = true\n"
"authors.workspace = true\n"
"description.workspace = true\n"
"documentation.workspace = true\n"
"```"
msgstr ""

#: src/reference/workspaces.md:192 src/reference/workspaces.md:233
msgid "**MSRV:** Requires 1.64+"
msgstr ""

#: src/reference/workspaces.md:194
msgid "The `dependencies` table"
msgstr ""

#: src/reference/workspaces.md:196
msgid ""
"The `workspace.dependencies` table is where you define dependencies to be "
"inherited by members of a workspace."
msgstr ""

#: src/reference/workspaces.md:199
msgid ""
"Specifying a workspace dependency is similar to [package dependencies]"
"(specifying-dependencies.md) except:"
msgstr ""

#: src/reference/workspaces.md:200
msgid "Dependencies from this table cannot be declared as `optional`"
msgstr ""

#: src/reference/workspaces.md:201
msgid ""
"[`features`](features.md) declared in this table are additive with the "
"`features` from `[dependencies]`"
msgstr ""

#: src/reference/workspaces.md:203
msgid ""
"You can then [inherit the workspace dependency as a package dependency]"
"(specifying-dependencies.md#inheriting-a-dependency-from-a-workspace)"
msgstr ""

#: src/reference/workspaces.md:206
msgid ""
"```toml\n"
"# [PROJECT_DIR]/Cargo.toml\n"
"[workspace]\n"
"members = [\"bar\"]\n"
"\n"
"[workspace.dependencies]\n"
"cc = \"1.0.73\"\n"
"rand = \"0.8.5\"\n"
"regex = { version = \"1.6.0\", default-features = false, features = "
"[\"std\"] }\n"
"```"
msgstr ""

#: src/reference/workspaces.md:217
msgid ""
"```toml\n"
"# [PROJECT_DIR]/bar/Cargo.toml\n"
"[package]\n"
"name = \"bar\"\n"
"version = \"0.2.0\"\n"
"\n"
"[dependencies]\n"
"regex = { workspace = true, features = [\"unicode\"] }\n"
"\n"
"[build-dependencies]\n"
"cc.workspace = true\n"
"\n"
"[dev-dependencies]\n"
"rand.workspace = true\n"
"```"
msgstr ""

#: src/reference/workspaces.md:235
msgid "The `lints` table"
msgstr ""

#: src/reference/workspaces.md:237
msgid ""
"The `workspace.lints` table is where you define lint configuration to be "
"inherited by members of a workspace."
msgstr ""

#: src/reference/workspaces.md:239
msgid ""
"Specifying a workspace lint configuration is similar to [package lints]"
"(manifest.md#the-lints-section)."
msgstr ""

#: src/reference/workspaces.md:243
msgid ""
"```toml\n"
"# [PROJECT_DIR]/Cargo.toml\n"
"[workspace]\n"
"members = [\"crates/*\"]\n"
"\n"
"[workspace.lints.rust]\n"
"unsafe_code = \"forbid\"\n"
"```"
msgstr ""

#: src/reference/workspaces.md:252
msgid ""
"```toml\n"
"# [PROJECT_DIR]/crates/bar/Cargo.toml\n"
"[package]\n"
"name = \"bar\"\n"
"version = \"0.1.0\"\n"
"\n"
"[lints]\n"
"workspace = true\n"
"```"
msgstr ""

#: src/reference/workspaces.md:266
msgid ""
"The `workspace.metadata` table is ignored by Cargo and will not be warned "
"about. This section can be used for tools that would like to store workspace "
"configuration in `Cargo.toml`. For example:"
msgstr ""

#: src/reference/workspaces.md:270
msgid ""
"```toml\n"
"[workspace]\n"
"members = [\"member1\", \"member2\"]\n"
"\n"
"[workspace.metadata.webcontents]\n"
"root = \"path/to/webproject\"\n"
"tool = [\"npm\", \"run\", \"build\"]\n"
"# ...\n"
"```"
msgstr ""

#: src/reference/workspaces.md:280
msgid ""
"There is a similar set of tables at the package level at [`package.metadata`]"
"(manifest.md#the-metadata-table). While cargo does not specify a format for "
"the content of either of these tables, it is suggested that external tools "
"may wish to use them in a consistent fashion, such as referring to the data "
"in `workspace.metadata` if data is missing from `package.metadata`, if that "
"makes sense for the tool in question."
msgstr ""

#: src/reference/specifying-dependencies.md:3
msgid ""
"Your crates can depend on other libraries from [crates.io](https://"
"crates.io/) or other registries, `git` repositories, or subdirectories on "
"your local file system. You can also temporarily override the location of a "
"dependency --- for example, to be able to test out a bug fix in the "
"dependency that you are working on locally. You can have different "
"dependencies for different platforms, and dependencies that are only used "
"during development. Let's take a look at how to do each of these."
msgstr ""

#: src/reference/specifying-dependencies.md:11
msgid "Specifying dependencies from crates.io"
msgstr ""

#: src/reference/specifying-dependencies.md:13
msgid ""
"Cargo is configured to look for dependencies on [crates.io](https://"
"crates.io/) by default. Only the name and a version string are required in "
"this case. In [the cargo guide](../guide/index.md), we specified a "
"dependency on the `time` crate:"
msgstr ""

#: src/reference/specifying-dependencies.md:22
msgid ""
"The version string `\"0.1.12\"` is called a [version requirement](#version-"
"requirement-syntax). It specifies a range of versions that can be selected "
"from when [resolving dependencies](resolver.md). In this case, `\"0.1.12\"` "
"represents the version range `>=0.1.12, <0.2.0`. An update is allowed if it "
"is within that range. In this case, if we ran `cargo update time`, cargo "
"should update us to version `0.1.13` if it is the latest `0.1.z` release, "
"but would not update us to `0.2.0`."
msgstr ""

#: src/reference/specifying-dependencies.md:30
msgid "Version requirement syntax"
msgstr ""

#: src/reference/specifying-dependencies.md:32
msgid "Default requirements"
msgstr ""

#: src/reference/specifying-dependencies.md:34
msgid ""
"**Default requirements** specify a minimum version with the ability to "
"update to [SemVer](https://semver.org) compatible versions. Versions are "
"considered compatible if their left-most non-zero major/minor/patch "
"component is the same. This is different from [SemVer](https://semver.org) "
"which considers all pre-1.0.0 packages to be incompatible."
msgstr ""

#: src/reference/specifying-dependencies.md:38
msgid "`1.2.3` is an example of a default requirement."
msgstr ""

#: src/reference/specifying-dependencies.md:51
msgid "Caret requirements"
msgstr ""

#: src/reference/specifying-dependencies.md:53
msgid ""
"**Caret requirements** are the default version requirement strategy. This "
"version strategy allows [SemVer](https://semver.org) compatible updates. "
"They are specified as version requirements with a leading caret (`^`)."
msgstr ""

#: src/reference/specifying-dependencies.md:57
msgid "`^1.2.3` is an example of a caret requirement."
msgstr ""

#: src/reference/specifying-dependencies.md:59
msgid ""
"Leaving off the caret is a simplified equivalent syntax to using caret "
"requirements. While caret requirements are the default, it is recommended to "
"use the simplified syntax when possible."
msgstr ""

#: src/reference/specifying-dependencies.md:63
msgid "`log = \"^1.2.3\"` is exactly equivalent to `log = \"1.2.3\"`."
msgstr ""

#: src/reference/specifying-dependencies.md:65
msgid "Tilde requirements"
msgstr ""

#: src/reference/specifying-dependencies.md:67
msgid ""
"**Tilde requirements** specify a minimal version with some ability to "
"update. If you specify a major, minor, and patch version or only a major and "
"minor version, only patch-level changes are allowed. If you only specify a "
"major version, then minor- and patch-level changes are allowed."
msgstr ""

#: src/reference/specifying-dependencies.md:72
msgid "`~1.2.3` is an example of a tilde requirement."
msgstr ""

#: src/reference/specifying-dependencies.md:80
msgid "Wildcard requirements"
msgstr ""

#: src/reference/specifying-dependencies.md:82
msgid ""
"**Wildcard requirements** allow for any version where the wildcard is "
"positioned."
msgstr ""

#: src/reference/specifying-dependencies.md:85
msgid "`*`, `1.*` and `1.2.*` are examples of wildcard requirements."
msgstr ""

#: src/reference/specifying-dependencies.md:93
msgid ""
"**Note**: [crates.io](https://crates.io/) does not allow bare `*` versions."
msgstr ""

#: src/reference/specifying-dependencies.md:95
msgid "Comparison requirements"
msgstr ""

#: src/reference/specifying-dependencies.md:97
msgid ""
"**Comparison requirements** allow manually specifying a version range or an "
"exact version to depend on."
msgstr ""

#: src/reference/specifying-dependencies.md:100
msgid "Here are some examples of comparison requirements:"
msgstr ""

#: src/reference/specifying-dependencies.md:109
msgid "<span id=\"multiple-requirements\"></span>"
msgstr ""

#: src/reference/specifying-dependencies.md:110
msgid "Multiple version requirements"
msgstr ""

#: src/reference/specifying-dependencies.md:112
msgid ""
"As shown in the examples above, multiple version requirements can be "
"separated with a comma, e.g., `>= 1.2, < 1.5`."
msgstr ""

#: src/reference/specifying-dependencies.md:115
msgid "Pre-releases"
msgstr ""

#: src/reference/specifying-dependencies.md:117
msgid ""
"Version requirements exclude [pre-release versions](manifest.md#the-version-"
"field), such as `1.0.0-alpha`, unless specifically asked for. For example, "
"if `1.0.0-alpha` of package `foo` is published, then a requirement of `foo = "
"\"1.0\"` will _not_ match, and will return an error. The pre-release must be "
"specified, such as `foo = \"1.0.0-alpha\"`. Similarly [`cargo install`](../"
"commands/cargo-install.md) will avoid pre-releases unless explicitly asked "
"to install one."
msgstr ""

#: src/reference/specifying-dependencies.md:126
msgid ""
"Cargo allows \"newer\" pre-releases to be used automatically. For example, "
"if `1.0.0-beta` is published, then a requirement `foo = \"1.0.0-alpha\"` "
"will allow updating to the `beta` version. Note that this only works on the "
"same release version, `foo = \"1.0.0-alpha\"` will not allow updating to "
"`foo = \"1.0.1-alpha\"` or `foo = \"1.0.1-beta\"`."
msgstr ""

#: src/reference/specifying-dependencies.md:132
msgid ""
"Cargo will also upgrade automatically to semver-compatible released versions "
"from prereleases. The requirement `foo = \"1.0.0-alpha\"` will allow "
"updating to `foo = \"1.0.0\"` as well as `foo = \"1.2.0\"`."
msgstr ""

#: src/reference/specifying-dependencies.md:136
msgid ""
"Beware that pre-release versions can be unstable, and as such care should be "
"taken when using them. Some projects may choose to publish breaking changes "
"between pre-release versions. It is recommended to not use pre-release "
"dependencies in a library if your library is not also a pre-release. Care "
"should also be taken when updating your `Cargo.lock`, and be prepared if a "
"pre-release update causes issues."
msgstr ""

#: src/reference/specifying-dependencies.md:145
msgid "Version metadata"
msgstr ""

#: src/reference/specifying-dependencies.md:147
msgid ""
"[Version metadata](manifest.md#the-version-field), such as `1.0.0+21AF26D3`, "
"is ignored and should not be used in version requirements."
msgstr ""

#: src/reference/specifying-dependencies.md:150
msgid ""
"**Recommendation:** When in doubt, use the default version requirement "
"operator."
msgstr ""

#: src/reference/specifying-dependencies.md:152
msgid ""
"In rare circumstances, a package with a \"public dependency\" (re-exports "
"the dependency or interoperates with it in its public API) that is "
"compatible with multiple semver-incompatible versions (e.g. only uses a "
"simple type that hasn't changed between releases, like an `Id`) may support "
"users choosing which version of the \"public dependency\" to use. In this "
"case, a version requirement like `\">=0.4, <2\"` may be of interest. "
"_However_ users of the package will likely run into errors and need to "
"manually select a version of the \"public dependency\" via `cargo update` if "
"they also depend on it as Cargo might pick different versions of the "
"\"public dependency\" when [resolving dependency versions](resolver.md)  "
"(see [\\#10599](https://github.com/rust-lang/cargo/issues/10599))."
msgstr ""

#: src/reference/specifying-dependencies.md:164
msgid ""
"Avoid constraining the upper bound of a version to be anything less than the "
"next semver incompatible version (e.g. avoid `\">=2.0, <2.4\"`) as other "
"packages in the dependency tree may require a newer version, leading to an "
"unresolvable error (see [\\#9029](https://github.com/rust-lang/cargo/issues/"
"9029)). Consider whether controlling the version in your [`Cargo.lock`](../"
"guide/cargo-toml-vs-cargo-lock.md) would be more appropriate."
msgstr ""

#: src/reference/specifying-dependencies.md:171
msgid ""
"In some instances this won't matter or the benefits might outweigh the cost, "
"including:"
msgstr ""

#: src/reference/specifying-dependencies.md:172
msgid "When no one else depends on your package e.g. it only has a `[[bin]]`"
msgstr ""

#: src/reference/specifying-dependencies.md:173
msgid ""
"When depending on a pre-release package and wishing to avoid breaking "
"changes then a fully specified `\"=1.2.3-alpha.3\"` might be warranted (see "
"[\\#2222](https://github.com/rust-lang/cargo/issues/2222))"
msgstr ""

#: src/reference/specifying-dependencies.md:176
msgid ""
"When a library re-exports a proc-macro but the proc-macro generates code "
"that calls into the re-exporting library then a fully specified `=1.2.3` "
"might be warranted to ensure the proc-macro isn't newer than the re-"
"exporting library and generating code that uses parts of the API that don't "
"exist within the current version"
msgstr ""

#: src/reference/specifying-dependencies.md:187
msgid "Specifying dependencies from other registries"
msgstr ""

#: src/reference/specifying-dependencies.md:189
msgid ""
"To specify a dependency from a registry other than [crates.io](https://"
"crates.io/) set the `registry` key to the name of the registry to use:"
msgstr ""

#: src/reference/specifying-dependencies.md:192
msgid ""
"```toml\n"
"[dependencies]\n"
"some-crate = { version = \"1.0\", registry = \"my-registry\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:197
msgid ""
"where `my-registry` is the registry name configured in `.cargo/config.toml` "
"file. See the [registries documentation](registries.md) for more information."
msgstr ""

#: src/reference/specifying-dependencies.md:200
msgid ""
"**Note**: [crates.io](https://crates.io/) does not allow packages to be "
"published with dependencies on code published outside of [crates.io](https://"
"crates.io/)."
msgstr ""

#: src/reference/specifying-dependencies.md:205
msgid "Specifying dependencies from `git` repositories"
msgstr ""

#: src/reference/specifying-dependencies.md:207
msgid ""
"To depend on a library located in a `git` repository, the minimum "
"information you need to specify is the location of the repository with the "
"`git` key:"
msgstr ""

#: src/reference/specifying-dependencies.md:210
msgid ""
"```toml\n"
"[dependencies]\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:215
msgid ""
"Cargo fetches the `git` repository at that location and traverses the file "
"tree to find `Cargo.toml` file for the requested crate anywhere inside the "
"`git` repository. For example, `regex-lite` and `regex-syntax` are members "
"of `rust-lang/regex` repo and can be referred to by the repo's root URL "
"(`https://github.com/rust-lang/regex.git`) regardless of where in the file "
"tree they reside."
msgstr ""

#: src/reference/specifying-dependencies.md:221
msgid ""
"```toml\n"
"regex-lite   = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"regex-syntax = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:226
msgid ""
"The above rule does not apply to [`path` dependencies](#specifying-path-"
"dependencies)."
msgstr ""

#: src/reference/specifying-dependencies.md:228
msgid "Choice of commit"
msgstr ""

#: src/reference/specifying-dependencies.md:230
msgid ""
"Cargo assumes that we intend to use the latest commit on the default branch "
"to build our package if we only specify the repo URL, as in the examples "
"above."
msgstr ""

#: src/reference/specifying-dependencies.md:233
msgid ""
"You can combine the `git` key with the `rev`, `tag`, or `branch` keys to be "
"more specific about which commit to use. Here's an example of using the "
"latest commit on a branch named `next`:"
msgstr ""

#: src/reference/specifying-dependencies.md:236
msgid ""
"```toml\n"
"[dependencies]\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\", branch = "
"\"next\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:241
msgid ""
"Anything that is not a branch or a tag falls under `rev` key. This can be a "
"commit hash like `rev = \"4c59b707\"`, or a named reference exposed by the "
"remote repository such as `rev = \"refs/pull/493/head\"`."
msgstr ""

#: src/reference/specifying-dependencies.md:245
msgid ""
"What references are available for the `rev` key varies by where the repo is "
"hosted.  \n"
"GitHub exposes a reference to the most recent commit of every pull request "
"as in the example above. Other git hosts may provide something equivalent "
"under a different naming scheme."
msgstr ""

#: src/reference/specifying-dependencies.md:249
msgid "**More `git` dependency examples:**"
msgstr ""

#: src/reference/specifying-dependencies.md:251
msgid ""
"```toml\n"
"# .git suffix can be omitted if the host accepts such URLs - both examples "
"work the same\n"
"regex = { git = \"https://github.com/rust-lang/regex\" }\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"\n"
"# a commit with a particular tag\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\", tag = "
"\"1.10.3\" }\n"
"\n"
"# a commit by its SHA1 hash\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\", rev = "
"\"0c0990399270277832fbb5b91a1fa118e6f63dba\" }\n"
"\n"
"# HEAD commit of PR 493\n"
"regex = { git = \"https://github.com/rust-lang/regex.git\", rev = \"refs/"
"pull/493/head\" }\n"
"\n"
"# INVALID EXAMPLES\n"
"\n"
"# specifying the commit after # ignores the commit ID and generates a "
"warning\n"
"regex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\" }\n"
"\n"
"# git and path cannot be used at the same time\n"
"regex = { git = \"https://github.com/rust-lang/regex.git#4c59b70\", path = "
"\"../regex\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:274
msgid ""
"Cargo locks the commits of `git` dependencies in `Cargo.lock` file at the "
"time of their addition and checks for updates only when you run `cargo "
"update` command."
msgstr ""

#: src/reference/specifying-dependencies.md:277
msgid "The role of the `version` key"
msgstr ""

#: src/reference/specifying-dependencies.md:279
msgid ""
"The `version` key always implies that the package is available in a "
"registry, regardless of the presence of `git` or `path` keys."
msgstr ""

#: src/reference/specifying-dependencies.md:282
msgid ""
"The `version` key does _not_ affect which commit is used when Cargo "
"retrieves the `git` dependency, but Cargo checks the version information in "
"the dependency's `Cargo.toml` file against the `version` key and raises an "
"error if the check fails."
msgstr ""

#: src/reference/specifying-dependencies.md:286
msgid ""
"In this example, Cargo retrieves the HEAD commit of the branch called `next` "
"from Git and checks if the crate's version is compatible with `version = "
"\"1.10.3\"`:"
msgstr ""

#: src/reference/specifying-dependencies.md:289
msgid ""
"```toml\n"
"[dependencies]\n"
"regex = { version = \"1.10.3\", git = \"https://github.com/rust-lang/"
"regex.git\", branch = \"next\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:294
msgid ""
"`version`, `git`, and `path` keys are considered separate locations for "
"resolving the dependency. See [Multiple locations](#multiple-locations) "
"section below for detailed explanations."
msgstr ""

#: src/reference/specifying-dependencies.md:297
msgid ""
"**Note**: [crates.io](https://crates.io/) does not allow packages to be "
"published with dependencies on code published outside of [crates.io](https://"
"crates.io/) itself ([dev-dependencies](#development-dependencies) are "
"ignored). See the [Multiple locations](#multiple-locations) section for a "
"fallback alternative for `git` and `path` dependencies."
msgstr ""

#: src/reference/specifying-dependencies.md:303
msgid "Accessing private Git repositories"
msgstr ""

#: src/reference/specifying-dependencies.md:305
msgid ""
"See [Git Authentication](../appendix/git-authentication.md) for help with "
"Git authentication for private repos."
msgstr ""

#: src/reference/specifying-dependencies.md:307
msgid "Specifying path dependencies"
msgstr ""

#: src/reference/specifying-dependencies.md:309
msgid ""
"Over time, our `hello_world` package from [the guide](../guide/index.md) has "
"grown significantly in size! It’s gotten to the point that we probably want "
"to split out a separate crate for others to use. To do this Cargo supports "
"**path dependencies** which are typically sub-crates that live within one "
"repository. Let’s start by making a new crate inside of our `hello_world` "
"package:"
msgstr ""

#: src/reference/specifying-dependencies.md:320
msgid ""
"This will create a new folder `hello_utils` inside of which a `Cargo.toml` "
"and `src` folder are ready to be configured. To tell Cargo about this, open "
"up `hello_world/Cargo.toml` and add `hello_utils` to your dependencies:"
msgstr ""

#: src/reference/specifying-dependencies.md:324
msgid ""
"```toml\n"
"[dependencies]\n"
"hello_utils = { path = \"hello_utils\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:329
msgid ""
"This tells Cargo that we depend on a crate called `hello_utils` which is "
"found in the `hello_utils` folder, relative to the `Cargo.toml` file it’s "
"written in."
msgstr ""

#: src/reference/specifying-dependencies.md:332
msgid ""
"The next `cargo build` will automatically build `hello_utils` and all of its "
"dependencies."
msgstr ""

#: src/reference/specifying-dependencies.md:335
msgid "No local path traversal"
msgstr ""

#: src/reference/specifying-dependencies.md:337
msgid ""
"The local paths must point to the exact folder with the dependency's "
"`Cargo.toml`. Unlike with `git` dependencies, Cargo does not traverse local "
"paths. For example, if `regex-lite` and `regex-syntax` are members of a "
"locally cloned `rust-lang/regex` repo, they have to be referred to by the "
"full path:"
msgstr ""

#: src/reference/specifying-dependencies.md:342
msgid ""
"```toml\n"
"# git key accepts the repo root URL and Cargo traverses the tree to find the "
"crate\n"
"[dependencies]\n"
"regex-lite   = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"regex-syntax = { git = \"https://github.com/rust-lang/regex.git\" }\n"
"\n"
"# path key requires the member name to be included in the local path\n"
"[dependencies]\n"
"regex-lite   = { path = \"../regex/regex-lite\" }\n"
"regex-syntax = { path = \"../regex/regex-syntax\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:354
msgid "Local paths in published crates"
msgstr ""

#: src/reference/specifying-dependencies.md:356
msgid ""
"Crates that use dependencies specified with only a path are not permitted on "
"[crates.io](https://crates.io/)."
msgstr ""

#: src/reference/specifying-dependencies.md:359
msgid ""
"If we wanted to publish our `hello_world` crate, we would need to publish a "
"version of `hello_utils` to [crates.io](https://crates.io/) as a separate "
"crate and specify its version in the dependencies line of `hello_world`:"
msgstr ""

#: src/reference/specifying-dependencies.md:363
msgid ""
"```toml\n"
"[dependencies]\n"
"hello_utils = { path = \"hello_utils\", version = \"0.1.0\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:368
msgid ""
"The use of `path` and `version` keys together is explained in the [Multiple "
"locations](#multiple-locations) section."
msgstr ""

#: src/reference/specifying-dependencies.md:370
msgid ""
"**Note**: [crates.io](https://crates.io/) does not allow packages to be "
"published with dependencies on code outside of [crates.io](https://"
"crates.io/), except for [dev-dependencies](#development-dependencies). See "
"the [Multiple locations](#multiple-locations) section for a fallback "
"alternative for `git` and `path` dependencies."
msgstr ""

#: src/reference/specifying-dependencies.md:375
msgid "Multiple locations"
msgstr ""

#: src/reference/specifying-dependencies.md:377
msgid ""
"It is possible to specify both a registry version and a `git` or `path` "
"location. The `git` or `path` dependency will be used locally (in which case "
"the `version` is checked against the local copy), and when published to a "
"registry like [crates.io](https://crates.io/), it will use the registry "
"version. Other combinations are not allowed. Examples:"
msgstr ""

#: src/reference/specifying-dependencies.md:383
msgid ""
"```toml\n"
"[dependencies]\n"
"# Uses `my-bitflags` when used locally, and uses\n"
"# version 1.0 from crates.io when published.\n"
"bitflags = { path = \"my-bitflags\", version = \"1.0\" }\n"
"\n"
"# Uses the given git repo when used locally, and uses\n"
"# version 1.0 from crates.io when published.\n"
"smallvec = { git = \"https://github.com/servo/rust-smallvec.git\", version = "
"\"1.0\" }\n"
"\n"
"# Note: if a version doesn't match, Cargo will fail to compile!\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:396
msgid ""
"One example where this can be useful is when you have split up a library "
"into multiple packages within the same workspace. You can then use `path` "
"dependencies to point to the local packages within the workspace to use the "
"local version during development, and then use the [crates.io](https://"
"crates.io/) version once it is published. This is similar to specifying an "
"[override](overriding-dependencies.md), but only applies to this one "
"dependency declaration."
msgstr ""

#: src/reference/specifying-dependencies.md:404
msgid "Platform specific dependencies"
msgstr ""

#: src/reference/specifying-dependencies.md:406
msgid ""
"Platform-specific dependencies take the same format, but are listed under a "
"`target` section. Normally Rust-like [`#[cfg]` syntax](../../reference/"
"conditional-compilation.html) will be used to define these sections:"
msgstr ""

#: src/reference/specifying-dependencies.md:411
msgid ""
"```toml\n"
"[target.'cfg(windows)'.dependencies]\n"
"winhttp = \"0.4.0\"\n"
"\n"
"[target.'cfg(unix)'.dependencies]\n"
"openssl = \"1.0.1\"\n"
"\n"
"[target.'cfg(target_arch = \"x86\")'.dependencies]\n"
"native-i686 = { path = \"native/i686\" }\n"
"\n"
"[target.'cfg(target_arch = \"x86_64\")'.dependencies]\n"
"native-x86_64 = { path = \"native/x86_64\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:425
msgid ""
"Like with Rust, the syntax here supports the `not`, `any`, and `all` "
"operators to combine various cfg name/value pairs."
msgstr ""

#: src/reference/specifying-dependencies.md:428
msgid ""
"If you want to know which cfg targets are available on your platform, run "
"`rustc --print=cfg` from the command line. If you want to know which `cfg` "
"targets are available for another platform, such as 64-bit Windows, run "
"`rustc --print=cfg --target=x86_64-pc-windows-msvc`."
msgstr ""

#: src/reference/specifying-dependencies.md:433
msgid ""
"Unlike in your Rust source code, you cannot use `[target.'cfg(feature = "
"\"fancy-feature\")'.dependencies]` to add dependencies based on optional "
"features. Use [the `[features]` section](features.md) instead:"
msgstr ""

#: src/reference/specifying-dependencies.md:438
msgid ""
"```toml\n"
"[dependencies]\n"
"foo = { version = \"1.0\", optional = true }\n"
"bar = { version = \"1.0\", optional = true }\n"
"\n"
"[features]\n"
"fancy-feature = [\"foo\", \"bar\"]\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:447
msgid ""
"The same applies to `cfg(debug_assertions)`, `cfg(test)` and "
"`cfg(proc_macro)`. These values will not work as expected and will always "
"have the default value returned by `rustc --print=cfg`. There is currently "
"no way to add dependencies based on these configuration values."
msgstr ""

#: src/reference/specifying-dependencies.md:452
msgid ""
"In addition to `#[cfg]` syntax, Cargo also supports listing out the full "
"target the dependencies would apply to:"
msgstr ""

#: src/reference/specifying-dependencies.md:455
msgid ""
"```toml\n"
"[target.x86_64-pc-windows-gnu.dependencies]\n"
"winhttp = \"0.4.0\"\n"
"\n"
"[target.i686-unknown-linux-gnu.dependencies]\n"
"openssl = \"1.0.1\"\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:463
msgid "Custom target specifications"
msgstr ""

#: src/reference/specifying-dependencies.md:465
msgid ""
"If you’re using a custom target specification (such as `--target foo/"
"bar.json`), use the base filename without the `.json` extension:"
msgstr ""

#: src/reference/specifying-dependencies.md:468
msgid ""
"```toml\n"
"[target.bar.dependencies]\n"
"winhttp = \"0.4.0\"\n"
"\n"
"[target.my-special-i686-platform.dependencies]\n"
"openssl = \"1.0.1\"\n"
"native = { path = \"native/i686\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:477
msgid ""
"**Note**: Custom target specifications are not usable on the stable channel."
msgstr ""

#: src/reference/specifying-dependencies.md:479
msgid "Development dependencies"
msgstr ""

#: src/reference/specifying-dependencies.md:481
msgid ""
"You can add a `[dev-dependencies]` section to your `Cargo.toml` whose format "
"is equivalent to `[dependencies]`:"
msgstr ""

#: src/reference/specifying-dependencies.md:484
msgid ""
"```toml\n"
"[dev-dependencies]\n"
"tempdir = \"0.3\"\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:489
msgid ""
"Dev-dependencies are not used when compiling a package for building, but are "
"used for compiling tests, examples, and benchmarks."
msgstr ""

#: src/reference/specifying-dependencies.md:493
msgid ""
"These dependencies are _not_ propagated to other packages which depend on "
"this package."
msgstr ""

#: src/reference/specifying-dependencies.md:496
msgid ""
"You can also have target-specific development dependencies by using `dev-"
"dependencies` in the target section header instead of `dependencies`. For "
"example:"
msgstr ""

#: src/reference/specifying-dependencies.md:500
msgid ""
"```toml\n"
"[target.'cfg(unix)'.dev-dependencies]\n"
"mio = \"0.0.1\"\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:505
msgid ""
"**Note**: When a package is published, only dev-dependencies that specify a "
"`version` will be included in the published crate. For most use cases, dev-"
"dependencies are not needed when published, though some users (like OS "
"packagers) may want to run tests within a crate, so providing a `version` if "
"possible can still be beneficial."
msgstr ""

#: src/reference/specifying-dependencies.md:511
msgid "Build dependencies"
msgstr ""

#: src/reference/specifying-dependencies.md:513
msgid ""
"You can depend on other Cargo-based crates for use in your build scripts. "
"Dependencies are declared through the `build-dependencies` section of the "
"manifest:"
msgstr ""

#: src/reference/specifying-dependencies.md:517
msgid ""
"```toml\n"
"[build-dependencies]\n"
"cc = \"1.0.3\"\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:523
msgid ""
"You can also have target-specific build dependencies by using `build-"
"dependencies` in the target section header instead of `dependencies`. For "
"example:"
msgstr ""

#: src/reference/specifying-dependencies.md:527
msgid ""
"```toml\n"
"[target.'cfg(unix)'.build-dependencies]\n"
"cc = \"1.0.3\"\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:532
msgid ""
"In this case, the dependency will only be built when the host platform "
"matches the specified target."
msgstr ""

#: src/reference/specifying-dependencies.md:535
msgid ""
"The build script **does not** have access to the dependencies listed in the "
"`dependencies` or `dev-dependencies` section. Build dependencies will "
"likewise not be available to the package itself unless listed under the "
"`dependencies` section as well. A package itself and its build script are "
"built separately, so their dependencies need not coincide. Cargo is kept "
"simpler and cleaner by using independent dependencies for independent "
"purposes."
msgstr ""

#: src/reference/specifying-dependencies.md:543
msgid "Choosing features"
msgstr ""

#: src/reference/specifying-dependencies.md:545
msgid ""
"If a package you depend on offers conditional features, you can specify "
"which to use:"
msgstr ""

#: src/reference/specifying-dependencies.md:548
msgid ""
"```toml\n"
"[dependencies.awesome]\n"
"version = \"1.3.5\"\n"
"default-features = false # do not include the default features, and "
"optionally\n"
"                         # cherry-pick individual features\n"
"features = [\"secure-password\", \"civet\"]\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:556
msgid ""
"More information about features can be found in the [features chapter]"
"(features.md#dependency-features)."
msgstr ""

#: src/reference/specifying-dependencies.md:559
msgid "Renaming dependencies in `Cargo.toml`"
msgstr ""

#: src/reference/specifying-dependencies.md:561
msgid ""
"When writing a `[dependencies]` section in `Cargo.toml` the key you write "
"for a dependency typically matches up to the name of the crate you import "
"from in the code. For some projects, though, you may wish to reference the "
"crate with a different name in the code regardless of how it's published on "
"crates.io. For example you may wish to:"
msgstr ""

#: src/reference/specifying-dependencies.md:567
msgid "Avoid the need to  `use foo as bar` in Rust source."
msgstr ""

#: src/reference/specifying-dependencies.md:568
msgid "Depend on multiple versions of a crate."
msgstr ""

#: src/reference/specifying-dependencies.md:569
msgid "Depend on crates with the same name from different registries."
msgstr ""

#: src/reference/specifying-dependencies.md:571
msgid ""
"To support this Cargo supports a `package` key in the `[dependencies]` "
"section of which package should be depended on:"
msgstr ""

#: src/reference/specifying-dependencies.md:574
msgid ""
"```toml\n"
"[package]\n"
"name = \"mypackage\"\n"
"version = \"0.0.1\"\n"
"\n"
"[dependencies]\n"
"foo = \"0.1\"\n"
"bar = { git = \"https://github.com/example/project.git\", package = "
"\"foo\" }\n"
"baz = { version = \"0.1\", registry = \"custom\", package = \"foo\" }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:585
msgid "In this example, three crates are now available in your Rust code:"
msgstr ""

#: src/reference/specifying-dependencies.md:588
msgid "// crates.io\n"
msgstr ""

#: src/reference/specifying-dependencies.md:589
msgid "// git repository\n"
msgstr ""

#: src/reference/specifying-dependencies.md:590
msgid "// registry `custom`\n"
msgstr ""

#: src/reference/specifying-dependencies.md:593
msgid ""
"All three of these crates have the package name of `foo` in their own "
"`Cargo.toml`, so we're explicitly using the `package` key to inform Cargo "
"that we want the `foo` package even though we're calling it something else "
"locally. The `package` key, if not specified, defaults to the name of the "
"dependency being requested."
msgstr ""

#: src/reference/specifying-dependencies.md:599
msgid "Note that if you have an optional dependency like:"
msgstr ""

#: src/reference/specifying-dependencies.md:601
msgid ""
"```toml\n"
"[dependencies]\n"
"bar = { version = \"0.1\", package = 'foo', optional = true }\n"
"```"
msgstr ""

#: src/reference/specifying-dependencies.md:606
msgid ""
"you're depending on the crate `foo` from crates.io, but your crate has a "
"`bar` feature instead of a `foo` feature. That is, names of features take "
"after the name of the dependency, not the package name, when renamed."
msgstr ""

#: src/reference/specifying-dependencies.md:610
msgid ""
"Enabling transitive dependencies works similarly, for example we could add "
"the following to the above manifest:"
msgstr ""

#: src/reference/specifying-dependencies.md:618
msgid "Inheriting a dependency from a workspace"
msgstr ""

#: src/reference/specifying-dependencies.md:620
msgid ""
"Dependencies can be inherited from a workspace by specifying the dependency "
"in the workspace's [`[workspace.dependencies]`](workspaces.md#the-"
"dependencies-table) table. After that, add it to the `[dependencies]` table "
"with `workspace = true`."
msgstr ""

#: src/reference/specifying-dependencies.md:624
msgid ""
"Along with the `workspace` key, dependencies can also include these keys:"
msgstr ""

#: src/reference/specifying-dependencies.md:625
msgid ""
"[`optional`](features.md#optional-dependencies): Note that "
"the`[workspace.dependencies]` table is not allowed to specify `optional`."
msgstr ""

#: src/reference/specifying-dependencies.md:626
msgid ""
"[`features`](features.md): These are additive with the features declared in "
"the `[workspace.dependencies]`"
msgstr ""

#: src/reference/specifying-dependencies.md:628
msgid ""
"Other than `optional` and `features`, inherited dependencies cannot use any "
"other dependency key (such as `version` or `default-features`)."
msgstr ""

#: src/reference/specifying-dependencies.md:631
msgid ""
"Dependencies in the `[dependencies]`, `[dev-dependencies]`, `[build-"
"dependencies]`, and `[target.\"...\".dependencies]` sections support the "
"ability to reference the `[workspace.dependencies]` definition of "
"dependencies."
msgstr ""

#: src/reference/specifying-dependencies.md:635
msgid ""
"```toml\n"
"[package]\n"
"name = \"bar\"\n"
"version = \"0.2.0\"\n"
"\n"
"[dependencies]\n"
"regex = { workspace = true, features = [\"unicode\"] }\n"
"\n"
"[build-dependencies]\n"
"cc.workspace = true\n"
"\n"
"[dev-dependencies]\n"
"rand = { workspace = true, optional = true }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:3
msgid ""
"The desire to override a dependency can arise through a number of scenarios. "
"Most of them, however, boil down to the ability to work with a crate before "
"it's been published to [crates.io](https://crates.io/). For example:"
msgstr ""

#: src/reference/overriding-dependencies.md:7
msgid ""
"A crate you're working on is also used in a much larger application you're "
"working on, and you'd like to test a bug fix to the library inside of the "
"larger application."
msgstr ""

#: src/reference/overriding-dependencies.md:10
msgid ""
"An upstream crate you don't work on has a new feature or a bug fix on the "
"master branch of its git repository which you'd like to test out."
msgstr ""

#: src/reference/overriding-dependencies.md:12
msgid ""
"You're about to publish a new major version of your crate, but you'd like to "
"do integration testing across an entire package to ensure the new major "
"version works."
msgstr ""

#: src/reference/overriding-dependencies.md:15
msgid ""
"You've submitted a fix to an upstream crate for a bug you found, but you'd "
"like to immediately have your application start depending on the fixed "
"version of the crate to avoid blocking on the bug fix getting merged."
msgstr ""

#: src/reference/overriding-dependencies.md:19
msgid ""
"These scenarios can be solved with the [`[patch]` manifest section](#the-"
"patch-section)."
msgstr ""

#: src/reference/overriding-dependencies.md:22
msgid ""
"This chapter walks through a few different use cases, and includes details "
"on the different ways to override a dependency."
msgstr ""

#: src/reference/overriding-dependencies.md:25
msgid "Example use cases"
msgstr ""

#: src/reference/overriding-dependencies.md:26
msgid "[Testing a bugfix](#testing-a-bugfix)"
msgstr ""

#: src/reference/overriding-dependencies.md:27
msgid ""
"[Working with an unpublished minor version](#working-with-an-unpublished-"
"minor-version)"
msgstr ""

#: src/reference/overriding-dependencies.md:28
msgid "[Overriding repository URL](#overriding-repository-url)"
msgstr ""

#: src/reference/overriding-dependencies.md:29
msgid "[Prepublishing a breaking change](#prepublishing-a-breaking-change)"
msgstr ""

#: src/reference/overriding-dependencies.md:30
msgid ""
"[Using `[patch]` with multiple versions](#using-patch-with-multiple-versions)"
msgstr ""

#: src/reference/overriding-dependencies.md:31
msgid "Reference"
msgstr ""

#: src/reference/overriding-dependencies.md:32
msgid "[The `[patch]` section](#the-patch-section)"
msgstr ""

#: src/reference/overriding-dependencies.md:33
msgid "[The `[replace]` section](#the-replace-section)"
msgstr ""

#: src/reference/overriding-dependencies.md:34
msgid "[`paths` overrides](#paths-overrides)"
msgstr ""

#: src/reference/overriding-dependencies.md:36
msgid ""
"**Note**: See also specifying a dependency with [multiple locations]"
"(specifying-dependencies.md#multiple-locations), which can be used to "
"override the source for a single dependency declaration in a local package."
msgstr ""

#: src/reference/overriding-dependencies.md:40
msgid "Testing a bugfix"
msgstr ""

#: src/reference/overriding-dependencies.md:42
msgid ""
"Let's say you're working with the [`uuid` crate](https://crates.io/crates/"
"uuid) but while you're working on it you discover a bug. You are, however, "
"quite enterprising so you decide to also try to fix the bug! Originally your "
"manifest will look like:"
msgstr ""

#: src/reference/overriding-dependencies.md:48
msgid ""
"```toml\n"
"[package]\n"
"name = \"my-library\"\n"
"version = \"0.1.0\"\n"
"\n"
"[dependencies]\n"
"uuid = \"1.0\"\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:57
msgid ""
"First thing we'll do is to clone the [`uuid` repository](https://github.com/"
"uuid-rs/uuid) locally via:"
msgstr ""

#: src/reference/overriding-dependencies.md:60
msgid ""
"```console\n"
"$ git clone https://github.com/uuid-rs/uuid.git\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:64
msgid "Next we'll edit the manifest of `my-library` to contain:"
msgstr ""

#: src/reference/overriding-dependencies.md:66
msgid ""
"```toml\n"
"[patch.crates-io]\n"
"uuid = { path = \"../path/to/uuid\" }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:71
msgid ""
"Here we declare that we're _patching_ the source `crates-io` with a new "
"dependency. This will effectively add the local checked out version of "
"`uuid` to the crates.io registry for our local package."
msgstr ""

#: src/reference/overriding-dependencies.md:75
msgid ""
"Next up we need to ensure that our lock file is updated to use this new "
"version of `uuid` so our package uses the locally checked out copy instead "
"of one from crates.io. The way `[patch]` works is that it'll load the "
"dependency at `../path/to/uuid` and then whenever crates.io is queried for "
"versions of `uuid` it'll _also_ return the local version."
msgstr ""

#: src/reference/overriding-dependencies.md:81
msgid ""
"This means that the version number of the local checkout is significant and "
"will affect whether the patch is used. Our manifest declared `uuid = "
"\"1.0\"` which means we'll only resolve to `>= 1.0.0, < 2.0.0`, and Cargo's "
"greedy resolution algorithm also means that we'll resolve to the maximum "
"version within that range. Typically this doesn't matter as the version of "
"the git repository will already be greater or match the maximum version "
"published on crates.io, but it's important to keep this in mind!"
msgstr ""

#: src/reference/overriding-dependencies.md:89
msgid "In any case, typically all you need to do now is:"
msgstr ""

#: src/reference/overriding-dependencies.md:98
msgid ""
"And that's it! You're now building with the local version of `uuid` (note "
"the path in parentheses in the build output). If you don't see the local "
"path version getting built then you may need to run `cargo update uuid --"
"precise $version` where `$version` is the version of the locally checked out "
"copy of `uuid`."
msgstr ""

#: src/reference/overriding-dependencies.md:103
msgid ""
"Once you've fixed the bug you originally found the next thing you'll want to "
"do is to likely submit that as a pull request to the `uuid` crate itself. "
"Once you've done this then you can also update the `[patch]` section. The "
"listing inside of `[patch]` is just like the `[dependencies]` section, so "
"once your pull request is merged you could change your `path` dependency to:"
msgstr ""

#: src/reference/overriding-dependencies.md:109
msgid ""
"```toml\n"
"[patch.crates-io]\n"
"uuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:116
msgid "Working with an unpublished minor version"
msgstr ""

#: src/reference/overriding-dependencies.md:118
msgid ""
"Let's now shift gears a bit from bug fixes to adding features. While working "
"on `my-library` you discover that a whole new feature is needed in the "
"`uuid` crate. You've implemented this feature, tested it locally above with "
"`[patch]`, and submitted a pull request. Let's go over how you continue to "
"use and test it before it's actually published."
msgstr ""

#: src/reference/overriding-dependencies.md:124
msgid ""
"Let's also say that the current version of `uuid` on crates.io is `1.0.0`, "
"but since then the master branch of the git repository has updated to "
"`1.0.1`. This branch includes your new feature you submitted previously. To "
"use this repository we'll edit our `Cargo.toml` to look like"
msgstr ""

#: src/reference/overriding-dependencies.md:129
msgid ""
"```toml\n"
"[package]\n"
"name = \"my-library\"\n"
"version = \"0.1.0\"\n"
"\n"
"[dependencies]\n"
"uuid = \"1.0.1\"\n"
"\n"
"[patch.crates-io]\n"
"uuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:141
msgid ""
"Note that our local dependency on `uuid` has been updated to `1.0.1` as it's "
"what we'll actually require once the crate is published. This version "
"doesn't exist on crates.io, though, so we provide it with the `[patch]` "
"section of the manifest."
msgstr ""

#: src/reference/overriding-dependencies.md:146
msgid ""
"Now when our library is built it'll fetch `uuid` from the git repository and "
"resolve to 1.0.1 inside the repository instead of trying to download a "
"version from crates.io. Once 1.0.1 is published on crates.io the `[patch]` "
"section can be deleted."
msgstr ""

#: src/reference/overriding-dependencies.md:151
msgid ""
"It's also worth noting that `[patch]` applies _transitively_. Let's say you "
"use `my-library` in a larger package, such as:"
msgstr ""

#: src/reference/overriding-dependencies.md:154
msgid ""
"```toml\n"
"[package]\n"
"name = \"my-binary\"\n"
"version = \"0.1.0\"\n"
"\n"
"[dependencies]\n"
"my-library = { git = 'https://example.com/git/my-library' }\n"
"uuid = \"1.0\"\n"
"\n"
"[patch.crates-io]\n"
"uuid = { git = 'https://github.com/uuid-rs/uuid.git' }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:167
msgid ""
"Remember that `[patch]` is applicable _transitively_ but can only be defined "
"at the _top level_ so we consumers of `my-library` have to repeat the "
"`[patch]` section if necessary. Here, though, the new `uuid` crate applies "
"to _both_ our dependency on `uuid` and the `my-library -> uuid` dependency. "
"The `uuid` crate will be resolved to one version for this entire crate "
"graph, 1.0.1, and it'll be pulled from the git repository."
msgstr ""

#: src/reference/overriding-dependencies.md:174
msgid "Overriding repository URL"
msgstr ""

#: src/reference/overriding-dependencies.md:176
msgid ""
"In case the dependency you want to override isn't loaded from `crates.io`, "
"you'll have to change a bit how you use `[patch]`. For example, if the "
"dependency is a git dependency, you can override it to a local path with:"
msgstr ""

#: src/reference/overriding-dependencies.md:180
msgid ""
"```toml\n"
"[patch.\"https://github.com/your/repository\"]\n"
"my-library = { path = \"../my-library/path\" }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:185
msgid "And that's it!"
msgstr ""

#: src/reference/overriding-dependencies.md:187
msgid "Prepublishing a breaking change"
msgstr ""

#: src/reference/overriding-dependencies.md:189
msgid ""
"Let's take a look at working with a new major version of a crate, typically "
"accompanied with breaking changes. Sticking with our previous crates, this "
"means that we're going to be creating version 2.0.0 of the `uuid` crate. "
"After we've submitted all changes upstream we can update our manifest for "
"`my-library` to look like:"
msgstr ""

#: src/reference/overriding-dependencies.md:195
msgid ""
"```toml\n"
"[dependencies]\n"
"uuid = \"2.0\"\n"
"\n"
"[patch.crates-io]\n"
"uuid = { git = \"https://github.com/uuid-rs/uuid.git\", branch = "
"\"2.0.0\" }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:203
msgid ""
"And that's it! Like with the previous example the 2.0.0 version doesn't "
"actually exist on crates.io but we can still put it in through a git "
"dependency through the usage of the `[patch]` section. As a thought exercise "
"let's take another look at the `my-binary` manifest from above again as well:"
msgstr ""

#: src/reference/overriding-dependencies.md:208
msgid ""
"```toml\n"
"[package]\n"
"name = \"my-binary\"\n"
"version = \"0.1.0\"\n"
"\n"
"[dependencies]\n"
"my-library = { git = 'https://example.com/git/my-library' }\n"
"uuid = \"1.0\"\n"
"\n"
"[patch.crates-io]\n"
"uuid = { git = 'https://github.com/uuid-rs/uuid.git', branch = '2.0.0' }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:221
msgid ""
"Note that this will actually resolve to two versions of the `uuid` crate. "
"The `my-binary` crate will continue to use the 1.x.y series of the `uuid` "
"crate but the `my-library` crate will use the `2.0.0` version of `uuid`. "
"This will allow you to gradually roll out breaking changes to a crate "
"through a dependency graph without being forced to update everything all at "
"once."
msgstr ""

#: src/reference/overriding-dependencies.md:227
msgid "Using `[patch]` with multiple versions"
msgstr ""

#: src/reference/overriding-dependencies.md:229
msgid ""
"You can patch in multiple versions of the same crate with the `package` key "
"used to rename dependencies. For example let's say that the `serde` crate "
"has a bugfix that we'd like to use to its `1.*` series but we'd also like to "
"prototype using a `2.0.0` version of serde we have in our git repository. To "
"configure this we'd do:"
msgstr ""

#: src/reference/overriding-dependencies.md:235
msgid ""
"```toml\n"
"[patch.crates-io]\n"
"serde = { git = 'https://github.com/serde-rs/serde.git' }\n"
"serde2 = { git = 'https://github.com/example/serde.git', package = 'serde', "
"branch = 'v2' }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:241
msgid ""
"The first `serde = ...` directive indicates that serde `1.*` should be used "
"from the git repository (pulling in the bugfix we need) and the second "
"`serde2 = ...` directive indicates that the `serde` package should also be "
"pulled from the `v2` branch of `https://github.com/example/serde`. We're "
"assuming here that `Cargo.toml` on that branch mentions version `2.0.0`."
msgstr ""

#: src/reference/overriding-dependencies.md:247
msgid ""
"Note that when using the `package` key the `serde2` identifier here is "
"actually ignored. We simply need a unique name which doesn't conflict with "
"other patched crates."
msgstr ""

#: src/reference/overriding-dependencies.md:251
msgid "The `[patch]` section"
msgstr ""

#: src/reference/overriding-dependencies.md:253
msgid ""
"The `[patch]` section of `Cargo.toml` can be used to override dependencies "
"with other copies. The syntax is similar to the [`[dependencies]`]"
"(specifying-dependencies.md) section:"
msgstr ""

#: src/reference/overriding-dependencies.md:257
msgid ""
"```toml\n"
"[patch.crates-io]\n"
"foo = { git = 'https://github.com/example/foo.git' }\n"
"bar = { path = 'my/local/bar' }\n"
"\n"
"[dependencies.baz]\n"
"git = 'https://github.com/example/baz.git'\n"
"\n"
"[patch.'https://github.com/example/baz']\n"
"baz = { git = 'https://github.com/example/patched-baz.git', branch = 'my-"
"branch' }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:269
msgid ""
"**Note**: The `[patch]` table can also be specified as a [configuration "
"option](config.md), such as in a `.cargo/config.toml` file or a CLI option "
"like `--config 'patch.crates-io.rand.path=\"rand\"'`. This can be useful for "
"local-only changes that you don't want to commit, or temporarily testing a "
"patch."
msgstr ""

#: src/reference/overriding-dependencies.md:275
msgid ""
"The `[patch]` table is made of dependency-like sub-tables. Each key after "
"`[patch]` is a URL of the source that is being patched, or the name of a "
"registry. The name `crates-io` may be used to override the default registry "
"[crates.io](https://crates.io/). The first `[patch]` in the example above "
"demonstrates overriding [crates.io](https://crates.io/), and the second "
"`[patch]` demonstrates overriding a git source."
msgstr ""

#: src/reference/overriding-dependencies.md:281
msgid ""
"Each entry in these tables is a normal dependency specification, the same as "
"found in the `[dependencies]` section of the manifest. The dependencies "
"listed in the `[patch]` section are resolved and used to patch the source at "
"the URL specified. The above manifest snippet patches the `crates-io` source "
"(e.g. crates.io itself) with the `foo` crate and `bar` crate. It also "
"patches the `https://github.com/example/baz` source with a `my-branch` that "
"comes from elsewhere."
msgstr ""

#: src/reference/overriding-dependencies.md:289
msgid ""
"Sources can be patched with versions of crates that do not exist, and they "
"can also be patched with versions of crates that already exist. If a source "
"is patched with a crate version that already exists in the source, then the "
"source's original crate is replaced."
msgstr ""

#: src/reference/overriding-dependencies.md:294
msgid ""
"Cargo only looks at the patch settings in the `Cargo.toml` manifest at the "
"root of the workspace. Patch settings defined in dependencies will be "
"ignored."
msgstr ""

#: src/reference/overriding-dependencies.md:298
msgid "The `[replace]` section"
msgstr ""

#: src/reference/overriding-dependencies.md:300
msgid ""
"**Note**: `[replace]` is deprecated. You should use the [`[patch]`](#the-"
"patch-section) table instead."
msgstr ""

#: src/reference/overriding-dependencies.md:303
msgid ""
"This section of Cargo.toml can be used to override dependencies with other "
"copies. The syntax is similar to the `[dependencies]` section:"
msgstr ""

#: src/reference/overriding-dependencies.md:306
msgid ""
"```toml\n"
"[replace]\n"
"\"foo:0.1.0\" = { git = 'https://github.com/example/foo.git' }\n"
"\"bar:1.0.2\" = { path = 'my/local/bar' }\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:312
msgid ""
"Each key in the `[replace]` table is a [package ID specification](pkgid-"
"spec.md), which allows arbitrarily choosing a node in the dependency graph "
"to override (the 3-part version number is required). The value of each key "
"is the same as the `[dependencies]` syntax for specifying dependencies, "
"except that you can't specify features. Note that when a crate is overridden "
"the copy it's overridden with must have both the same name and version, but "
"it can come from a different source (e.g., git or a local path)."
msgstr ""

#: src/reference/overriding-dependencies.md:320
msgid ""
"Cargo only looks at the replace settings in the `Cargo.toml` manifest at the "
"root of the workspace. Replace settings defined in dependencies will be "
"ignored."
msgstr ""

#: src/reference/overriding-dependencies.md:324
msgid "`paths` overrides"
msgstr ""

#: src/reference/overriding-dependencies.md:326
msgid ""
"Sometimes you're only temporarily working on a crate and you don't want to "
"have to modify `Cargo.toml` like with the `[patch]` section above. For this "
"use case Cargo offers a much more limited version of overrides called **path "
"overrides**."
msgstr ""

#: src/reference/overriding-dependencies.md:331
msgid ""
"Path overrides are specified through [`.cargo/config.toml`](config.md) "
"instead of `Cargo.toml`. Inside of `.cargo/config.toml` you'll specify a key "
"called `paths`:"
msgstr ""

#: src/reference/overriding-dependencies.md:334
msgid ""
"```toml\n"
"paths = [\"/path/to/uuid\"]\n"
"```"
msgstr ""

#: src/reference/overriding-dependencies.md:338
msgid ""
"This array should be filled with directories that contain a `Cargo.toml`. In "
"this instance, we’re just adding `uuid`, so it will be the only one that’s "
"overridden. This path can be either absolute or relative to the directory "
"that contains the `.cargo` folder."
msgstr ""

#: src/reference/overriding-dependencies.md:343
msgid ""
"Path overrides are more restricted than the `[patch]` section, however, in "
"that they cannot change the structure of the dependency graph. When a path "
"replacement is used then the previous set of dependencies must all match "
"exactly to the new `Cargo.toml` specification. For example this means that "
"path overrides cannot be used to test out adding a dependency to a crate, "
"instead `[patch]` must be used in that situation. As a result usage of a "
"path override is typically isolated to quick bug fixes rather than larger "
"changes."
msgstr ""

#: src/reference/overriding-dependencies.md:352
msgid ""
"**Note**: using a local configuration to override paths will only work for "
"crates that have been published to [crates.io](https://crates.io/). You "
"cannot use this feature to tell Cargo how to find local unpublished crates."
msgstr ""

#: src/reference/source-replacement.md:3
msgid ""
"This document is about replacing the crate index. You can read about "
"overriding dependencies in the [overriding dependencies](overriding-"
"dependencies.md) section of this documentation."
msgstr ""

#: src/reference/source-replacement.md:7
msgid ""
"A _source_ is a provider that contains crates that may be included as "
"dependencies for a package. Cargo supports the ability to **replace one "
"source with another** to express strategies such as:"
msgstr ""

#: src/reference/source-replacement.md:11
msgid ""
"Vendoring --- custom sources can be defined which represent crates on the "
"local filesystem. These sources are subsets of the source that they're "
"replacing and can be checked into packages if necessary."
msgstr ""

#: src/reference/source-replacement.md:15
msgid ""
"Mirroring --- sources can be replaced with an equivalent version which acts "
"as a cache for crates.io itself."
msgstr ""

#: src/reference/source-replacement.md:18
msgid ""
"Cargo has a core assumption about source replacement that the source code is "
"exactly the same from both sources. Note that this also means that a "
"replacement source is not allowed to have crates which are not present in "
"the original source."
msgstr ""

#: src/reference/source-replacement.md:23
msgid ""
"As a consequence, source replacement is not appropriate for situations such "
"as patching a dependency or a private registry. Cargo supports patching "
"dependencies through the usage of [the `[patch]` key](overriding-"
"dependencies.md), and private registry support is described in [the "
"Registries chapter](registries.md)."
msgstr ""

#: src/reference/source-replacement.md:29
msgid ""
"When using source replacement, running commands like `cargo publish` that "
"need to contact the registry require passing the `--registry` option. This "
"helps avoid any ambiguity about which registry to contact, and will use the "
"authentication token for the specified registry."
msgstr ""

#: src/reference/source-replacement.md:39
msgid ""
"Configuration of replacement sources is done through [`.cargo/config.toml`]"
"(config.md) and the full set of available keys are:"
msgstr ""

#: src/reference/source-replacement.md:42
msgid ""
"```toml\n"
"# The `source` table is where all keys related to source-replacement\n"
"# are stored.\n"
"[source]\n"
"\n"
"# Under the `source` table are a number of other tables whose keys are a\n"
"# name for the relevant source. For example this section defines a new\n"
"# source, called `my-vendor-source`, which comes from a directory\n"
"# located at `vendor` relative to the directory containing this `.cargo/"
"config.toml`\n"
"# file\n"
"[source.my-vendor-source]\n"
"directory = \"vendor\"\n"
"\n"
"# The crates.io default source for crates is available under the name\n"
"# \"crates-io\", and here we use the `replace-with` key to indicate that "
"it's\n"
"# replaced with our source above.\n"
"#\n"
"# The `replace-with` key can also reference an alternative registry name\n"
"# defined in the `[registries]` table.\n"
"[source.crates-io]\n"
"replace-with = \"my-vendor-source\"\n"
"\n"
"# Each source has its own table where the key is the name of the source\n"
"[source.the-source-name]\n"
"\n"
"# Indicate that `the-source-name` will be replaced with `another-source`,\n"
"# defined elsewhere\n"
"replace-with = \"another-source\"\n"
"\n"
"# Several kinds of sources can be specified (described in more detail "
"below):\n"
"registry = \"https://example.com/path/to/index\"\n"
"local-registry = \"path/to/registry\"\n"
"directory = \"path/to/vendor\"\n"
"\n"
"# Git sources can optionally specify a branch/tag/rev as well\n"
"git = \"https://example.com/path/to/repo\"\n"
"# branch = \"master\"\n"
"# tag = \"v1.0.1\"\n"
"# rev = \"313f44e8\"\n"
"```"
msgstr ""

#: src/reference/source-replacement.md:85
msgid "Registry Sources"
msgstr ""

#: src/reference/source-replacement.md:87
msgid ""
"A \"registry source\" is one that is the same as crates.io itself. That is, "
"it has an index served in a git repository which matches the format of the "
"[crates.io index](https://github.com/rust-lang/crates.io-index). That "
"repository then has configuration indicating where to download crates from."
msgstr ""

#: src/reference/source-replacement.md:92
msgid ""
"Currently there is not an already-available project for setting up a mirror "
"of crates.io. Stay tuned though!"
msgstr ""

#: src/reference/source-replacement.md:95
msgid "Local Registry Sources"
msgstr ""

#: src/reference/source-replacement.md:97
msgid ""
"A \"local registry source\" is intended to be a subset of another registry "
"source, but available on the local filesystem (aka vendoring). Local "
"registries are downloaded ahead of time, typically sync'd with a "
"`Cargo.lock`, and are made up of a set of `*.crate` files and an index like "
"the normal registry is."
msgstr ""

#: src/reference/source-replacement.md:102
msgid ""
"The primary way to manage and create local registry sources is through the "
"[`cargo-local-registry`](https://crates.io/crates/cargo-local-registry) "
"subcommand, [available on crates.io](https://crates.io/crates/cargo-local-"
"registry) and can be installed with `cargo install cargo-local-registry`."
msgstr ""

#: src/reference/source-replacement.md:109
msgid ""
"Local registries are contained within one directory and contain a number of "
"`*.crate` files downloaded from crates.io as well as an `index` directory "
"with the same format as the crates.io-index project (populated with just "
"entries for the crates that are present)."
msgstr ""

#: src/reference/source-replacement.md:114
msgid "Directory Sources"
msgstr ""

#: src/reference/source-replacement.md:116
msgid ""
"A \"directory source\" is similar to a local registry source where it "
"contains a number of crates available on the local filesystem, suitable for "
"vendoring dependencies. Directory sources are primarily managed by the "
"`cargo vendor` subcommand."
msgstr ""

#: src/reference/source-replacement.md:121
msgid ""
"Directory sources are distinct from local registries though in that they "
"contain the unpacked version of `*.crate` files, making it more suitable in "
"some situations to check everything into source control. A directory source "
"is just a directory containing a number of other directories which contain "
"the source code for crates (the unpacked version of `*.crate` files). "
"Currently no restriction is placed on the name of each directory."
msgstr ""

#: src/reference/source-replacement.md:128
msgid ""
"Each crate in a directory source also has an associated metadata file "
"indicating the checksum of each file in the crate to protect against "
"accidental modifications."
msgstr ""

#: src/reference/resolver.md:3
msgid ""
"One of Cargo's primary tasks is to determine the versions of dependencies to "
"use based on the version requirements specified in each package. This "
"process is called \"dependency resolution\" and is performed by the "
"\"resolver\". The result of the resolution is stored in the `Cargo.lock` "
"file which \"locks\" the dependencies to specific versions, and keeps them "
"fixed over time. The [`cargo tree`](../commands/cargo-tree.md) command can "
"be used to visualize the result of the resolver."
msgstr ""

#: src/reference/resolver.md:15
msgid "Constraints and Heuristics"
msgstr ""

#: src/reference/resolver.md:17
msgid ""
"In many cases there is no single \"best\" dependency resolution. The "
"resolver operates under various constraints and heuristics to find a "
"generally applicable resolution. To understand how these interact, it is "
"helpful to have a coarse understanding of how dependency resolution works."
msgstr ""

#: src/reference/resolver.md:21
msgid "This pseudo-code approximates what Cargo's resolver does:"
msgstr ""

#: src/reference/resolver.md:31
msgid "// Done\n"
msgstr ""

#: src/reference/resolver.md:55
msgid "// No valid solution found, backtrack and `pick_next_version`\n"
msgstr ""

#: src/reference/resolver.md:60
msgid "Key steps:"
msgstr ""

#: src/reference/resolver.md:61
msgid ""
"Walking dependencies (`pick_next_dep`): The order dependencies are walked "
"can affect how related version requirements for the same dependency get "
"resolved, see unifying versions, and how much the resolver backtracks, "
"affecting resolver performance,"
msgstr ""

#: src/reference/resolver.md:65
msgid ""
"Unifying versions (`try_unify_version`, `needs_version_unification`): Cargo "
"reuses versions where possible to reduce build times and allow types from "
"common dependencies to be passed between APIs. If multiple versions would "
"have been unified if it wasn't for conflicts in their [dependency "
"specifications](specifying-dependencies.md), Cargo will backtrack, erroring "
"if no solution is found, rather than selecting multiple versions. A "
"[dependency specification](specifying-dependencies.md) or Cargo may decide "
"that a version is undesirable, preferring to backtrack or error rather than "
"use it."
msgstr ""

#: src/reference/resolver.md:70
msgid ""
"Preferring versions (`pick_next_version`): Cargo may decide that it should "
"prefer a specific version, falling back to the next version when "
"backtracking."
msgstr ""

#: src/reference/resolver.md:74
msgid "Version numbers"
msgstr ""

#: src/reference/resolver.md:76
msgid "Generally, Cargo prefers the highest version currently available."
msgstr ""

#: src/reference/resolver.md:78 src/reference/resolver.md:93
msgid "For example, if you had a package in the resolve graph with:"
msgstr ""

#: src/reference/resolver.md:79
msgid ""
"```toml\n"
"[dependencies]\n"
"bitflags = \"*\"\n"
"```"
msgstr ""

#: src/reference/resolver.md:83
msgid ""
"If at the time the `Cargo.lock` file is generated, the greatest version of "
"`bitflags` is `1.2.1`, then the package will use `1.2.1`."
msgstr ""

#: src/reference/resolver.md:86
msgid ""
"For an example of a possible exception, see [Rust version](#rust-version)."
msgstr ""

#: src/reference/resolver.md:88
msgid "Version requirements"
msgstr ""

#: src/reference/resolver.md:90
msgid ""
"Package specify what versions they support, rejecting all others, through "
"[version requirements](specifying-dependencies.md#version-requirement-"
"syntax)."
msgstr ""

#: src/reference/resolver.md:94
msgid ""
"```toml\n"
"[dependencies]\n"
"bitflags = \"1.0\"  # meaning `>=1.0.0,<2.0.0`\n"
"```"
msgstr ""

#: src/reference/resolver.md:98
msgid ""
"If at the time the `Cargo.lock` file is generated, the greatest version of "
"`bitflags` is `1.2.1`, then the package will use `1.2.1` because it is the "
"greatest within the compatibility range. If `2.0.0` is published, it will "
"still use `1.2.1` because `2.0.0` is considered incompatible."
msgstr ""

#: src/reference/resolver.md:105 src/reference/features.md:448
msgid "SemVer compatibility"
msgstr ""

#: src/reference/resolver.md:107
msgid ""
"Cargo assumes packages follow [SemVer](https://semver.org/) and will unify "
"dependency versions if they are [SemVer](https://semver.org/) compatible "
"according to the [Caret version requirements](specifying-"
"dependencies.md#default-requirements). If two compatible versions cannot be "
"unified because of conflicting version requirements, Cargo will error."
msgstr ""

#: src/reference/resolver.md:112
msgid ""
"See the [SemVer Compatibility](semver.md) chapter for guidance on what is "
"considered a \"compatible\" change."
msgstr ""

#: src/reference/resolver.md:115
msgid "Examples:"
msgstr ""

#: src/reference/resolver.md:117
msgid ""
"The following two packages will have their dependencies on `bitflags` "
"unified because any version picked will be compatible with each other."
msgstr ""

#: src/reference/resolver.md:118
msgid ""
"```toml\n"
"# Package A\n"
"[dependencies]\n"
"bitflags = \"1.0\"  # meaning `>=1.0.0,<2.0.0`\n"
"\n"
"# Package B\n"
"[dependencies]\n"
"bitflags = \"1.1\"  # meaning `>=1.1.0,<2.0.0`\n"
"```"
msgstr ""

#: src/reference/resolver.md:128
msgid ""
"The following packages will error because the version requirements conflict, "
"selecting two distinct compatible versions."
msgstr ""

#: src/reference/resolver.md:129
msgid ""
"```toml\n"
"# Package A\n"
"[dependencies]\n"
"log = \"=0.4.11\"\n"
"\n"
"# Package B\n"
"[dependencies]\n"
"log = \"=0.4.8\"\n"
"```"
msgstr ""

#: src/reference/resolver.md:139
msgid ""
"The following two packages will not have their dependencies on `rand` "
"unified because only incompatible versions are available for each. Instead, "
"two different versions (e.g. 0.6.5 and 0.7.3) will be resolved and built. "
"This can lead to potential problems, see the [Version-incompatibility "
"hazards](#version-incompatibility-hazards) section for more details."
msgstr ""

#: src/reference/resolver.md:142
msgid ""
"```toml\n"
"# Package A\n"
"[dependencies]\n"
"rand = \"0.7\"  # meaning `>=0.7.0,<0.8.0`\n"
"\n"
"# Package B\n"
"[dependencies]\n"
"rand = \"0.6\"  # meaning `>=0.6.0,<0.7.0`\n"
"```"
msgstr ""

#: src/reference/resolver.md:152
msgid ""
"Generally, the following two packages will not have their dependencies "
"unified because incompatible versions are available that satisfy the version "
"requirements: Instead, two different versions (e.g. 0.6.5 and 0.7.3) will be "
"resolved and built. The application of other constraints or heuristics may "
"cause these to be unified, picking one version (e.g. 0.6.5)."
msgstr ""

#: src/reference/resolver.md:156
msgid ""
"```toml\n"
"# Package A\n"
"[dependencies]\n"
"rand = \">=0.6,<0.8.0\"\n"
"\n"
"# Package B\n"
"[dependencies]\n"
"rand = \"0.6\"  # meaning `>=0.6.0,<0.7.0`\n"
"```"
msgstr ""

#: src/reference/resolver.md:171
msgid "Version-incompatibility hazards"
msgstr ""

#: src/reference/resolver.md:173
msgid ""
"When multiple versions of a crate appear in the resolve graph, this can "
"cause problems when types from those crates are exposed by the crates using "
"them. This is because the types and items are considered different by the "
"Rust compiler, even if they have the same name. Libraries should take care "
"when publishing a SemVer-incompatible version (for example, publishing "
"`2.0.0` after `1.0.0` has been in use), particularly for libraries that are "
"widely used."
msgstr ""

#: src/reference/resolver.md:181
msgid ""
"The \"[semver trick](https://github.com/dtolnay/semver-trick)\" is a "
"workaround for this problem of publishing a breaking change while retaining "
"compatibility with older versions. The linked page goes into detail about "
"what the problem is and how to address it. In short, when a library wants to "
"publish a SemVer-breaking release, publish the new release, and also publish "
"a point release of the previous version that reexports the types from the "
"newer version."
msgstr ""

#: src/reference/resolver.md:188
msgid ""
"These incompatibilities usually manifest as a compile-time error, but "
"sometimes they will only appear as a runtime misbehavior. For example, let's "
"say there is a common library named `foo` that ends up appearing with both "
"version `1.0.0` and `2.0.0` in the resolve graph. If [`downcast_ref`](../../"
"std/any/trait.Any.html#method.downcast_ref) is used on a object created by a "
"library using version `1.0.0`, and the code calling `downcast_ref` is "
"downcasting to a type from version `2.0.0`, the downcast will fail at "
"runtime."
msgstr ""

#: src/reference/resolver.md:196
msgid ""
"It is important to make sure that if you have multiple versions of a library "
"that you are properly using them, especially if it is ever possible for the "
"types from different versions to be used together. The [`cargo tree -d`](../"
"commands/cargo-tree.md) command can be used to identify duplicate versions "
"and where they come from. Similarly, it is important to consider the impact "
"on the ecosystem if you publish a SemVer-incompatible version of a popular "
"library."
msgstr ""

#: src/reference/resolver.md:208
msgid ""
"To support developing software with a minimum supported [Rust version](rust-"
"version.md), the resolver can take into account a dependency version's "
"compatibility with your Rust version. This is controlled by the config field "
"[`resolver.incompatible-rust-versions`](config.md#resolverincompatible-rust-"
"versions)."
msgstr ""

#: src/reference/resolver.md:212
msgid ""
"With the `fallback` setting, the resolver will prefer packages with a Rust "
"version that is less than or equal to your own Rust version. For example, "
"you are using Rust 1.85 to develop the following package:"
msgstr ""

#: src/reference/resolver.md:215
msgid ""
"```toml\n"
"[package]\n"
"name = \"my-cli\"\n"
"rust-version = \"1.62\"\n"
"\n"
"[dependencies]\n"
"clap = \"4.0\"  # resolves to 4.0.32\n"
"```"
msgstr ""

#: src/reference/resolver.md:223
msgid ""
"The resolver would pick version 4.0.32 because it has a Rust version of "
"1.60.0."
msgstr ""

#: src/reference/resolver.md:224
msgid ""
"4.0.0 is not picked because it is a [lower version number](#version-numbers) "
"despite it also having a Rust version of 1.60.0."
msgstr ""

#: src/reference/resolver.md:225
msgid ""
"4.5.20 is not picked because it is incompatible with `my-cli`'s Rust version "
"of 1.62 despite having a much [higher version](#version-numbers) and it has "
"a Rust version of 1.74.0 which is compatible with your 1.85 toolchain."
msgstr ""

#: src/reference/resolver.md:227
msgid ""
"If a version requirement does not include a Rust version compatible "
"dependency version, the resolver won't error but will instead pick a "
"version, even if its potentially suboptimal. For example, you change the "
"dependency on `clap`:"
msgstr ""

#: src/reference/resolver.md:230
msgid ""
"```toml\n"
"[package]\n"
"name = \"my-cli\"\n"
"rust-version = \"1.62\"\n"
"\n"
"[dependencies]\n"
"clap = \"4.2\"  # resolves to 4.5.20\n"
"```"
msgstr ""

#: src/reference/resolver.md:238
msgid ""
"No version of `clap` matches that [version requirement](#version-"
"requirements) that is compatible with Rust version 1.62. The resolver will "
"then pick an incompatible version, like 4.5.20 despite it having a Rust "
"version of 1.74."
msgstr ""

#: src/reference/resolver.md:242
msgid ""
"When the resolver selects a dependency version of a package, it does not "
"know all the workspace members that will eventually have a transitive "
"dependency on that version and so it cannot take into account only the Rust "
"versions relevant for that dependency. The resolver has heuristics to find a "
"\"good enough\" solution when workspace members have different Rust "
"versions. This applies even for packages in a workspace without a Rust "
"version."
msgstr ""

#: src/reference/resolver.md:248
msgid ""
"When a workspace has members with different Rust versions, the resolver may "
"pick a lower dependency version than necessary. For example, you have the "
"following workspace members:"
msgstr ""

#: src/reference/resolver.md:251
msgid ""
"```toml\n"
"[package]\n"
"name = \"a\"\n"
"rust-version = \"1.62\"\n"
"\n"
"[package]\n"
"name = \"b\"\n"
"\n"
"[dependencies]\n"
"clap = \"4.2\"  # resolves to 4.5.20\n"
"```"
msgstr ""

#: src/reference/resolver.md:262
msgid ""
"Though package `b` does not have a Rust version and could use a higher "
"version like 4.5.20, 4.0.32 will be selected because of package `a`'s Rust "
"version of 1.62."
msgstr ""

#: src/reference/resolver.md:265
msgid ""
"Or the resolver may pick too high of a version. For example, you have the "
"following workspace members:"
msgstr ""

#: src/reference/resolver.md:267
msgid ""
"```toml\n"
"[package]\n"
"name = \"a\"\n"
"rust-version = \"1.62\"\n"
"\n"
"[dependencies]\n"
"clap = \"4.2\"  # resolves to 4.5.20\n"
"\n"
"[package]\n"
"name = \"b\"\n"
"\n"
"[dependencies]\n"
"clap = \"4.5\"  # resolves to 4.5.20\n"
"```"
msgstr ""

#: src/reference/resolver.md:281
msgid ""
"Though each package has a version requirement for `clap` that would meet its "
"own Rust version, because of [version unification](#version-numbers), the "
"resolver will need to pick one version that works in both cases and that "
"would be a version like 4.5.20."
msgstr ""

#: src/reference/resolver.md:290
msgid ""
"For the purpose of generating `Cargo.lock`, the resolver builds the "
"dependency graph as-if all [features](features.md) of all [workspace]"
"(workspaces.md) members are enabled. This ensures that any optional "
"dependencies are available and properly resolved with the rest of the graph "
"when features are added or removed with the [`--features` command-line flag]"
"(features.md#command-line-feature-options). The resolver runs a second time "
"to determine the actual features used when _compiling_ a crate, based on the "
"features selected on the command-line."
msgstr ""

#: src/reference/resolver.md:298
msgid ""
"Dependencies are resolved with the union of all features enabled on them. "
"For example, if one package depends on the [`im`](https://crates.io/crates/"
"im) package with the [`serde` dependency](https://github.com/bodil/im-rs/"
"blob/v15.0.0/Cargo.toml#L46) enabled and another package depends on it with "
"the [`rayon` dependency](https://github.com/bodil/im-rs/blob/v15.0.0/"
"Cargo.toml#L47) enabled, then `im` will be built with both features enabled, "
"and the `serde` and `rayon` crates will be included in the resolve graph. If "
"no packages depend on `im` with those features, then those optional "
"dependencies will be ignored, and they will not affect resolution."
msgstr ""

#: src/reference/resolver.md:306
msgid ""
"When building multiple packages in a workspace (such as with `--workspace` "
"or multiple `-p` flags), the features of the dependencies of all of those "
"packages are unified. If you have a circumstance where you want to avoid "
"that unification for different workspace members, you will need to build "
"them via separate `cargo` invocations."
msgstr ""

#: src/reference/resolver.md:312
msgid ""
"The resolver will skip over versions of packages that are missing required "
"features. For example, if a package depends on version `^1` of [`regex`]"
"(https://crates.io/crates/regex) with the [`perf` feature](https://"
"github.com/rust-lang/regex/blob/1.3.0/Cargo.toml#L56), then the oldest "
"version it can select is `1.3.0`, because versions prior to that did not "
"contain the `perf` feature. Similarly, if a feature is removed from a new "
"release, then packages that require that feature will be stuck on the older "
"releases that contain that feature. It is discouraged to remove features in "
"a SemVer-compatible release. Beware that optional dependencies also define "
"an implicit feature, so removing an optional dependency or making it non-"
"optional can cause problems, see [removing an optional dependency]"
"(semver.md#cargo-remove-opt-dep)."
msgstr ""

#: src/reference/resolver.md:332 src/reference/features.md:348
msgid "Feature resolver version 2"
msgstr ""

#: src/reference/resolver.md:334
msgid ""
"When `resolver = \"2\"` is specified in `Cargo.toml` (see [resolver versions]"
"(#resolver-versions) below), a different feature resolver is used which uses "
"a different algorithm for unifying features. The version `\"1\"` resolver "
"will unify features for a package no matter where it is specified. The "
"version `\"2\"` resolver will avoid unifying features in the following "
"situations:"
msgstr ""

#: src/reference/resolver.md:341
msgid ""
"Features for target-specific dependencies are not enabled if the target is "
"not currently being built. For example:"
msgstr ""

#: src/reference/resolver.md:344
msgid ""
"```toml\n"
"[dependencies.common]\n"
"version = \"1.0\"\n"
"features = [\"f1\"]\n"
"\n"
"[target.'cfg(windows)'.dependencies.common]\n"
"version = \"1.0\"\n"
"features = [\"f2\"]\n"
"```"
msgstr ""

#: src/reference/resolver.md:354
msgid ""
"When building this example for a non-Windows platform, the `f2` feature will "
"_not_ be enabled."
msgstr ""

#: src/reference/resolver.md:357
msgid ""
"Features enabled on [build-dependencies](specifying-dependencies.md#build-"
"dependencies) or proc-macros will not be unified when those same "
"dependencies are used as a normal dependency. For example:"
msgstr ""

#: src/reference/resolver.md:360
msgid ""
"```toml\n"
"[dependencies]\n"
"log = \"0.4\"\n"
"\n"
"[build-dependencies]\n"
"log = {version = \"0.4\", features=['std']}\n"
"```"
msgstr ""

#: src/reference/resolver.md:368
msgid ""
"When building the build script, the `log` crate will be built with the `std` "
"feature. When building the library of your package, it will not enable the "
"feature."
msgstr ""

#: src/reference/resolver.md:372
msgid ""
"Features enabled on [dev-dependencies](specifying-"
"dependencies.md#development-dependencies) will not be unified when those "
"same dependencies are used as a normal dependency, unless those dev-"
"dependencies are currently being built. For example:"
msgstr ""

#: src/reference/resolver.md:376
msgid ""
"```toml\n"
"[dependencies]\n"
"serde = {version = \"1.0\", default-features = false}\n"
"\n"
"[dev-dependencies]\n"
"serde = {version = \"1.0\", features = [\"std\"]}\n"
"```"
msgstr ""

#: src/reference/resolver.md:384
msgid ""
"In this example, the library will normally link against `serde` without the "
"`std` feature. However, when built as a test or example, it will include the "
"`std` feature. For example, `cargo test` or `cargo build --all-targets` will "
"unify these features. Note that dev-dependencies in dependencies are always "
"ignored, this is only relevant for the top-level package or workspace "
"members."
msgstr ""

#: src/reference/resolver.md:395
msgid "`links`"
msgstr ""

#: src/reference/resolver.md:397
msgid ""
"The [`links` field](manifest.md#the-links-field) is used to ensure only one "
"copy of a native library is linked into a binary. The resolver will attempt "
"to find a graph where there is only one instance of each `links` name. If it "
"is unable to find a graph that satisfies that constraint, it will return an "
"error."
msgstr ""

#: src/reference/resolver.md:402
msgid ""
"For example, it is an error if one package depends on [`libgit2-sys`]"
"(https://crates.io/crates/libgit2-sys) version `0.11` and another depends on "
"`0.12`, because Cargo is unable to unify those, but they both link to the "
"`git2` native library. Due to this requirement, it is encouraged to be very "
"careful when making SemVer-incompatible releases with the `links` field if "
"your library is in common use."
msgstr ""

#: src/reference/resolver.md:411
msgid "Yanked versions"
msgstr ""

#: src/reference/resolver.md:413
msgid ""
"[Yanked releases](publishing.md#cargo-yank) are those that are marked that "
"they should not be used. When the resolver is building the graph, it will "
"ignore all yanked releases unless they already exist in the `Cargo.lock` "
"file or are explicitly requested by the [`--precise`](../commands/cargo-"
"update.md#option-cargo-update---precise) flag of `cargo update` (nightly "
"only)."
msgstr ""

#: src/reference/resolver.md:421
msgid "Dependency updates"
msgstr ""

#: src/reference/resolver.md:423
msgid ""
"Dependency resolution is automatically performed by all Cargo commands that "
"need to know about the dependency graph. For example, [`cargo build`](../"
"commands/cargo-build.md) will run the resolver to discover all the "
"dependencies to build. After the first time it runs, the result is stored in "
"the `Cargo.lock` file. Subsequent commands will run the resolver, keeping "
"dependencies locked to the versions in `Cargo.lock` _if it can_."
msgstr ""

#: src/reference/resolver.md:430
msgid ""
"If the dependency list in `Cargo.toml` has been modified, for example "
"changing the version of a dependency from `1.0` to `2.0`, then the resolver "
"will select a new version for that dependency that matches the new "
"requirements. If that new dependency introduces new requirements, those new "
"requirements may also trigger additional updates. The `Cargo.lock` file will "
"be updated with the new result. The `--locked` or `--frozen` flags can be "
"used to change this behavior to prevent automatic updates when requirements "
"change, and return an error instead."
msgstr ""

#: src/reference/resolver.md:439
msgid ""
"[`cargo update`](../commands/cargo-update.md) can be used to update the "
"entries in `Cargo.lock` when new versions are published. Without any "
"options, it will attempt to update all packages in the lock file. The `-p` "
"flag can be used to target the update for a specific package, and other "
"flags such as `--recursive` or `--precise` can be used to control how "
"versions are selected."
msgstr ""

#: src/reference/resolver.md:448 src/reference/profiles.md:410
msgid "Overrides"
msgstr ""

#: src/reference/resolver.md:450
msgid ""
"Cargo has several mechanisms to override dependencies within the graph. The "
"[Overriding Dependencies](overriding-dependencies.md) chapter goes into "
"detail on how to use overrides. The overrides appear as an overlay to a "
"registry, replacing the patched version with the new entry. Otherwise, "
"resolution is performed like normal."
msgstr ""

#: src/reference/resolver.md:457
msgid "Dependency kinds"
msgstr ""

#: src/reference/resolver.md:459
msgid ""
"There are three kinds of dependencies in a package: normal, [build]"
"(specifying-dependencies.md#build-dependencies), and [dev](specifying-"
"dependencies.md#development-dependencies). For the most part these are all "
"treated the same from the perspective of the resolver. One difference is "
"that dev-dependencies for non-workspace members are always ignored, and do "
"not influence resolution."
msgstr ""

#: src/reference/resolver.md:464
msgid ""
"[Platform-specific dependencies](specifying-dependencies.md#platform-"
"specific-dependencies) with the `[target]` table are resolved as-if all "
"platforms are enabled. In other words, the resolver ignores the platform or "
"`cfg` expression."
msgstr ""

#: src/reference/resolver.md:472
msgid "dev-dependency cycles"
msgstr ""

#: src/reference/resolver.md:474
msgid ""
"Usually the resolver does not allow cycles in the graph, but it does allow "
"them for [dev-dependencies](specifying-dependencies.md#development-"
"dependencies). For example, project \"foo\" has a dev-dependency on \"bar\", "
"which has a normal dependency on \"foo\" (usually as a \"path\" dependency). "
"This is allowed because there isn't really a cycle from the perspective of "
"the build artifacts. In this example, the \"foo\" library is built (which "
"does not need \"bar\" because \"bar\" is only used for tests), and then "
"\"bar\" can be built depending on \"foo\", then the \"foo\" tests can be "
"built linking to \"bar\"."
msgstr ""

#: src/reference/resolver.md:483
msgid ""
"Beware that this can lead to confusing errors. In the case of building "
"library unit tests, there are actually two copies of the library linked into "
"the final test binary: the one that was linked with \"bar\", and the one "
"built that contains the unit tests. Similar to the issues highlighted in the "
"[Version-incompatibility hazards](#version-incompatibility-hazards) section, "
"the types between the two are not compatible. Be careful when exposing types "
"of \"foo\" from \"bar\" in this situation, since the \"foo\" unit tests "
"won't treat them the same as the local types."
msgstr ""

#: src/reference/resolver.md:492
msgid ""
"If possible, try to split your package into multiple packages and "
"restructure it so that it remains strictly acyclic."
msgstr ""

#: src/reference/resolver.md:495
msgid "Resolver versions"
msgstr ""

#: src/reference/resolver.md:497
msgid ""
"Different resolver behavior can be specified through the resolver version in "
"`Cargo.toml` like this:"
msgstr ""

#: src/reference/resolver.md:500 src/reference/features.md:353
msgid ""
"```toml\n"
"[package]\n"
"name = \"my-package\"\n"
"version = \"1.0.0\"\n"
"resolver = \"2\"\n"
"```"
msgstr ""

#: src/reference/resolver.md:506
msgid "`\"1\"` (default)"
msgstr ""

#: src/reference/resolver.md:507
msgid ""
"`\"2\"` ([`edition = \"2021\"`](manifest.md#the-edition-field) default): "
"Introduces changes in [feature unification](#features). See the [features "
"chapter](features.md#feature-resolver-version-2) for more details."
msgstr ""

#: src/reference/resolver.md:510
msgid ""
"`\"3\"` ([`edition = \"2024\"`](manifest.md#the-edition-field) default, "
"requires Rust 1.84+): Change the default for [`resolver.incompatible-rust-"
"versions`](config.md#resolverincompatible-rust-versions) from `allow` to "
"`fallback`"
msgstr ""

#: src/reference/resolver.md:512
msgid ""
"The resolver is a global option that affects the entire workspace. The "
"`resolver` version in dependencies is ignored, only the value in the top-"
"level package will be used. If using a [virtual workspace]"
"(workspaces.md#virtual-workspace), the version should be specified in the "
"`[workspace]` table, for example:"
msgstr ""

#: src/reference/resolver.md:517
msgid ""
"```toml\n"
"[workspace]\n"
"members = [\"member1\", \"member2\"]\n"
"resolver = \"2\"\n"
"```"
msgstr ""

#: src/reference/resolver.md:523
msgid "**MSRV:** Requires 1.51+"
msgstr ""

#: src/reference/resolver.md:528
msgid "Recommendations"
msgstr ""

#: src/reference/resolver.md:530
msgid ""
"The following are some recommendations for setting the version within your "
"package, and for specifying dependency requirements. These are general "
"guidelines that should apply to common situations, but of course some "
"situations may require specifying unusual requirements."
msgstr ""

#: src/reference/resolver.md:535
msgid ""
"Follow the [SemVer guidelines](semver.md) when deciding how to update your "
"version number, and whether or not you will need to make a SemVer-"
"incompatible version change."
msgstr ""

#: src/reference/resolver.md:538
msgid ""
"Use caret requirements for dependencies, such as `\"1.2.3\"`, for most "
"situations. This ensures that the resolver can be maximally flexible in "
"choosing a version while maintaining build compatibility."
msgstr ""

#: src/reference/resolver.md:541
msgid ""
"Specify all three components with the version you are currently using. This "
"helps set the minimum version that will be used, and ensures that other "
"users won't end up with an older version of the dependency that might be "
"missing something that your package requires."
msgstr ""

#: src/reference/resolver.md:545
msgid ""
"Avoid `*` requirements, as they are not allowed on [crates.io](https://"
"crates.io/), and they can pull in SemVer-breaking changes during a normal "
"`cargo update`."
msgstr ""

#: src/reference/resolver.md:547
msgid ""
"Avoid overly broad version requirements. For example, `>=2.0.0` can pull in "
"any SemVer-incompatible version, like version `5.0.0`, which can result in "
"broken builds in the future."
msgstr ""

#: src/reference/resolver.md:550
msgid ""
"Avoid overly narrow version requirements if possible. For example, if you "
"specify a tilde requirement like `bar=\"~1.3\"`, and another package "
"specifies a requirement of `bar=\"1.4\"`, this will fail to resolve, even "
"though minor releases should be compatible."
msgstr ""

#: src/reference/resolver.md:554
msgid ""
"Try to keep the dependency versions up-to-date with the actual minimum "
"versions that your library requires. For example, if you have a requirement "
"of `bar=\"1.0.12\"`, and then in a future release you start using new "
"features added in the `1.1.0` release of \"bar\", update your dependency "
"requirement to `bar=\"1.1.0\"`."
msgstr ""

#: src/reference/resolver.md:560
msgid ""
"If you fail to do this, it may not be immediately obvious because Cargo can "
"opportunistically choose the newest version when you run a blanket `cargo "
"update`. However, if another user depends on your library, and runs `cargo "
"update your-library`, it will _not_ automatically update \"bar\" if it is "
"locked in their `Cargo.lock`. It will only update \"bar\" in that situation "
"if the dependency declaration is also updated. Failure to do so can cause "
"confusing build errors for the user using `cargo update your-library`."
msgstr ""

#: src/reference/resolver.md:567
msgid ""
"If two packages are tightly coupled, then an `=` dependency requirement may "
"help ensure that they stay in sync. For example, a library with a companion "
"proc-macro library will sometimes make assumptions between the two libraries "
"that won't work well if the two are out of sync (and it is never expected to "
"use the two libraries independently). The parent library can use an `=` "
"requirement on the proc-macro, and re-export the macros for easy access."
msgstr ""

#: src/reference/resolver.md:573
msgid ""
"`0.0.x` versions can be used for packages that are permanently unstable."
msgstr ""

#: src/reference/resolver.md:575
msgid ""
"In general, the stricter you make the dependency requirements, the more "
"likely it will be for the resolver to fail. Conversely, if you use "
"requirements that are too loose, it may be possible for new versions to be "
"published that will break the build."
msgstr ""

#: src/reference/resolver.md:583
msgid "Troubleshooting"
msgstr ""

#: src/reference/resolver.md:585
msgid ""
"The following illustrates some problems you may experience, and some "
"possible solutions."
msgstr ""

#: src/reference/resolver.md:588
msgid "Why was a dependency included?"
msgstr ""

#: src/reference/resolver.md:590
msgid ""
"Say you see dependency `rand` in the `cargo check` output but don't think "
"it's needed and want to understand why it's being pulled in."
msgstr ""

#: src/reference/resolver.md:592
msgid "You can run"
msgstr ""

#: src/reference/resolver.md:602
msgid "Why was that feature on this dependency enabled?"
msgstr ""

#: src/reference/resolver.md:604
msgid ""
"You might identify that it was an activated feature that caused `rand` to "
"show up.  **To figure out which package activated the feature, you can add "
"the `--edges features`**"
msgstr ""

#: src/reference/resolver.md:614
msgid "Unexpected dependency duplication"
msgstr ""

#: src/reference/resolver.md:616
msgid "You see multiple instances of `rand` when you run"
msgstr ""

#: src/reference/resolver.md:626
msgid ""
"The resolver algorithm has converged on a solution that includes two copies "
"of a dependency when one would suffice. For example:"
msgstr ""

#: src/reference/resolver.md:629
msgid ""
"```toml\n"
"# Package A\n"
"[dependencies]\n"
"rand = \"0.7\"\n"
"\n"
"# Package B\n"
"[dependencies]\n"
"rand = \">=0.6\"  # note: open requirements such as this are discouraged\n"
"```"
msgstr ""

#: src/reference/resolver.md:639
msgid ""
"In this example, Cargo may build two copies of the `rand` crate, even though "
"a single copy at version `0.7.3` would meet all requirements. This is "
"because the resolver's algorithm favors building the latest available "
"version of `rand` for Package B, which is `0.8.5` at the time of this "
"writing, and that is incompatible with Package A's specification. The "
"resolver's algorithm does not currently attempt to \"deduplicate\" in this "
"situation."
msgstr ""

#: src/reference/resolver.md:646
msgid ""
"The use of open-ended version requirements like `>=0.6` is discouraged in "
"Cargo. But, if you run into this situation, the [`cargo update`](../commands/"
"cargo-update.md) command with the `--precise` flag can be used to manually "
"remove such duplications."
msgstr ""

#: src/reference/resolver.md:652
msgid "Why wasn't a newer version selected?"
msgstr ""

#: src/reference/resolver.md:654
msgid ""
"Say you noticed that the latest version of a dependency wasn't selected when "
"you ran:"
msgstr ""

#: src/reference/resolver.md:658
msgid "You can enable some extra logging to see why this happened:"
msgstr ""

#: src/reference/resolver.md:662
msgid "**Note:** Cargo log targets and levels may change over time."
msgstr ""

#: src/reference/resolver.md:664
msgid "SemVer-breaking patch release breaks the build"
msgstr ""

#: src/reference/resolver.md:666
msgid ""
"Sometimes a project may inadvertently publish a point release with a SemVer-"
"breaking change. When users update with `cargo update`, they will pick up "
"this new release, and then their build may break. In this situation, it is "
"recommended that the project should [yank](publishing.md#cargo-yank) the "
"release, and either remove the SemVer-breaking change, or publish it as a "
"new SemVer-major version increase."
msgstr ""

#: src/reference/resolver.md:672
msgid ""
"If the change happened in a third-party project, if possible try to "
"(politely!) work with the project to resolve the issue."
msgstr ""

#: src/reference/resolver.md:675
msgid ""
"While waiting for the release to be yanked, some workarounds depend on the "
"circumstances:"
msgstr ""

#: src/reference/resolver.md:678
msgid ""
"If your project is the end product (such as a binary executable), just avoid "
"updating the offending package in `Cargo.lock`. This can be done with the `--"
"precise` flag in [`cargo update`](../commands/cargo-update.md)."
msgstr ""

#: src/reference/resolver.md:681
msgid ""
"If you publish a binary on [crates.io](https://crates.io/), then you can "
"temporarily add an `=` requirement to force the dependency to a specific "
"good version."
msgstr ""

#: src/reference/resolver.md:683
msgid ""
"Binary projects can alternatively recommend users to use the `--locked` flag "
"with [`cargo install`](../commands/cargo-install.md) to use the original "
"`Cargo.lock` that contains the known good version."
msgstr ""

#: src/reference/resolver.md:686
msgid ""
"Libraries may also consider publishing a temporary new release with stricter "
"requirements that avoid the troublesome dependency. You may want to consider "
"using range requirements (instead of `=`) to avoid overly-strict "
"requirements that may conflict with other packages using the same "
"dependency. Once the problem has been resolved, you can publish another "
"point release that relaxes the dependency back to a caret requirement."
msgstr ""

#: src/reference/resolver.md:692
msgid ""
"If it looks like the third-party project is unable or unwilling to yank the "
"release, then one option is to update your code to be compatible with the "
"changes, and update the dependency requirement to set the minimum version to "
"the new release. You will also need to consider if this is a SemVer-breaking "
"change of your own library, for example if it exposes types from the "
"dependency."
msgstr ""

#: src/reference/features.md:3
msgid ""
"Cargo \"features\" provide a mechanism to express [conditional compilation]"
"(../../reference/conditional-compilation.md) and [optional dependencies]"
"(#optional-dependencies). A package defines a set of named features in the "
"`[features]` table of `Cargo.toml`, and each feature can either be enabled "
"or disabled. Features for the package being built can be enabled on the "
"command-line with flags such as `--features`. Features for dependencies can "
"be enabled in the dependency declaration in `Cargo.toml`."
msgstr ""

#: src/reference/features.md:10
msgid ""
"**Note**: New crates or versions published on crates.io are now limited to a "
"maximum of 300 features. Exceptions are granted on a case-by-case basis. See "
"this [blog post](https://blog.rust-lang.org/2023/10/26/broken-badges-and-23k-"
"keywords.html) for details. Participation in solution discussions is "
"encouraged via the crates.io Zulip stream."
msgstr ""

#: src/reference/features.md:17
msgid ""
"See also the [Features Examples](features-examples.md) chapter for some "
"examples of how features can be used."
msgstr ""

#: src/reference/features.md:23
msgid "The `[features]` section"
msgstr ""

#: src/reference/features.md:25
msgid ""
"Features are defined in the `[features]` table in `Cargo.toml`. Each feature "
"specifies an array of other features or optional dependencies that it "
"enables. The following examples illustrate how features could be used for a "
"2D image processing library where support for different image formats can be "
"optionally included:"
msgstr ""

#: src/reference/features.md:37
msgid ""
"With this feature defined, [`cfg` expressions](../../reference/conditional-"
"compilation.md) can be used to conditionally include code to support the "
"requested feature at compile time. For example, inside `lib.rs` of the "
"package could include this:"
msgstr ""

#: src/reference/features.md:42
msgid ""
"// This conditionally includes a module which implements WEBP support.\n"
msgstr ""

#: src/reference/features.md:43
msgid "\"webp\""
msgstr ""

#: src/reference/features.md:47
msgid ""
"Cargo sets features in the package using the `rustc` [`--cfg` flag](../../"
"rustc/command-line-arguments.md#option-cfg), and code can test for their "
"presence with the [`cfg` attribute](../../reference/conditional-"
"compilation.md#the-cfg-attribute) or the [`cfg` macro](../../std/"
"macro.cfg.html)."
msgstr ""

#: src/reference/features.md:50
msgid ""
"Features can list other features to enable. For example, the ICO image "
"format can contain BMP and PNG images, so when it is enabled, it should make "
"sure those other features are enabled, too:"
msgstr ""

#: src/reference/features.md:54
msgid ""
"```toml\n"
"[features]\n"
"bmp = []\n"
"png = []\n"
"ico = [\"bmp\", \"png\"]\n"
"webp = []\n"
"```"
msgstr ""

#: src/reference/features.md:62
msgid ""
"Feature names may include characters from the [Unicode XID standard](https://"
"unicode.org/reports/tr31/) (which includes most letters), and additionally "
"allows starting with `_` or digits `0` through `9`, and after the first "
"character may also contain `-`, `+`, or `.`."
msgstr ""

#: src/reference/features.md:67
msgid ""
"**Note**: [crates.io](https://crates.io/) imposes additional constraints on "
"feature name syntax that they must only be [ASCII alphanumeric](../../std/"
"primitive.char.html#method.is_ascii_alphanumeric) characters or `_`, `-`, or "
"`+`."
msgstr ""

#: src/reference/features.md:78
msgid "The `default` feature"
msgstr ""

#: src/reference/features.md:80
msgid ""
"By default, all features are disabled unless explicitly enabled. This can be "
"changed by specifying the `default` feature:"
msgstr ""

#: src/reference/features.md:83
msgid ""
"```toml\n"
"[features]\n"
"default = [\"ico\", \"webp\"]\n"
"bmp = []\n"
"png = []\n"
"ico = [\"bmp\", \"png\"]\n"
"webp = []\n"
"```"
msgstr ""

#: src/reference/features.md:92
msgid ""
"When the package is built, the `default` feature is enabled which in turn "
"enables the listed features. This behavior can be changed by:"
msgstr ""

#: src/reference/features.md:95
msgid ""
"The `--no-default-features` [command-line flag](#command-line-feature-"
"options) disables the default features of the package."
msgstr ""

#: src/reference/features.md:98
msgid ""
"The `default-features = false` option can be specified in a [dependency "
"declaration](#dependency-features)."
msgstr ""

#: src/reference/features.md:101
msgid ""
"**Note**: Be careful about choosing the default feature set. The default "
"features are a convenience that make it easier to use a package without "
"forcing the user to carefully select which features to enable for common "
"use, but there are some drawbacks. Dependencies automatically enable default "
"features unless `default-features = false` is specified. This can make it "
"difficult to ensure that the default features are not enabled, especially "
"for a dependency that appears multiple times in the dependency graph. Every "
"package must ensure that `default-features = false` is specified to avoid "
"enabling them."
msgstr ""

#: src/reference/features.md:111
msgid ""
"Another issue is that it can be a [SemVer incompatible change](#semver-"
"compatibility) to remove a feature from the default set, so you should be "
"confident that you will keep those features."
msgstr ""

#: src/reference/features.md:115
msgid "Optional dependencies"
msgstr ""

#: src/reference/features.md:117
msgid ""
"Dependencies can be marked \"optional\", which means they will not be "
"compiled by default. For example, let's say that our 2D image processing "
"library uses an external package to handle GIF images. This can be expressed "
"like this:"
msgstr ""

#: src/reference/features.md:121
msgid ""
"```toml\n"
"[dependencies]\n"
"gif = { version = \"0.11.1\", optional = true }\n"
"```"
msgstr ""

#: src/reference/features.md:126
msgid ""
"By default, this optional dependency implicitly defines a feature that looks "
"like this:"
msgstr ""

#: src/reference/features.md:129
msgid ""
"```toml\n"
"[features]\n"
"gif = [\"dep:gif\"]\n"
"```"
msgstr ""

#: src/reference/features.md:134
msgid ""
"This means that this dependency will only be included if the `gif` feature "
"is enabled. The same `cfg(feature = \"gif\")` syntax can be used in the "
"code, and the dependency can be enabled just like any feature such as `--"
"features gif` (see [Command-line feature options](#command-line-feature-"
"options) below)."
msgstr ""

#: src/reference/features.md:140
msgid ""
"In some cases, you may not want to expose a feature that has the same name "
"as the optional dependency. For example, perhaps the optional dependency is "
"an internal detail, or you want to group multiple optional dependencies "
"together, or you just want to use a better name. If you specify the optional "
"dependency with the `dep:` prefix anywhere in the `[features]` table, that "
"disables the implicit feature."
msgstr ""

#: src/reference/features.md:148
msgid ""
"**Note**: The `dep:` syntax is only available starting with Rust 1.60. "
"Previous versions can only use the implicit feature name."
msgstr ""

#: src/reference/features.md:151
msgid ""
"For example, let's say in order to support the AVIF image format, our "
"library needs two other dependencies to be enabled:"
msgstr ""

#: src/reference/features.md:154
msgid ""
"```toml\n"
"[dependencies]\n"
"ravif = { version = \"0.6.3\", optional = true }\n"
"rgb = { version = \"0.8.25\", optional = true }\n"
"\n"
"[features]\n"
"avif = [\"dep:ravif\", \"dep:rgb\"]\n"
"```"
msgstr ""

#: src/reference/features.md:163
msgid ""
"In this example, the `avif` feature will enable the two listed dependencies. "
"This also avoids creating the implicit `ravif` and `rgb` features, since we "
"don't want users to enable those individually as they are internal details "
"to our crate."
msgstr ""

#: src/reference/features.md:168
msgid ""
"**Note**: Another way to optionally include a dependency is to use [platform-"
"specific dependencies](specifying-dependencies.md#platform-specific-"
"dependencies). Instead of using features, these are conditional based on the "
"target platform."
msgstr ""

#: src/reference/features.md:174
msgid "Dependency features"
msgstr ""

#: src/reference/features.md:176
msgid ""
"Features of dependencies can be enabled within the dependency declaration. "
"The `features` key indicates which features to enable:"
msgstr ""

#: src/reference/features.md:179
msgid ""
"```toml\n"
"[dependencies]\n"
"# Enables the `derive` feature of serde.\n"
"serde = { version = \"1.0.118\", features = [\"derive\"] }\n"
"```"
msgstr ""

#: src/reference/features.md:185
msgid ""
"The [`default` features](#the-default-feature) can be disabled using "
"`default-features = false`:"
msgstr ""

#: src/reference/features.md:188
msgid ""
"```toml\n"
"[dependencies]\n"
"flate2 = { version = \"1.0.3\", default-features = false, features = "
"[\"zlib\"] }\n"
"```"
msgstr ""

#: src/reference/features.md:193
msgid ""
"**Note**: This may not ensure the default features are disabled. If another "
"dependency includes `flate2` without specifying `default-features = false`, "
"then the default features will be enabled. See [feature unification]"
"(#feature-unification) below for more details."
msgstr ""

#: src/reference/features.md:198
msgid ""
"Features of dependencies can also be enabled in the `[features]` table. The "
"syntax is `\"package-name/feature-name\"`. For example:"
msgstr ""

#: src/reference/features.md:201
msgid ""
"```toml\n"
"[dependencies]\n"
"jpeg-decoder = { version = \"0.1.20\", default-features = false }\n"
"\n"
"[features]\n"
"# Enables parallel processing support by enabling the \"rayon\" feature of "
"jpeg-decoder.\n"
"parallel = [\"jpeg-decoder/rayon\"]\n"
"```"
msgstr ""

#: src/reference/features.md:210
msgid ""
"The `\"package-name/feature-name\"` syntax will also enable `package-name` "
"if it is an optional dependency. Often this is not what you want. You can "
"add a `?` as in `\"package-name?/feature-name\"` which will only enable the "
"given feature if something else enables the optional dependency."
msgstr ""

#: src/reference/features.md:215
msgid "**Note**: The `?` syntax is only available starting with Rust 1.60."
msgstr ""

#: src/reference/features.md:217
msgid ""
"For example, let's say we have added some serialization support to our "
"library, and it requires enabling a corresponding feature in some optional "
"dependencies. That can be done like this:"
msgstr ""

#: src/reference/features.md:222
msgid ""
"```toml\n"
"[dependencies]\n"
"serde = { version = \"1.0.133\", optional = true }\n"
"rgb = { version = \"0.8.25\", optional = true }\n"
"\n"
"[features]\n"
"serde = [\"dep:serde\", \"rgb?/serde\"]\n"
"```"
msgstr ""

#: src/reference/features.md:231
msgid ""
"In this example, enabling the `serde` feature will enable the serde "
"dependency. It will also enable the `serde` feature for the `rgb` "
"dependency, but only if something else has enabled the `rgb` dependency."
msgstr ""

#: src/reference/features.md:236
msgid "Command-line feature options"
msgstr ""

#: src/reference/features.md:238
msgid ""
"The following command-line flags can be used to control which features are "
"enabled:"
msgstr ""

#: src/reference/features.md:241
msgid ""
"`--features` _FEATURES_: Enables the listed features. Multiple features may "
"be separated with commas or spaces. If using spaces, be sure to use quotes "
"around all the features if running Cargo from a shell (such as `--features "
"\"foo bar\"`). If building multiple packages in a [workspace]"
"(workspaces.md), the `package-name/feature-name` syntax can be used to "
"specify features for specific workspace members."
msgstr ""

#: src/reference/features.md:248
msgid ""
"`--all-features`: Activates all features of all packages selected on the "
"command-line."
msgstr ""

#: src/reference/features.md:251
msgid ""
"`--no-default-features`: Does not activate the [`default` feature](#the-"
"default-feature) of the selected packages."
msgstr ""

#: src/reference/features.md:256
msgid "Feature unification"
msgstr ""

#: src/reference/features.md:258
msgid ""
"Features are unique to the package that defines them. Enabling a feature on "
"a package does not enable a feature of the same name on other packages."
msgstr ""

#: src/reference/features.md:261
msgid ""
"When a dependency is used by multiple packages, Cargo will use the union of "
"all features enabled on that dependency when building it. This helps ensure "
"that only a single copy of the dependency is used. See the [features section]"
"(resolver.md#features) of the resolver documentation for more details."
msgstr ""

#: src/reference/features.md:266
msgid ""
"For example, let's look at the [`winapi`](https://crates.io/crates/winapi) "
"package which uses a [large number](https://github.com/retep998/winapi-rs/"
"blob/0.3.9/Cargo.toml#L25-L431) of features. If your package depends on a "
"package `foo` which enables the \"fileapi\" and \"handleapi\" features of "
"`winapi`, and another dependency `bar` which enables the \"std\" and "
"\"winnt\" features of `winapi`, then `winapi` will be built with all four of "
"those features enabled."
msgstr ""

#: src/reference/features.md:272
msgid "![winapi features example](../images/winapi-features.svg)"
msgstr ""

#: src/reference/features.md:277
msgid ""
"A consequence of this is that features should be _additive_. That is, "
"enabling a feature should not disable functionality, and it should usually "
"be safe to enable any combination of features. A feature should not "
"introduce a [SemVer-incompatible change](#semver-compatibility)."
msgstr ""

#: src/reference/features.md:282
msgid ""
"For example, if you want to optionally support [`no_std`](../../reference/"
"names/preludes.html#the-no_std-attribute) environments, **do not** use a "
"`no_std` feature. Instead, use a `std` feature that _enables_ `std`. For "
"example:"
msgstr ""

#: src/reference/features.md:289 src/reference/features.md:292
msgid "\"std\""
msgstr ""

#: src/reference/features.md:294 src/reference/unstable.md:893
msgid "// ...\n"
msgstr ""

#: src/reference/features.md:301
msgid "Mutually exclusive features"
msgstr ""

#: src/reference/features.md:303
msgid ""
"There are rare cases where features may be mutually incompatible with one "
"another. This should be avoided if at all possible, because it requires "
"coordinating all uses of the package in the dependency graph to cooperate to "
"avoid enabling them together. If it is not possible, consider adding a "
"compile error to detect this scenario. For example:"
msgstr ""

#: src/reference/features.md:310 src/reference/external-tools.md:226
#: src/reference/registry-index.md:124 src/reference/registry-web-api.md:78
msgid "\"foo\""
msgstr ""

#: src/reference/features.md:310
msgid "\"bar\""
msgstr ""

#: src/reference/features.md:311
msgid ""
"\"feature \\\"foo\\\" and feature \\\"bar\\\" cannot be enabled at the same "
"time\""
msgstr ""

#: src/reference/features.md:314
msgid ""
"Instead of using mutually exclusive features, consider some other options:"
msgstr ""

#: src/reference/features.md:316
msgid "Split the functionality into separate packages."
msgstr ""

#: src/reference/features.md:317
msgid ""
"When there is a conflict, [choose one feature over another](features-"
"examples.md#feature-precedence). The [`cfg-if`](https://crates.io/crates/cfg-"
"if) package can help with writing more complex `cfg` expressions."
msgstr ""

#: src/reference/features.md:320
msgid ""
"Architect the code to allow the features to be enabled concurrently, and use "
"runtime options to control which is used. For example, use a config file, "
"command-line argument, or environment variable to choose which behavior to "
"enable."
msgstr ""

#: src/reference/features.md:328
msgid "Inspecting resolved features"
msgstr ""

#: src/reference/features.md:330
msgid ""
"In complex dependency graphs, it can sometimes be difficult to understand "
"how different features get enabled on various packages. The [`cargo tree`]"
"(../commands/cargo-tree.md) command offers several options to help inspect "
"and visualize which features are enabled. Some options to try:"
msgstr ""

#: src/reference/features.md:335
msgid ""
"`cargo tree -e features`: This will show features in the dependency graph. "
"Each feature will appear showing which package enabled it."
msgstr ""

#: src/reference/features.md:337
msgid ""
"`cargo tree -f \"{p} {f}\"`: This is a more compact view that shows a comma-"
"separated list of features enabled on each package."
msgstr ""

#: src/reference/features.md:339
msgid ""
"`cargo tree -e features -i foo`: This will invert the tree, showing how "
"features flow into the given package \"foo\". This can be useful because "
"viewing the entire graph can be quite large and overwhelming. Use this when "
"you are trying to figure out which features are enabled on a specific "
"package and why. See the example at the bottom of the [`cargo tree`](../"
"commands/cargo-tree.md) page on how to read this."
msgstr ""

#: src/reference/features.md:350
msgid ""
"A different feature resolver can be specified with the `resolver` field in "
"`Cargo.toml`, like this:"
msgstr ""

#: src/reference/features.md:360
msgid ""
"See the [resolver versions](resolver.md#resolver-versions) section for more "
"detail on specifying resolver versions."
msgstr ""

#: src/reference/features.md:363
msgid ""
"The version `\"2\"` resolver avoids unifying features in a few situations "
"where that unification can be unwanted. The exact situations are described "
"in the [resolver chapter](resolver.md#feature-resolver-version-2), but in "
"short, it avoids unifying in these situations:"
msgstr ""

#: src/reference/features.md:368
msgid ""
"Features enabled on [platform-specific dependencies](specifying-"
"dependencies.md#platform-specific-dependencies) for [target architectures]"
"(../appendix/glossary.md#target) not currently being built are ignored."
msgstr ""

#: src/reference/features.md:370
msgid ""
"[Build-dependencies](specifying-dependencies.md#build-dependencies) and proc-"
"macros do not share features with normal dependencies."
msgstr ""

#: src/reference/features.md:372
msgid ""
"[Dev-dependencies](specifying-dependencies.md#development-dependencies) do "
"not activate features unless building a [Cargo target](../appendix/"
"glossary.md#target) that needs them (like tests or examples)."
msgstr ""

#: src/reference/features.md:375
msgid ""
"Avoiding the unification is necessary for some situations. For example, if a "
"build-dependency enables a `std` feature, and the same dependency is used as "
"a normal dependency for a `no_std` environment, enabling `std` would break "
"the build."
msgstr ""

#: src/reference/features.md:380
msgid ""
"However, one drawback is that this can increase build times because the "
"dependency is built multiple times (each with different features). When "
"using the version `\"2\"` resolver, it is recommended to check for "
"dependencies that are built multiple times to reduce overall build time. If "
"it is not _required_ to build those duplicated packages with separate "
"features, consider adding features to the `features` list in the [dependency "
"declaration](#dependency-features) so that the duplicates end up with the "
"same features (and thus Cargo will build it only once). You can detect these "
"duplicate dependencies with the [`cargo tree --duplicates`](../commands/"
"cargo-tree.md) command. It will show which packages are built multiple "
"times; look for any entries listed with the same version. See [Inspecting "
"resolved features](#inspecting-resolved-features) for more on fetching "
"information on the resolved features. For build dependencies, this is not "
"necessary if you are cross-compiling with the `--target` flag because build "
"dependencies are always built separately from normal dependencies in that "
"scenario."
msgstr ""

#: src/reference/features.md:398
msgid "Resolver version 2 command-line flags"
msgstr ""

#: src/reference/features.md:400
msgid ""
"The `resolver = \"2\"` setting also changes the behavior of the `--features` "
"and `--no-default-features` [command-line options](#command-line-feature-"
"options)."
msgstr ""

#: src/reference/features.md:403
msgid ""
"With version `\"1\"`, you can only enable features for the package in the "
"current working directory. For example, in a workspace with packages `foo` "
"and `bar`, and you are in the directory for package `foo`, and ran the "
"command `cargo build -p bar --features bar-feat`, this would fail because "
"the `--features` flag only allowed enabling features on `foo`."
msgstr ""

#: src/reference/features.md:409
msgid ""
"With `resolver = \"2\"`, the features flags allow enabling features for any "
"of the packages selected on the command-line with `-p` and `--workspace` "
"flags. For example:"
msgstr ""

#: src/reference/features.md:414
msgid ""
"# This command is allowed with resolver = \"2\", regardless of which "
"directory\n"
"# you are in.\n"
msgstr ""

#: src/reference/features.md:417
msgid "# This explicit equivalent works with any resolver version:\n"
msgstr ""

#: src/reference/features.md:422
msgid ""
"Additionally, with `resolver = \"1\"`, the `--no-default-features` flag only "
"disables the default feature for the package in the current directory. With "
"version \"2\", it will disable the default features for all workspace "
"members."
msgstr ""

#: src/reference/features.md:431
msgid "Build scripts"
msgstr ""

#: src/reference/features.md:433
msgid ""
"[Build scripts](build-scripts.md) can detect which features are enabled on "
"the package by inspecting the `CARGO_FEATURE_<name>` environment variable, "
"where `<name>` is the feature name converted to uppercase and `-` converted "
"to `_`."
msgstr ""

#: src/reference/features.md:439
msgid "Required features"
msgstr ""

#: src/reference/features.md:441
msgid ""
"The [`required-features` field](cargo-targets.md#the-required-features-"
"field) can be used to disable specific [Cargo targets](cargo-targets.md) if "
"a feature is not enabled. See the linked documentation for more details."
msgstr ""

#: src/reference/features.md:450
msgid ""
"Enabling a feature should not introduce a SemVer-incompatible change. For "
"example, the feature shouldn't change an existing API in a way that could "
"break existing uses. More details about what changes are compatible can be "
"found in the [SemVer Compatibility chapter](semver.md)."
msgstr ""

#: src/reference/features.md:455
msgid ""
"Care should be taken when adding and removing feature definitions and "
"optional dependencies, as these can sometimes be backwards-incompatible "
"changes. More details can be found in the [Cargo section](semver.md#cargo) "
"of the SemVer Compatibility chapter. In short, follow these rules:"
msgstr ""

#: src/reference/features.md:460
msgid "The following is usually safe to do in a minor release:"
msgstr ""

#: src/reference/features.md:461
msgid ""
"Add a [new feature](semver.md#cargo-feature-add) or [optional dependency]"
"(semver.md#cargo-dep-add)."
msgstr ""

#: src/reference/features.md:462
msgid ""
"[Change the features used on a dependency](semver.md#cargo-change-dep-"
"feature)."
msgstr ""

#: src/reference/features.md:463
msgid "The following should usually **not** be done in a minor release:"
msgstr ""

#: src/reference/features.md:464
msgid ""
"[Remove a feature](semver.md#cargo-feature-remove) or [optional dependency]"
"(semver.md#cargo-remove-opt-dep)."
msgstr ""

#: src/reference/features.md:465
msgid "[Moving existing public code behind a feature](semver.md#item-remove)."
msgstr ""

#: src/reference/features.md:466
msgid ""
"[Remove a feature from a feature list](semver.md#cargo-feature-remove-"
"another)."
msgstr ""

#: src/reference/features.md:468
msgid "See the links for caveats and examples."
msgstr ""

#: src/reference/features.md:478
msgid "Feature documentation and discovery"
msgstr ""

#: src/reference/features.md:480
msgid ""
"You are encouraged to document which features are available in your package. "
"This can be done by adding [doc comments](../../rustdoc/how-to-write-"
"documentation.html) at the top of `lib.rs`. As an example, see the [regex "
"crate source](https://github.com/rust-lang/regex/blob/1.4.2/src/lib.rs#L488-"
"L583), which when rendered can be viewed on [docs.rs](https://docs.rs/regex/"
"1.4.2/regex/#crate-features). If you have other documentation, such as a "
"user guide, consider adding the documentation there (for example, see "
"[serde.rs](https://serde.rs/feature-flags.html)). If you have a binary "
"project, consider documenting the features in the README or other "
"documentation for the project (for example, see [sccache](https://github.com/"
"mozilla/sccache/blob/0.2.13/README.md#build-requirements))."
msgstr ""

#: src/reference/features.md:488
msgid ""
"Clearly documenting the features can set expectations about features that "
"are considered \"unstable\" or otherwise shouldn't be used. For example, if "
"there is an optional dependency, but you don't want users to explicitly list "
"that optional dependency as a feature, exclude it from the documented list."
msgstr ""

#: src/reference/features.md:493
msgid ""
"Documentation published on [docs.rs](https://docs.rs/) can use metadata in "
"`Cargo.toml` to control which features are enabled when the documentation is "
"built. See [docs.rs metadata documentation](https://docs.rs/about/metadata) "
"for more details."
msgstr ""

#: src/reference/features.md:497
msgid ""
"**Note**: Rustdoc has experimental support for annotating the documentation "
"to indicate which features are required to use certain APIs. See the "
"[`doc_cfg`](../../unstable-book/language-features/doc-cfg.html) "
"documentation for more details. An example is the [`syn` documentation]"
"(https://docs.rs/syn/1.0.54/syn/#modules), where you can see colored boxes "
"which note which features are required to use it."
msgstr ""

#: src/reference/features.md:513
msgid "Discovering features"
msgstr ""

#: src/reference/features.md:515
msgid ""
"When features are documented in the library API, this can make it easier for "
"your users to discover which features are available and what they do. If the "
"feature documentation for a package isn't readily available, you can look at "
"the `Cargo.toml` file, but sometimes it can be hard to track it down. The "
"crate page on [crates.io](https://crates.io/) has a link to the source "
"repository if available. Tools like [`cargo vendor`](../commands/cargo-"
"vendor.md) or [cargo-clone-crate](https://crates.io/crates/cargo-clone-"
"crate) can be used to download the source and inspect it."
msgstr ""

#: src/reference/features.md:526
msgid "Feature combinations"
msgstr ""

#: src/reference/features.md:528
msgid ""
"Because features are a form of conditional compilation, they require an "
"exponential number of configurations and test cases to be 100% covered. By "
"default, tests, docs, and other tooling such as [Clippy](https://github.com/"
"rust-lang/rust-clippy) will only run with the default set of features."
msgstr ""

#: src/reference/features.md:530
msgid ""
"We encourage you to consider your strategy and tooling in regards to "
"different feature combinations --- Every project will have different "
"requirements in conjunction with time, resources, and the cost-benefit of "
"covering specific scenarios. Common configurations may be with / without "
"default features, specific combinations of features, or all combinations of "
"features."
msgstr ""

#: src/reference/features-examples.md:3
msgid ""
"The following illustrates some real-world examples of features in action."
msgstr ""

#: src/reference/features-examples.md:5
msgid "Minimizing build times and file sizes"
msgstr ""

#: src/reference/features-examples.md:7
msgid ""
"Some packages use features so that if the features are not enabled, it "
"reduces the size of the crate and reduces compile time. Some examples are:"
msgstr ""

#: src/reference/features-examples.md:10
msgid ""
"[`syn`](https://crates.io/crates/syn) is a popular crate for parsing Rust "
"code. Since it is so popular, it is helpful to reduce compile times since it "
"affects so many projects. It has a [clearly documented list](https://docs.rs/"
"syn/1.0.54/syn/#optional-features) of features which can be used to minimize "
"the amount of code it contains."
msgstr ""

#: src/reference/features-examples.md:14
msgid ""
"[`regex`](https://crates.io/crates/regex) has a [several features](https://"
"github.com/rust-lang/regex/blob/1.4.2/Cargo.toml#L33-L101) that are [well "
"documented](https://docs.rs/regex/1.4.2/regex/#crate-features). Cutting out "
"Unicode support can reduce the resulting file size as it can remove some "
"large tables."
msgstr ""

#: src/reference/features-examples.md:17
msgid ""
"[`winapi`](https://crates.io/crates/winapi) has [a large number](https://"
"github.com/retep998/winapi-rs/blob/0.3.9/Cargo.toml#L25-L431) of features "
"that limit which Windows API bindings it supports."
msgstr ""

#: src/reference/features-examples.md:19
msgid ""
"[`web-sys`](https://crates.io/crates/web-sys) is another example similar to "
"`winapi` that provides a [huge surface area](https://github.com/rustwasm/"
"wasm-bindgen/blob/0.2.69/crates/web-sys/Cargo.toml#L32-L1395) of API "
"bindings that are limited by using features."
msgstr ""

#: src/reference/features-examples.md:33
msgid "Extending behavior"
msgstr ""

#: src/reference/features-examples.md:35
msgid ""
"The [`serde_json`](https://crates.io/crates/serde_json) package has a "
"[`preserve_order` feature](https://github.com/serde-rs/json/blob/v1.0.60/"
"Cargo.toml#L53-L56) which [changes the behavior](https://github.com/serde-rs/"
"json/blob/v1.0.60/src/map.rs#L23-L26) of JSON maps to preserve the order "
"that keys are inserted. Notice that it enables an optional dependency "
"[`indexmap`](https://crates.io/crates/indexmap) to implement the new "
"behavior."
msgstr ""

#: src/reference/features-examples.md:40
msgid ""
"When changing behavior like this, be careful to make sure the changes are "
"[SemVer compatible](features.md#semver-compatibility). That is, enabling the "
"feature should not break code that usually builds with the feature off."
msgstr ""

#: src/reference/features-examples.md:50
msgid "`no_std` support"
msgstr ""

#: src/reference/features-examples.md:52
msgid ""
"Some packages want to support both [`no_std`](../../reference/names/"
"preludes.html#the-no_std-attribute) and `std` environments. This is useful "
"for supporting embedded and resource-constrained platforms, but still "
"allowing extended capabilities for platforms that support the full standard "
"library."
msgstr ""

#: src/reference/features-examples.md:57
msgid ""
"The [`wasm-bindgen`](https://crates.io/crates/wasm-bindgen) package defines "
"a [`std` feature](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/"
"Cargo.toml#L25) that is [enabled by default](https://github.com/rustwasm/"
"wasm-bindgen/blob/0.2.69/Cargo.toml#L23). At the top of the library, it "
"[unconditionally enables the `no_std` attribute](https://github.com/rustwasm/"
"wasm-bindgen/blob/0.2.69/src/lib.rs#L8). This ensures that `std` and the "
"[`std` prelude](../../std/prelude/index.html) are not automatically in "
"scope. Then, in various places in the code ([example1](https://github.com/"
"rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L270-L273), [example2](https://"
"github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/lib.rs#L67-L75)), it uses "
"`#[cfg(feature = \"std\")]` attributes to conditionally enable extra "
"functionality that requires `std`."
msgstr ""

#: src/reference/features-examples.md:74
msgid "Re-exporting dependency features"
msgstr ""

#: src/reference/features-examples.md:76
msgid ""
"It can be convenient to re-export the features from a dependency. This "
"allows the user depending on the crate to control those features without "
"needing to specify those dependencies directly. For example, [`regex`]"
"(https://crates.io/crates/regex) [re-exports the features](https://"
"github.com/rust-lang/regex/blob/1.4.2/Cargo.toml#L65-L89) from the "
"[`regex_syntax`](https://github.com/rust-lang/regex/blob/1.4.2/regex-syntax/"
"Cargo.toml#L17-L32) package. Users of `regex` don't need to know about the "
"`regex_syntax` package, but they can still access the features it contains."
msgstr ""

#: src/reference/features-examples.md:86
msgid "Vendoring of C libraries"
msgstr ""

#: src/reference/features-examples.md:88
msgid ""
"Some packages provide bindings to common C libraries (sometimes referred to "
"as [\"sys\" crates](build-scripts.md#-sys-packages)). Sometimes these "
"packages give you the choice to use the C library installed on the system, "
"or to build it from source. For example, the [`openssl`](https://crates.io/"
"crates/openssl) package has a [`vendored` feature](https://github.com/"
"sfackler/rust-openssl/blob/openssl-v0.10.31/openssl/Cargo.toml#L19) which "
"enables the corresponding `vendored` feature of [`openssl-sys`](https://"
"crates.io/crates/openssl-sys). The `openssl-sys` build script has some "
"[conditional logic](https://github.com/sfackler/rust-openssl/blob/openssl-"
"v0.10.31/openssl-sys/build/main.rs#L47-L54) which causes it to build from a "
"local copy of the OpenSSL source code instead of using the version from the "
"system."
msgstr ""

#: src/reference/features-examples.md:97
msgid ""
"The [`curl-sys`](https://crates.io/crates/curl-sys) package is another "
"example where the [`static-curl` feature](https://github.com/alexcrichton/"
"curl-rust/blob/0.4.34/curl-sys/Cargo.toml#L49) causes it to build libcurl "
"from source. Notice that it also has a [`force-system-lib-on-osx`](https://"
"github.com/alexcrichton/curl-rust/blob/0.4.34/curl-sys/Cargo.toml#L52) "
"feature which forces it [to use the system libcurl](https://github.com/"
"alexcrichton/curl-rust/blob/0.4.34/curl-sys/build.rs#L15-L20), overriding "
"the static-curl setting."
msgstr ""

#: src/reference/features-examples.md:114
msgid "Feature precedence"
msgstr ""

#: src/reference/features-examples.md:116
msgid ""
"Some packages may have mutually-exclusive features. One option to handle "
"this is to prefer one feature over another. The [`log`](https://crates.io/"
"crates/log) package is an example. It has [several features](https://"
"github.com/rust-lang/log/blob/0.4.11/Cargo.toml#L29-L42) for choosing the "
"maximum logging level at compile-time described [here](https://docs.rs/log/"
"0.4.11/log/#compile-time-filters). It uses [`cfg-if`](https://crates.io/"
"crates/cfg-if) to [choose a precedence](https://github.com/rust-lang/log/"
"blob/0.4.11/src/lib.rs#L1422-L1448). If multiple features are enabled, the "
"higher \"max\" levels will be preferred over the lower levels."
msgstr ""

#: src/reference/features-examples.md:129
msgid "Proc-macro companion package"
msgstr ""

#: src/reference/features-examples.md:131
msgid ""
"Some packages have a proc-macro that is intimately tied with it. However, "
"not all users will need to use the proc-macro. By making the proc-macro an "
"optional-dependency, this allows you to conveniently choose whether or not "
"it is included. This is helpful, because sometimes the proc-macro version "
"must stay in sync with the parent package, and you don't want to force the "
"users to have to specify both dependencies and keep them in sync."
msgstr ""

#: src/reference/features-examples.md:138
msgid ""
"An example is [`serde`](https://crates.io/crates/serde) which has a "
"[`derive`](https://github.com/serde-rs/serde/blob/v1.0.118/serde/"
"Cargo.toml#L34-L35) feature which enables the [`serde_derive`](https://"
"crates.io/crates/serde_derive) proc-macro. The `serde_derive` crate is very "
"tightly tied to `serde`, so it uses an [equals version requirement](https://"
"github.com/serde-rs/serde/blob/v1.0.118/serde/Cargo.toml#L17) to ensure they "
"stay in sync."
msgstr ""

#: src/reference/features-examples.md:148
msgid "Nightly-only features"
msgstr ""

#: src/reference/features-examples.md:150
msgid ""
"Some packages want to experiment with APIs or language features that are "
"only available on the Rust [nightly channel](../../book/appendix-07-nightly-"
"rust.html). However, they may not want to require their users to also use "
"the nightly channel. An example is [`wasm-bindgen`](https://crates.io/crates/"
"wasm-bindgen) which has a [`nightly` feature](https://github.com/rustwasm/"
"wasm-bindgen/blob/0.2.69/Cargo.toml#L27) which enables an [extended API]"
"(https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/closure.rs#L257-"
"L269) that uses the [`Unsize`](../../std/marker/trait.Unsize.html) marker "
"trait that is only available on the nightly channel at the time of this "
"writing."
msgstr ""

#: src/reference/features-examples.md:157
msgid ""
"Note that at the root of the crate it uses [`cfg_attr` to enable the nightly "
"feature](https://github.com/rustwasm/wasm-bindgen/blob/0.2.69/src/"
"lib.rs#L11). Keep in mind that the [`feature` attribute](../../unstable-book/"
"index.html) is unrelated to Cargo features, and is used to opt-in to "
"experimental language features."
msgstr ""

#: src/reference/features-examples.md:162
msgid ""
"The [`simd_support` feature](https://github.com/rust-random/rand/blob/0.7.3/"
"Cargo.toml#L40) of the [`rand`](https://crates.io/crates/rand) package is "
"another example, which relies on a dependency that only builds on the "
"nightly channel."
msgstr ""

#: src/reference/features-examples.md:175
msgid "Experimental features"
msgstr ""

#: src/reference/features-examples.md:177
msgid ""
"Some packages have new functionality that they may want to experiment with, "
"without having to commit to the stability of those APIs. The features are "
"usually documented that they are experimental, and thus may change or break "
"in the future, even during a minor release. An example is the [`async-std`]"
"(https://crates.io/crates/async-std) package, which has an [`unstable` "
"feature](https://github.com/async-rs/async-std/blob/v1.8.0/Cargo.toml#L38-"
"L42), which [gates new APIs](https://github.com/async-rs/async-std/blob/"
"v1.8.0/src/macros.rs#L46) that people can opt-in to using, but may not be "
"completely ready to be relied upon."
msgstr ""

#: src/reference/profiles.md:3
msgid ""
"Profiles provide a way to alter the compiler settings, influencing things "
"like optimizations and debugging symbols."
msgstr ""

#: src/reference/profiles.md:6
msgid ""
"Cargo has 4 built-in profiles: `dev`, `release`, `test`, and `bench`. The "
"profile is automatically chosen based on which command is being run if a "
"profile is not specified on the command-line. In addition to the built-in "
"profiles, custom user-defined profiles can also be specified."
msgstr ""

#: src/reference/profiles.md:11
msgid ""
"Profile settings can be changed in [`Cargo.toml`](manifest.md) with the "
"`[profile]` table. Within each named profile, individual settings can be "
"changed with key/value pairs like this:"
msgstr ""

#: src/reference/profiles.md:21
msgid ""
"Cargo only looks at the profile settings in the `Cargo.toml` manifest at the "
"root of the workspace. Profile settings defined in dependencies will be "
"ignored."
msgstr ""

#: src/reference/profiles.md:25
msgid ""
"Additionally, profiles can be overridden from a [config](config.md) "
"definition. Specifying a profile in a config file or environment variable "
"will override the settings from `Cargo.toml`."
msgstr ""

#: src/reference/profiles.md:31
msgid "Profile settings"
msgstr ""

#: src/reference/profiles.md:33
msgid ""
"The following is a list of settings that can be controlled in a profile."
msgstr ""

#: src/reference/profiles.md:35
msgid "opt-level"
msgstr ""

#: src/reference/profiles.md:37
msgid ""
"The `opt-level` setting controls the [`-C opt-level` flag](../../rustc/"
"codegen-options/index.html#opt-level) which controls the level of "
"optimization. Higher optimization levels may produce faster runtime code at "
"the expense of longer compiler times. Higher levels may also change and "
"rearrange the compiled code which may make it harder to use with a debugger."
msgstr ""

#: src/reference/profiles.md:42 src/reference/profiles.md:68
#: src/reference/profiles.md:139 src/reference/profiles.md:154
#: src/reference/profiles.md:169 src/reference/profiles.md:197
#: src/reference/profiles.md:224
msgid "The valid options are:"
msgstr ""

#: src/reference/profiles.md:44
msgid "`0`: no optimizations"
msgstr ""

#: src/reference/profiles.md:45
msgid "`1`: basic optimizations"
msgstr ""

#: src/reference/profiles.md:46
msgid "`2`: some optimizations"
msgstr ""

#: src/reference/profiles.md:47
msgid "`3`: all optimizations"
msgstr ""

#: src/reference/profiles.md:48
msgid "`\"s\"`: optimize for binary size"
msgstr ""

#: src/reference/profiles.md:49
msgid ""
"`\"z\"`: optimize for binary size, but also turn off loop vectorization."
msgstr ""

#: src/reference/profiles.md:51
msgid ""
"It is recommended to experiment with different levels to find the right "
"balance for your project. There may be surprising results, such as level `3` "
"being slower than `2`, or the `\"s\"` and `\"z\"` levels not being "
"necessarily smaller. You may also want to reevaluate your settings over time "
"as newer versions of `rustc` change optimization behavior."
msgstr ""

#: src/reference/profiles.md:57
msgid ""
"See also [Profile Guided Optimization](../../rustc/profile-guided-"
"optimization.html) for more advanced optimization techniques."
msgstr ""

#: src/reference/profiles.md:63
msgid "debug"
msgstr ""

#: src/reference/profiles.md:65
msgid ""
"The `debug` setting controls the [`-C debuginfo` flag](../../rustc/codegen-"
"options/index.html#debuginfo) which controls the amount of debug information "
"included in the compiled binary."
msgstr ""

#: src/reference/profiles.md:70
msgid ""
"`0`, `false`, or `\"none\"`: no debug info at all, default for [`release`]"
"(#release)"
msgstr ""

#: src/reference/profiles.md:71
msgid ""
"`\"line-directives-only\"`: line info directives only. For the nvptx\\* "
"targets this enables [profiling](https://reviews.llvm.org/D46061). For other "
"use cases, `line-tables-only` is the better, more compatible choice."
msgstr ""

#: src/reference/profiles.md:72
msgid ""
"`\"line-tables-only\"`: line tables only. Generates the minimal amount of "
"debug info for backtraces with filename/line number info, but not anything "
"else, i.e. no variable or function parameter info."
msgstr ""

#: src/reference/profiles.md:73
msgid ""
"`1` or `\"limited\"`: debug info without type or variable-level information. "
"Generates more detailed module-level info than `line-tables-only`."
msgstr ""

#: src/reference/profiles.md:74
msgid "`2`, `true`, or `\"full\"`: full debug info, default for [`dev`](#dev)"
msgstr ""

#: src/reference/profiles.md:76
msgid ""
"For more information on what each option does see `rustc`'s docs on "
"[debuginfo](../../rustc/codegen-options/index.html#debuginfo)."
msgstr ""

#: src/reference/profiles.md:78
msgid ""
"You may wish to also configure the [`split-debuginfo`](#split-debuginfo) "
"option depending on your needs as well."
msgstr ""

#: src/reference/profiles.md:81
msgid ""
"**MSRV:** 1.71 is required for `none`, `limited`, `full`, `line-directives-"
"only`, and `line-tables-only`"
msgstr ""

#: src/reference/profiles.md:87
msgid "split-debuginfo"
msgstr ""

#: src/reference/profiles.md:89
msgid ""
"The `split-debuginfo` setting controls the [`-C split-debuginfo` flag](../../"
"rustc/codegen-options/index.html#split-debuginfo) which controls whether "
"debug information, if generated, is either placed in the executable itself "
"or adjacent to it."
msgstr ""

#: src/reference/profiles.md:93
msgid ""
"This option is a string and acceptable values are the same as those the "
"[compiler accepts](../../rustc/codegen-options/index.html#split-debuginfo). "
"The default value for this option is `unpacked` on macOS for profiles that "
"have debug information otherwise enabled. Otherwise the default for this "
"option is [documented with rustc](../../rustc/codegen-options/"
"index.html#split-debuginfo) and is platform-specific. Some options are only "
"available on the [nightly channel](../../book/appendix-07-nightly-"
"rust.html). The Cargo default may change in the future once more testing has "
"been performed, and support for DWARF is stabilized."
msgstr ""

#: src/reference/profiles.md:101
msgid ""
"Be aware that Cargo and rustc have different defaults for this option. This "
"option exists to allow Cargo to experiment on different combinations of "
"flags thus providing better debugging and developer experience."
msgstr ""

#: src/reference/profiles.md:108
msgid "strip"
msgstr ""

#: src/reference/profiles.md:110
msgid ""
"The `strip` option controls the [`-C strip` flag](../../rustc/codegen-"
"options/index.html#strip), which directs rustc to strip either symbols or "
"debuginfo from a binary. This can be enabled like so:"
msgstr ""

#: src/reference/profiles.md:113
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"\n"
"[profile.release]\n"
"strip = \"debuginfo\"\n"
"```"
msgstr ""

#: src/reference/profiles.md:121
msgid ""
"Possible string values of `strip` are `\"none\"`, `\"debuginfo\"`, and "
"`\"symbols\"`. The default is `\"none\"`."
msgstr ""

#: src/reference/profiles.md:124
msgid ""
"You can also configure this option with the boolean values `true` or "
"`false`. `strip = true` is equivalent to `strip = \"symbols\"`. `strip = "
"false` is equivalent to `strip = \"none\"` and disables `strip` completely."
msgstr ""

#: src/reference/profiles.md:130
msgid "debug-assertions"
msgstr ""

#: src/reference/profiles.md:132
msgid ""
"The `debug-assertions` setting controls the [`-C debug-assertions` flag]"
"(../../rustc/codegen-options/index.html#debug-assertions) which turns "
"`cfg(debug_assertions)` [conditional compilation](../../reference/"
"conditional-compilation.md#debug_assertions) on or off. Debug assertions are "
"intended to include runtime validation which is only available in debug/"
"development builds. These may be things that are too expensive or otherwise "
"undesirable in a release build. Debug assertions enables the [`debug_assert!"
"` macro](../../std/macro.debug_assert.html) in the standard library."
msgstr ""

#: src/reference/profiles.md:141 src/reference/profiles.md:156
#: src/reference/profiles.md:226
msgid "`true`: enabled"
msgstr ""

#: src/reference/profiles.md:142 src/reference/profiles.md:157
#: src/reference/profiles.md:227
msgid "`false`: disabled"
msgstr ""

#: src/reference/profiles.md:148
msgid "overflow-checks"
msgstr ""

#: src/reference/profiles.md:150
msgid ""
"The `overflow-checks` setting controls the [`-C overflow-checks` flag](../../"
"rustc/codegen-options/index.html#overflow-checks) which controls the "
"behavior of [runtime integer overflow](../../reference/expressions/operator-"
"expr.md#overflow). When overflow-checks are enabled, a panic will occur on "
"overflow."
msgstr ""

#: src/reference/profiles.md:162
msgid "lto"
msgstr ""

#: src/reference/profiles.md:164
msgid ""
"The `lto` setting controls `rustc`'s [`-C lto`](../../rustc/codegen-options/"
"index.html#lto), [`-C linker-plugin-lto`](../../rustc/codegen-options/"
"index.html#linker-plugin-lto), and [`-C embed-bitcode`](../../rustc/codegen-"
"options/index.html#embed-bitcode) options, which control LLVM's [link time "
"optimizations](https://llvm.org/docs/LinkTimeOptimization.html). LTO can "
"produce better optimized code, using whole-program analysis, at the cost of "
"longer linking time."
msgstr ""

#: src/reference/profiles.md:171
msgid ""
"`false`: Performs \"thin local LTO\" which performs \"thin\" LTO on the "
"local crate only across its [codegen units](#codegen-units). No LTO is "
"performed if codegen units is 1 or [opt-level](#opt-level) is 0."
msgstr ""

#: src/reference/profiles.md:174
msgid ""
"`true` or `\"fat\"`: Performs \"fat\" LTO which attempts to perform "
"optimizations across all crates within the dependency graph."
msgstr ""

#: src/reference/profiles.md:176
msgid ""
"`\"thin\"`: Performs [\"thin\" LTO](http://blog.llvm.org/2016/06/thinlto-"
"scalable-and-incremental-lto.html). This is similar to \"fat\", but takes "
"substantially less time to run while still achieving performance gains "
"similar to \"fat\"."
msgstr ""

#: src/reference/profiles.md:179
msgid "`\"off\"`: Disables LTO."
msgstr ""

#: src/reference/profiles.md:181
msgid ""
"See the [linker-plugin-lto chapter](../../rustc/linker-plugin-lto.html) if "
"you are interested in cross-language LTO. This is not yet supported natively "
"in Cargo, but can be performed via `RUSTFLAGS`."
msgstr ""

#: src/reference/profiles.md:192
msgid "panic"
msgstr ""

#: src/reference/profiles.md:194
msgid ""
"The `panic` setting controls the [`-C panic` flag](../../rustc/codegen-"
"options/index.html#panic) which controls which panic strategy to use."
msgstr ""

#: src/reference/profiles.md:199
msgid "`\"unwind\"`: Unwind the stack upon panic."
msgstr ""

#: src/reference/profiles.md:200
msgid "`\"abort\"`: Terminate the process upon panic."
msgstr ""

#: src/reference/profiles.md:202
msgid ""
"When set to `\"unwind\"`, the actual value depends on the default of the "
"target platform. For example, the NVPTX platform does not support unwinding, "
"so it always uses `\"abort\"`."
msgstr ""

#: src/reference/profiles.md:206
msgid ""
"Tests, benchmarks, build scripts, and proc macros ignore the `panic` "
"setting. The `rustc` test harness currently requires `unwind` behavior. See "
"the [`panic-abort-tests`](unstable.md#panic-abort-tests) unstable flag which "
"enables `abort` behavior."
msgstr ""

#: src/reference/profiles.md:210
msgid ""
"Additionally, when using the `abort` strategy and building a test, all of "
"the dependencies will also be forced to build with the `unwind` strategy."
msgstr ""

#: src/reference/profiles.md:216
msgid "incremental"
msgstr ""

#: src/reference/profiles.md:218
msgid ""
"The `incremental` setting controls the [`-C incremental` flag](../../rustc/"
"codegen-options/index.html#incremental) which controls whether or not "
"incremental compilation is enabled. Incremental compilation causes `rustc` "
"to save additional information to disk which will be reused when recompiling "
"the crate, improving re-compile times. The additional information is stored "
"in the `target` directory."
msgstr ""

#: src/reference/profiles.md:229
msgid ""
"Incremental compilation is only used for workspace members and \"path\" "
"dependencies."
msgstr ""

#: src/reference/profiles.md:232
msgid ""
"The incremental value can be overridden globally with the "
"`CARGO_INCREMENTAL` [environment variable](environment-variables.md) or the "
"[`build.incremental`](config.md#buildincremental) config variable."
msgstr ""

#: src/reference/profiles.md:239
msgid "codegen-units"
msgstr ""

#: src/reference/profiles.md:241
msgid ""
"The `codegen-units` setting controls the [`-C codegen-units` flag](../../"
"rustc/codegen-options/index.html#codegen-units) which controls how many "
"\"code generation units\" a crate will be split into. More code generation "
"units allows more of a crate to be processed in parallel possibly reducing "
"compile time, but may produce slower code."
msgstr ""

#: src/reference/profiles.md:246
msgid "This option takes an integer greater than 0."
msgstr ""

#: src/reference/profiles.md:248
msgid ""
"The default is 256 for [incremental](#incremental) builds, and 16 for non-"
"incremental builds."
msgstr ""

#: src/reference/profiles.md:253
msgid "rpath"
msgstr ""

#: src/reference/profiles.md:255
msgid ""
"The `rpath` setting controls the [`-C rpath` flag](../../rustc/codegen-"
"options/index.html#rpath) which controls whether or not [`rpath`](https://"
"en.wikipedia.org/wiki/Rpath) is enabled."
msgstr ""

#: src/reference/profiles.md:261
msgid "Default profiles"
msgstr ""

#: src/reference/profiles.md:263
msgid "dev"
msgstr ""

#: src/reference/profiles.md:265
msgid ""
"The `dev` profile is used for normal development and debugging. It is the "
"default for build commands like [`cargo build`](../commands/cargo-build.md), "
"and is used for `cargo install --debug`."
msgstr ""

#: src/reference/profiles.md:268
msgid "The default settings for the `dev` profile are:"
msgstr ""

#: src/reference/profiles.md:270
msgid ""
"```toml\n"
"[profile.dev]\n"
"opt-level = 0\n"
"debug = true\n"
"split-debuginfo = '...'  # Platform-specific.\n"
"strip = \"none\"\n"
"debug-assertions = true\n"
"overflow-checks = true\n"
"lto = false\n"
"panic = 'unwind'\n"
"incremental = true\n"
"codegen-units = 256\n"
"rpath = false\n"
"```"
msgstr ""

#: src/reference/profiles.md:285
msgid "release"
msgstr ""

#: src/reference/profiles.md:287
msgid ""
"The `release` profile is intended for optimized artifacts used for releases "
"and in production. This profile is used when the `--release` flag is used, "
"and is the default for [`cargo install`](../commands/cargo-install.md)."
msgstr ""

#: src/reference/profiles.md:291
msgid "The default settings for the `release` profile are:"
msgstr ""

#: src/reference/profiles.md:293
msgid ""
"```toml\n"
"[profile.release]\n"
"opt-level = 3\n"
"debug = false\n"
"split-debuginfo = '...'  # Platform-specific.\n"
"strip = \"none\"\n"
"debug-assertions = false\n"
"overflow-checks = false\n"
"lto = false\n"
"panic = 'unwind'\n"
"incremental = false\n"
"codegen-units = 16\n"
"rpath = false\n"
"```"
msgstr ""

#: src/reference/profiles.md:308
msgid "test"
msgstr ""

#: src/reference/profiles.md:310
msgid ""
"The `test` profile is the default profile used by [`cargo test`](../commands/"
"cargo-test.md). The `test` profile inherits the settings from the [`dev`]"
"(#dev) profile."
msgstr ""

#: src/reference/profiles.md:313
msgid "bench"
msgstr ""

#: src/reference/profiles.md:315
msgid ""
"The `bench` profile is the default profile used by [`cargo bench`](../"
"commands/cargo-bench.md). The `bench` profile inherits the settings from the "
"[`release`](#release) profile."
msgstr ""

#: src/reference/profiles.md:318 src/reference/build-scripts.md:339
msgid "Build Dependencies"
msgstr ""

#: src/reference/profiles.md:320
msgid ""
"To compile quickly, all profiles, by default, do not optimize build "
"dependencies (build scripts, proc macros, and their dependencies), and avoid "
"computing debug info when a build dependency is not used as a runtime "
"dependency. The default settings for build overrides are:"
msgstr ""

#: src/reference/profiles.md:336
msgid ""
"However, if errors occur while running build dependencies, turning full "
"debug info on will improve backtraces and debuggability when needed:"
msgstr ""

#: src/reference/profiles.md:343
msgid ""
"Build dependencies otherwise inherit settings from the active profile in "
"use, as described in [Profile selection](#profile-selection)."
msgstr ""

#: src/reference/profiles.md:346
msgid "Custom profiles"
msgstr ""

#: src/reference/profiles.md:348
msgid ""
"In addition to the built-in profiles, additional custom profiles can be "
"defined. These may be useful for setting up multiple workflows and build "
"modes. When defining a custom profile, you must specify the `inherits` key "
"to specify which profile the custom profile inherits settings from when the "
"setting is not specified."
msgstr ""

#: src/reference/profiles.md:354
msgid ""
"For example, let's say you want to compare a normal release build with a "
"release build with [LTO](#lto) optimizations, you can specify something like "
"the following in `Cargo.toml`:"
msgstr ""

#: src/reference/profiles.md:358
msgid ""
"```toml\n"
"[profile.release-lto]\n"
"inherits = \"release\"\n"
"lto = true\n"
"```"
msgstr ""

#: src/reference/profiles.md:364
msgid "The `--profile` flag can then be used to choose this custom profile:"
msgstr ""

#: src/reference/profiles.md:370
msgid ""
"The output for each profile will be placed in a directory of the same name "
"as the profile in the [`target` directory](build-cache.md). As in the "
"example above, the output would go into the `target/release-lto` directory."
msgstr ""

#: src/reference/profiles.md:376
msgid "Profile selection"
msgstr ""

#: src/reference/profiles.md:378
msgid ""
"The profile used depends on the command, the command-line flags like `--"
"release` or `--profile`, and the package (in the case of [overrides]"
"(#overrides)). The default profile if none is specified is:"
msgstr ""

#: src/reference/profiles.md:382
msgid "Command"
msgstr ""

#: src/reference/profiles.md:382
msgid "Default Profile"
msgstr ""

#: src/reference/profiles.md:384
msgid ""
"[`cargo run`](../commands/cargo-run.md), [`cargo build`](../commands/cargo-"
"build.md),<br>[`cargo check`](../commands/cargo-check.md), [`cargo rustc`]"
"(../commands/cargo-rustc.md)"
msgstr ""

#: src/reference/profiles.md:384
msgid "[`dev` profile](#dev)"
msgstr ""

#: src/reference/profiles.md:385
msgid "[`cargo test`](../commands/cargo-test.md)"
msgstr ""

#: src/reference/profiles.md:385
msgid "[`test` profile](#test)"
msgstr ""

#: src/reference/profiles.md:386
msgid "[`cargo bench`](../commands/cargo-bench.md)"
msgstr ""

#: src/reference/profiles.md:386
msgid "[`bench` profile](#bench)"
msgstr ""

#: src/reference/profiles.md:387
msgid "[`cargo install`](../commands/cargo-install.md)"
msgstr ""

#: src/reference/profiles.md:387
msgid "[`release` profile](#release)"
msgstr ""

#: src/reference/profiles.md:389
msgid ""
"You can switch to a different profile using the `--profile=NAME` option "
"which will used the given profile. The `--release` flag is equivalent to `--"
"profile=release`."
msgstr ""

#: src/reference/profiles.md:392
msgid ""
"The selected profile applies to all Cargo targets, including [library](./"
"cargo-targets.md#library), [binary](./cargo-targets.md#binaries), [example]"
"(./cargo-targets.md#examples), [test](./cargo-targets.md#tests), and "
"[benchmark](./cargo-targets.md#benchmarks)."
msgstr ""

#: src/reference/profiles.md:399
msgid ""
"The profile for specific packages can be specified with [overrides]"
"(#overrides), described below."
msgstr ""

#: src/reference/profiles.md:412
msgid ""
"Profile settings can be overridden for specific packages and build-time "
"crates. To override the settings for a specific package, use the `package` "
"table to change the settings for the named package:"
msgstr ""

#: src/reference/profiles.md:422
msgid ""
"The package name is actually a [Package ID Spec](pkgid-spec.md), so you can "
"target individual versions of a package with syntax such as "
"`[profile.dev.package.\"foo:2.1.0\"]`."
msgstr ""

#: src/reference/profiles.md:426
msgid ""
"To override the settings for all dependencies (but not any workspace "
"member), use the `\"*\"` package name:"
msgstr ""

#: src/reference/profiles.md:429
msgid ""
"```toml\n"
"# Set the default for dependencies.\n"
"[profile.dev.package.\"*\"]\n"
"opt-level = 2\n"
"```"
msgstr ""

#: src/reference/profiles.md:435
msgid ""
"To override the settings for build scripts, proc macros, and their "
"dependencies, use the `build-override` table:"
msgstr ""

#: src/reference/profiles.md:444
msgid ""
"Note: When a dependency is both a normal dependency and a build dependency, "
"Cargo will try to only build it once when `--target` is not specified. When "
"using `build-override`, the dependency may need to be built twice, once as a "
"normal dependency and once with the overridden build settings. This may "
"increase initial build times."
msgstr ""

#: src/reference/profiles.md:450
msgid ""
"The precedence for which value is used is done in the following order (first "
"match wins):"
msgstr ""

#: src/reference/profiles.md:453
msgid "`[profile.dev.package.name]` --- A named package."
msgstr ""

#: src/reference/profiles.md:454
msgid "`[profile.dev.package.\"*\"]` --- For any non-workspace member."
msgstr ""

#: src/reference/profiles.md:455
msgid ""
"`[profile.dev.build-override]` --- Only for build scripts, proc macros, and "
"their dependencies."
msgstr ""

#: src/reference/profiles.md:457
msgid "`[profile.dev]` --- Settings in `Cargo.toml`."
msgstr ""

#: src/reference/profiles.md:458
msgid "Default values built-in to Cargo."
msgstr ""

#: src/reference/profiles.md:460
msgid "Overrides cannot specify the `panic`, `lto`, or `rpath` settings."
msgstr ""

#: src/reference/profiles.md:462
msgid "Overrides and generics"
msgstr ""

#: src/reference/profiles.md:464
msgid ""
"The location where generic code is instantiated will influence the "
"optimization settings used for that generic code. This can cause subtle "
"interactions when using profile overrides to change the optimization level "
"of a specific crate. If you attempt to raise the optimization level of a "
"dependency which defines generic functions, those generic functions may not "
"be optimized when used in your local crate. This is because the code may be "
"generated in the crate where it is instantiated, and thus may use the "
"optimization settings of that crate."
msgstr ""

#: src/reference/profiles.md:473
msgid ""
"For example, [nalgebra](https://crates.io/crates/nalgebra) is a library "
"which defines vectors and matrices making heavy use of generic parameters. "
"If your local code defines concrete nalgebra types like `Vector4<f64>` and "
"uses their methods, the corresponding nalgebra code will be instantiated and "
"built within your crate. Thus, if you attempt to increase the optimization "
"level of `nalgebra` using a profile override, it may not result in faster "
"performance."
msgstr ""

#: src/reference/profiles.md:480
msgid ""
"Further complicating the issue, `rustc` has some optimizations where it will "
"attempt to share monomorphized generics between crates. If the opt-level is "
"2 or 3, then a crate will not use monomorphized generics from other crates, "
"nor will it export locally defined monomorphized items to be shared with "
"other crates. When experimenting with optimizing dependencies for "
"development, consider trying opt-level 1, which will apply some "
"optimizations while still allowing monomorphized items to be shared."
msgstr ""

#: src/reference/config.md:3
msgid ""
"This document explains how Cargo’s configuration system works, as well as "
"available keys or configuration. For configuration of a package through its "
"manifest, see the [manifest format](manifest.md)."
msgstr ""

#: src/reference/config.md:7
msgid "Hierarchical structure"
msgstr ""

#: src/reference/config.md:9
msgid ""
"Cargo allows local configuration for a particular package as well as global "
"configuration. It looks for configuration files in the current directory and "
"all parent directories. If, for example, Cargo were invoked in `/projects/"
"foo/bar/baz`, then the following configuration files would be probed for and "
"unified in this order:"
msgstr ""

#: src/reference/config.md:15
msgid "`/projects/foo/bar/baz/.cargo/config.toml`"
msgstr ""

#: src/reference/config.md:16
msgid "`/projects/foo/bar/.cargo/config.toml`"
msgstr ""

#: src/reference/config.md:17
msgid "`/projects/foo/.cargo/config.toml`"
msgstr ""

#: src/reference/config.md:18
msgid "`/projects/.cargo/config.toml`"
msgstr ""

#: src/reference/config.md:19
msgid "`/.cargo/config.toml`"
msgstr ""

#: src/reference/config.md:20
msgid "`$CARGO_HOME/config.toml` which defaults to:"
msgstr ""

#: src/reference/config.md:21 src/reference/registry-authentication.md:18
msgid "Windows: `%USERPROFILE%\\.cargo\\config.toml`"
msgstr ""

#: src/reference/config.md:22
msgid "Unix: `$HOME/.cargo/config.toml`"
msgstr ""

#: src/reference/config.md:24
msgid ""
"With this structure, you can specify configuration per-package, and even "
"possibly check it into version control. You can also specify personal "
"defaults with a configuration file in your home directory."
msgstr ""

#: src/reference/config.md:28
msgid ""
"If a key is specified in multiple config files, the values will get merged "
"together. Numbers, strings, and booleans will use the value in the deeper "
"config directory taking precedence over ancestor directories, where the home "
"directory is the lowest priority. Arrays will be joined together with higher "
"precedence items being placed later in the merged array."
msgstr ""

#: src/reference/config.md:34
msgid ""
"At present, when being invoked from a workspace, Cargo does not read config "
"files from crates within the workspace. i.e. if a workspace has two crates "
"in it, named `/projects/foo/bar/baz/mylib` and `/projects/foo/bar/baz/"
"mybin`, and there are Cargo configs at `/projects/foo/bar/baz/mylib/.cargo/"
"config.toml` and `/projects/foo/bar/baz/mybin/.cargo/config.toml`, Cargo "
"does not read those configuration files if it is invoked from the workspace "
"root (`/projects/foo/bar/baz/`)."
msgstr ""

#: src/reference/config.md:42
msgid ""
"**Note:** Cargo also reads config files without the `.toml` extension, such "
"as `.cargo/config`. Support for the `.toml` extension was added in version "
"1.39 and is the preferred form. If both files exist, Cargo will use the file "
"without the extension."
msgstr ""

#: src/reference/config.md:47
msgid "Configuration format"
msgstr ""

#: src/reference/config.md:49
msgid ""
"Configuration files are written in the [TOML format](https://toml.io/) (like "
"the manifest), with simple key-value pairs inside of sections (tables). The "
"following is a quick overview of all settings, with detailed descriptions "
"found below."
msgstr ""

#: src/reference/config.md:54
msgid ""
"```toml\n"
"paths = [\"/path/to/override\"] # path dependency overrides\n"
"\n"
"[alias]     # command aliases\n"
"b = \"build\"\n"
"c = \"check\"\n"
"t = \"test\"\n"
"r = \"run\"\n"
"rr = \"run --release\"\n"
"recursive_example = \"rr --example recursions\"\n"
"space_example = [\"run\", \"--release\", \"--\", \"\\\"command list\\\"\"]\n"
"\n"
"[build]\n"
"jobs = 1                      # number of parallel jobs, defaults to # of "
"CPUs\n"
"rustc = \"rustc\"               # the rust compiler tool\n"
"rustc-wrapper = \"…\"           # run this wrapper instead of `rustc`\n"
"rustc-workspace-wrapper = \"…\" # run this wrapper instead of `rustc` for "
"workspace members\n"
"rustdoc = \"rustdoc\"           # the doc generator tool\n"
"target = \"triple\"             # build for the target triple (ignored by "
"`cargo install`)\n"
"target-dir = \"target\"         # path of where to place all generated "
"artifacts\n"
"rustflags = [\"…\", \"…\"]        # custom flags to pass to all compiler "
"invocations\n"
"rustdocflags = [\"…\", \"…\"]     # custom flags to pass to rustdoc\n"
"incremental = true            # whether or not to enable incremental "
"compilation\n"
"dep-info-basedir = \"…\"        # path for the base directory for targets in "
"depfiles\n"
"\n"
"[credential-alias]\n"
"# Provides a way to define aliases for credential providers.\n"
"my-alias = [\"/usr/bin/cargo-credential-example\", \"--argument\", "
"\"value\", \"--flag\"]\n"
"\n"
"[doc]\n"
"browser = \"chromium\"          # browser to use with `cargo doc --open`,\n"
"                              # overrides the `BROWSER` environment "
"variable\n"
"\n"
"[env]\n"
"# Set ENV_VAR_NAME=value for any process run by Cargo\n"
"ENV_VAR_NAME = \"value\"\n"
"# Set even if already present in environment\n"
"ENV_VAR_NAME_2 = { value = \"value\", force = true }\n"
"# Value is relative to .cargo directory containing `config.toml`, make "
"absolute\n"
"ENV_VAR_NAME_3 = { value = \"relative/path\", relative = true }\n"
"\n"
"[future-incompat-report]\n"
"frequency = 'always' # when to display a notification about a future "
"incompat report\n"
"\n"
"[cargo-new]\n"
"vcs = \"none\"              # VCS to use ('git', 'hg', 'pijul', 'fossil', "
"'none')\n"
"\n"
"[http]\n"
"debug = false               # HTTP debugging\n"
"proxy = \"host:port\"         # HTTP proxy in libcurl format\n"
"ssl-version = \"tlsv1.3\"     # TLS version to use\n"
"ssl-version.max = \"tlsv1.3\" # maximum TLS version\n"
"ssl-version.min = \"tlsv1.1\" # minimum TLS version\n"
"timeout = 30                # timeout for each HTTP request, in seconds\n"
"low-speed-limit = 10        # network timeout threshold (bytes/sec)\n"
"cainfo = \"cert.pem\"         # path to Certificate Authority (CA) bundle\n"
"check-revoke = true         # check for SSL certificate revocation\n"
"multiplexing = true         # HTTP/2 multiplexing\n"
"user-agent = \"…\"            # the user-agent header\n"
"\n"
"[install]\n"
"root = \"/some/path\"         # `cargo install` destination directory\n"
"\n"
"[net]\n"
"retry = 3                   # network retries\n"
"git-fetch-with-cli = true   # use the `git` executable for git operations\n"
"offline = true              # do not access the network\n"
"\n"
"[net.ssh]\n"
"known-hosts = [\"...\"]       # known SSH host keys\n"
"\n"
"[patch.<registry>]\n"
"# Same keys as for [patch] in Cargo.toml\n"
"\n"
"[profile.<name>]         # Modify profile settings via config.\n"
"inherits = \"dev\"         # Inherits settings from [profile.dev].\n"
"opt-level = 0            # Optimization level.\n"
"debug = true             # Include debug info.\n"
"split-debuginfo = '...'  # Debug info splitting behavior.\n"
"strip = \"none\"           # Removes symbols or debuginfo.\n"
"debug-assertions = true  # Enables debug assertions.\n"
"overflow-checks = true   # Enables runtime integer overflow checks.\n"
"lto = false              # Sets link-time optimization.\n"
"panic = 'unwind'         # The panic strategy.\n"
"incremental = true       # Incremental compilation.\n"
"codegen-units = 16       # Number of code generation units.\n"
"rpath = false            # Sets the rpath linking option.\n"
"[profile.<name>.build-override]  # Overrides build-script settings.\n"
"# Same keys for a normal profile.\n"
"[profile.<name>.package.<name>]  # Override profile for a package.\n"
"# Same keys for a normal profile (minus `panic`, `lto`, and `rpath`).\n"
"\n"
"[resolver]\n"
"incompatible-rust-versions = \"allow\"  # Specifies how resolver reacts to "
"these\n"
"\n"
"[registries.<name>]  # registries other than crates.io\n"
"index = \"…\"          # URL of the registry index\n"
"token = \"…\"          # authentication token for the registry\n"
"credential-provider = \"cargo:token\" # The credential provider for this "
"registry.\n"
"\n"
"[registries.crates-io]\n"
"protocol = \"sparse\"  # The protocol to use to access crates.io.\n"
"\n"
"[registry]\n"
"default = \"…\"        # name of the default registry\n"
"token = \"…\"          # authentication token for crates.io\n"
"credential-provider = \"cargo:token\"           # The credential provider "
"for crates.io.\n"
"global-credential-providers = [\"cargo:token\"] # The credential providers "
"to use by default.\n"
"\n"
"[source.<name>]      # source definition and replacement\n"
"replace-with = \"…\"   # replace this source with the given named source\n"
"directory = \"…\"      # path to a directory source\n"
"registry = \"…\"       # URL to a registry source\n"
"local-registry = \"…\" # path to a local registry source\n"
"git = \"…\"            # URL of a git repository source\n"
"branch = \"…\"         # branch name for the git repository\n"
"tag = \"…\"            # tag name for the git repository\n"
"rev = \"…\"            # revision for the git repository\n"
"\n"
"[target.<triple>]\n"
"linker = \"…\"              # linker to use\n"
"runner = \"…\"              # wrapper to run executables\n"
"rustflags = [\"…\", \"…\"]    # custom flags for `rustc`\n"
"rustdocflags = [\"…\", \"…\"] # custom flags for `rustdoc`\n"
"\n"
"[target.<cfg>]\n"
"runner = \"…\"            # wrapper to run executables\n"
"rustflags = [\"…\", \"…\"]  # custom flags for `rustc`\n"
"\n"
"[target.<triple>.<links>] # `links` build script override\n"
"rustc-link-lib = [\"foo\"]\n"
"rustc-link-search = [\"/path/to/foo\"]\n"
"rustc-flags = \"-L /some/path\"\n"
"rustc-cfg = ['key=\"value\"']\n"
"rustc-env = {key = \"value\"}\n"
"rustc-cdylib-link-arg = [\"…\"]\n"
"metadata_key1 = \"value\"\n"
"metadata_key2 = \"value\"\n"
"\n"
"[term]\n"
"quiet = false          # whether cargo output is quiet\n"
"verbose = false        # whether cargo provides verbose output\n"
"color = 'auto'         # whether cargo colorizes output\n"
"hyperlinks = true      # whether cargo inserts links into output\n"
"unicode = true         # whether cargo can render output using non-ASCII "
"unicode characters\n"
"progress.when = 'auto' # whether cargo shows progress bar\n"
"progress.width = 80    # width of progress bar\n"
"```"
msgstr ""

#: src/reference/config.md:203
msgid "Environment variables"
msgstr ""

#: src/reference/config.md:205
msgid ""
"Cargo can also be configured through environment variables in addition to "
"the TOML configuration files. For each configuration key of the form "
"`foo.bar` the environment variable `CARGO_FOO_BAR` can also be used to "
"define the value. Keys are converted to uppercase, dots and dashes are "
"converted to underscores. For example the `target.x86_64-unknown-linux-"
"gnu.runner` key can also be defined by the "
"`CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER` environment variable."
msgstr ""

#: src/reference/config.md:213
msgid ""
"Environment variables will take precedence over TOML configuration files. "
"Currently only integer, boolean, string and some array values are supported "
"to be defined by environment variables. [Descriptions below](#configuration-"
"keys) indicate which keys support environment variables and otherwise they "
"are not supported due to [technical issues](https://github.com/rust-lang/"
"cargo/issues/5416)."
msgstr ""

#: src/reference/config.md:219
msgid ""
"In addition to the system above, Cargo recognizes a few other specific "
"[environment variables](environment-variables.md)."
msgstr ""

#: src/reference/config.md:222
msgid "Command-line overrides"
msgstr ""

#: src/reference/config.md:224
msgid ""
"Cargo also accepts arbitrary configuration overrides through the `--config` "
"command-line option. The argument should be in TOML syntax of `KEY=VALUE` or "
"provided as a path to an extra configuration file:"
msgstr ""

#: src/reference/config.md:236
msgid ""
"The `--config` option may be specified multiple times, in which case the "
"values are merged in left-to-right order, using the same merging logic that "
"is used when multiple configuration files apply. Configuration values "
"specified this way take precedence over environment variables, which take "
"precedence over configuration files."
msgstr ""

#: src/reference/config.md:242
msgid ""
"When the `--config` option is provided as an extra configuration file, The "
"configuration file loaded this way follow the same precedence rules as other "
"options specified directly with `--config`."
msgstr ""

#: src/reference/config.md:246
msgid "Some examples of what it looks like using Bourne shell syntax:"
msgstr ""

#: src/reference/config.md:248
msgid ""
"```console\n"
"# Most shells will require escaping.\n"
"cargo --config http.proxy=\\\"http://example.com\\\" …\n"
"\n"
"# Spaces may be used.\n"
"cargo --config \"net.git-fetch-with-cli = true\" …\n"
"\n"
"# TOML array example. Single quotes make it easier to read and write.\n"
"cargo --config 'build.rustdocflags = [\"--html-in-header\", "
"\"header.html\"]' …\n"
"\n"
"# Example of a complex TOML key.\n"
"cargo --config \"target.'cfg(all(target_arch = \\\"arm\\\", target_os = \\"
"\"none\\\"))'.runner = 'my-runner'\" …\n"
"\n"
"# Example of overriding a profile setting.\n"
"cargo --config profile.dev.package.image.opt-level=3 …\n"
"```"
msgstr ""

#: src/reference/config.md:265
msgid "Config-relative paths"
msgstr ""

#: src/reference/config.md:267
msgid ""
"Paths in config files may be absolute, relative, or a bare name without any "
"path separators. Paths for executables without a path separator will use the "
"`PATH` environment variable to search for the executable. Paths for non-"
"executables will be relative to where the config value is defined."
msgstr ""

#: src/reference/config.md:271
msgid "In particular, rules are:"
msgstr ""

#: src/reference/config.md:273
msgid ""
"For environment variables, paths are relative to the current working "
"directory."
msgstr ""

#: src/reference/config.md:274
msgid ""
"For config values loaded directly from the [`--config KEY=VALUE`](#command-"
"line-overrides) option, paths are relative to the current working directory."
msgstr ""

#: src/reference/config.md:276
msgid ""
"For config files, paths are relative to the parent directory of the "
"directory where the config files were defined, no matter those files are "
"from either the [hierarchical probing](#hierarchical-structure) or the [`--"
"config <path>`](#command-line-overrides) option."
msgstr ""

#: src/reference/config.md:280
msgid ""
"**Note:** To maintain consistency with existing `.cargo/config.toml` probing "
"behavior, it is by design that a path in a config file passed via `--config "
"<path>` is also relative to two levels up from the config file itself."
msgstr ""

#: src/reference/config.md:284
msgid ""
"To avoid unexpected results, the rule of thumb is putting your extra config "
"files at the same level of discovered `.cargo/config.toml` in your project. "
"For instance, given a project `/my/project`, it is recommended to put config "
"files under `/my/project/.cargo` or a new directory at the same level, such "
"as `/my/project/.config`."
msgstr ""

#: src/reference/config.md:290
msgid ""
"```toml\n"
"# Relative path examples.\n"
"\n"
"[target.x86_64-unknown-linux-gnu]\n"
"runner = \"foo\"  # Searches `PATH` for `foo`.\n"
"\n"
"[source.vendored-sources]\n"
"# Directory is relative to the parent where `.cargo/config.toml` is "
"located.\n"
"# For example, `/my/project/.cargo/config.toml` would result in `/my/project/"
"vendor`.\n"
"directory = \"vendor\"\n"
"```"
msgstr ""

#: src/reference/config.md:302
msgid "Executable paths with arguments"
msgstr ""

#: src/reference/config.md:304
msgid ""
"Some Cargo commands invoke external programs, which can be configured as a "
"path and some number of arguments."
msgstr ""

#: src/reference/config.md:307
msgid ""
"The value may be an array of strings like `['/path/to/program', 'somearg']` "
"or a space-separated string like `'/path/to/program somearg'`. If the path "
"to the executable contains a space, the list form must be used."
msgstr ""

#: src/reference/config.md:311
msgid ""
"If Cargo is passing other arguments to the program such as a path to open or "
"run, they will be passed after the last specified argument in the value of "
"an option of this format. If the specified program does not have path "
"separators, Cargo will search `PATH` for its executable."
msgstr ""

#: src/reference/config.md:316
msgid "Credentials"
msgstr ""

#: src/reference/config.md:318
msgid ""
"Configuration values with sensitive information are stored in the "
"`$CARGO_HOME/credentials.toml` file. This file is automatically created and "
"updated by [`cargo login`](../commands/cargo-login.md) and [`cargo logout`]"
"(../commands/cargo-logout.md) when using the [`cargo:token`](registry-"
"authentication.md#cargotoken) credential provider."
msgstr ""

#: src/reference/config.md:322
msgid ""
"Tokens are used by some Cargo commands such as [`cargo publish`](../commands/"
"cargo-publish.md) for authenticating with remote registries. Care should be "
"taken to protect the tokens and to keep them secret."
msgstr ""

#: src/reference/config.md:326
msgid "It follows the same format as Cargo config files."
msgstr ""

#: src/reference/config.md:328
msgid ""
"```toml\n"
"[registry]\n"
"token = \"…\"   # Access token for crates.io\n"
"\n"
"[registries.<name>]\n"
"token = \"…\"   # Access token for the named registry\n"
"```"
msgstr ""

#: src/reference/config.md:336
msgid ""
"As with most other config values, tokens may be specified with environment "
"variables. The token for [crates.io](https://crates.io/) may be specified "
"with the `CARGO_REGISTRY_TOKEN` environment variable. Tokens for other "
"registries may be specified with environment variables of the form "
"`CARGO_REGISTRIES_<name>_TOKEN` where `<name>` is the name of the registry "
"in all capital letters."
msgstr ""

#: src/reference/config.md:343
msgid ""
"**Note:** Cargo also reads and writes credential files without the `.toml` "
"extension, such as `.cargo/credentials`. Support for the `.toml` extension "
"was added in version 1.39. In version 1.68, Cargo writes to the file with "
"the extension by default. However, for backward compatibility reason, when "
"both files exist, Cargo will read and write the file without the extension."
msgstr ""

#: src/reference/config.md:349
msgid "Configuration keys"
msgstr ""

#: src/reference/config.md:351
msgid ""
"This section documents all configuration keys. The description for keys with "
"variable parts are annotated with angled brackets like `target.<triple>` "
"where the `<triple>` part can be any [target triple](../appendix/"
"glossary.md#target \"\\\"target\\\" (glossary)\") like `target.x86_64-pc-"
"windows-msvc`."
msgstr ""

#: src/reference/config.md:356
msgid "`paths`"
msgstr ""

#: src/reference/config.md:357
msgid "Type: array of strings (paths)"
msgstr ""

#: src/reference/config.md:358 src/reference/config.md:422
#: src/reference/config.md:431 src/reference/config.md:482
#: src/reference/config.md:519 src/reference/config.md:556
#: src/reference/config.md:686 src/reference/config.md:704
#: src/reference/config.md:720 src/reference/config.md:1010
#: src/reference/config.md:1017 src/reference/config.md:1028
#: src/reference/config.md:1077 src/reference/config.md:1093
#: src/reference/config.md:1126 src/reference/config.md:1133
#: src/reference/config.md:1140 src/reference/config.md:1147
#: src/reference/config.md:1154 src/reference/config.md:1161
#: src/reference/config.md:1170 src/reference/config.md:1179
#: src/reference/config.md:1219 src/reference/config.md:1233
#: src/reference/config.md:1250 src/reference/config.md:1267
#: src/reference/config.md:1359
msgid "Default: none"
msgstr ""

#: src/reference/config.md:359 src/reference/config.md:825
#: src/reference/config.md:895 src/reference/config.md:1127
#: src/reference/config.md:1134 src/reference/config.md:1141
#: src/reference/config.md:1148 src/reference/config.md:1155
#: src/reference/config.md:1162 src/reference/config.md:1171
#: src/reference/config.md:1180
msgid "Environment: not supported"
msgstr ""

#: src/reference/config.md:361
msgid ""
"An array of paths to local packages which are to be used as overrides for "
"dependencies. For more information see the [Overriding Dependencies guide]"
"(overriding-dependencies.md#paths-overrides)."
msgstr ""

#: src/reference/config.md:365
msgid "`[alias]`"
msgstr ""

#: src/reference/config.md:366 src/reference/config.md:451
#: src/reference/config.md:481 src/reference/config.md:518
#: src/reference/config.md:573 src/reference/config.md:1249
#: src/reference/config.md:1266
msgid "Type: string or array of strings"
msgstr ""

#: src/reference/config.md:367
msgid "Default: see below"
msgstr ""

#: src/reference/config.md:368
msgid "Environment: `CARGO_ALIAS_<name>`"
msgstr ""

#: src/reference/config.md:370
msgid ""
"The `[alias]` table defines CLI command aliases. For example, running `cargo "
"b` is an alias for running `cargo build`. Each key in the table is the "
"subcommand, and the value is the actual command to run. The value may be an "
"array of strings, where the first element is the command and the following "
"are arguments. It may also be a string, which will be split on spaces into "
"subcommand and arguments. The following aliases are built-in to Cargo:"
msgstr ""

#: src/reference/config.md:377
msgid ""
"```toml\n"
"[alias]\n"
"b = \"build\"\n"
"c = \"check\"\n"
"d = \"doc\"\n"
"t = \"test\"\n"
"r = \"run\"\n"
"rm = \"remove\"\n"
"```"
msgstr ""

#: src/reference/config.md:387
msgid "Aliases are not allowed to redefine existing built-in commands."
msgstr ""

#: src/reference/config.md:389
msgid "Aliases are recursive:"
msgstr ""

#: src/reference/config.md:391
msgid ""
"```toml\n"
"[alias]\n"
"rr = \"run --release\"\n"
"recursive_example = \"rr --example recursions\"\n"
"```"
msgstr ""

#: src/reference/config.md:397
msgid "`[build]`"
msgstr ""

#: src/reference/config.md:399
msgid ""
"The `[build]` table controls build-time operations and compiler settings."
msgstr ""

#: src/reference/config.md:401
msgid "`build.jobs`"
msgstr ""

#: src/reference/config.md:402 src/reference/config.md:951
msgid "Type: integer or string"
msgstr ""

#: src/reference/config.md:403
msgid "Default: number of logical CPUs"
msgstr ""

#: src/reference/config.md:404
msgid "Environment: `CARGO_BUILD_JOBS`"
msgstr ""

#: src/reference/config.md:406
msgid ""
"Sets the maximum number of compiler processes to run in parallel. If "
"negative, it sets the maximum number of compiler processes to the number of "
"logical CPUs plus provided value. Should not be 0. If a string `default` is "
"provided, it sets the value back to defaults."
msgstr ""

#: src/reference/config.md:411
msgid "Can be overridden with the `--jobs` CLI option."
msgstr ""

#: src/reference/config.md:413
msgid "`build.rustc`"
msgstr ""

#: src/reference/config.md:414 src/reference/config.md:421
#: src/reference/config.md:430 src/reference/config.md:444
#: src/reference/config.md:1218
msgid "Type: string (program path)"
msgstr ""

#: src/reference/config.md:415
msgid "Default: `\"rustc\"`"
msgstr ""

#: src/reference/config.md:416
msgid "Environment: `CARGO_BUILD_RUSTC` or `RUSTC`"
msgstr ""

#: src/reference/config.md:418
msgid "Sets the executable to use for `rustc`."
msgstr ""

#: src/reference/config.md:420
msgid "`build.rustc-wrapper`"
msgstr ""

#: src/reference/config.md:423
msgid "Environment: `CARGO_BUILD_RUSTC_WRAPPER` or `RUSTC_WRAPPER`"
msgstr ""

#: src/reference/config.md:425
msgid ""
"Sets a wrapper to execute instead of `rustc`. The first argument passed to "
"the wrapper is the path to the actual executable to use (i.e., "
"`build.rustc`, if that is set, or `\"rustc\"` otherwise)."
msgstr ""

#: src/reference/config.md:429
msgid "`build.rustc-workspace-wrapper`"
msgstr ""

#: src/reference/config.md:432
msgid ""
"Environment: `CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER` or "
"`RUSTC_WORKSPACE_WRAPPER`"
msgstr ""

#: src/reference/config.md:434
msgid ""
"Sets a wrapper to execute instead of `rustc`, for workspace members only. "
"When building a single-package project without workspaces, that package is "
"considered to be the workspace. The first argument passed to the wrapper is "
"the path to the actual executable to use (i.e., `build.rustc`, if that is "
"set, or `\"rustc\"` otherwise). It affects the filename hash so that "
"artifacts produced by the wrapper are cached separately."
msgstr ""

#: src/reference/config.md:440
msgid ""
"If both `rustc-wrapper` and `rustc-workspace-wrapper` are set, then they "
"will be nested: the final invocation is `$RUSTC_WRAPPER "
"$RUSTC_WORKSPACE_WRAPPER $RUSTC`."
msgstr ""

#: src/reference/config.md:443
msgid "`build.rustdoc`"
msgstr ""

#: src/reference/config.md:445
msgid "Default: `\"rustdoc\"`"
msgstr ""

#: src/reference/config.md:446
msgid "Environment: `CARGO_BUILD_RUSTDOC` or `RUSTDOC`"
msgstr ""

#: src/reference/config.md:448
msgid "Sets the executable to use for `rustdoc`."
msgstr ""

#: src/reference/config.md:450
msgid "`build.target`"
msgstr ""

#: src/reference/config.md:452
msgid "Default: host platform"
msgstr ""

#: src/reference/config.md:453
msgid "Environment: `CARGO_BUILD_TARGET`"
msgstr ""

#: src/reference/config.md:455
msgid ""
"The default [target platform triples](../appendix/glossary.md#target \"\\"
"\"target\\\" (glossary)\") to compile to."
msgstr ""

#: src/reference/config.md:457
msgid ""
"This allows passing either a string or an array of strings. Each string "
"value is a target platform triple. The selected build targets will be built "
"for each of the selected architectures."
msgstr ""

#: src/reference/config.md:461
msgid ""
"The string value may also be a relative path to a `.json` target spec file."
msgstr ""

#: src/reference/config.md:463
msgid "Can be overridden with the `--target` CLI option."
msgstr ""

#: src/reference/config.md:465
msgid ""
"```toml\n"
"[build]\n"
"target = [\"x86_64-unknown-linux-gnu\", \"i686-unknown-linux-gnu\"]\n"
"```"
msgstr ""

#: src/reference/config.md:470
msgid "`build.target-dir`"
msgstr ""

#: src/reference/config.md:471 src/reference/config.md:555
#: src/reference/config.md:703 src/reference/config.md:767
#: src/reference/config.md:1132 src/reference/config.md:1146
#: src/reference/unstable.md:257
msgid "Type: string (path)"
msgstr ""

#: src/reference/config.md:472
msgid "Default: `\"target\"`"
msgstr ""

#: src/reference/config.md:473
msgid "Environment: `CARGO_BUILD_TARGET_DIR` or `CARGO_TARGET_DIR`"
msgstr ""

#: src/reference/config.md:475
msgid ""
"The path to where all compiler output is placed. The default if not "
"specified is a directory named `target` located at the root of the workspace."
msgstr ""

#: src/reference/config.md:478
msgid "Can be overridden with the `--target-dir` CLI option."
msgstr ""

#: src/reference/config.md:480
msgid "`build.rustflags`"
msgstr ""

#: src/reference/config.md:483
msgid ""
"Environment: `CARGO_BUILD_RUSTFLAGS` or `CARGO_ENCODED_RUSTFLAGS` or "
"`RUSTFLAGS`"
msgstr ""

#: src/reference/config.md:485
msgid ""
"Extra command-line flags to pass to `rustc`. The value may be an array of "
"strings or a space-separated string."
msgstr ""

#: src/reference/config.md:488 src/reference/config.md:525
msgid ""
"There are four mutually exclusive sources of extra flags. They are checked "
"in order, with the first one being used:"
msgstr ""

#: src/reference/config.md:491
msgid "`CARGO_ENCODED_RUSTFLAGS` environment variable."
msgstr ""

#: src/reference/config.md:492
msgid "`RUSTFLAGS` environment variable."
msgstr ""

#: src/reference/config.md:493
msgid ""
"All matching `target.<triple>.rustflags` and `target.<cfg>.rustflags` config "
"entries joined together."
msgstr ""

#: src/reference/config.md:495
msgid "`build.rustflags` config value."
msgstr ""

#: src/reference/config.md:497
msgid ""
"Additional flags may also be passed with the [`cargo rustc`](../commands/"
"cargo-rustc.md) command."
msgstr ""

#: src/reference/config.md:499
msgid ""
"If the `--target` flag (or [`build.target`](#buildtarget)) is used, then the "
"flags will only be passed to the compiler for the target. Things being built "
"for the host, such as build scripts or proc macros, will not receive the "
"args. Without `--target`, the flags will be passed to all compiler "
"invocations (including build scripts and proc macros) because dependencies "
"are shared. If you have args that you do not want to pass to build scripts "
"or proc macros and are building for the host, pass `--target` with the [host "
"triple](../appendix/glossary.md#target \"\\\"target\\\" (glossary)\")."
msgstr ""

#: src/reference/config.md:507
msgid ""
"It is not recommended to pass in flags that Cargo itself usually manages. "
"For example, the flags driven by [profiles](profiles.md) are best handled by "
"setting the appropriate profile setting."
msgstr ""

#: src/reference/config.md:511 src/reference/config.md:535
msgid ""
"**Caution**: Due to the low-level nature of passing flags directly to the "
"compiler, this may cause a conflict with future versions of Cargo which may "
"issue the same or similar flags on its own which may interfere with the "
"flags you specify. This is an area where Cargo may not always be backwards "
"compatible."
msgstr ""

#: src/reference/config.md:517
msgid "`build.rustdocflags`"
msgstr ""

#: src/reference/config.md:520
msgid ""
"Environment: `CARGO_BUILD_RUSTDOCFLAGS` or `CARGO_ENCODED_RUSTDOCFLAGS` or "
"`RUSTDOCFLAGS`"
msgstr ""

#: src/reference/config.md:522
msgid ""
"Extra command-line flags to pass to `rustdoc`. The value may be an array of "
"strings or a space-separated string."
msgstr ""

#: src/reference/config.md:528
msgid "`CARGO_ENCODED_RUSTDOCFLAGS` environment variable."
msgstr ""

#: src/reference/config.md:529
msgid "`RUSTDOCFLAGS` environment variable."
msgstr ""

#: src/reference/config.md:530
msgid ""
"All matching `target.<triple>.rustdocflags` config entries joined together."
msgstr ""

#: src/reference/config.md:531
msgid "`build.rustdocflags` config value."
msgstr ""

#: src/reference/config.md:533
msgid ""
"Additional flags may also be passed with the [`cargo rustdoc`](../commands/"
"cargo-rustdoc.md) command."
msgstr ""

#: src/reference/config.md:541
msgid "`build.incremental`"
msgstr ""

#: src/reference/config.md:542 src/reference/config.md:1333
#: src/reference/config.md:1340
msgid "Type: bool"
msgstr ""

#: src/reference/config.md:543
msgid "Default: from profile"
msgstr ""

#: src/reference/config.md:544
msgid "Environment: `CARGO_BUILD_INCREMENTAL` or `CARGO_INCREMENTAL`"
msgstr ""

#: src/reference/config.md:546
msgid ""
"Whether or not to perform [incremental compilation]"
"(profiles.md#incremental). The default if not set is to use the value from "
"the [profile](profiles.md#incremental). Otherwise this overrides the setting "
"of all profiles."
msgstr ""

#: src/reference/config.md:550
msgid ""
"The `CARGO_INCREMENTAL` environment variable can be set to `1` to force "
"enable incremental compilation for all profiles, or `0` to disable it. This "
"env var overrides the config setting."
msgstr ""

#: src/reference/config.md:554
msgid "`build.dep-info-basedir`"
msgstr ""

#: src/reference/config.md:557
msgid "Environment: `CARGO_BUILD_DEP_INFO_BASEDIR`"
msgstr ""

#: src/reference/config.md:559
msgid ""
"Strips the given path prefix from [dep info](../reference/build-cache.md#dep-"
"info-files) file paths. This config setting is intended to convert absolute "
"paths to relative paths for tools that require relative paths."
msgstr ""

#: src/reference/config.md:564
msgid ""
"The setting itself is a config-relative path. So, for example, a value of "
"`\".\"` would strip all paths starting with the parent directory of the "
"`.cargo` directory."
msgstr ""

#: src/reference/config.md:568
msgid "`build.pipelining`"
msgstr ""

#: src/reference/config.md:570
msgid ""
"This option is deprecated and unused. Cargo always has pipelining enabled."
msgstr ""

#: src/reference/config.md:572
msgid "`[credential-alias]`"
msgstr ""

#: src/reference/config.md:574
msgid "Default: empty"
msgstr ""

#: src/reference/config.md:575
msgid "Environment: `CARGO_CREDENTIAL_ALIAS_<name>`"
msgstr ""

#: src/reference/config.md:577
msgid ""
"The `[credential-alias]` table defines credential provider aliases. These "
"aliases can be referenced as an element of the `registry.global-credential-"
"providers` array, or as a credential provider for a specific registry under "
"`registries.<NAME>.credential-provider`."
msgstr ""

#: src/reference/config.md:582
msgid ""
"If specified as a string, the value will be split on spaces into path and "
"arguments."
msgstr ""

#: src/reference/config.md:584
msgid "For example, to define an alias called `my-alias`:"
msgstr ""

#: src/reference/config.md:586
msgid ""
"```toml\n"
"[credential-alias]\n"
"my-alias = [\"/usr/bin/cargo-credential-example\", \"--argument\", "
"\"value\", \"--flag\"]\n"
"```"
msgstr ""

#: src/reference/config.md:590 src/reference/config.md:1040
#: src/reference/config.md:1089 src/reference/config.md:1115
msgid ""
"See [Registry Authentication](registry-authentication.md) for more "
"information."
msgstr ""

#: src/reference/config.md:592
msgid "`[doc]`"
msgstr ""

#: src/reference/config.md:594
msgid ""
"The `[doc]` table defines options for the [`cargo doc`](../commands/cargo-"
"doc.md) command."
msgstr ""

#: src/reference/config.md:596 src/CHANGELOG.md:43
msgid "`doc.browser`"
msgstr ""

#: src/reference/config.md:598 src/reference/config.md:1232
msgid ""
"Type: string or array of strings ([program path with args](#executable-paths-"
"with-arguments))"
msgstr ""

#: src/reference/config.md:599
msgid ""
"Default: `BROWSER` environment variable, or, if that is missing, opening the "
"link in a system specific way"
msgstr ""

#: src/reference/config.md:602
msgid ""
"This option sets the browser to be used by [`cargo doc`](../commands/cargo-"
"doc.md), overriding the `BROWSER` environment variable when opening "
"documentation with the `--open` option."
msgstr ""

#: src/reference/config.md:606
msgid "`[cargo-new]`"
msgstr ""

#: src/reference/config.md:608
msgid ""
"The `[cargo-new]` table defines defaults for the [`cargo new`](../commands/"
"cargo-new.md) command."
msgstr ""

#: src/reference/config.md:610
msgid "`cargo-new.name`"
msgstr ""

#: src/reference/config.md:614
msgid "`cargo-new.email`"
msgstr ""

#: src/reference/config.md:618
msgid "`cargo-new.vcs`"
msgstr ""

#: src/reference/config.md:619 src/reference/config.md:657
#: src/reference/config.md:685 src/reference/config.md:755
#: src/reference/config.md:916 src/reference/config.md:958
#: src/reference/config.md:983 src/reference/config.md:1016
#: src/reference/config.md:1043 src/reference/config.md:1066
#: src/reference/config.md:1092 src/reference/config.md:1125
#: src/reference/config.md:1160 src/reference/config.md:1169
#: src/reference/config.md:1178 src/reference/config.md:1319
#: src/reference/config.md:1347 src/reference/unstable.md:1852
#: src/reference/unstable.md:1873
msgid "Type: string"
msgstr ""

#: src/reference/config.md:620
msgid "Default: `\"git\"` or `\"none\"`"
msgstr ""

#: src/reference/config.md:621
msgid "Environment: `CARGO_CARGO_NEW_VCS`"
msgstr ""

#: src/reference/config.md:623
msgid ""
"Specifies the source control system to use for initializing a new "
"repository. Valid values are `git`, `hg` (for Mercurial), `pijul`, `fossil` "
"or `none` to disable this behavior. Defaults to `git`, or `none` if already "
"inside a VCS repository. Can be overridden with the `--vcs` CLI option."
msgstr ""

#: src/reference/config.md:628
msgid "`[env]`"
msgstr ""

#: src/reference/config.md:630
msgid ""
"The `[env]` section allows you to set additional environment variables for "
"build scripts, rustc invocations, `cargo run` and `cargo build`."
msgstr ""

#: src/reference/config.md:633
msgid ""
"```toml\n"
"[env]\n"
"OPENSSL_DIR = \"/opt/openssl\"\n"
"```"
msgstr ""

#: src/reference/config.md:638
msgid ""
"By default, the variables specified will not override values that already "
"exist in the environment. This behavior can be changed by setting the "
"`force` flag."
msgstr ""

#: src/reference/config.md:641
msgid ""
"Setting the `relative` flag evaluates the value as a config-relative path "
"that is relative to the parent directory of the `.cargo` directory that "
"contains the `config.toml` file. The value of the environment variable will "
"be the full absolute path."
msgstr ""

#: src/reference/config.md:646
msgid ""
"```toml\n"
"[env]\n"
"TMPDIR = { value = \"/home/tmp\", force = true }\n"
"OPENSSL_DIR = { value = \"vendor/openssl\", relative = true }\n"
"```"
msgstr ""

#: src/reference/config.md:652
msgid "`[future-incompat-report]`"
msgstr ""

#: src/reference/config.md:654
msgid ""
"The `[future-incompat-report]` table controls setting for [future incompat "
"reporting](future-incompat-report.md)"
msgstr ""

#: src/reference/config.md:656
msgid "`future-incompat-report.frequency`"
msgstr ""

#: src/reference/config.md:658
msgid "Default: `\"always\"`"
msgstr ""

#: src/reference/config.md:659
msgid "Environment: `CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY`"
msgstr ""

#: src/reference/config.md:661
msgid ""
"Controls how often we display a notification to the terminal when a future "
"incompat report is available. Possible values:"
msgstr ""

#: src/reference/config.md:663
msgid ""
"`always` (default): Always display a notification when a command (e.g. "
"`cargo build`) produces a future incompat report"
msgstr ""

#: src/reference/config.md:664
msgid "`never`: Never display a notification"
msgstr ""

#: src/reference/config.md:666
msgid "`[http]`"
msgstr ""

#: src/reference/config.md:668
msgid ""
"The `[http]` table defines settings for HTTP behavior. This includes "
"fetching crate dependencies and accessing remote git repositories."
msgstr ""

#: src/reference/config.md:671
msgid "`http.debug`"
msgstr ""

#: src/reference/config.md:672 src/reference/config.md:711
#: src/reference/config.md:745 src/reference/config.md:794
#: src/reference/config.md:808 src/reference/config.md:923
#: src/reference/config.md:930 src/reference/config.md:944
#: src/reference/config.md:965 src/reference/config.md:1299
#: src/reference/config.md:1309
msgid "Type: boolean"
msgstr ""

#: src/reference/config.md:673 src/reference/config.md:795
#: src/reference/config.md:809 src/reference/config.md:1300
#: src/reference/config.md:1310
msgid "Default: false"
msgstr ""

#: src/reference/config.md:674
msgid "Environment: `CARGO_HTTP_DEBUG`"
msgstr ""

#: src/reference/config.md:676
msgid ""
"If `true`, enables debugging of HTTP requests. The debug information can be "
"seen by setting the `CARGO_LOG=network=debug` environment variable (or use "
"`network=trace` for even more information)."
msgstr ""

#: src/reference/config.md:680
msgid ""
"Be wary when posting logs from this output in a public location. The output "
"may include headers with authentication tokens which you don't want to leak! "
"Be sure to review logs before posting them."
msgstr ""

#: src/reference/config.md:684
msgid "`http.proxy`"
msgstr ""

#: src/reference/config.md:687
msgid ""
"Environment: `CARGO_HTTP_PROXY` or `HTTPS_PROXY` or `https_proxy` or "
"`http_proxy`"
msgstr ""

#: src/reference/config.md:689
msgid ""
"Sets an HTTP and HTTPS proxy to use. The format is in [libcurl format]"
"(https://everything.curl.dev/transfers/conn/proxies#proxy-types) as in "
"`[protocol://]host[:port]`. If not set, Cargo will also check the "
"`http.proxy` setting in your global git configuration. If none of those are "
"set, the `HTTPS_PROXY` or `https_proxy` environment variables set the proxy "
"for HTTPS requests, and `http_proxy` sets it for HTTP requests."
msgstr ""

#: src/reference/config.md:695
msgid "`http.timeout`"
msgstr ""

#: src/reference/config.md:696 src/reference/config.md:735
#: src/reference/config.md:787 src/reference/config.md:902
#: src/reference/config.md:1358
msgid "Type: integer"
msgstr ""

#: src/reference/config.md:697
msgid "Default: 30"
msgstr ""

#: src/reference/config.md:698
msgid "Environment: `CARGO_HTTP_TIMEOUT` or `HTTP_TIMEOUT`"
msgstr ""

#: src/reference/config.md:700
msgid "Sets the timeout for each HTTP request, in seconds."
msgstr ""

#: src/reference/config.md:702
msgid "`http.cainfo`"
msgstr ""

#: src/reference/config.md:705
msgid "Environment: `CARGO_HTTP_CAINFO`"
msgstr ""

#: src/reference/config.md:707
msgid ""
"Path to a Certificate Authority (CA) bundle file, used to verify TLS "
"certificates. If not specified, Cargo attempts to use the system "
"certificates."
msgstr ""

#: src/reference/config.md:710
msgid "`http.check-revoke`"
msgstr ""

#: src/reference/config.md:712
msgid "Default: true (Windows) false (all others)"
msgstr ""

#: src/reference/config.md:713
msgid "Environment: `CARGO_HTTP_CHECK_REVOKE`"
msgstr ""

#: src/reference/config.md:715
msgid ""
"This determines whether or not TLS certificate revocation checks should be "
"performed. This only works on Windows."
msgstr ""

#: src/reference/config.md:718
msgid "`http.ssl-version`"
msgstr ""

#: src/reference/config.md:719
msgid "Type: string or min/max table"
msgstr ""

#: src/reference/config.md:721
msgid "Environment: `CARGO_HTTP_SSL_VERSION`"
msgstr ""

#: src/reference/config.md:723
msgid ""
"This sets the minimum TLS version to use. It takes a string, with one of the "
"possible values of `\"default\"`, `\"tlsv1\"`, `\"tlsv1.0\"`, `\"tlsv1.1\"`, "
"`\"tlsv1.2\"`, or `\"tlsv1.3\"`."
msgstr ""

#: src/reference/config.md:727
msgid ""
"This may alternatively take a table with two keys, `min` and `max`, which "
"each take a string value of the same kind that specifies the minimum and "
"maximum range of TLS versions to use."
msgstr ""

#: src/reference/config.md:731
msgid ""
"The default is a minimum version of `\"tlsv1.0\"` and a max of the newest "
"version supported on your platform, typically `\"tlsv1.3\"`."
msgstr ""

#: src/reference/config.md:734
msgid "`http.low-speed-limit`"
msgstr ""

#: src/reference/config.md:736
msgid "Default: 10"
msgstr ""

#: src/reference/config.md:737
msgid "Environment: `CARGO_HTTP_LOW_SPEED_LIMIT`"
msgstr ""

#: src/reference/config.md:739
msgid ""
"This setting controls timeout behavior for slow connections. If the average "
"transfer speed in bytes per second is below the given value for "
"[`http.timeout`](#httptimeout) seconds (default 30 seconds), then the "
"connection is considered too slow and Cargo will abort and retry."
msgstr ""

#: src/reference/config.md:744
msgid "`http.multiplexing`"
msgstr ""

#: src/reference/config.md:746
msgid "Default: true"
msgstr ""

#: src/reference/config.md:747
msgid "Environment: `CARGO_HTTP_MULTIPLEXING`"
msgstr ""

#: src/reference/config.md:749
msgid ""
"When `true`, Cargo will attempt to use the HTTP2 protocol with multiplexing. "
"This allows multiple requests to use the same connection, usually improving "
"performance when fetching multiple files. If `false`, Cargo will use HTTP "
"1.1 without pipelining."
msgstr ""

#: src/reference/config.md:754
msgid "`http.user-agent`"
msgstr ""

#: src/reference/config.md:756
msgid "Default: Cargo's version"
msgstr ""

#: src/reference/config.md:757
msgid "Environment: `CARGO_HTTP_USER_AGENT`"
msgstr ""

#: src/reference/config.md:759
msgid ""
"Specifies a custom user-agent header to use. The default if not specified is "
"a string that includes Cargo's version."
msgstr ""

#: src/reference/config.md:762
msgid "`[install]`"
msgstr ""

#: src/reference/config.md:764
msgid ""
"The `[install]` table defines defaults for the [`cargo install`](../commands/"
"cargo-install.md) command."
msgstr ""

#: src/reference/config.md:766
msgid "`install.root`"
msgstr ""

#: src/reference/config.md:768
msgid "Default: Cargo's home directory"
msgstr ""

#: src/reference/config.md:769
msgid "Environment: `CARGO_INSTALL_ROOT`"
msgstr ""

#: src/reference/config.md:771
msgid ""
"Sets the path to the root directory for installing executables for [`cargo "
"install`](../commands/cargo-install.md). Executables go into a `bin` "
"directory underneath the root."
msgstr ""

#: src/reference/config.md:774
msgid ""
"To track information of installed executables, some extra files, such as "
"`.crates.toml` and `.crates2.json`, are also created under this root."
msgstr ""

#: src/reference/config.md:777
msgid ""
"The default if not specified is Cargo's home directory (default `.cargo` in "
"your home directory)."
msgstr ""

#: src/reference/config.md:780
msgid "Can be overridden with the `--root` command-line option."
msgstr ""

#: src/reference/config.md:782
msgid "`[net]`"
msgstr ""

#: src/reference/config.md:784
msgid "The `[net]` table controls networking configuration."
msgstr ""

#: src/reference/config.md:786
msgid "`net.retry`"
msgstr ""

#: src/reference/config.md:788
msgid "Default: 3"
msgstr ""

#: src/reference/config.md:789
msgid "Environment: `CARGO_NET_RETRY`"
msgstr ""

#: src/reference/config.md:791
msgid "Number of times to retry possibly spurious network errors."
msgstr ""

#: src/reference/config.md:793
msgid "`net.git-fetch-with-cli`"
msgstr ""

#: src/reference/config.md:796
msgid "Environment: `CARGO_NET_GIT_FETCH_WITH_CLI`"
msgstr ""

#: src/reference/config.md:798
msgid ""
"If this is `true`, then Cargo will use the `git` executable to fetch "
"registry indexes and git dependencies. If `false`, then it uses a built-in "
"`git` library."
msgstr ""

#: src/reference/config.md:802
msgid ""
"Setting this to `true` can be helpful if you have special authentication "
"requirements that Cargo does not support. See [Git Authentication](../"
"appendix/git-authentication.md) for more information about setting up git "
"authentication."
msgstr ""

#: src/reference/config.md:807
msgid "`net.offline`"
msgstr ""

#: src/reference/config.md:810
msgid "Environment: `CARGO_NET_OFFLINE`"
msgstr ""

#: src/reference/config.md:812
msgid ""
"If this is `true`, then Cargo will avoid accessing the network, and attempt "
"to proceed with locally cached data. If `false`, Cargo will access the "
"network as needed, and generate an error if it encounters a network error."
msgstr ""

#: src/reference/config.md:816
msgid "Can be overridden with the `--offline` command-line option."
msgstr ""

#: src/reference/config.md:818
msgid "`net.ssh`"
msgstr ""

#: src/reference/config.md:820
msgid "The `[net.ssh]` table contains settings for SSH connections."
msgstr ""

#: src/reference/config.md:822
msgid "`net.ssh.known-hosts`"
msgstr ""

#: src/reference/config.md:823
msgid "Type: array of strings"
msgstr ""

#: src/reference/config.md:824
msgid "Default: see description"
msgstr ""

#: src/reference/config.md:827
msgid ""
"The `known-hosts` array contains a list of SSH host keys that should be "
"accepted as valid when connecting to an SSH server (such as for SSH git "
"dependencies). Each entry should be a string in a format similar to OpenSSH "
"`known_hosts` files. Each string should start with one or more hostnames "
"separated by commas, a space, the key type name, a space, and the base64-"
"encoded key. For example:"
msgstr ""

#: src/reference/config.md:834
msgid ""
"```toml\n"
"[net.ssh]\n"
"known-hosts = [\n"
"    \"example.com ssh-ed25519 "
"AAAAC3NzaC1lZDI1NTE5AAAAIFO4Q5T0UV0SQevair9PFwoxY9dl4pQl3u5phoqJH3cF\"\n"
"]\n"
"```"
msgstr ""

#: src/reference/config.md:841
msgid ""
"Cargo will attempt to load known hosts keys from common locations supported "
"in OpenSSH, and will join those with any listed in a Cargo configuration "
"file. If any matching entry has the correct key, the connection will be "
"allowed."
msgstr ""

#: src/reference/config.md:845
msgid ""
"Cargo comes with the host keys for [github.com](https://docs.github.com/en/"
"authentication/keeping-your-account-and-data-secure/githubs-ssh-key-"
"fingerprints) built-in. If those ever change, you can add the new keys to "
"the config or known_hosts file."
msgstr ""

#: src/reference/config.md:848
msgid ""
"See [Git Authentication](../appendix/git-authentication.md#ssh-known-hosts) "
"for more details."
msgstr ""

#: src/reference/config.md:853
msgid "`[patch]`"
msgstr ""

#: src/reference/config.md:855
msgid ""
"Just as you can override dependencies using [`[patch]` in `Cargo.toml`]"
"(overriding-dependencies.md#the-patch-section), you can override them in the "
"cargo configuration file to apply those patches to any affected build. The "
"format is identical to the one used in `Cargo.toml`."
msgstr ""

#: src/reference/config.md:861
msgid ""
"Since `.cargo/config.toml` files are not usually checked into source "
"control, you should prefer patching using `Cargo.toml` where possible to "
"ensure that other developers can compile your crate in their own "
"environments. Patching through cargo configuration files is generally only "
"appropriate when the patch section is automatically generated by an external "
"build tool."
msgstr ""

#: src/reference/config.md:868
msgid ""
"If a given dependency is patched both in a cargo configuration file and a "
"`Cargo.toml` file, the patch in the configuration file is used. If multiple "
"configuration files patch the same dependency, standard cargo configuration "
"merging is used, which prefers the value defined closest to the current "
"directory, with `$HOME/.cargo/config.toml` taking the lowest precedence."
msgstr ""

#: src/reference/config.md:875
msgid ""
"Relative `path` dependencies in such a `[patch]` section are resolved "
"relative to the configuration file they appear in."
msgstr ""

#: src/reference/config.md:878
msgid "`[profile]`"
msgstr ""

#: src/reference/config.md:880
msgid ""
"The `[profile]` table can be used to globally change profile settings, and "
"override settings specified in `Cargo.toml`. It has the same syntax and "
"options as profiles specified in `Cargo.toml`. See the [Profiles chapter]"
"(profiles.md) for details about the options."
msgstr ""

#: src/reference/config.md:887
msgid "`[profile.<name>.build-override]`"
msgstr ""

#: src/reference/config.md:888
msgid "Environment: `CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>`"
msgstr ""

#: src/reference/config.md:890
msgid ""
"The build-override table overrides settings for build scripts, proc macros, "
"and their dependencies. It has the same keys as a normal profile. See the "
"[overrides section](profiles.md#overrides) for more details."
msgstr ""

#: src/reference/config.md:894
msgid "`[profile.<name>.package.<name>]`"
msgstr ""

#: src/reference/config.md:897
msgid ""
"The package table overrides settings for specific packages. It has the same "
"keys as a normal profile, minus the `panic`, `lto`, and `rpath` settings. "
"See the [overrides section](profiles.md#overrides) for more details."
msgstr ""

#: src/reference/config.md:901
msgid "`profile.<name>.codegen-units`"
msgstr ""

#: src/reference/config.md:903 src/reference/config.md:910
#: src/reference/config.md:917 src/reference/config.md:924
#: src/reference/config.md:931 src/reference/config.md:938
#: src/reference/config.md:945 src/reference/config.md:952
#: src/reference/config.md:959 src/reference/config.md:966
#: src/reference/config.md:973
msgid "Default: See profile docs."
msgstr ""

#: src/reference/config.md:904
msgid "Environment: `CARGO_PROFILE_<name>_CODEGEN_UNITS`"
msgstr ""

#: src/reference/config.md:906
msgid "See [codegen-units](profiles.md#codegen-units)."
msgstr ""

#: src/reference/config.md:908
msgid "`profile.<name>.debug`"
msgstr ""

#: src/reference/config.md:909
msgid "Type: integer or boolean"
msgstr ""

#: src/reference/config.md:911
msgid "Environment: `CARGO_PROFILE_<name>_DEBUG`"
msgstr ""

#: src/reference/config.md:913
msgid "See [debug](profiles.md#debug)."
msgstr ""

#: src/reference/config.md:915
msgid "`profile.<name>.split-debuginfo`"
msgstr ""

#: src/reference/config.md:918
msgid "Environment: `CARGO_PROFILE_<name>_SPLIT_DEBUGINFO`"
msgstr ""

#: src/reference/config.md:920
msgid "See [split-debuginfo](profiles.md#split-debuginfo)."
msgstr ""

#: src/reference/config.md:922
msgid "`profile.<name>.debug-assertions`"
msgstr ""

#: src/reference/config.md:925
msgid "Environment: `CARGO_PROFILE_<name>_DEBUG_ASSERTIONS`"
msgstr ""

#: src/reference/config.md:927
msgid "See [debug-assertions](profiles.md#debug-assertions)."
msgstr ""

#: src/reference/config.md:929
msgid "`profile.<name>.incremental`"
msgstr ""

#: src/reference/config.md:932
msgid "Environment: `CARGO_PROFILE_<name>_INCREMENTAL`"
msgstr ""

#: src/reference/config.md:934
msgid "See [incremental](profiles.md#incremental)."
msgstr ""

#: src/reference/config.md:936
msgid "`profile.<name>.lto`"
msgstr ""

#: src/reference/config.md:937 src/reference/config.md:972
msgid "Type: string or boolean"
msgstr ""

#: src/reference/config.md:939
msgid "Environment: `CARGO_PROFILE_<name>_LTO`"
msgstr ""

#: src/reference/config.md:941
msgid "See [lto](profiles.md#lto)."
msgstr ""

#: src/reference/config.md:943
msgid "`profile.<name>.overflow-checks`"
msgstr ""

#: src/reference/config.md:946
msgid "Environment: `CARGO_PROFILE_<name>_OVERFLOW_CHECKS`"
msgstr ""

#: src/reference/config.md:948
msgid "See [overflow-checks](profiles.md#overflow-checks)."
msgstr ""

#: src/reference/config.md:950
msgid "`profile.<name>.opt-level`"
msgstr ""

#: src/reference/config.md:953
msgid "Environment: `CARGO_PROFILE_<name>_OPT_LEVEL`"
msgstr ""

#: src/reference/config.md:955
msgid "See [opt-level](profiles.md#opt-level)."
msgstr ""

#: src/reference/config.md:957
msgid "`profile.<name>.panic`"
msgstr ""

#: src/reference/config.md:960
msgid "Environment: `CARGO_PROFILE_<name>_PANIC`"
msgstr ""

#: src/reference/config.md:962
msgid "See [panic](profiles.md#panic)."
msgstr ""

#: src/reference/config.md:964
msgid "`profile.<name>.rpath`"
msgstr ""

#: src/reference/config.md:967
msgid "Environment: `CARGO_PROFILE_<name>_RPATH`"
msgstr ""

#: src/reference/config.md:969
msgid "See [rpath](profiles.md#rpath)."
msgstr ""

#: src/reference/config.md:971
msgid "`profile.<name>.strip`"
msgstr ""

#: src/reference/config.md:974
msgid "Environment: `CARGO_PROFILE_<name>_STRIP`"
msgstr ""

#: src/reference/config.md:976
msgid "See [strip](profiles.md#strip)."
msgstr ""

#: src/reference/config.md:978
msgid "`[resolver]`"
msgstr ""

#: src/reference/config.md:980
msgid ""
"The `[resolver]` table overrides [dependency resolution behavior]"
"(resolver.md) for local development (e.g. excludes `cargo install`)."
msgstr ""

#: src/reference/config.md:982
msgid "`resolver.incompatible-rust-versions`"
msgstr ""

#: src/reference/config.md:984
msgid "Default: See [`resolver`](resolver.md#resolver-versions) docs"
msgstr ""

#: src/reference/config.md:985
msgid "Environment: `CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS`"
msgstr ""

#: src/reference/config.md:987
msgid ""
"When resolving which version of a dependency to use, select how versions "
"with incompatible `package.rust-version`s are treated. Values include:"
msgstr ""

#: src/reference/config.md:989
msgid ""
"`allow`: treat `rust-version`\\-incompatible versions like any other version"
msgstr ""

#: src/reference/config.md:990
msgid ""
"`fallback`: only consider `rust-version`\\-incompatible versions if no other "
"version matched"
msgstr ""

#: src/reference/config.md:992
msgid "Can be overridden with"
msgstr ""

#: src/reference/config.md:993
msgid "`--ignore-rust-version` CLI option"
msgstr ""

#: src/reference/config.md:994
msgid ""
"Setting the dependency's version requirement higher than any version with a "
"compatible `rust-version`"
msgstr ""

#: src/reference/config.md:995
msgid "Specifying the version to `cargo update` with `--precise`"
msgstr ""

#: src/reference/config.md:997
msgid "See the [resolver](resolver.md#rust-version) chapter for more details."
msgstr ""

#: src/reference/config.md:999
msgid "**MSRV:**"
msgstr ""

#: src/reference/config.md:1000
msgid "`allow` is supported on any version"
msgstr ""

#: src/reference/config.md:1001
msgid "`fallback` is respected as of 1.84"
msgstr ""

#: src/reference/config.md:1003
msgid "`[registries]`"
msgstr ""

#: src/reference/config.md:1005
msgid ""
"The `[registries]` table is used for specifying additional [registries]"
"(registries.md). It consists of a sub-table for each named registry."
msgstr ""

#: src/reference/config.md:1008
msgid "`registries.<name>.index`"
msgstr ""

#: src/reference/config.md:1009 src/reference/config.md:1139
#: src/reference/config.md:1153
msgid "Type: string (url)"
msgstr ""

#: src/reference/config.md:1011
msgid "Environment: `CARGO_REGISTRIES_<name>_INDEX`"
msgstr ""

#: src/reference/config.md:1013
msgid "Specifies the URL of the index for the registry."
msgstr ""

#: src/reference/config.md:1015
msgid "`registries.<name>.token`"
msgstr ""

#: src/reference/config.md:1018
msgid "Environment: `CARGO_REGISTRIES_<name>_TOKEN`"
msgstr ""

#: src/reference/config.md:1020
msgid ""
"Specifies the authentication token for the given registry. This value should "
"only appear in the [credentials](#credentials) file. This is used for "
"registry commands like [`cargo publish`](../commands/cargo-publish.md) that "
"require authentication."
msgstr ""

#: src/reference/config.md:1024 src/reference/config.md:1100
msgid "Can be overridden with the `--token` command-line option."
msgstr ""

#: src/reference/config.md:1026
msgid "`registries.<name>.credential-provider`"
msgstr ""

#: src/reference/config.md:1027 src/reference/config.md:1076
msgid "Type: string or array of path and arguments"
msgstr ""

#: src/reference/config.md:1029
msgid "Environment: `CARGO_REGISTRIES_<name>_CREDENTIAL_PROVIDER`"
msgstr ""

#: src/reference/config.md:1031
msgid ""
"Specifies the credential provider for the given registry. If not set, the "
"providers in [`registry.global-credential-providers`](#registryglobal-"
"credential-providers) will be used."
msgstr ""

#: src/reference/config.md:1035 src/reference/config.md:1084
msgid ""
"If specified as a string, path and arguments will be split on spaces. For "
"paths or arguments that contain spaces, use an array."
msgstr ""

#: src/reference/config.md:1038
msgid ""
"If the value exists in the [`[credential-alias]`](#credential-alias) table, "
"the alias will be used."
msgstr ""

#: src/reference/config.md:1042
msgid "`registries.crates-io.protocol`"
msgstr ""

#: src/reference/config.md:1044
msgid "Default: `\"sparse\"`"
msgstr ""

#: src/reference/config.md:1045
msgid "Environment: `CARGO_REGISTRIES_CRATES_IO_PROTOCOL`"
msgstr ""

#: src/reference/config.md:1047
msgid ""
"Specifies the protocol used to access crates.io. Allowed values are `git` or "
"`sparse`."
msgstr ""

#: src/reference/config.md:1049
msgid ""
"`git` causes Cargo to clone the entire index of all packages ever published "
"to [crates.io](https://crates.io/) from <https://github.com/rust-lang/"
"crates.io-index/>. This can have performance implications due to the size of "
"the index. `sparse` is a newer protocol which uses HTTPS to download only "
"what is necessary from <https://index.crates.io/>. This can result in a "
"significant performance improvement for resolving new dependencies in most "
"situations."
msgstr ""

#: src/reference/config.md:1054
msgid ""
"More information about registry protocols may be found in the [Registries "
"chapter](registries.md)."
msgstr ""

#: src/reference/config.md:1056
msgid "`[registry]`"
msgstr ""

#: src/reference/config.md:1058
msgid ""
"The `[registry]` table controls the default registry used when one is not "
"specified."
msgstr ""

#: src/reference/config.md:1061
msgid "`registry.index`"
msgstr ""

#: src/reference/config.md:1063
msgid "This value is no longer accepted and should not be used."
msgstr ""

#: src/reference/config.md:1065
msgid "`registry.default`"
msgstr ""

#: src/reference/config.md:1067
msgid "Default: `\"crates-io\"`"
msgstr ""

#: src/reference/config.md:1068
msgid "Environment: `CARGO_REGISTRY_DEFAULT`"
msgstr ""

#: src/reference/config.md:1070
msgid ""
"The name of the registry (from the [`registries` table](#registries)) to use "
"by default for registry commands like [`cargo publish`](../commands/cargo-"
"publish.md)."
msgstr ""

#: src/reference/config.md:1073
msgid "Can be overridden with the `--registry` command-line option."
msgstr ""

#: src/reference/config.md:1075 src/CHANGELOG.md:38
msgid "`registry.credential-provider`"
msgstr ""

#: src/reference/config.md:1078
msgid "Environment: `CARGO_REGISTRY_CREDENTIAL_PROVIDER`"
msgstr ""

#: src/reference/config.md:1080
msgid ""
"Specifies the credential provider for [crates.io](https://crates.io/). If "
"not set, the providers in [`registry.global-credential-providers`]"
"(#registryglobal-credential-providers) will be used."
msgstr ""

#: src/reference/config.md:1087
msgid ""
"If the value exists in the `[credential-alias]` table, the alias will be "
"used."
msgstr ""

#: src/reference/config.md:1091
msgid "`registry.token`"
msgstr ""

#: src/reference/config.md:1094
msgid "Environment: `CARGO_REGISTRY_TOKEN`"
msgstr ""

#: src/reference/config.md:1096
msgid ""
"Specifies the authentication token for [crates.io](https://crates.io/). This "
"value should only appear in the [credentials](#credentials) file. This is "
"used for registry commands like [`cargo publish`](../commands/cargo-"
"publish.md) that require authentication."
msgstr ""

#: src/reference/config.md:1102
msgid "`registry.global-credential-providers`"
msgstr ""

#: src/reference/config.md:1103
msgid "Type: array"
msgstr ""

#: src/reference/config.md:1104
msgid "Default: `[\"cargo:token\"]`"
msgstr ""

#: src/reference/config.md:1105
msgid "Environment: `CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS`"
msgstr ""

#: src/reference/config.md:1107
msgid ""
"Specifies the list of global credential providers. If credential provider is "
"not set for a specific registry using `registries.<name>.credential-"
"provider`, Cargo will use the credential providers in this list. Providers "
"toward the end of the list have precedence."
msgstr ""

#: src/reference/config.md:1111
msgid ""
"Path and arguments are split on spaces. If the path or arguments contains "
"spaces, the credential provider should be defined in the [`[credential-"
"alias]`](#credential-alias) table and referenced here by its alias."
msgstr ""

#: src/reference/config.md:1117
msgid "`[source]`"
msgstr ""

#: src/reference/config.md:1119
msgid ""
"The `[source]` table defines the registry sources available. See [Source "
"Replacement](source-replacement.md) for more information. It consists of a "
"sub-table for each named source. A source should only define one kind "
"(directory, registry, local-registry, or git)."
msgstr ""

#: src/reference/config.md:1124
msgid "`source.<name>.replace-with`"
msgstr ""

#: src/reference/config.md:1129
msgid ""
"If set, replace this source with the given named source or named registry."
msgstr ""

#: src/reference/config.md:1131
msgid "`source.<name>.directory`"
msgstr ""

#: src/reference/config.md:1136
msgid "Sets the path to a directory to use as a directory source."
msgstr ""

#: src/reference/config.md:1138
msgid "`source.<name>.registry`"
msgstr ""

#: src/reference/config.md:1143
msgid "Sets the URL to use for a registry source."
msgstr ""

#: src/reference/config.md:1145
msgid "`source.<name>.local-registry`"
msgstr ""

#: src/reference/config.md:1150
msgid "Sets the path to a directory to use as a local registry source."
msgstr ""

#: src/reference/config.md:1152
msgid "`source.<name>.git`"
msgstr ""

#: src/reference/config.md:1157
msgid "Sets the URL to use for a git repository source."
msgstr ""

#: src/reference/config.md:1159
msgid "`source.<name>.branch`"
msgstr ""

#: src/reference/config.md:1164
msgid "Sets the branch name to use for a git repository."
msgstr ""

#: src/reference/config.md:1166 src/reference/config.md:1175
#: src/reference/config.md:1184
msgid ""
"If none of `branch`, `tag`, or `rev` is set, defaults to the `master` branch."
msgstr ""

#: src/reference/config.md:1168
msgid "`source.<name>.tag`"
msgstr ""

#: src/reference/config.md:1173
msgid "Sets the tag name to use for a git repository."
msgstr ""

#: src/reference/config.md:1177
msgid "`source.<name>.rev`"
msgstr ""

#: src/reference/config.md:1182
msgid ""
"Sets the [revision](https://git-scm.com/docs/gitrevisions) to use for a git "
"repository."
msgstr ""

#: src/reference/config.md:1187
msgid "`[target]`"
msgstr ""

#: src/reference/config.md:1189
msgid ""
"The `[target]` table is used for specifying settings for specific platform "
"targets. It consists of a sub-table which is either a [platform triple](../"
"appendix/glossary.md#target \"\\\"target\\\" (glossary)\") or a [`cfg()` "
"expression](../../reference/conditional-compilation.html). The given values "
"will be used if the target platform matches either the `<triple>` value or "
"the `<cfg>` expression."
msgstr ""

#: src/reference/config.md:1194
msgid ""
"```toml\n"
"[target.thumbv7m-none-eabi]\n"
"linker = \"arm-none-eabi-gcc\"\n"
"runner = \"my-emulator\"\n"
"rustflags = [\"…\", \"…\"]\n"
"\n"
"[target.'cfg(all(target_arch = \"arm\", target_os = \"none\"))']\n"
"runner = \"my-arm-wrapper\"\n"
"rustflags = [\"…\", \"…\"]\n"
"```"
msgstr ""

#: src/reference/config.md:1205
msgid ""
"`cfg` values come from those built-in to the compiler (run `rustc --"
"print=cfg` to view) and extra `--cfg` flags passed to `rustc` (such as those "
"defined in `RUSTFLAGS`). Do not try to match on `debug_assertions`, `test`, "
"Cargo features like `feature=\"foo\"`, or values set by [build scripts]"
"(build-scripts.md)."
msgstr ""

#: src/reference/config.md:1210
msgid ""
"If using a target spec JSON file, the [`<triple>`](../appendix/"
"glossary.md#target \"\\\"target\\\" (glossary)\") value is the filename "
"stem. For example `--target foo/bar.json` would match `[target.bar]`."
msgstr ""

#: src/reference/config.md:1213
msgid "`target.<triple>.ar`"
msgstr ""

#: src/reference/config.md:1217
msgid "`target.<triple>.linker`"
msgstr ""

#: src/reference/config.md:1220
msgid "Environment: `CARGO_TARGET_<triple>_LINKER`"
msgstr ""

#: src/reference/config.md:1222
msgid ""
"Specifies the linker which is passed to `rustc` (via [`-C linker`](../../"
"rustc/codegen-options/index.md#linker)) when the [`<triple>`](../appendix/"
"glossary.md#target \"\\\"target\\\" (glossary)\") is being compiled for. By "
"default, the linker is not overridden."
msgstr ""

#: src/reference/config.md:1225
msgid "`target.<cfg>.linker`"
msgstr ""

#: src/reference/config.md:1226
msgid ""
"This is similar to the [target linker](#targettriplelinker), but using a "
"[`cfg()` expression](../../reference/conditional-compilation.html). If both "
"a [`<triple>`](../appendix/glossary.md#target \"\\\"target\\\" (glossary)\") "
"and `<cfg>` runner match, the `<triple>` will take precedence. It is an "
"error if more than one `<cfg>` runner matches the current target."
msgstr ""

#: src/reference/config.md:1231
msgid "`target.<triple>.runner`"
msgstr ""

#: src/reference/config.md:1234
msgid "Environment: `CARGO_TARGET_<triple>_RUNNER`"
msgstr ""

#: src/reference/config.md:1236
msgid ""
"If a runner is provided, executables for the target [`<triple>`](../appendix/"
"glossary.md#target \"\\\"target\\\" (glossary)\") will be executed by "
"invoking the specified runner with the actual executable passed as an "
"argument. This applies to [`cargo run`](../commands/cargo-run.md), [`cargo "
"test`](../commands/cargo-test.md) and [`cargo bench`](../commands/cargo-"
"bench.md) commands. By default, compiled executables are executed directly."
msgstr ""

#: src/reference/config.md:1241
msgid "`target.<cfg>.runner`"
msgstr ""

#: src/reference/config.md:1243
msgid ""
"This is similar to the [target runner](#targettriplerunner), but using a "
"[`cfg()` expression](../../reference/conditional-compilation.html). If both "
"a [`<triple>`](../appendix/glossary.md#target \"\\\"target\\\" (glossary)\") "
"and `<cfg>` runner match, the `<triple>` will take precedence. It is an "
"error if more than one `<cfg>` runner matches the current target."
msgstr ""

#: src/reference/config.md:1248
msgid "`target.<triple>.rustflags`"
msgstr ""

#: src/reference/config.md:1251
msgid "Environment: `CARGO_TARGET_<triple>_RUSTFLAGS`"
msgstr ""

#: src/reference/config.md:1253 src/reference/config.md:1270
msgid ""
"Passes a set of custom flags to the compiler for this [`<triple>`](../"
"appendix/glossary.md#target \"\\\"target\\\" (glossary)\"). The value may be "
"an array of strings or a space-separated string."
msgstr ""

#: src/reference/config.md:1256
msgid ""
"See [`build.rustflags`](#buildrustflags) for more details on the different "
"ways to specific extra flags."
msgstr ""

#: src/reference/config.md:1259
msgid "`target.<cfg>.rustflags`"
msgstr ""

#: src/reference/config.md:1261
msgid ""
"This is similar to the [target rustflags](#targettriplerustflags), but using "
"a [`cfg()` expression](../../reference/conditional-compilation.html). If "
"several `<cfg>` and [`<triple>`](../appendix/glossary.md#target \"\\"
"\"target\\\" (glossary)\") entries match the current target, the flags are "
"joined together."
msgstr ""

#: src/reference/config.md:1265
msgid "`target.<triple>.rustdocflags`"
msgstr ""

#: src/reference/config.md:1268
msgid "Environment: `CARGO_TARGET_<triple>_RUSTDOCFLAGS`"
msgstr ""

#: src/reference/config.md:1273
msgid ""
"See [`build.rustdocflags`](#buildrustdocflags) for more details on the "
"different ways to specific extra flags."
msgstr ""

#: src/reference/config.md:1276
msgid "`target.<triple>.<links>`"
msgstr ""

#: src/reference/config.md:1278
msgid ""
"The links sub-table provides a way to [override a build script](build-"
"scripts.md#overriding-build-scripts). When specified, the build script for "
"the given `links` library will not be run, and the given values will be used "
"instead."
msgstr ""

#: src/reference/config.md:1282 src/reference/build-scripts.md:499
msgid ""
"```toml\n"
"[target.x86_64-unknown-linux-gnu.foo]\n"
"rustc-link-lib = [\"foo\"]\n"
"rustc-link-search = [\"/path/to/foo\"]\n"
"rustc-flags = \"-L /some/path\"\n"
"rustc-cfg = ['key=\"value\"']\n"
"rustc-env = {key = \"value\"}\n"
"rustc-cdylib-link-arg = [\"…\"]\n"
"metadata_key1 = \"value\"\n"
"metadata_key2 = \"value\"\n"
"```"
msgstr ""

#: src/reference/config.md:1294
msgid "`[term]`"
msgstr ""

#: src/reference/config.md:1296
msgid "The `[term]` table controls terminal output and interaction."
msgstr ""

#: src/reference/config.md:1298
msgid "`term.quiet`"
msgstr ""

#: src/reference/config.md:1301
msgid "Environment: `CARGO_TERM_QUIET`"
msgstr ""

#: src/reference/config.md:1303
msgid "Controls whether or not log messages are displayed by Cargo."
msgstr ""

#: src/reference/config.md:1305
msgid ""
"Specifying the `--quiet` flag will override and force quiet output. "
"Specifying the `--verbose` flag will override and disable quiet output."
msgstr ""

#: src/reference/config.md:1308
msgid "`term.verbose`"
msgstr ""

#: src/reference/config.md:1311
msgid "Environment: `CARGO_TERM_VERBOSE`"
msgstr ""

#: src/reference/config.md:1313
msgid "Controls whether or not extra detailed messages are displayed by Cargo."
msgstr ""

#: src/reference/config.md:1315
msgid ""
"Specifying the `--quiet` flag will override and disable verbose output. "
"Specifying the `--verbose` flag will override and force verbose output."
msgstr ""

#: src/reference/config.md:1318
msgid "`term.color`"
msgstr ""

#: src/reference/config.md:1320 src/reference/config.md:1348
msgid "Default: `\"auto\"`"
msgstr ""

#: src/reference/config.md:1321
msgid "Environment: `CARGO_TERM_COLOR`"
msgstr ""

#: src/reference/config.md:1323
msgid ""
"Controls whether or not colored output is used in the terminal. Possible "
"values:"
msgstr ""

#: src/reference/config.md:1325
msgid ""
"`auto` (default): Automatically detect if color support is available on the "
"terminal."
msgstr ""

#: src/reference/config.md:1327
msgid "`always`: Always display colors."
msgstr ""

#: src/reference/config.md:1328
msgid "`never`: Never display colors."
msgstr ""

#: src/reference/config.md:1330
msgid "Can be overridden with the `--color` command-line option."
msgstr ""

#: src/reference/config.md:1332
msgid "`term.hyperlinks`"
msgstr ""

#: src/reference/config.md:1334 src/reference/config.md:1341
msgid "Default: auto-detect"
msgstr ""

#: src/reference/config.md:1335
msgid "Environment: `CARGO_TERM_HYPERLINKS`"
msgstr ""

#: src/reference/config.md:1337
msgid "Controls whether or not hyperlinks are used in the terminal."
msgstr ""

#: src/reference/config.md:1339
msgid "`term.unicode`"
msgstr ""

#: src/reference/config.md:1342
msgid "Environment: `CARGO_TERM_UNICODE`"
msgstr ""

#: src/reference/config.md:1344
msgid ""
"Control whether output can be rendered using non-ASCII unicode characters."
msgstr ""

#: src/reference/config.md:1346
msgid "`term.progress.when`"
msgstr ""

#: src/reference/config.md:1349
msgid "Environment: `CARGO_TERM_PROGRESS_WHEN`"
msgstr ""

#: src/reference/config.md:1351
msgid ""
"Controls whether or not progress bar is shown in the terminal. Possible "
"values:"
msgstr ""

#: src/reference/config.md:1353
msgid "`auto` (default): Intelligently guess whether to show progress bar."
msgstr ""

#: src/reference/config.md:1354
msgid "`always`: Always show progress bar."
msgstr ""

#: src/reference/config.md:1355
msgid "`never`: Never show progress bar."
msgstr ""

#: src/reference/config.md:1357
msgid "`term.progress.width`"
msgstr ""

#: src/reference/config.md:1360
msgid "Environment: `CARGO_TERM_PROGRESS_WIDTH`"
msgstr ""

#: src/reference/config.md:1362
msgid "Sets the width for progress bar."
msgstr ""

#: src/reference/environment-variables.md:3
msgid ""
"Cargo sets and reads a number of environment variables which your code can "
"detect or override. Here is a list of the variables Cargo sets, organized by "
"when it interacts with them:"
msgstr ""

#: src/reference/environment-variables.md:7
msgid "Environment variables Cargo reads"
msgstr ""

#: src/reference/environment-variables.md:9
msgid ""
"You can override these environment variables to change Cargo's behavior on "
"your system:"
msgstr ""

#: src/reference/environment-variables.md:12
msgid ""
"`CARGO_LOG` --- Cargo uses the [`tracing`](https://docs.rs/tracing) crate to "
"display debug log messages. The `CARGO_LOG` environment variable can be set "
"to enable debug logging, with a value such as `trace`, `debug`, or `warn`. "
"Usually it is only used during debugging. For more details refer to the "
"[Debug logging](https://doc.crates.io/contrib/implementation/"
"debugging.html#logging)."
msgstr ""

#: src/reference/environment-variables.md:17
msgid ""
"`CARGO_HOME` --- Cargo maintains a local cache of the registry index and of "
"git checkouts of crates. By default these are stored under `$HOME/.cargo` "
"(`%USERPROFILE%\\.cargo` on Windows), but this variable overrides the "
"location of this directory. Once a crate is cached it is not removed by the "
"clean command. For more details refer to the [guide](../guide/cargo-home.md)."
msgstr ""

#: src/reference/environment-variables.md:23
msgid ""
"`CARGO_TARGET_DIR` --- Location of where to place all generated artifacts, "
"relative to the current working directory. See [`build.target-dir`]"
"(config.md#buildtarget-dir) to set via config."
msgstr ""

#: src/reference/environment-variables.md:26
msgid ""
"`CARGO` --- If set, Cargo will forward this value instead of setting it to "
"its own auto-detected path when it builds crates and when it executes build "
"scripts and external subcommands. This value is not directly executed by "
"Cargo, and should always point at a command that behaves exactly like "
"`cargo`, as that's what users of the variable will be expecting."
msgstr ""

#: src/reference/environment-variables.md:32
msgid ""
"`RUSTC` --- Instead of running `rustc`, Cargo will execute this specified "
"compiler instead. See [`build.rustc`](config.md#buildrustc) to set via "
"config."
msgstr ""

#: src/reference/environment-variables.md:34
msgid ""
"`RUSTC_WRAPPER` --- Instead of simply running `rustc`, Cargo will execute "
"this specified wrapper, passing as its command-line arguments the rustc "
"invocation, with the first argument being the path to the actual rustc. "
"Useful to set up a build cache tool such as `sccache`. See [`build.rustc-"
"wrapper`](config.md#buildrustc-wrapper) to set via config. Setting this to "
"the empty string overwrites the config and resets cargo to not use a wrapper."
msgstr ""

#: src/reference/environment-variables.md:40
msgid ""
"`RUSTC_WORKSPACE_WRAPPER` --- Instead of simply running `rustc`, for "
"workspace members Cargo will execute this specified wrapper, passing as its "
"command-line arguments the rustc invocation, with the first argument being "
"the path to the actual rustc. When building a single-package project without "
"workspaces, that package is considered to be the workspace. It affects the "
"filename hash so that artifacts produced by the wrapper are cached "
"separately. See [`build.rustc-workspace-wrapper`](config.md#buildrustc-"
"workspace-wrapper) to set via config. Setting this to the empty string "
"overwrites the config and resets cargo to not use a wrapper for workspace "
"members. If both `RUSTC_WRAPPER` and `RUSTC_WORKSPACE_WRAPPER` are set, then "
"they will be nested: the final invocation is `$RUSTC_WRAPPER "
"$RUSTC_WORKSPACE_WRAPPER $RUSTC`."
msgstr ""

#: src/reference/environment-variables.md:49
msgid ""
"`RUSTDOC` --- Instead of running `rustdoc`, Cargo will execute this "
"specified `rustdoc` instance instead. See [`build.rustdoc`]"
"(config.md#buildrustdoc) to set via config."
msgstr ""

#: src/reference/environment-variables.md:51
msgid ""
"`RUSTDOCFLAGS` --- A space-separated list of custom flags to pass to all "
"`rustdoc` invocations that Cargo performs. In contrast with [`cargo rustdoc`]"
"(../commands/cargo-rustdoc.md), this is useful for passing a flag to _all_ "
"`rustdoc` instances. See [`build.rustdocflags`](config.md#buildrustdocflags) "
"for some more ways to set flags. This string is split by whitespace; for a "
"more robust encoding of multiple arguments, see `CARGO_ENCODED_RUSTDOCFLAGS`."
msgstr ""

#: src/reference/environment-variables.md:57
msgid ""
"`CARGO_ENCODED_RUSTDOCFLAGS` ---  A list of custom flags separated by `0x1f` "
"(ASCII Unit Separator) to pass to all `rustdoc` invocations that Cargo "
"performs."
msgstr ""

#: src/reference/environment-variables.md:59
msgid ""
"`RUSTFLAGS` --- A space-separated list of custom flags to pass to all "
"compiler invocations that Cargo performs. In contrast with [`cargo rustc`]"
"(../commands/cargo-rustc.md), this is useful for passing a flag to _all_ "
"compiler instances. See [`build.rustflags`](config.md#buildrustflags) for "
"some more ways to set flags. This string is split by whitespace; for a more "
"robust encoding of multiple arguments, see `CARGO_ENCODED_RUSTFLAGS`."
msgstr ""

#: src/reference/environment-variables.md:65
msgid ""
"`CARGO_ENCODED_RUSTFLAGS` --- A list of custom flags separated by `0x1f` "
"(ASCII Unit Separator) to pass to all compiler invocations that Cargo "
"performs."
msgstr ""

#: src/reference/environment-variables.md:67
msgid ""
"`CARGO_INCREMENTAL` --- If this is set to 1 then Cargo will force "
"[incremental compilation](profiles.md#incremental) to be enabled for the "
"current compilation, and when set to 0 it will force disabling it. If this "
"env var isn't present then cargo's defaults will otherwise be used. See also "
"[`build.incremental`](config.md#buildincremental) config value."
msgstr ""

#: src/reference/environment-variables.md:71
msgid ""
"`CARGO_CACHE_RUSTC_INFO` --- If this is set to 0 then Cargo will not try to "
"cache compiler version information."
msgstr ""

#: src/reference/environment-variables.md:73
msgid ""
"`HTTPS_PROXY` or `https_proxy` or `http_proxy` --- The HTTP proxy to use, "
"see [`http.proxy`](config.md#httpproxy) for more detail."
msgstr ""

#: src/reference/environment-variables.md:75
msgid ""
"`HTTP_TIMEOUT` --- The HTTP timeout in seconds, see [`http.timeout`]"
"(config.md#httptimeout) for more detail."
msgstr ""

#: src/reference/environment-variables.md:77
msgid "`TERM` --- If this is set to `dumb`, it disables the progress bar."
msgstr ""

#: src/reference/environment-variables.md:78
msgid ""
"`BROWSER` --- The web browser to execute to open documentation with [`cargo "
"doc`](../commands/cargo-doc.md)'s' `--open` flag, see [`doc.browser`]"
"(config.md#docbrowser) for more details."
msgstr ""

#: src/reference/environment-variables.md:80
msgid ""
"`RUSTFMT` --- Instead of running `rustfmt`, [`cargo fmt`](https://github.com/"
"rust-lang/rustfmt) will execute this specified `rustfmt` instance instead."
msgstr ""

#: src/reference/environment-variables.md:84
msgid "Configuration environment variables"
msgstr ""

#: src/reference/environment-variables.md:86
msgid ""
"Cargo reads environment variables for some configuration values. See the "
"[configuration chapter](config.md#environment-variables) for more details. "
"In summary, the supported environment variables are:"
msgstr ""

#: src/reference/environment-variables.md:90
msgid ""
"`CARGO_ALIAS_<name>` --- Command aliases, see [`alias`](config.md#alias)."
msgstr ""

#: src/reference/environment-variables.md:91
msgid ""
"`CARGO_BUILD_JOBS` --- Number of parallel jobs, see [`build.jobs`]"
"(config.md#buildjobs)."
msgstr ""

#: src/reference/environment-variables.md:92
msgid ""
"`CARGO_BUILD_RUSTC` --- The `rustc` executable, see [`build.rustc`]"
"(config.md#buildrustc)."
msgstr ""

#: src/reference/environment-variables.md:93
msgid ""
"`CARGO_BUILD_RUSTC_WRAPPER` --- The `rustc` wrapper, see [`build.rustc-"
"wrapper`](config.md#buildrustc-wrapper)."
msgstr ""

#: src/reference/environment-variables.md:94
msgid ""
"`CARGO_BUILD_RUSTC_WORKSPACE_WRAPPER` --- The `rustc` wrapper for workspace "
"members only, see [`build.rustc-workspace-wrapper`](config.md#buildrustc-"
"workspace-wrapper)."
msgstr ""

#: src/reference/environment-variables.md:95
msgid ""
"`CARGO_BUILD_RUSTDOC` --- The `rustdoc` executable, see [`build.rustdoc`]"
"(config.md#buildrustdoc)."
msgstr ""

#: src/reference/environment-variables.md:96
msgid ""
"`CARGO_BUILD_TARGET` --- The default target platform, see [`build.target`]"
"(config.md#buildtarget)."
msgstr ""

#: src/reference/environment-variables.md:97
msgid ""
"`CARGO_BUILD_TARGET_DIR` --- The default output directory, see "
"[`build.target-dir`](config.md#buildtarget-dir)."
msgstr ""

#: src/reference/environment-variables.md:98
msgid ""
"`CARGO_BUILD_RUSTFLAGS` --- Extra `rustc` flags, see [`build.rustflags`]"
"(config.md#buildrustflags)."
msgstr ""

#: src/reference/environment-variables.md:99
msgid ""
"`CARGO_BUILD_RUSTDOCFLAGS` --- Extra `rustdoc` flags, see "
"[`build.rustdocflags`](config.md#buildrustdocflags)."
msgstr ""

#: src/reference/environment-variables.md:100
msgid ""
"`CARGO_BUILD_INCREMENTAL` --- Incremental compilation, see "
"[`build.incremental`](config.md#buildincremental)."
msgstr ""

#: src/reference/environment-variables.md:101
msgid ""
"`CARGO_BUILD_DEP_INFO_BASEDIR` --- Dep-info relative directory, see "
"[`build.dep-info-basedir`](config.md#builddep-info-basedir)."
msgstr ""

#: src/reference/environment-variables.md:102
msgid ""
"`CARGO_CARGO_NEW_VCS` --- The default source control system with [`cargo "
"new`](../commands/cargo-new.md), see [`cargo-new.vcs`](config.md#cargo-"
"newvcs)."
msgstr ""

#: src/reference/environment-variables.md:103
msgid ""
"`CARGO_FUTURE_INCOMPAT_REPORT_FREQUENCY` --- How often we should generate a "
"future incompat report notification, see [`future-incompat-report.frequency`]"
"(config.md#future-incompat-reportfrequency)."
msgstr ""

#: src/reference/environment-variables.md:104
msgid ""
"`CARGO_HTTP_DEBUG` --- Enables HTTP debugging, see [`http.debug`]"
"(config.md#httpdebug)."
msgstr ""

#: src/reference/environment-variables.md:105
msgid ""
"`CARGO_HTTP_PROXY` --- Enables HTTP proxy, see [`http.proxy`]"
"(config.md#httpproxy)."
msgstr ""

#: src/reference/environment-variables.md:106
msgid ""
"`CARGO_HTTP_TIMEOUT` --- The HTTP timeout, see [`http.timeout`]"
"(config.md#httptimeout)."
msgstr ""

#: src/reference/environment-variables.md:107
msgid ""
"`CARGO_HTTP_CAINFO` --- The TLS certificate Certificate Authority file, see "
"[`http.cainfo`](config.md#httpcainfo)."
msgstr ""

#: src/reference/environment-variables.md:108
msgid ""
"`CARGO_HTTP_CHECK_REVOKE` --- Disables TLS certificate revocation checks, "
"see [`http.check-revoke`](config.md#httpcheck-revoke)."
msgstr ""

#: src/reference/environment-variables.md:109
msgid ""
"`CARGO_HTTP_SSL_VERSION` --- The TLS version to use, see [`http.ssl-version`]"
"(config.md#httpssl-version)."
msgstr ""

#: src/reference/environment-variables.md:110
msgid ""
"`CARGO_HTTP_LOW_SPEED_LIMIT` --- The HTTP low-speed limit, see [`http.low-"
"speed-limit`](config.md#httplow-speed-limit)."
msgstr ""

#: src/reference/environment-variables.md:111
msgid ""
"`CARGO_HTTP_MULTIPLEXING` --- Whether HTTP/2 multiplexing is used, see "
"[`http.multiplexing`](config.md#httpmultiplexing)."
msgstr ""

#: src/reference/environment-variables.md:112
msgid ""
"`CARGO_HTTP_USER_AGENT` --- The HTTP user-agent header, see [`http.user-"
"agent`](config.md#httpuser-agent)."
msgstr ""

#: src/reference/environment-variables.md:113
msgid ""
"`CARGO_INSTALL_ROOT` --- The default directory for [`cargo install`](../"
"commands/cargo-install.md), see [`install.root`](config.md#installroot)."
msgstr ""

#: src/reference/environment-variables.md:114
msgid ""
"`CARGO_NET_RETRY` --- Number of times to retry network errors, see "
"[`net.retry`](config.md#netretry)."
msgstr ""

#: src/reference/environment-variables.md:115
msgid ""
"`CARGO_NET_GIT_FETCH_WITH_CLI` --- Enables the use of the `git` executable "
"to fetch, see [`net.git-fetch-with-cli`](config.md#netgit-fetch-with-cli)."
msgstr ""

#: src/reference/environment-variables.md:116
msgid ""
"`CARGO_NET_OFFLINE` --- Offline mode, see [`net.offline`]"
"(config.md#netoffline)."
msgstr ""

#: src/reference/environment-variables.md:117
msgid ""
"`CARGO_PROFILE_<name>_BUILD_OVERRIDE_<key>` --- Override build script "
"profile, see [`profile.<name>.build-override`](config.md#profilenamebuild-"
"override)."
msgstr ""

#: src/reference/environment-variables.md:118
msgid ""
"`CARGO_PROFILE_<name>_CODEGEN_UNITS` --- Set code generation units, see "
"[`profile.<name>.codegen-units`](config.md#profilenamecodegen-units)."
msgstr ""

#: src/reference/environment-variables.md:119
msgid ""
"`CARGO_PROFILE_<name>_DEBUG` --- What kind of debug info to include, see "
"[`profile.<name>.debug`](config.md#profilenamedebug)."
msgstr ""

#: src/reference/environment-variables.md:120
msgid ""
"`CARGO_PROFILE_<name>_DEBUG_ASSERTIONS` --- Enable/disable debug assertions, "
"see [`profile.<name>.debug-assertions`](config.md#profilenamedebug-"
"assertions)."
msgstr ""

#: src/reference/environment-variables.md:121
msgid ""
"`CARGO_PROFILE_<name>_INCREMENTAL` --- Enable/disable incremental "
"compilation, see [`profile.<name>.incremental`]"
"(config.md#profilenameincremental)."
msgstr ""

#: src/reference/environment-variables.md:122
msgid ""
"`CARGO_PROFILE_<name>_LTO` --- Link-time optimization, see [`profile."
"<name>.lto`](config.md#profilenamelto)."
msgstr ""

#: src/reference/environment-variables.md:123
msgid ""
"`CARGO_PROFILE_<name>_OVERFLOW_CHECKS` --- Enable/disable overflow checks, "
"see [`profile.<name>.overflow-checks`](config.md#profilenameoverflow-checks)."
msgstr ""

#: src/reference/environment-variables.md:124
msgid ""
"`CARGO_PROFILE_<name>_OPT_LEVEL` --- Set the optimization level, see "
"[`profile.<name>.opt-level`](config.md#profilenameopt-level)."
msgstr ""

#: src/reference/environment-variables.md:125
msgid ""
"`CARGO_PROFILE_<name>_PANIC` --- The panic strategy to use, see [`profile."
"<name>.panic`](config.md#profilenamepanic)."
msgstr ""

#: src/reference/environment-variables.md:126
msgid ""
"`CARGO_PROFILE_<name>_RPATH` --- The rpath linking option, see [`profile."
"<name>.rpath`](config.md#profilenamerpath)."
msgstr ""

#: src/reference/environment-variables.md:127
msgid ""
"`CARGO_PROFILE_<name>_SPLIT_DEBUGINFO` --- Controls debug file output "
"behavior, see [`profile.<name>.split-debuginfo`](config.md#profilenamesplit-"
"debuginfo)."
msgstr ""

#: src/reference/environment-variables.md:128
msgid ""
"`CARGO_PROFILE_<name>_STRIP` --- Controls stripping of symbols and/or "
"debuginfos, see [`profile.<name>.strip`](config.md#profilenamestrip)."
msgstr ""

#: src/reference/environment-variables.md:129
msgid ""
"`CARGO_REGISTRIES_<name>_CREDENTIAL_PROVIDER` --- Credential provider for a "
"registry, see [`registries.<name>.credential-provider`]"
"(config.md#registriesnamecredential-provider)."
msgstr ""

#: src/reference/environment-variables.md:130
msgid ""
"`CARGO_REGISTRIES_<name>_INDEX` --- URL of a registry index, see "
"[`registries.<name>.index`](config.md#registriesnameindex)."
msgstr ""

#: src/reference/environment-variables.md:131
msgid ""
"`CARGO_REGISTRIES_<name>_TOKEN` --- Authentication token of a registry, see "
"[`registries.<name>.token`](config.md#registriesnametoken)."
msgstr ""

#: src/reference/environment-variables.md:132
msgid ""
"`CARGO_REGISTRY_CREDENTIAL_PROVIDER` --- Credential provider for [crates.io]"
"(https://crates.io/), see [`registry.credential-provider`]"
"(config.md#registrycredential-provider)."
msgstr ""

#: src/reference/environment-variables.md:133
msgid ""
"`CARGO_REGISTRY_DEFAULT` --- Default registry for the `--registry` flag, see "
"[`registry.default`](config.md#registrydefault)."
msgstr ""

#: src/reference/environment-variables.md:134
msgid ""
"`CARGO_REGISTRY_GLOBAL_CREDENTIAL_PROVIDERS` --- Credential providers for "
"registries that do not have a specific provider defined. See "
"[`registry.global-credential-providers`](config.md#registryglobal-credential-"
"providers)."
msgstr ""

#: src/reference/environment-variables.md:135
msgid ""
"`CARGO_REGISTRY_TOKEN` --- Authentication token for [crates.io](https://"
"crates.io/), see [`registry.token`](config.md#registrytoken)."
msgstr ""

#: src/reference/environment-variables.md:136
msgid ""
"`CARGO_TARGET_<triple>_LINKER` --- The linker to use, see [`target."
"<triple>.linker`](config.md#targettriplelinker). The triple must be "
"[converted to uppercase and underscores](config.md#environment-variables)."
msgstr ""

#: src/reference/environment-variables.md:137
msgid ""
"`CARGO_TARGET_<triple>_RUNNER` --- The executable runner, see [`target."
"<triple>.runner`](config.md#targettriplerunner)."
msgstr ""

#: src/reference/environment-variables.md:138
msgid ""
"`CARGO_TARGET_<triple>_RUSTFLAGS` --- Extra `rustc` flags for a target, see "
"[`target.<triple>.rustflags`](config.md#targettriplerustflags)."
msgstr ""

#: src/reference/environment-variables.md:139
msgid ""
"`CARGO_TERM_QUIET` --- Quiet mode, see [`term.quiet`](config.md#termquiet)."
msgstr ""

#: src/reference/environment-variables.md:140
msgid ""
"`CARGO_TERM_VERBOSE` --- The default terminal verbosity, see [`term.verbose`]"
"(config.md#termverbose)."
msgstr ""

#: src/reference/environment-variables.md:141
msgid ""
"`CARGO_TERM_COLOR` --- The default color mode, see [`term.color`]"
"(config.md#termcolor)."
msgstr ""

#: src/reference/environment-variables.md:142
msgid ""
"`CARGO_TERM_PROGRESS_WHEN` --- The default progress bar showing mode, see "
"[`term.progress.when`](config.md#termprogresswhen)."
msgstr ""

#: src/reference/environment-variables.md:143
msgid ""
"`CARGO_TERM_PROGRESS_WIDTH` --- The default progress bar width, see "
"[`term.progress.width`](config.md#termprogresswidth)."
msgstr ""

#: src/reference/environment-variables.md:211 src/reference/unstable.md:452
msgid "Environment variables Cargo sets for crates"
msgstr ""

#: src/reference/environment-variables.md:213
msgid ""
"Cargo exposes these environment variables to your crate when it is compiled. "
"Note that this applies for running binaries with `cargo run` and `cargo "
"test` as well. To get the value of any of these variables in a Rust program, "
"do this:"
msgstr ""

#: src/reference/environment-variables.md:219
msgid "\"CARGO_PKG_VERSION\""
msgstr ""

#: src/reference/environment-variables.md:222
msgid "`version` will now contain the value of `CARGO_PKG_VERSION`."
msgstr ""

#: src/reference/environment-variables.md:224
msgid ""
"Note that if one of these values is not provided in the manifest, the "
"corresponding environment variable is set to the empty string, `\"\"`."
msgstr ""

#: src/reference/environment-variables.md:227
#: src/reference/environment-variables.md:320
#: src/reference/environment-variables.md:425
msgid "`CARGO` --- Path to the `cargo` binary performing the build."
msgstr ""

#: src/reference/environment-variables.md:228
msgid ""
"`CARGO_MANIFEST_DIR` --- The directory containing the manifest of your "
"package."
msgstr ""

#: src/reference/environment-variables.md:229
#: src/reference/environment-variables.md:324
msgid "`CARGO_MANIFEST_PATH` --- The path to the manifest of your package."
msgstr ""

#: src/reference/environment-variables.md:230
msgid "`CARGO_PKG_VERSION` --- The full version of your package."
msgstr ""

#: src/reference/environment-variables.md:231
msgid "`CARGO_PKG_VERSION_MAJOR` --- The major version of your package."
msgstr ""

#: src/reference/environment-variables.md:232
msgid "`CARGO_PKG_VERSION_MINOR` --- The minor version of your package."
msgstr ""

#: src/reference/environment-variables.md:233
msgid "`CARGO_PKG_VERSION_PATCH` --- The patch version of your package."
msgstr ""

#: src/reference/environment-variables.md:234
msgid "`CARGO_PKG_VERSION_PRE` --- The pre-release version of your package."
msgstr ""

#: src/reference/environment-variables.md:235
msgid ""
"`CARGO_PKG_AUTHORS` --- Colon separated list of authors from the manifest of "
"your package."
msgstr ""

#: src/reference/environment-variables.md:236
msgid "`CARGO_PKG_NAME` --- The name of your package."
msgstr ""

#: src/reference/environment-variables.md:237
msgid ""
"`CARGO_PKG_DESCRIPTION` --- The description from the manifest of your "
"package."
msgstr ""

#: src/reference/environment-variables.md:238
msgid ""
"`CARGO_PKG_HOMEPAGE` --- The home page from the manifest of your package."
msgstr ""

#: src/reference/environment-variables.md:239
msgid ""
"`CARGO_PKG_REPOSITORY` --- The repository from the manifest of your package."
msgstr ""

#: src/reference/environment-variables.md:240
msgid "`CARGO_PKG_LICENSE` --- The license from the manifest of your package."
msgstr ""

#: src/reference/environment-variables.md:241
msgid ""
"`CARGO_PKG_LICENSE_FILE` --- The license file from the manifest of your "
"package."
msgstr ""

#: src/reference/environment-variables.md:242
msgid ""
"`CARGO_PKG_RUST_VERSION` --- The Rust version from the manifest of your "
"package. Note that this is the minimum Rust version supported by the "
"package, not the current Rust version."
msgstr ""

#: src/reference/environment-variables.md:245
msgid "`CARGO_PKG_README` --- Path to the README file of your package."
msgstr ""

#: src/reference/environment-variables.md:246
msgid ""
"`CARGO_CRATE_NAME` --- The name of the crate that is currently being "
"compiled. It is the name of the [Cargo target](cargo-targets.md) with `-` "
"converted to `_`, such as the name of the library, binary, example, "
"integration test, or benchmark."
msgstr ""

#: src/reference/environment-variables.md:247
msgid ""
"`CARGO_BIN_NAME` --- The name of the binary that is currently being "
"compiled. Only set for [binaries](cargo-targets.md#binaries) or binary "
"[examples](cargo-targets.md#examples). This name does not include any file "
"extension, such as `.exe`."
msgstr ""

#: src/reference/environment-variables.md:250
msgid ""
"`OUT_DIR` --- If the package has a build script, this is set to the folder "
"where the build script should place its output. See below for more "
"information. (Only set during compilation.)"
msgstr ""

#: src/reference/environment-variables.md:253
msgid ""
"`CARGO_BIN_EXE_<name>` --- The absolute path to a binary target's "
"executable. This is only set when building an [integration test](cargo-"
"targets.md#integration-tests) or benchmark. This may be used with the [`env` "
"macro](../../std/macro.env.html) to find the executable to run for testing "
"purposes. The `<name>` is the name of the binary target, exactly as-is. For "
"example, `CARGO_BIN_EXE_my-program` for a binary named `my-program`. "
"Binaries are automatically built when the test is built, unless the binary "
"has required features that are not enabled."
msgstr ""

#: src/reference/environment-variables.md:260
msgid ""
"`CARGO_PRIMARY_PACKAGE` --- This environment variable will be set if the "
"package being built is primary. Primary packages are the ones the user "
"selected on the command-line, either with `-p` flags or the defaults based "
"on the current directory and the default workspace members. This variable "
"will not be set when building dependencies, unless a dependency is also a "
"workspace member that was also selected on the command-line. This is only "
"set when compiling the package (not when running binaries or tests)."
msgstr ""

#: src/reference/environment-variables.md:267
msgid ""
"`CARGO_TARGET_TMPDIR` --- Only set when building [integration test](cargo-"
"targets.md#integration-tests) or benchmark code. This is a path to a "
"directory inside the target directory where integration tests or benchmarks "
"are free to put any data needed by the tests/benches. Cargo initially "
"creates this directory but doesn't manage its content in any way, this is "
"the responsibility of the test code."
msgstr ""

#: src/reference/environment-variables.md:279
msgid "Dynamic library paths"
msgstr ""

#: src/reference/environment-variables.md:281
msgid ""
"Cargo also sets the dynamic library path when compiling and running binaries "
"with commands like `cargo run` and `cargo test`. This helps with locating "
"shared libraries that are part of the build process. The variable name "
"depends on the platform:"
msgstr ""

#: src/reference/environment-variables.md:286
msgid "Windows: `PATH`"
msgstr ""

#: src/reference/environment-variables.md:287
msgid "macOS: `DYLD_FALLBACK_LIBRARY_PATH`"
msgstr ""

#: src/reference/environment-variables.md:288
msgid "Unix: `LD_LIBRARY_PATH`"
msgstr ""

#: src/reference/environment-variables.md:289
msgid "AIX: `LIBPATH`"
msgstr ""

#: src/reference/environment-variables.md:291
msgid ""
"The value is extended from the existing value when Cargo starts. macOS has "
"special consideration where if `DYLD_FALLBACK_LIBRARY_PATH` is not already "
"set, it will add the default `$HOME/lib:/usr/local/lib:/usr/lib`."
msgstr ""

#: src/reference/environment-variables.md:295
msgid "Cargo includes the following paths:"
msgstr ""

#: src/reference/environment-variables.md:297
msgid ""
"Search paths included from any build script with the [`rustc-link-search` "
"instruction](build-scripts.md#rustc-link-search). Paths outside of the "
"`target` directory are removed. It is the responsibility of the user running "
"Cargo to properly set the environment if additional libraries on the system "
"are needed in the search path."
msgstr ""

#: src/reference/environment-variables.md:302
msgid ""
"The base output directory, such as `target/debug`, and the \"deps\" "
"directory. This is mostly for support of proc-macros."
msgstr ""

#: src/reference/environment-variables.md:304
msgid ""
"The rustc sysroot library path. This generally is not important to most "
"users."
msgstr ""

#: src/reference/environment-variables.md:307
msgid "Environment variables Cargo sets for build scripts"
msgstr ""

#: src/reference/environment-variables.md:309
msgid ""
"Cargo sets several environment variables when build scripts are run. Because "
"these variables are not yet set when the build script is compiled, the above "
"example using `env!` won't work and instead you'll need to retrieve the "
"values when the build script is run:"
msgstr ""

#: src/reference/environment-variables.md:315
#: src/reference/build-script-examples.md:65
#: src/reference/build-script-examples.md:104
#: src/reference/build-script-examples.md:165
msgid "\"OUT_DIR\""
msgstr ""

#: src/reference/environment-variables.md:318
msgid "`out_dir` will now contain the value of `OUT_DIR`."
msgstr ""

#: src/reference/environment-variables.md:321
msgid ""
"`CARGO_MANIFEST_DIR` --- The directory containing the manifest for the "
"package being built (the package containing the build script). Also note "
"that this is the value of the current working directory of the build script "
"when it starts."
msgstr ""

#: src/reference/environment-variables.md:325
msgid "`CARGO_MANIFEST_LINKS` --- the manifest `links` value."
msgstr ""

#: src/reference/environment-variables.md:326
msgid ""
"`CARGO_MAKEFLAGS` --- Contains parameters needed for Cargo's [jobserver]"
"(https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) "
"implementation to parallelize subprocesses. Rustc or cargo invocations from "
"build.rs can already read `CARGO_MAKEFLAGS`, but GNU Make requires the flags "
"to be specified either directly as arguments, or through the `MAKEFLAGS` "
"environment variable. Currently Cargo doesn't set the `MAKEFLAGS` variable, "
"but it's free for build scripts invoking GNU Make to set it to the contents "
"of `CARGO_MAKEFLAGS`."
msgstr ""

#: src/reference/environment-variables.md:333
msgid ""
"`CARGO_FEATURE_<name>` --- For each activated feature of the package being "
"built, this environment variable will be present where `<name>` is the name "
"of the feature uppercased and having `-` translated to `_`."
msgstr ""

#: src/reference/environment-variables.md:336
msgid ""
"`CARGO_CFG_<cfg>` --- For each [configuration option](../../reference/"
"conditional-compilation.html) of the package being built, this environment "
"variable will contain the value of the configuration, where `<cfg>` is the "
"name of the configuration uppercased and having `-` translated to `_`. "
"Boolean configurations are present if they are set, and not present "
"otherwise. Configurations with multiple values are joined to a single "
"variable with the values delimited by `,`. This includes values built-in to "
"the compiler (which can be seen with `rustc --print=cfg`) and values set by "
"build scripts and extra flags passed to `rustc` (such as those defined in "
"`RUSTFLAGS`). Some examples of what these variables are:"
msgstr ""

#: src/reference/environment-variables.md:345
msgid ""
"`CARGO_CFG_FEATURE` --- Each activated feature of the package being built."
msgstr ""

#: src/reference/environment-variables.md:346
msgid ""
"`CARGO_CFG_UNIX` --- Set on [unix-like platforms](../../reference/"
"conditional-compilation.html#unix-and-windows)."
msgstr ""

#: src/reference/environment-variables.md:347
msgid ""
"`CARGO_CFG_WINDOWS` --- Set on [windows-like platforms](../../reference/"
"conditional-compilation.html#unix-and-windows)."
msgstr ""

#: src/reference/environment-variables.md:348
msgid ""
"`CARGO_CFG_TARGET_FAMILY=unix,wasm` --- The [target family](../../reference/"
"conditional-compilation.html#target_family)."
msgstr ""

#: src/reference/environment-variables.md:349
msgid ""
"`CARGO_CFG_TARGET_OS=macos` --- The [target operating system](../../"
"reference/conditional-compilation.html#target_os)."
msgstr ""

#: src/reference/environment-variables.md:350
msgid ""
"`CARGO_CFG_TARGET_ARCH=x86_64` --- The CPU [target architecture](../../"
"reference/conditional-compilation.html#target_arch)."
msgstr ""

#: src/reference/environment-variables.md:351
msgid ""
"`CARGO_CFG_TARGET_VENDOR=apple` --- The [target vendor](../../reference/"
"conditional-compilation.html#target_vendor)."
msgstr ""

#: src/reference/environment-variables.md:352
msgid ""
"`CARGO_CFG_TARGET_ENV=gnu` --- The [target environment](../../reference/"
"conditional-compilation.html#target_env) ABI."
msgstr ""

#: src/reference/environment-variables.md:353
msgid ""
"`CARGO_CFG_TARGET_ABI=sim` --- The [target ABI](../../reference/conditional-"
"compilation.html#target_abi)."
msgstr ""

#: src/reference/environment-variables.md:354
msgid ""
"`CARGO_CFG_TARGET_POINTER_WIDTH=64` --- The CPU [pointer width](../../"
"reference/conditional-compilation.html#target_pointer_width)."
msgstr ""

#: src/reference/environment-variables.md:355
msgid ""
"`CARGO_CFG_TARGET_ENDIAN=little` --- The CPU [target endianness](../../"
"reference/conditional-compilation.html#target_endian)."
msgstr ""

#: src/reference/environment-variables.md:356
msgid ""
"`CARGO_CFG_TARGET_FEATURE=mmx,sse` --- List of CPU [target features](../../"
"reference/conditional-compilation.html#target_feature) enabled."
msgstr ""

#: src/reference/environment-variables.md:357
msgid ""
"Note that different [target triples](../appendix/glossary.md#target) have "
"different sets of `cfg` values, hence variables present in one target triple "
"might not be available in the other."
msgstr ""

#: src/reference/environment-variables.md:360
msgid "Some cfg values like `debug_assertions` and `test` are not available."
msgstr ""

#: src/reference/environment-variables.md:361
msgid ""
"`OUT_DIR` --- the folder in which all output and intermediate artifacts "
"should be placed. This folder is inside the build directory for the package "
"being built, and it is unique for the package in question."
msgstr ""

#: src/reference/environment-variables.md:364
msgid ""
"`TARGET` --- the target triple that is being compiled for. Native code "
"should be compiled for this triple. See the [Target Triple](../appendix/"
"glossary.md#target) description for more information."
msgstr ""

#: src/reference/environment-variables.md:366
msgid "`HOST` --- the host triple of the Rust compiler."
msgstr ""

#: src/reference/environment-variables.md:367
msgid ""
"`NUM_JOBS` --- the parallelism specified as the top-level parallelism. This "
"can be useful to pass a `-j` parameter to a system like `make`. Note that "
"care should be taken when interpreting this environment variable. For "
"historical purposes this is still provided but recent versions of Cargo, for "
"example, do not need to run `make -j`, and instead can set the `MAKEFLAGS` "
"env var to the content of `CARGO_MAKEFLAGS` to activate the use of Cargo's "
"GNU Make compatible [jobserver](https://www.gnu.org/software/make/manual/"
"html_node/Job-Slots.html) for sub-make invocations."
msgstr ""

#: src/reference/environment-variables.md:374
msgid ""
"`OPT_LEVEL`, `DEBUG` --- values of the corresponding variables for the "
"profile currently being built."
msgstr ""

#: src/reference/environment-variables.md:375
msgid ""
"`PROFILE` --- `release` for release builds, `debug` for other builds. This "
"is determined based on if the [profile](profiles.md) inherits from the "
"[`dev`](profiles.md#dev) or [`release`](profiles.md#release) profile. Using "
"this environment variable is not recommended. Using other environment "
"variables like `OPT_LEVEL` provide a more correct view of the actual "
"settings being used."
msgstr ""

#: src/reference/environment-variables.md:380
msgid ""
"`DEP_<name>_<key>` --- For more information about this set of environment "
"variables, see build script documentation about [`links`](build-"
"scripts.md#the-links-manifest-key)."
msgstr ""

#: src/reference/environment-variables.md:382
msgid ""
"`RUSTC`, `RUSTDOC` --- the compiler and documentation generator that Cargo "
"has resolved to use, passed to the build script so it might use it as well."
msgstr ""

#: src/reference/environment-variables.md:384
msgid ""
"`RUSTC_WRAPPER` --- the `rustc` wrapper, if any, that Cargo is using. See "
"[`build.rustc-wrapper`](config.md#buildrustc-wrapper)."
msgstr ""

#: src/reference/environment-variables.md:385
msgid ""
"`RUSTC_WORKSPACE_WRAPPER` --- the `rustc` wrapper, if any, that Cargo is "
"using for workspace members. See [`build.rustc-workspace-wrapper`]"
"(config.md#buildrustc-workspace-wrapper)."
msgstr ""

#: src/reference/environment-variables.md:387
msgid ""
"`RUSTC_LINKER` --- The path to the linker binary that Cargo has resolved to "
"use for the current target, if specified. The linker can be changed by "
"editing `.cargo/config.toml`; see the documentation about [cargo "
"configuration](config.md) for more information."
msgstr ""

#: src/reference/environment-variables.md:391
msgid ""
"`CARGO_ENCODED_RUSTFLAGS` --- extra flags that Cargo invokes `rustc` with, "
"separated by a `0x1f` character (ASCII Unit Separator). See "
"[`build.rustflags`](config.md#buildrustflags). Note that since Rust 1.55, "
"`RUSTFLAGS` is removed from the environment; scripts should use "
"`CARGO_ENCODED_RUSTFLAGS` instead."
msgstr ""

#: src/reference/environment-variables.md:395
msgid ""
"`CARGO_PKG_<var>` --- The package information variables, with the same names "
"and values as are [provided during crate building](#environment-variables-"
"cargo-sets-for-crates)."
msgstr ""

#: src/reference/environment-variables.md:420
msgid "Environment variables Cargo sets for 3rd party subcommands"
msgstr ""

#: src/reference/environment-variables.md:422
msgid ""
"Cargo exposes this environment variable to 3rd party subcommands (ie. "
"programs named `cargo-foobar` placed in `$PATH`):"
msgstr ""

#: src/reference/environment-variables.md:426
msgid ""
"`CARGO_MAKEFLAGS` --- Contains parameters needed for Cargo's [jobserver]"
"(https://www.gnu.org/software/make/manual/html_node/Job-Slots.html) "
"implementation to parallelize subprocesses. This is set only when Cargo "
"detects the existence of a jobserver."
msgstr ""

#: src/reference/environment-variables.md:430
msgid ""
"For extended information about your environment you may run `cargo metadata`."
msgstr ""

#: src/reference/build-scripts.md:3
msgid ""
"Some packages need to compile third-party non-Rust code, for example C "
"libraries. Other packages need to link to C libraries which can either be "
"located on the system or possibly need to be built from source. Others still "
"need facilities for functionality such as code generation before building "
"(think parser generators)."
msgstr ""

#: src/reference/build-scripts.md:9
msgid ""
"Cargo does not aim to replace other tools that are well-optimized for these "
"tasks, but it does integrate with them with custom build scripts. Placing a "
"file named `build.rs` in the root of a package will cause Cargo to compile "
"that script and execute it just before building the package."
msgstr ""

#: src/reference/build-scripts.md:15
msgid "// Example custom build script.\n"
msgstr ""

#: src/reference/build-scripts.md:17
msgid ""
"// Tell Cargo that if the given file changes, to rerun this build script.\n"
msgstr ""

#: src/reference/build-scripts.md:18 src/reference/build-script-examples.md:178
#: src/reference/build-script-examples.md:217
msgid "\"cargo::rerun-if-changed=src/hello.c\""
msgstr ""

#: src/reference/build-scripts.md:19
msgid "// Use the `cc` crate to build a C file and statically link it.\n"
msgstr ""

#: src/reference/build-scripts.md:21 src/reference/build-script-examples.md:169
#: src/reference/build-script-examples.md:215
msgid "\"src/hello.c\""
msgstr ""

#: src/reference/build-scripts.md:22 src/reference/build-script-examples.md:216
#: src/reference/build-script-examples.md:336
msgid "\"hello\""
msgstr ""

#: src/reference/build-scripts.md:26
msgid "Some example use cases of build scripts are:"
msgstr ""

#: src/reference/build-scripts.md:28
msgid "Building a bundled C library."
msgstr ""

#: src/reference/build-scripts.md:29
msgid "Finding a C library on the host system."
msgstr ""

#: src/reference/build-scripts.md:30
msgid "Generating a Rust module from a specification."
msgstr ""

#: src/reference/build-scripts.md:31
msgid "Performing any platform-specific configuration needed for the crate."
msgstr ""

#: src/reference/build-scripts.md:33
msgid ""
"The sections below describe how build scripts work, and the [examples "
"chapter](build-script-examples.md) shows a variety of examples on how to "
"write scripts."
msgstr ""

#: src/reference/build-scripts.md:37
msgid ""
"Note: The [`package.build` manifest key](manifest.md#the-build-field) can be "
"used to change the name of the build script, or disable it entirely."
msgstr ""

#: src/reference/build-scripts.md:40
msgid "Life Cycle of a Build Script"
msgstr ""

#: src/reference/build-scripts.md:42
msgid ""
"Just before a package is built, Cargo will compile a build script into an "
"executable (if it has not already been built). It will then run the script, "
"which may perform any number of tasks. The script may communicate with Cargo "
"by printing specially formatted commands prefixed with `cargo::` to stdout."
msgstr ""

#: src/reference/build-scripts.md:47
msgid ""
"The build script will be rebuilt if any of its source files or dependencies "
"change."
msgstr ""

#: src/reference/build-scripts.md:50
msgid ""
"By default, Cargo will re-run the build script if any of the files in the "
"package changes. Typically it is best to use the `rerun-if` commands, "
"described in the [change detection](#change-detection) section below, to "
"narrow the focus of what triggers a build script to run again."
msgstr ""

#: src/reference/build-scripts.md:55
msgid ""
"Once the build script successfully finishes executing, the rest of the "
"package will be compiled. Scripts should exit with a non-zero exit code to "
"halt the build if there is an error, in which case the build script's output "
"will be displayed on the terminal."
msgstr ""

#: src/reference/build-scripts.md:60
msgid "Inputs to the Build Script"
msgstr ""

#: src/reference/build-scripts.md:62
msgid ""
"When the build script is run, there are a number of inputs to the build "
"script, all passed in the form of [environment variables](environment-"
"variables.md#environment-variables-cargo-sets-for-build-scripts)."
msgstr ""

#: src/reference/build-scripts.md:65
msgid ""
"In addition to environment variables, the build script’s current directory "
"is the source directory of the build script’s package."
msgstr ""

#: src/reference/build-scripts.md:70
msgid "Outputs of the Build Script"
msgstr ""

#: src/reference/build-scripts.md:72
msgid ""
"Build scripts may save any output files or intermediate artifacts in the "
"directory specified in the [`OUT_DIR` environment variable](environment-"
"variables.md#environment-variables-cargo-sets-for-build-scripts). Scripts "
"should not modify any files outside of that directory."
msgstr ""

#: src/reference/build-scripts.md:76
msgid ""
"Build scripts communicate with Cargo by printing to stdout. Cargo will "
"interpret each line that starts with `cargo::` as an instruction that will "
"influence compilation of the package. All other lines are ignored."
msgstr ""

#: src/reference/build-scripts.md:80
msgid ""
"The order of `cargo::` instructions printed by the build script _may_ affect "
"the order of arguments that `cargo` passes to `rustc`. In turn, the order of "
"arguments passed to `rustc` may affect the order of arguments passed to the "
"linker. Therefore, you will want to pay attention to the order of the build "
"script's instructions. For example, if object `foo` needs to link against "
"library `bar`, you may want to make sure that library `bar`'s [`cargo::rustc-"
"link-lib`](#rustc-link-lib) instruction appears _after_ instructions to link "
"object `foo`."
msgstr ""

#: src/reference/build-scripts.md:89
msgid ""
"The output of the script is hidden from the terminal during normal "
"compilation. If you would like to see the output directly in your terminal, "
"invoke Cargo as \"very verbose\" with the `-vv` flag. This only happens when "
"the build script is run. If Cargo determines nothing has changed, it will "
"not re-run the script, see [change detection](#change-detection) below for "
"more."
msgstr ""

#: src/reference/build-scripts.md:95
msgid ""
"All the lines printed to stdout by a build script are written to a file like "
"`target/debug/build/<pkg>/output` (the precise location may depend on your "
"configuration). The stderr output is also saved in that same directory."
msgstr ""

#: src/reference/build-scripts.md:99
msgid ""
"The following is a summary of the instructions that Cargo recognizes, with "
"each one detailed below."
msgstr ""

#: src/reference/build-scripts.md:102
msgid ""
"[`cargo::rerun-if-changed=PATH`](#rerun-if-changed) --- Tells Cargo when to "
"re-run the script."
msgstr ""

#: src/reference/build-scripts.md:104
msgid ""
"[`cargo::rerun-if-env-changed=VAR`](#rerun-if-env-changed) --- Tells Cargo "
"when to re-run the script."
msgstr ""

#: src/reference/build-scripts.md:106
msgid ""
"[`cargo::rustc-link-arg=FLAG`](#rustc-link-arg) --- Passes custom flags to a "
"linker for benchmarks, binaries, `cdylib` crates, examples, and tests."
msgstr ""

#: src/reference/build-scripts.md:108
msgid ""
"[`cargo::rustc-link-arg-bin=BIN=FLAG`](#rustc-link-arg-bin) --- Passes "
"custom flags to a linker for the binary `BIN`."
msgstr ""

#: src/reference/build-scripts.md:110
msgid ""
"[`cargo::rustc-link-arg-bins=FLAG`](#rustc-link-arg-bins) --- Passes custom "
"flags to a linker for binaries."
msgstr ""

#: src/reference/build-scripts.md:112
msgid ""
"[`cargo::rustc-link-arg-tests=FLAG`](#rustc-link-arg-tests) --- Passes "
"custom flags to a linker for tests."
msgstr ""

#: src/reference/build-scripts.md:114
msgid ""
"[`cargo::rustc-link-arg-examples=FLAG`](#rustc-link-arg-examples) --- Passes "
"custom flags to a linker for examples."
msgstr ""

#: src/reference/build-scripts.md:116
msgid ""
"[`cargo::rustc-link-arg-benches=FLAG`](#rustc-link-arg-benches) --- Passes "
"custom flags to a linker for benchmarks."
msgstr ""

#: src/reference/build-scripts.md:118
msgid ""
"[`cargo::rustc-link-lib=LIB`](#rustc-link-lib) --- Adds a library to link."
msgstr ""

#: src/reference/build-scripts.md:120
msgid ""
"[`cargo::rustc-link-search=[KIND=]PATH`](#rustc-link-search) --- Adds to the "
"library search path."
msgstr ""

#: src/reference/build-scripts.md:122
msgid ""
"[`cargo::rustc-flags=FLAGS`](#rustc-flags) --- Passes certain flags to the "
"compiler."
msgstr ""

#: src/reference/build-scripts.md:124
msgid ""
"[`cargo::rustc-cfg=KEY[=\"VALUE\"]`](#rustc-cfg) --- Enables compile-time "
"`cfg` settings."
msgstr ""

#: src/reference/build-scripts.md:126
msgid ""
"[`cargo::rustc-check-cfg=CHECK_CFG`](#rustc-check-cfg) -- Register custom "
"`cfg`s as expected for compile-time checking of configs."
msgstr ""

#: src/reference/build-scripts.md:128
msgid ""
"[`cargo::rustc-env=VAR=VALUE`](#rustc-env) --- Sets an environment variable."
msgstr ""

#: src/reference/build-scripts.md:129
msgid ""
"[`cargo::rustc-cdylib-link-arg=FLAG`](#rustc-cdylib-link-arg) --- Passes "
"custom flags to a linker for cdylib crates."
msgstr ""

#: src/reference/build-scripts.md:131
msgid ""
"[`cargo::error=MESSAGE`](#cargo-error) --- Displays an error on the terminal."
msgstr ""

#: src/reference/build-scripts.md:132
msgid ""
"[`cargo::warning=MESSAGE`](#cargo-warning) --- Displays a warning on the "
"terminal."
msgstr ""

#: src/reference/build-scripts.md:134
msgid ""
"[`cargo::metadata=KEY=VALUE`](#the-links-manifest-key) --- Metadata, used by "
"`links` scripts."
msgstr ""

#: src/reference/build-scripts.md:137
msgid ""
"**MSRV:** 1.77 is required for `cargo::KEY=VALUE` syntax. To support older "
"versions, use the `cargo:KEY=VALUE` syntax."
msgstr ""

#: src/reference/build-scripts.md:140
msgid "`cargo::rustc-link-arg=FLAG`"
msgstr ""

#: src/reference/build-scripts.md:142
msgid ""
"The `rustc-link-arg` instruction tells Cargo to pass the [`-C link-arg=FLAG` "
"option](../../rustc/codegen-options/index.md#link-arg) to the compiler, but "
"only when building supported targets (benchmarks, binaries, `cdylib` crates, "
"examples, and tests). Its usage is highly platform specific. It is useful to "
"set the shared library version or linker script."
msgstr ""

#: src/reference/build-scripts.md:150
msgid "`cargo::rustc-link-arg-bin=BIN=FLAG`"
msgstr ""

#: src/reference/build-scripts.md:152
msgid ""
"The `rustc-link-arg-bin` instruction tells Cargo to pass the [`-C link-"
"arg=FLAG` option](../../rustc/codegen-options/index.md#link-arg) to the "
"compiler, but only when building the binary target with name `BIN`. Its "
"usage is highly platform specific. It is useful to set a linker script or "
"other linker options."
msgstr ""

#: src/reference/build-scripts.md:157
msgid "`cargo::rustc-link-arg-bins=FLAG`"
msgstr ""

#: src/reference/build-scripts.md:159
msgid ""
"The `rustc-link-arg-bins` instruction tells Cargo to pass the [`-C link-"
"arg=FLAG` option](../../rustc/codegen-options/index.md#link-arg) to the "
"compiler, but only when building a binary target. Its usage is highly "
"platform specific. It is useful to set a linker script or other linker "
"options."
msgstr ""

#: src/reference/build-scripts.md:164
msgid "`cargo::rustc-link-lib=LIB`"
msgstr ""

#: src/reference/build-scripts.md:166
msgid ""
"The `rustc-link-lib` instruction tells Cargo to link the given library using "
"the compiler's [`-l` flag](../../rustc/command-line-arguments.md#option-l-"
"link-lib). This is typically used to link a native library using [FFI](../../"
"nomicon/ffi.md)."
msgstr ""

#: src/reference/build-scripts.md:170
msgid ""
"The `LIB` string is passed directly to rustc, so it supports any syntax that "
"`-l` does.   \n"
"Currently the fully supported syntax for `LIB` is "
"`[KIND[:MODIFIERS]=]NAME[:RENAME]`."
msgstr ""

#: src/reference/build-scripts.md:174
msgid ""
"The `-l` flag is only passed to the library target of the package, unless "
"there is no library target, in which case it is passed to all targets. This "
"is done because all other targets have an implicit dependency on the library "
"target, and the given library to link should only be included once. This "
"means that if a package has both a library and a binary target, the "
"_library_ has access to the symbols from the given lib, and the binary "
"should access them through the library target's public API."
msgstr ""

#: src/reference/build-scripts.md:182
msgid ""
"The optional `KIND` may be one of `dylib`, `static`, or `framework`. See the "
"[rustc book](../../rustc/command-line-arguments.md#option-l-link-lib) for "
"more detail."
msgstr ""

#: src/reference/build-scripts.md:188
msgid "`cargo::rustc-link-arg-tests=FLAG`"
msgstr ""

#: src/reference/build-scripts.md:190
msgid ""
"The `rustc-link-arg-tests` instruction tells Cargo to pass the [`-C link-"
"arg=FLAG` option](../../rustc/codegen-options/index.md#link-arg) to the "
"compiler, but only when building a tests target."
msgstr ""

#: src/reference/build-scripts.md:194
msgid "`cargo::rustc-link-arg-examples=FLAG`"
msgstr ""

#: src/reference/build-scripts.md:196
msgid ""
"The `rustc-link-arg-examples` instruction tells Cargo to pass the [`-C link-"
"arg=FLAG` option](../../rustc/codegen-options/index.md#link-arg) to the "
"compiler, but only when building an examples target."
msgstr ""

#: src/reference/build-scripts.md:200
msgid "`cargo::rustc-link-arg-benches=FLAG`"
msgstr ""

#: src/reference/build-scripts.md:202
msgid ""
"The `rustc-link-arg-benches` instruction tells Cargo to pass the [`-C link-"
"arg=FLAG` option](../../rustc/codegen-options/index.md#link-arg) to the "
"compiler, but only when building a benchmark target."
msgstr ""

#: src/reference/build-scripts.md:206
msgid "`cargo::rustc-link-search=[KIND=]PATH`"
msgstr ""

#: src/reference/build-scripts.md:208
msgid ""
"The `rustc-link-search` instruction tells Cargo to pass the [`-L` flag]"
"(../../rustc/command-line-arguments.md#option-l-search-path) to the compiler "
"to add a directory to the library search path."
msgstr ""

#: src/reference/build-scripts.md:212
msgid ""
"The optional `KIND` may be one of `dependency`, `crate`, `native`, "
"`framework`, or `all`. See the [rustc book](../../rustc/command-line-"
"arguments.md#option-l-search-path) for more detail."
msgstr ""

#: src/reference/build-scripts.md:215
msgid ""
"These paths are also added to the [dynamic library search path environment "
"variable](environment-variables.md#dynamic-library-paths) if they are within "
"the `OUT_DIR`. Depending on this behavior is discouraged since this makes it "
"difficult to use the resulting binary. In general, it is best to avoid "
"creating dynamic libraries in a build script (using existing system "
"libraries is fine)."
msgstr ""

#: src/reference/build-scripts.md:224
msgid "`cargo::rustc-flags=FLAGS`"
msgstr ""

#: src/reference/build-scripts.md:226
msgid ""
"The `rustc-flags` instruction tells Cargo to pass the given space-separated "
"flags to the compiler. This only allows the `-l` and `-L` flags, and is "
"equivalent to using [`rustc-link-lib`](#rustc-link-lib) and [`rustc-link-"
"search`](#rustc-link-search)."
msgstr ""

#: src/reference/build-scripts.md:231
msgid "`cargo::rustc-cfg=KEY[=\"VALUE\"]`"
msgstr ""

#: src/reference/build-scripts.md:233
msgid ""
"The `rustc-cfg` instruction tells Cargo to pass the given value to the [`--"
"cfg` flag](../../rustc/command-line-arguments.md#option-cfg) to the "
"compiler. This may be used for compile-time detection of features to enable "
"[conditional compilation](../../reference/conditional-compilation.md). "
"Custom cfgs must either be expected using the [`cargo::rustc-check-cfg`]"
"(#rustc-check-cfg) instruction or usage will need to allow the "
"[`unexpected_cfgs`](../../rustc/lints/listing/warn-by-default.md#unexpected-"
"cfgs) lint to avoid unexpected cfgs warnings."
msgstr ""

#: src/reference/build-scripts.md:240
msgid ""
"Note that this does _not_ affect Cargo's dependency resolution. This cannot "
"be used to enable an optional dependency, or enable other Cargo features."
msgstr ""

#: src/reference/build-scripts.md:243
msgid ""
"Be aware that [Cargo features](features.md) use the form `feature=\"foo\"`. "
"`cfg` values passed with this flag are not restricted to that form, and may "
"provide just a single identifier, or any arbitrary key/value pair. For "
"example, emitting `cargo::rustc-cfg=abc` will then allow code to use "
"`#[cfg(abc)]` (note the lack of `feature=`). Or an arbitrary key/value pair "
"may be used with an `=` symbol like `cargo::rustc-cfg=my_component=\"foo\"`. "
"The key should be a Rust identifier, the value should be a string."
msgstr ""

#: src/reference/build-scripts.md:256
msgid "`cargo::rustc-check-cfg=CHECK_CFG`"
msgstr ""

#: src/reference/build-scripts.md:258
msgid ""
"Add to the list of expected config names and values that is used when "
"checking the _reachable_ cfg expressions with the [`unexpected_cfgs`](../../"
"rustc/lints/listing/warn-by-default.md#unexpected-cfgs) lint."
msgstr ""

#: src/reference/build-scripts.md:261
msgid ""
"The syntax of `CHECK_CFG` mirrors the `rustc` [`--check-cfg` flag](../../"
"rustc/command-line-arguments.md#option-check-cfg), see [Checking conditional "
"configurations](../../rustc/check-cfg.html) for more details."
msgstr ""

#: src/reference/build-scripts.md:264
msgid "The instruction can be used like this:"
msgstr ""

#: src/reference/build-scripts.md:267 src/reference/build-script-examples.md:58
#: src/reference/build-script-examples.md:158
#: src/reference/build-script-examples.md:211
#: src/reference/build-script-examples.md:315
#: src/reference/build-script-examples.md:402
msgid "// build.rs\n"
msgstr ""

#: src/reference/build-scripts.md:268
msgid "\"cargo::rustc-check-cfg=cfg(foo, values(\\\"bar\\\"))\""
msgstr ""

#: src/reference/build-scripts.md:270
msgid "\"cargo::rustc-cfg=foo=\\\"bar\\\"\""
msgstr ""

#: src/reference/build-scripts.md:274
msgid ""
"Note that all possible cfgs should be defined, regardless of which cfgs are "
"currently enabled. This includes all possible values of a given cfg name."
msgstr ""

#: src/reference/build-scripts.md:277
msgid ""
"It is recommended to group the `cargo::rustc-check-cfg` and [`cargo::rustc-"
"cfg`](../../rustc/command-line-arguments.md#option-cfg) instructions as "
"closely as possible in order to avoid typos, missing check-cfg, stale cfgs..."
msgstr ""

#: src/reference/build-scripts.md:281
msgid ""
"See also the [conditional compilation](build-script-examples.md#conditional-"
"compilation) example."
msgstr ""

#: src/reference/build-scripts.md:284
msgid "**MSRV:** Respected as of 1.80"
msgstr ""

#: src/reference/build-scripts.md:290
msgid "`cargo::rustc-env=VAR=VALUE`"
msgstr ""

#: src/reference/build-scripts.md:292
msgid ""
"The `rustc-env` instruction tells Cargo to set the given environment "
"variable when compiling the package. The value can be then retrieved by the "
"[`env!` macro](../../std/macro.env.html) in the compiled crate. This is "
"useful for embedding additional metadata in crate's code, such as the hash "
"of git HEAD or the unique identifier of a continuous integration server."
msgstr ""

#: src/reference/build-scripts.md:298
msgid ""
"See also the [environment variables automatically included by Cargo]"
"(environment-variables.md#environment-variables-cargo-sets-for-crates)."
msgstr ""

#: src/reference/build-scripts.md:301
msgid ""
"**Note**: These environment variables are also set when running an "
"executable with `cargo run` or `cargo test`. However, this usage is "
"discouraged since it ties the executable to Cargo's execution environment. "
"Normally, these environment variables should only be checked at compile-time "
"with the `env!` macro."
msgstr ""

#: src/reference/build-scripts.md:310
msgid "`cargo::rustc-cdylib-link-arg=FLAG`"
msgstr ""

#: src/reference/build-scripts.md:312
msgid ""
"The `rustc-cdylib-link-arg` instruction tells Cargo to pass the [`-C link-"
"arg=FLAG` option](../../rustc/codegen-options/index.md#link-arg) to the "
"compiler, but only when building a `cdylib` library target. Its usage is "
"highly platform specific. It is useful to set the shared library version or "
"the runtime-path."
msgstr ""

#: src/reference/build-scripts.md:317
msgid "`cargo::error=MESSAGE`"
msgstr ""

#: src/reference/build-scripts.md:319
msgid ""
"The `error` instruction tells Cargo to display an error after the build "
"script has finished running, and then fail the build."
msgstr ""

#: src/reference/build-scripts.md:322
msgid ""
"Note: Build script libraries should carefully consider if they want to use "
"`cargo::error` versus returning a `Result`. It may be better to return a "
"`Result`, and allow the caller to decide if the error is fatal or not. The "
"caller can then decide whether or not to display the `Err` variant using "
"`cargo::error`."
msgstr ""

#: src/reference/build-scripts.md:328
msgid "**MSRV:** Respected as of 1.84"
msgstr ""

#: src/reference/build-scripts.md:330
msgid "`cargo::warning=MESSAGE`"
msgstr ""

#: src/reference/build-scripts.md:332
msgid ""
"The `warning` instruction tells Cargo to display a warning after the build "
"script has finished running. Warnings are only shown for `path` dependencies "
"(that is, those you're working on locally), so for example warnings printed "
"out in [crates.io](https://crates.io/) crates are not emitted by default, "
"unless the build fails. The `-vv` \"very verbose\" flag may be used to have "
"Cargo display warnings for all crates."
msgstr ""

#: src/reference/build-scripts.md:341
msgid ""
"Build scripts are also allowed to have dependencies on other Cargo-based "
"crates. Dependencies are declared through the `build-dependencies` section "
"of the manifest."
msgstr ""

#: src/reference/build-scripts.md:345
msgid ""
"```toml\n"
"[build-dependencies]\n"
"cc = \"1.0.46\"\n"
"```"
msgstr ""

#: src/reference/build-scripts.md:350
msgid ""
"The build script **does not** have access to the dependencies listed in the "
"`dependencies` or `dev-dependencies` section (they’re not built yet!). Also, "
"build dependencies are not available to the package itself unless also "
"explicitly added in the `[dependencies]` table."
msgstr ""

#: src/reference/build-scripts.md:355
msgid ""
"It is recommended to carefully consider each dependency you add, weighing "
"against the impact on compile time, licensing, maintenance, etc. Cargo will "
"attempt to reuse a dependency if it is shared between build dependencies and "
"normal dependencies. However, this is not always possible, for example when "
"cross-compiling, so keep that in consideration of the impact on compile time."
msgstr ""

#: src/reference/build-scripts.md:361
msgid "Change Detection"
msgstr ""

#: src/reference/build-scripts.md:363
msgid ""
"When rebuilding a package, Cargo does not necessarily know if the build "
"script needs to be run again. By default, it takes a conservative approach "
"of always re-running the build script if any file within the package is "
"changed (or the list of files controlled by the [`exclude` and `include` "
"fields](manifest.md#the-exclude-and-include-fields)). For most cases, this "
"is not a good choice, so it is recommended that every build script emit at "
"least one of the `rerun-if` instructions (described below). If these are "
"emitted, then Cargo will only re-run the script if the given value has "
"changed. If Cargo is re-running the build scripts of your own crate or a "
"dependency and you don't know why, see [\"Why is Cargo rebuilding my code?\" "
"in the FAQ](../faq.md#why-is-cargo-rebuilding-my-code)."
msgstr ""

#: src/reference/build-scripts.md:376
msgid "`cargo::rerun-if-changed=PATH`"
msgstr ""

#: src/reference/build-scripts.md:378
msgid ""
"The `rerun-if-changed` instruction tells Cargo to re-run the build script if "
"the file at the given path has changed. Currently, Cargo only uses the "
"filesystem last-modified \"mtime\" timestamp to determine if the file has "
"changed. It compares against an internal cached timestamp of when the build "
"script last ran."
msgstr ""

#: src/reference/build-scripts.md:384
msgid ""
"If the path points to a directory, it will scan the entire directory for any "
"modifications."
msgstr ""

#: src/reference/build-scripts.md:387
msgid ""
"If the build script inherently does not need to re-run under any "
"circumstance, then emitting `cargo::rerun-if-changed=build.rs` is a simple "
"way to prevent it from being re-run (otherwise, the default if no `rerun-if` "
"instructions are emitted is to scan the entire package directory for "
"changes). Cargo automatically handles whether or not the script itself needs "
"to be recompiled, and of course the script will be re-run after it has been "
"recompiled. Otherwise, specifying `build.rs` is redundant and unnecessary."
msgstr ""

#: src/reference/build-scripts.md:395
msgid "`cargo::rerun-if-env-changed=NAME`"
msgstr ""

#: src/reference/build-scripts.md:397
msgid ""
"The `rerun-if-env-changed` instruction tells Cargo to re-run the build "
"script if the value of an environment variable of the given name has changed."
msgstr ""

#: src/reference/build-scripts.md:400
msgid ""
"Note that the environment variables here are intended for global environment "
"variables like `CC` and such, it is not possible to use this for environment "
"variables like `TARGET` that [Cargo sets for build scripts](environment-"
"variables.md#environment-variables-cargo-sets-for-build-scripts). The "
"environment variables in use are those received by `cargo` invocations, not "
"those received by the executable of the build script."
msgstr ""

#: src/reference/build-scripts.md:406
msgid ""
"As of 1.46, using [`env!`](../../std/macro.env.html) and [`option_env!`]"
"(../../std/macro.option_env.html) in source code will automatically detect "
"changes and trigger rebuilds. `rerun-if-env-changed` is no longer needed for "
"variables already referenced by these macros."
msgstr ""

#: src/reference/build-scripts.md:413
msgid "The `links` Manifest Key"
msgstr ""

#: src/reference/build-scripts.md:415
msgid ""
"The `package.links` key may be set in the `Cargo.toml` manifest to declare "
"that the package links with the given native library. The purpose of this "
"manifest key is to give Cargo an understanding about the set of native "
"dependencies that a package has, as well as providing a principled system of "
"passing metadata between package build scripts."
msgstr ""

#: src/reference/build-scripts.md:421
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"links = \"foo\"\n"
"```"
msgstr ""

#: src/reference/build-scripts.md:427
msgid ""
"This manifest states that the package links to the `libfoo` native library. "
"When using the `links` key, the package must have a build script, and the "
"build script should use the [`rustc-link-lib` instruction](#rustc-link-lib) "
"to link the library."
msgstr ""

#: src/reference/build-scripts.md:432
msgid ""
"Primarily, Cargo requires that there is at most one package per `links` "
"value. In other words, it is forbidden to have two packages link to the same "
"native library. This helps prevent duplicate symbols between crates. Note, "
"however, that there are [conventions in place](#-sys-packages) to alleviate "
"this."
msgstr ""

#: src/reference/build-scripts.md:437
msgid ""
"Build scripts can generate an arbitrary set of metadata in the form of key-"
"value pairs. This metadata is set with the `cargo::metadata=KEY=VALUE` "
"instruction."
msgstr ""

#: src/reference/build-scripts.md:441
msgid ""
"The metadata is passed to the build scripts of **dependent** packages. For "
"example, if the package `foo` depends on `bar`, which links `baz`, then if "
"`bar` generates `key=value` as part of its build script metadata, then the "
"build script of `foo` will have the environment variables "
"`DEP_BAZ_KEY=value` (note that the value of the `links` key is used). See "
"the [\"Using another `sys` crate\"](build-script-examples.md#using-another-"
"sys-crate) for an example of how this can be used."
msgstr ""

#: src/reference/build-scripts.md:449
msgid ""
"Note that metadata is only passed to immediate dependents, not transitive "
"dependents."
msgstr ""

#: src/reference/build-scripts.md:452
msgid ""
"**MSRV:** 1.77 is required for `cargo::metadata=KEY=VALUE`. To support older "
"versions, use `cargo:KEY=VAUE` (unsupported directives are assumed to be "
"metadata keys)."
msgstr ""

#: src/reference/build-scripts.md:457
msgid "`*-sys` Packages"
msgstr ""

#: src/reference/build-scripts.md:459
msgid ""
"Some Cargo packages that link to system libraries have a naming convention "
"of having a `-sys` suffix. Any package named `foo-sys` should provide two "
"major pieces of functionality:"
msgstr ""

#: src/reference/build-scripts.md:463
msgid ""
"The library crate should link to the native library `libfoo`. This will "
"often probe the current system for `libfoo` before resorting to building "
"from source."
msgstr ""

#: src/reference/build-scripts.md:466
msgid ""
"The library crate should provide **declarations** for types and functions in "
"`libfoo`, but **not** higher-level abstractions."
msgstr ""

#: src/reference/build-scripts.md:469
msgid ""
"The set of `*-sys` packages provides a common set of dependencies for "
"linking to native libraries. There are a number of benefits earned from "
"having this convention of native-library-related packages:"
msgstr ""

#: src/reference/build-scripts.md:473
msgid ""
"Common dependencies on `foo-sys` alleviates the rule about one package per "
"value of `links`."
msgstr ""

#: src/reference/build-scripts.md:475
msgid ""
"Other `-sys` packages can take advantage of the `DEP_NAME_KEY=value` "
"environment variables to better integrate with other packages. See the "
"[\"Using another `sys` crate\"](build-script-examples.md#using-another-sys-"
"crate) example."
msgstr ""

#: src/reference/build-scripts.md:478
msgid ""
"A common dependency allows centralizing logic on discovering `libfoo` itself "
"(or building it from source)."
msgstr ""

#: src/reference/build-scripts.md:480
msgid "These dependencies are easily [overridable](#overriding-build-scripts)."
msgstr ""

#: src/reference/build-scripts.md:482
msgid ""
"It is common to have a companion package without the `-sys` suffix that "
"provides a safe, high-level abstractions on top of the sys package. For "
"example, the [`git2` crate](https://crates.io/crates/git2) provides a high-"
"level interface to the [`libgit2-sys` crate](https://crates.io/crates/"
"libgit2-sys)."
msgstr ""

#: src/reference/build-scripts.md:490
msgid "Overriding Build Scripts"
msgstr ""

#: src/reference/build-scripts.md:492
msgid ""
"If a manifest contains a `links` key, then Cargo supports overriding the "
"build script specified with a custom library. The purpose of this "
"functionality is to prevent running the build script in question altogether "
"and instead supply the metadata ahead of time."
msgstr ""

#: src/reference/build-scripts.md:497
msgid ""
"To override a build script, place the following configuration in any "
"acceptable [`config.toml`](config.md) file."
msgstr ""

#: src/reference/build-scripts.md:511
msgid ""
"With this configuration, if a package declares that it links to `foo` then "
"the build script will **not** be compiled or run, and the metadata specified "
"will be used instead."
msgstr ""

#: src/reference/build-scripts.md:515
msgid ""
"The `warning`, `rerun-if-changed`, and `rerun-if-env-changed` keys should "
"not be used and will be ignored."
msgstr ""

#: src/reference/build-scripts.md:518
msgid "Jobserver"
msgstr ""

#: src/reference/build-scripts.md:520
msgid ""
"Cargo and `rustc` use the [jobserver protocol](http://make.mad-scientist.net/"
"papers/jobserver-implementation/), developed for GNU make, to coordinate "
"concurrency across processes. It is essentially a semaphore that controls "
"the number of jobs running concurrently. The concurrency may be set with the "
"`--jobs` flag, which defaults to the number of logical CPUs."
msgstr ""

#: src/reference/build-scripts.md:525
msgid ""
"Each build script inherits one job slot from Cargo, and should endeavor to "
"only use one CPU while it runs. If the script wants to use more CPUs in "
"parallel, it should use the [`jobserver` crate](https://crates.io/crates/"
"jobserver) to coordinate with Cargo."
msgstr ""

#: src/reference/build-scripts.md:529
msgid ""
"As an example, the [`cc` crate](https://crates.io/crates/cc) may enable the "
"optional `parallel` feature which will use the jobserver protocol to attempt "
"to build multiple C files at the same time."
msgstr ""

#: src/reference/build-script-examples.md:3
msgid ""
"The following sections illustrate some examples of writing build scripts."
msgstr ""

#: src/reference/build-script-examples.md:5
msgid ""
"Some common build script functionality can be found via crates on [crates.io]"
"(https://crates.io/). Check out the [`build-dependencies` keyword](https://"
"crates.io/keywords/build-dependencies) to see what is available. The "
"following is a sample of some popular crates[^†]:"
msgstr ""

#: src/reference/build-script-examples.md:10
msgid ""
"[`bindgen`](https://crates.io/crates/bindgen) --- Automatically generate "
"Rust FFI bindings to C libraries."
msgstr ""

#: src/reference/build-script-examples.md:12
msgid "[`cc`](https://crates.io/crates/cc) --- Compiles C/C++/assembly."
msgstr ""

#: src/reference/build-script-examples.md:13
msgid ""
"[`pkg-config`](https://crates.io/crates/pkg-config) --- Detect system "
"libraries using the `pkg-config` utility."
msgstr ""

#: src/reference/build-script-examples.md:15
msgid ""
"[`cmake`](https://crates.io/crates/cmake) --- Runs the `cmake` build tool to "
"build a native library."
msgstr ""

#: src/reference/build-script-examples.md:16
msgid ""
"[`autocfg`](https://crates.io/crates/autocfg), [`rustc_version`](https://"
"crates.io/crates/rustc_version), [`version_check`](https://crates.io/crates/"
"version_check) --- These crates provide ways to implement conditional "
"compilation based on the current `rustc` such as the version of the compiler."
msgstr ""

#: src/reference/build-script-examples.md:22
msgid ""
"This list is not an endorsement. Evaluate your dependencies to see which is "
"right for your project."
msgstr ""

#: src/reference/build-script-examples.md:25
msgid "Code generation"
msgstr ""

#: src/reference/build-script-examples.md:27
msgid ""
"Some Cargo packages need to have code generated just before they are "
"compiled for various reasons. Here we’ll walk through a simple example which "
"generates a library call as part of the build script."
msgstr ""

#: src/reference/build-script-examples.md:31
msgid "First, let’s take a look at the directory structure of this package:"
msgstr ""

#: src/reference/build-script-examples.md:43
msgid ""
"Here we can see that we have a `build.rs` build script and our binary in "
"`main.rs`. This package has a basic manifest:"
msgstr ""

#: src/reference/build-script-examples.md:46
msgid ""
"```toml\n"
"# Cargo.toml\n"
"\n"
"[package]\n"
"name = \"hello-from-generated-code\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"```"
msgstr ""

#: src/reference/build-script-examples.md:55
msgid "Let’s see what’s inside the build script:"
msgstr ""

#: src/reference/build-script-examples.md:66
msgid "\"hello.rs\""
msgstr ""

#: src/reference/build-script-examples.md:69
msgid ""
"\"pub fn message() -> &'static str {\n"
"            \\\"Hello, World!\\\"\n"
"        }\n"
"        \""
msgstr ""

#: src/reference/build-script-examples.md:74
#: src/reference/build-script-examples.md:319
msgid "\"cargo::rerun-if-changed=build.rs\""
msgstr ""

#: src/reference/build-script-examples.md:78
msgid "There’s a couple of points of note here:"
msgstr ""

#: src/reference/build-script-examples.md:80
msgid ""
"The script uses the `OUT_DIR` environment variable to discover where the "
"output files should be located. It can use the process’ current working "
"directory to find where the input files should be located, but in this case "
"we don’t have any input files."
msgstr ""

#: src/reference/build-script-examples.md:84
msgid ""
"In general, build scripts should not modify any files outside of `OUT_DIR`. "
"It may seem fine on the first blush, but it does cause problems when you use "
"such crate as a dependency, because there's an _implicit_ invariant that "
"sources in `.cargo/registry` should be immutable. `cargo` won't allow such "
"scripts when packaging."
msgstr ""

#: src/reference/build-script-examples.md:89
msgid ""
"This script is relatively simple as it just writes out a small generated "
"file. One could imagine that other more complex operations could take place "
"such as generating a Rust module from a C header file or another language "
"definition, for example."
msgstr ""

#: src/reference/build-script-examples.md:93
msgid ""
"The [`rerun-if-changed` instruction](build-scripts.md#rerun-if-changed) "
"tells Cargo that the build script only needs to re-run if the build script "
"itself changes. Without this line, Cargo will automatically run the build "
"script if any file in the package changes. If your code generation uses some "
"input files, this is where you would print a list of each of those files."
msgstr ""

#: src/reference/build-script-examples.md:99
msgid "Next, let’s peek at the library itself:"
msgstr ""

#: src/reference/build-script-examples.md:102
#: src/reference/build-script-examples.md:250
msgid "// src/main.rs\n"
msgstr ""

#: src/reference/build-script-examples.md:104
msgid "\"/hello.rs\""
msgstr ""

#: src/reference/build-script-examples.md:107
msgid "\"{}\""
msgstr ""

#: src/reference/build-script-examples.md:111
msgid ""
"This is where the real magic happens. The library is using the rustc-defined "
"[`include!` macro](../../std/macro.include.html) in combination with the "
"[`concat!`](../../std/macro.concat.html) and [`env!`](../../std/"
"macro.env.html) macros to include the generated file (`hello.rs`) into the "
"crate’s compilation."
msgstr ""

#: src/reference/build-script-examples.md:116
msgid ""
"Using the structure shown here, crates can include any number of generated "
"files from the build script itself."
msgstr ""

#: src/reference/build-script-examples.md:123
msgid "Building a native library"
msgstr ""

#: src/reference/build-script-examples.md:125
msgid ""
"Sometimes it’s necessary to build some native C or C++ code as part of a "
"package. This is another excellent use case of leveraging the build script "
"to build a native library before the Rust crate itself. As an example, we’ll "
"create a Rust library which calls into C to print “Hello, World!”."
msgstr ""

#: src/reference/build-script-examples.md:130
msgid "Like above, let’s first take a look at the package layout:"
msgstr ""

#: src/reference/build-script-examples.md:143
msgid "Pretty similar to before! Next, the manifest:"
msgstr ""

#: src/reference/build-script-examples.md:145
msgid ""
"```toml\n"
"# Cargo.toml\n"
"\n"
"[package]\n"
"name = \"hello-world-from-c\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"```"
msgstr ""

#: src/reference/build-script-examples.md:154
msgid ""
"For now we’re not going to use any build dependencies, so let’s take a look "
"at the build script now:"
msgstr ""

#: src/reference/build-script-examples.md:167
msgid ""
"// Note that there are a number of downsides to this approach, the comments\n"
"    // below detail how to improve the portability of these commands.\n"
msgstr ""

#: src/reference/build-script-examples.md:169
msgid "\"gcc\""
msgstr ""

#: src/reference/build-script-examples.md:169
msgid "\"-c\""
msgstr ""

#: src/reference/build-script-examples.md:169
msgid "\"-fPIC\""
msgstr ""

#: src/reference/build-script-examples.md:169
msgid "\"-o\""
msgstr ""

#: src/reference/build-script-examples.md:170
msgid "\"{}/hello.o\""
msgstr ""

#: src/reference/build-script-examples.md:172
msgid "\"ar\""
msgstr ""

#: src/reference/build-script-examples.md:172
msgid "\"crus\""
msgstr ""

#: src/reference/build-script-examples.md:172
msgid "\"libhello.a\""
msgstr ""

#: src/reference/build-script-examples.md:172
msgid "\"hello.o\""
msgstr ""

#: src/reference/build-script-examples.md:176
msgid "\"cargo::rustc-link-search=native={}\""
msgstr ""

#: src/reference/build-script-examples.md:177
msgid "\"cargo::rustc-link-lib=static=hello\""
msgstr ""

#: src/reference/build-script-examples.md:182
msgid ""
"This build script starts out by compiling our C file into an object file (by "
"invoking `gcc`) and then converting this object file into a static library "
"(by invoking `ar`). The final step is feedback to Cargo itself to say that "
"our output was in `out_dir` and the compiler should link the crate to "
"`libhello.a` statically via the `-l static=hello` flag."
msgstr ""

#: src/reference/build-script-examples.md:188
msgid "Note that there are a number of drawbacks to this hard-coded approach:"
msgstr ""

#: src/reference/build-script-examples.md:190
msgid ""
"The `gcc` command itself is not portable across platforms. For example it’s "
"unlikely that Windows platforms have `gcc`, and not even all Unix platforms "
"may have `gcc`. The `ar` command is also in a similar situation."
msgstr ""

#: src/reference/build-script-examples.md:193
msgid ""
"These commands do not take cross-compilation into account. If we’re cross "
"compiling for a platform such as Android it’s unlikely that `gcc` will "
"produce an ARM executable."
msgstr ""

#: src/reference/build-script-examples.md:197
msgid ""
"Not to fear, though, this is where a `build-dependencies` entry would help! "
"The Cargo ecosystem has a number of packages to make this sort of task much "
"easier, portable, and standardized. Let's try the [`cc` crate](https://"
"crates.io/crates/cc) from [crates.io](https://crates.io/). First, add it to "
"the `build-dependencies` in `Cargo.toml`:"
msgstr ""

#: src/reference/build-script-examples.md:203
msgid ""
"```toml\n"
"[build-dependencies]\n"
"cc = \"1.0\"\n"
"```"
msgstr ""

#: src/reference/build-script-examples.md:208
msgid "And rewrite the build script to use this crate:"
msgstr ""

#: src/reference/build-script-examples.md:221
msgid ""
"The [`cc` crate](https://crates.io/crates/cc) abstracts a range of build "
"script requirements for C code:"
msgstr ""

#: src/reference/build-script-examples.md:223
msgid ""
"It invokes the appropriate compiler (MSVC for windows, `gcc` for MinGW, `cc` "
"for Unix platforms, etc.)."
msgstr ""

#: src/reference/build-script-examples.md:225
msgid ""
"It takes the `TARGET` variable into account by passing appropriate flags to "
"the compiler being used."
msgstr ""

#: src/reference/build-script-examples.md:227
msgid ""
"Other environment variables, such as `OPT_LEVEL`, `DEBUG`, etc., are all "
"handled automatically."
msgstr ""

#: src/reference/build-script-examples.md:229
msgid ""
"The stdout output and `OUT_DIR` locations are also handled by the `cc` "
"library."
msgstr ""

#: src/reference/build-script-examples.md:232
msgid ""
"Here we can start to see some of the major benefits of farming as much "
"functionality as possible out to common build dependencies rather than "
"duplicating logic across all build scripts!"
msgstr ""

#: src/reference/build-script-examples.md:236
msgid ""
"Back to the case study though, let’s take a quick look at the contents of "
"the `src` directory:"
msgstr ""

#: src/reference/build-script-examples.md:240
msgid "// src/hello.c\n"
msgstr ""

#: src/reference/build-script-examples.md:242
msgid "<stdio.h>"
msgstr ""

#: src/reference/build-script-examples.md:245
msgid "\"Hello, World!\\n\""
msgstr ""

#: src/reference/build-script-examples.md:251
msgid ""
"// Note the lack of the `#[link]` attribute. We’re delegating the "
"responsibility\n"
"// of selecting what to link over to the build script rather than hard-"
"coding\n"
"// it in the source file.\n"
msgstr ""

#: src/reference/build-script-examples.md:262
msgid ""
"And there we go! This should complete our example of building some C code "
"from a Cargo package using the build script itself. This also shows why "
"using a build dependency can be crucial in many situations and even much "
"more concise!"
msgstr ""

#: src/reference/build-script-examples.md:266
msgid ""
"We’ve also seen a brief example of how a build script can use a crate as a "
"dependency purely for the build process and not for the crate itself at "
"runtime."
msgstr ""

#: src/reference/build-script-examples.md:271
msgid "Linking to system libraries"
msgstr ""

#: src/reference/build-script-examples.md:273
msgid ""
"This example demonstrates how to link a system library and how the build "
"script is used to support this use case."
msgstr ""

#: src/reference/build-script-examples.md:276
msgid ""
"Quite frequently a Rust crate wants to link to a native library provided on "
"the system to bind its functionality or just use it as part of an "
"implementation detail. This is quite a nuanced problem when it comes to "
"performing this in a platform-agnostic fashion. It is best, if possible, to "
"farm out as much of this as possible to make this as easy as possible for "
"consumers."
msgstr ""

#: src/reference/build-script-examples.md:283
msgid ""
"For this example, we will be creating a binding to the system's zlib "
"library. This is a library that is commonly found on most Unix-like systems "
"that provides data compression. This is already wrapped up in the [`libz-"
"sys` crate](https://crates.io/crates/libz-sys), but for this example, we'll "
"do an extremely simplified version. Check out [the source code](https://"
"github.com/rust-lang/libz-sys) for the full example."
msgstr ""

#: src/reference/build-script-examples.md:289
msgid ""
"To make it easy to find the location of the library, we will use the [`pkg-"
"config` crate](https://crates.io/crates/pkg-config). This crate uses the "
"system's `pkg-config` utility to discover information about a library. It "
"will automatically tell Cargo what is needed to link the library. This will "
"likely only work on Unix-like systems with `pkg-config` installed. Let's "
"start by setting up the manifest:"
msgstr ""

#: src/reference/build-script-examples.md:295
msgid ""
"```toml\n"
"# Cargo.toml\n"
"\n"
"[package]\n"
"name = \"libz-sys\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"links = \"z\"\n"
"\n"
"[build-dependencies]\n"
"pkg-config = \"0.3.16\"\n"
"```"
msgstr ""

#: src/reference/build-script-examples.md:308
msgid ""
"Take note that we included the `links` key in the `package` table. This "
"tells Cargo that we are linking to the `libz` library. See [\"Using another "
"sys crate\"](#using-another-sys-crate) for an example that will leverage "
"this."
msgstr ""

#: src/reference/build-script-examples.md:312
msgid "The build script is fairly simple:"
msgstr ""

#: src/reference/build-script-examples.md:318
msgid "\"zlib\""
msgstr ""

#: src/reference/build-script-examples.md:323
msgid "Let's round out the example with a basic FFI binding:"
msgstr ""

#: src/reference/build-script-examples.md:326
msgid "// src/lib.rs\n"
msgstr ""

#: src/reference/build-script-examples.md:330 src/reference/semver.md:769
#: src/reference/semver.md:823 src/reference/semver.md:944
msgid "\"C\""
msgstr ""

#: src/reference/build-script-examples.md:343
msgid ""
"Run `cargo build -vv` to see the output from the build script. On a system "
"with `libz` already installed, it may look something like this:"
msgstr ""

#: src/reference/build-script-examples.md:352
msgid ""
"Nice! `pkg-config` did all the work of finding the library and telling Cargo "
"where it is."
msgstr ""

#: src/reference/build-script-examples.md:355
msgid ""
"It is not unusual for packages to include the source for the library, and "
"build it statically if it is not found on the system, or if a feature or "
"environment variable is set. For example, the real [`libz-sys` crate]"
"(https://crates.io/crates/libz-sys) checks the environment variable "
"`LIBZ_SYS_STATIC` or the `static` feature to build it from source instead of "
"using the system library. Check out [the source](https://github.com/rust-"
"lang/libz-sys) for a more complete example."
msgstr ""

#: src/reference/build-script-examples.md:366
msgid "Using another `sys` crate"
msgstr ""

#: src/reference/build-script-examples.md:368
msgid ""
"When using the `links` key, crates may set metadata that can be read by "
"other crates that depend on it. This provides a mechanism to communicate "
"information between crates. In this example, we'll be creating a C library "
"that makes use of zlib from the real [`libz-sys` crate](https://crates.io/"
"crates/libz-sys)."
msgstr ""

#: src/reference/build-script-examples.md:373
msgid ""
"If you have a C library that depends on zlib, you can leverage the [`libz-"
"sys` crate](https://crates.io/crates/libz-sys) to automatically find it or "
"build it. This is great for cross-platform support, such as Windows where "
"zlib is not usually installed. `libz-sys` [sets the `include` metadata]"
"(https://github.com/rust-lang/libz-sys/blob/"
"3c594e677c79584500da673f918c4d2101ac97a1/build.rs#L156) to tell other "
"packages where to find the header files for zlib. Our build script can read "
"that metadata with the `DEP_Z_INCLUDE` environment variable. Here's an "
"example:"
msgstr ""

#: src/reference/build-script-examples.md:382
msgid ""
"```toml\n"
"# Cargo.toml\n"
"\n"
"[package]\n"
"name = \"zuser\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"libz-sys = \"1.0.25\"\n"
"\n"
"[build-dependencies]\n"
"cc = \"1.0.46\"\n"
"```"
msgstr ""

#: src/reference/build-script-examples.md:397
msgid ""
"Here we have included `libz-sys` which will ensure that there is only one "
"`libz` used in the final library, and give us access to it from our build "
"script:"
msgstr ""

#: src/reference/build-script-examples.md:406
msgid "\"src/zuser.c\""
msgstr ""

#: src/reference/build-script-examples.md:407
msgid "\"DEP_Z_INCLUDE\""
msgstr ""

#: src/reference/build-script-examples.md:410
msgid "\"zuser\""
msgstr ""

#: src/reference/build-script-examples.md:411
msgid "\"cargo::rerun-if-changed=src/zuser.c\""
msgstr ""

#: src/reference/build-script-examples.md:415
msgid ""
"With `libz-sys` doing all the heavy lifting, the C source code may now "
"include the zlib header, and it should find the header, even on systems "
"where it isn't already installed."
msgstr ""

#: src/reference/build-script-examples.md:420
msgid "// src/zuser.c\n"
msgstr ""

#: src/reference/build-script-examples.md:422
msgid "\"zlib.h\""
msgstr ""

#: src/reference/build-script-examples.md:423
msgid "// … rest of code that makes use of zlib.\n"
msgstr ""

#: src/reference/build-script-examples.md:427
msgid "Conditional compilation"
msgstr ""

#: src/reference/build-script-examples.md:429
msgid ""
"A build script may emit [`rustc-cfg` instructions](build-scripts.md#rustc-"
"cfg) which can enable conditions that can be checked at compile time. In "
"this example, we'll take a look at how the [`openssl` crate](https://"
"crates.io/crates/openssl) uses this to support multiple versions of the "
"OpenSSL library."
msgstr ""

#: src/reference/build-script-examples.md:434
msgid ""
"The [`openssl-sys` crate](https://crates.io/crates/openssl-sys) implements "
"building and linking the OpenSSL library. It supports multiple different "
"implementations (like LibreSSL) and multiple versions. It makes use of the "
"`links` key so that it may pass information to other build scripts. One of "
"the things it passes is the `version_number` key, which is the version of "
"OpenSSL that was detected. The code in the build script looks something "
"[like this](https://github.com/sfackler/rust-openssl/blob/"
"dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl-sys/build/main.rs#L216):"
msgstr ""

#: src/reference/build-script-examples.md:443
msgid "\"cargo::metadata=version_number={openssl_version:x}\""
msgstr ""

#: src/reference/build-script-examples.md:446
msgid ""
"This instruction causes the `DEP_OPENSSL_VERSION_NUMBER` environment "
"variable to be set in any crates that directly depend on `openssl-sys`."
msgstr ""

#: src/reference/build-script-examples.md:449
msgid ""
"The `openssl` crate, which provides the higher-level interface, specifies "
"`openssl-sys` as a dependency. The `openssl` build script can read the "
"version information generated by the `openssl-sys` build script with the "
"`DEP_OPENSSL_VERSION_NUMBER` environment variable. It uses this to generate "
"some [`cfg` values](https://github.com/sfackler/rust-openssl/blob/"
"dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl/build.rs#L18-L36):"
msgstr ""

#: src/reference/build-script-examples.md:457
msgid "// (portion of build.rs)\n"
msgstr ""

#: src/reference/build-script-examples.md:459
msgid "\"cargo::rustc-check-cfg=cfg(ossl101,ossl102)\""
msgstr ""

#: src/reference/build-script-examples.md:460
msgid "\"cargo::rustc-check-cfg=cfg(ossl110,ossl110g,ossl111)\""
msgstr ""

#: src/reference/build-script-examples.md:462
msgid "\"DEP_OPENSSL_VERSION_NUMBER\""
msgstr ""

#: src/reference/build-script-examples.md:466
msgid "\"cargo::rustc-cfg=ossl101\""
msgstr ""

#: src/reference/build-script-examples.md:469
msgid "\"cargo::rustc-cfg=ossl102\""
msgstr ""

#: src/reference/build-script-examples.md:472
msgid "\"cargo::rustc-cfg=ossl110\""
msgstr ""

#: src/reference/build-script-examples.md:475
msgid "\"cargo::rustc-cfg=ossl110g\""
msgstr ""

#: src/reference/build-script-examples.md:478
msgid "\"cargo::rustc-cfg=ossl111\""
msgstr ""

#: src/reference/build-script-examples.md:483
msgid ""
"These `cfg` values can then be used with the [`cfg` attribute](../../"
"reference/conditional-compilation.md#the-cfg-attribute) or the [`cfg` macro]"
"(../../std/macro.cfg.html) to conditionally include code. For example, SHA3 "
"support was added in OpenSSL 1.1.1, so it is [conditionally excluded]"
"(https://github.com/sfackler/rust-openssl/blob/"
"dc72a8e2c429e46c275e528b61a733a66e7877fc/openssl/src/hash.rs#L67-L85) for "
"older versions:"
msgstr ""

#: src/reference/build-script-examples.md:490
msgid "// (portion of openssl crate)\n"
msgstr ""

#: src/reference/build-script-examples.md:498
msgid ""
"Of course, one should be careful when using this, since it makes the "
"resulting binary even more dependent on the build environment. In this "
"example, if the binary is distributed to another system, it may not have the "
"exact same shared libraries, which could cause problems."
msgstr ""

#: src/reference/build-cache.md:1
msgid "Build cache"
msgstr ""

#: src/reference/build-cache.md:3
msgid ""
"Cargo stores the output of a build into the \"target\" directory. By "
"default, this is the directory named `target` in the root of your "
"[_workspace_](../appendix/glossary.md#workspace \"\\\"workspace\\\" "
"(glossary entry)\"). To change the location, you can set the "
"`CARGO_TARGET_DIR` [environment variable](../reference/environment-"
"variables.md), the [`build.target-dir`](../reference/config.md#buildtarget-"
"dir) config value, or the `--target-dir` command-line flag."
msgstr ""

#: src/reference/build-cache.md:9
msgid ""
"The directory layout depends on whether or not you are using the `--target` "
"flag to build for a specific platform. If `--target` is not specified, Cargo "
"runs in a mode where it builds for the host architecture. The output goes "
"into the root of the target directory, with each [profile](../reference/"
"profiles.md) stored in a separate subdirectory:"
msgstr ""

#: src/reference/build-cache.md:15 src/reference/build-cache.md:29
#: src/reference/build-cache.md:43 src/reference/build-cache.md:51
#: src/reference/build-cache.md:60
msgid "Directory"
msgstr ""

#: src/reference/build-cache.md:15 src/reference/build-cache.md:43
#: src/reference/build-cache.md:51 src/reference/build-cache.md:60
msgid "Description"
msgstr ""

#: src/reference/build-cache.md:17 src/reference/build-cache.md:45
msgid "<code style=\"white-space: nowrap\">target/debug/</code>"
msgstr ""

#: src/reference/build-cache.md:17
msgid "Contains output for the `dev` profile."
msgstr ""

#: src/reference/build-cache.md:18
msgid "<code style=\"white-space: nowrap\">target/release/</code>"
msgstr ""

#: src/reference/build-cache.md:18
msgid ""
"Contains output for the `release` profile (with the `--release` option)."
msgstr ""

#: src/reference/build-cache.md:19
msgid "<code style=\"white-space: nowrap\">target/foo/</code>"
msgstr ""

#: src/reference/build-cache.md:19
msgid ""
"Contains build output for the `foo` profile (with the `--profile=foo` "
"option)."
msgstr ""

#: src/reference/build-cache.md:21
msgid ""
"For historical reasons, the `dev` and `test` profiles are stored in the "
"`debug` directory, and the `release` and `bench` profiles are stored in the "
"`release` directory. User-defined profiles are stored in a directory with "
"the same name as the profile."
msgstr ""

#: src/reference/build-cache.md:26
msgid ""
"When building for another target with `--target`, the output is placed in a "
"directory with the name of the [target](../appendix/glossary.md#target \"\\"
"\"target\\\" (glossary entry)\"):"
msgstr ""

#: src/reference/build-cache.md:31
msgid "<code style=\"white-space: nowrap\">target/\\<triple\\>/debug/</code>"
msgstr ""

#: src/reference/build-cache.md:31
msgid ""
"<code style=\"white-space: nowrap\">target/thumbv7em-none-eabihf/debug/</"
"code>"
msgstr ""

#: src/reference/build-cache.md:32
msgid "<code style=\"white-space: nowrap\">target/\\<triple\\>/release/</code>"
msgstr ""

#: src/reference/build-cache.md:32
msgid ""
"<code style=\"white-space: nowrap\">target/thumbv7em-none-eabihf/release/</"
"code>"
msgstr ""

#: src/reference/build-cache.md:34
msgid ""
"**Note**: When not using `--target`, this has a consequence that Cargo will "
"share your dependencies with build scripts and proc macros. [`RUSTFLAGS`](../"
"reference/config.md#buildrustflags) will be shared with every `rustc` "
"invocation. With the `--target` flag, build scripts and proc macros are "
"built separately (for the host architecture), and do not share `RUSTFLAGS`."
msgstr ""

#: src/reference/build-cache.md:40
msgid ""
"Within the profile directory (such as `debug` or `release`), artifacts are "
"placed into the following directories:"
msgstr ""

#: src/reference/build-cache.md:45
msgid ""
"Contains the output of the package being built (the [binary executables](../"
"reference/cargo-targets.md#binaries) and [library targets](../reference/"
"cargo-targets.md#library))."
msgstr ""

#: src/reference/build-cache.md:46
msgid "<code style=\"white-space: nowrap\">target/debug/examples/</code>"
msgstr ""

#: src/reference/build-cache.md:46
msgid "Contains [example targets](../reference/cargo-targets.md#examples)."
msgstr ""

#: src/reference/build-cache.md:48
msgid ""
"Some commands place their output in dedicated directories in the top level "
"of the `target` directory:"
msgstr ""

#: src/reference/build-cache.md:53
msgid "<code style=\"white-space: nowrap\">target/doc/</code>"
msgstr ""

#: src/reference/build-cache.md:53
msgid ""
"Contains rustdoc documentation ([`cargo doc`](../commands/cargo-doc.md))."
msgstr ""

#: src/reference/build-cache.md:54
msgid "<code style=\"white-space: nowrap\">target/package/</code>"
msgstr ""

#: src/reference/build-cache.md:54
msgid ""
"Contains the output of the [`cargo package`](../commands/cargo-package.md) "
"and [`cargo publish`](../commands/cargo-publish.md) commands."
msgstr ""

#: src/reference/build-cache.md:56
msgid ""
"Cargo also creates several other directories and files needed for the build "
"process. Their layout is considered internal to Cargo, and is subject to "
"change. Some of these directories are:"
msgstr ""

#: src/reference/build-cache.md:62
msgid "<code style=\"white-space: nowrap\">target/debug/deps/</code>"
msgstr ""

#: src/reference/build-cache.md:62
msgid "Dependencies and other artifacts."
msgstr ""

#: src/reference/build-cache.md:63
msgid "<code style=\"white-space: nowrap\">target/debug/incremental/</code>"
msgstr ""

#: src/reference/build-cache.md:63
msgid ""
"`rustc` [incremental output](../reference/profiles.md#incremental), a cache "
"used to speed up subsequent builds."
msgstr ""

#: src/reference/build-cache.md:64
msgid "<code style=\"white-space: nowrap\">target/debug/build/</code>"
msgstr ""

#: src/reference/build-cache.md:64
msgid "Output from [build scripts](../reference/build-scripts.md)."
msgstr ""

#: src/reference/build-cache.md:66
msgid "Dep-info files"
msgstr ""

#: src/reference/build-cache.md:68
msgid ""
"Next to each compiled artifact is a file called a \"dep info\" file with a "
"`.d` suffix. This file is a Makefile-like syntax that indicates all of the "
"file dependencies required to rebuild the artifact. These are intended to be "
"used with external build systems so that they can detect if Cargo needs to "
"be re-executed. The paths in the file are absolute by default. See the "
"[`build.dep-info-basedir`](../reference/config.md#builddep-info-basedir) "
"config option to use relative paths."
msgstr ""

#: src/reference/build-cache.md:76
msgid "# Example dep-info file found in target/debug/foo.d"
msgstr ""

#: src/reference/build-cache.md:77
msgid "/path/to/myproj/src/lib.rs /path/to/myproj/src/main.rs"
msgstr ""

#: src/reference/build-cache.md:80
msgid "Shared cache"
msgstr ""

#: src/reference/build-cache.md:82
msgid ""
"A third party tool, [sccache](https://github.com/mozilla/sccache), can be "
"used to share built dependencies across different workspaces."
msgstr ""

#: src/reference/build-cache.md:85
msgid ""
"To setup `sccache`, install it with `cargo install sccache` and set "
"`RUSTC_WRAPPER` environmental variable to `sccache` before invoking Cargo. "
"If you use bash, it makes sense to add `export RUSTC_WRAPPER=sccache` to "
"`.bashrc`. Alternatively, you can set [`build.rustc-wrapper`](../reference/"
"config.md#buildrustc-wrapper) in the [Cargo configuration](../reference/"
"config.md). Refer to sccache documentation for more details."
msgstr ""

#: src/reference/pkgid-spec.md:3
msgid "Package ID specifications"
msgstr ""

#: src/reference/pkgid-spec.md:5
msgid ""
"Subcommands of Cargo frequently need to refer to a particular package within "
"a dependency graph for various operations like updating, cleaning, building, "
"etc. To solve this problem, Cargo supports _Package ID Specifications_. A "
"specification is a string which is used to uniquely refer to one package "
"within a graph of packages."
msgstr ""

#: src/reference/pkgid-spec.md:11
msgid ""
"The specification may be fully qualified, such as `https://github.com/rust-"
"lang/crates.io-index#regex@1.4.3` or it may be abbreviated, such as `regex`. "
"The abbreviated form may be used as long as it uniquely identifies a single "
"package in the dependency graph. If there is ambiguity, additional "
"qualifiers can be added to make it unique. For example, if there are two "
"versions of the `regex` package in the graph, then it can be qualified with "
"a version to make it unique, such as `regex@1.4.3`."
msgstr ""

#: src/reference/pkgid-spec.md:19
msgid "Specification grammar"
msgstr ""

#: src/reference/pkgid-spec.md:21
msgid "The formal grammar for a Package Id Specification is:"
msgstr ""

#: src/reference/pkgid-spec.md:23
msgid ""
"```notrust\n"
"spec := pkgname |\n"
"        [ kind \"+\" ] proto \"://\" hostname-and-path [ \"?\" query] "
"[ \"#\" ( pkgname | semver ) ]\n"
"query = ( \"branch\" | \"tag\" | \"rev\" ) \"=\" ref\n"
"pkgname := name [ (\"@\" | \":\" ) semver ]\n"
"semver := digits [ \".\" digits [ \".\" digits [ \"-\" prerelease ] [ \"+\" "
"build ]]]\n"
"\n"
"kind = \"registry\" | \"git\" | \"path\"\n"
"proto := \"http\" | \"git\" | \"file\" | ...\n"
"```"
msgstr ""

#: src/reference/pkgid-spec.md:34
msgid "Here, brackets indicate that the contents are optional."
msgstr ""

#: src/reference/pkgid-spec.md:36
msgid ""
"The URL form can be used for git dependencies, or to differentiate packages "
"that come from different sources such as different registries."
msgstr ""

#: src/reference/pkgid-spec.md:39
msgid "Example specifications"
msgstr ""

#: src/reference/pkgid-spec.md:41
msgid "The following are references to the `regex` package on `crates.io`:"
msgstr ""

#: src/reference/pkgid-spec.md:43 src/reference/pkgid-spec.md:54
#: src/reference/pkgid-spec.md:64 src/appendix/glossary.md:177
msgid "Spec"
msgstr ""

#: src/reference/pkgid-spec.md:43 src/reference/pkgid-spec.md:54
#: src/reference/pkgid-spec.md:64
msgid "Name"
msgstr ""

#: src/reference/pkgid-spec.md:43 src/reference/pkgid-spec.md:54
#: src/reference/pkgid-spec.md:64
msgid "Version"
msgstr ""

#: src/reference/pkgid-spec.md:45 src/reference/pkgid-spec.md:46
#: src/reference/pkgid-spec.md:47 src/reference/pkgid-spec.md:48
#: src/reference/pkgid-spec.md:49 src/reference/pkgid-spec.md:50
#: src/reference/pkgid-spec.md:58 src/reference/pkgid-spec.md:59
#: src/reference/pkgid-spec.md:60
msgid "`regex`"
msgstr ""

#: src/reference/pkgid-spec.md:45 src/reference/pkgid-spec.md:48
#: src/reference/pkgid-spec.md:66
msgid "`*`"
msgstr ""

#: src/reference/pkgid-spec.md:46
msgid "`regex@1.4`"
msgstr ""

#: src/reference/pkgid-spec.md:46
msgid "`1.4.*`"
msgstr ""

#: src/reference/pkgid-spec.md:47
msgid "`regex@1.4.3`"
msgstr ""

#: src/reference/pkgid-spec.md:47 src/reference/pkgid-spec.md:49
#: src/reference/pkgid-spec.md:50 src/reference/pkgid-spec.md:58
#: src/reference/pkgid-spec.md:59 src/reference/pkgid-spec.md:60
msgid "`1.4.3`"
msgstr ""

#: src/reference/pkgid-spec.md:48
msgid "`https://github.com/rust-lang/crates.io-index#regex`"
msgstr ""

#: src/reference/pkgid-spec.md:49
msgid "`https://github.com/rust-lang/crates.io-index#regex@1.4.3`"
msgstr ""

#: src/reference/pkgid-spec.md:50
msgid "`registry+https://github.com/rust-lang/crates.io-index#regex@1.4.3`"
msgstr ""

#: src/reference/pkgid-spec.md:52
msgid ""
"The following are some examples of specs for several different git "
"dependencies:"
msgstr ""

#: src/reference/pkgid-spec.md:56
msgid "`https://github.com/rust-lang/cargo#0.52.0`"
msgstr ""

#: src/reference/pkgid-spec.md:56
msgid "`cargo`"
msgstr ""

#: src/reference/pkgid-spec.md:56
msgid "`0.52.0`"
msgstr ""

#: src/reference/pkgid-spec.md:57
msgid "`https://github.com/rust-lang/cargo#cargo-platform@0.1.2`"
msgstr ""

#: src/reference/pkgid-spec.md:57
msgid "<nobr>`cargo-platform`</nobr>"
msgstr ""

#: src/reference/pkgid-spec.md:57
msgid "`0.1.2`"
msgstr ""

#: src/reference/pkgid-spec.md:58
msgid "`ssh://git@github.com/rust-lang/regex.git#regex@1.4.3`"
msgstr ""

#: src/reference/pkgid-spec.md:59
msgid "`git+ssh://git@github.com/rust-lang/regex.git#regex@1.4.3`"
msgstr ""

#: src/reference/pkgid-spec.md:60
msgid "`git+ssh://git@github.com/rust-lang/regex.git?branch=dev#regex@1.4.3`"
msgstr ""

#: src/reference/pkgid-spec.md:62
msgid ""
"Local packages on the filesystem can use `file://` URLs to reference them:"
msgstr ""

#: src/reference/pkgid-spec.md:66
msgid "`file:///path/to/my/project/foo`"
msgstr ""

#: src/reference/pkgid-spec.md:66 src/reference/pkgid-spec.md:67
#: src/reference/pkgid-spec.md:68
msgid "`foo`"
msgstr ""

#: src/reference/pkgid-spec.md:67
msgid "`file:///path/to/my/project/foo#1.1.8`"
msgstr ""

#: src/reference/pkgid-spec.md:67 src/reference/pkgid-spec.md:68
msgid "`1.1.8`"
msgstr ""

#: src/reference/pkgid-spec.md:68
msgid "`path+file:///path/to/my/project/foo#1.1.8`"
msgstr ""

#: src/reference/pkgid-spec.md:70
msgid "Brevity of specifications"
msgstr ""

#: src/reference/pkgid-spec.md:72
msgid ""
"The goal of this is to enable both succinct and exhaustive syntaxes for "
"referring to packages in a dependency graph. Ambiguous references may refer "
"to one or more packages. Most commands generate an error if more than one "
"package could be referred to with the same specification."
msgstr ""

#: src/reference/external-tools.md:1
msgid "External tools"
msgstr ""

#: src/reference/external-tools.md:3
msgid ""
"One of the goals of Cargo is simple integration with third-party tools, like "
"IDEs and other build systems. To make integration easier, Cargo has several "
"facilities:"
msgstr ""

#: src/reference/external-tools.md:7
msgid ""
"a [`cargo metadata`](../commands/cargo-metadata.md) command, which outputs "
"package structure and dependencies information in JSON,"
msgstr ""

#: src/reference/external-tools.md:10
msgid ""
"a `--message-format` flag, which outputs information about a particular "
"build, and"
msgstr ""

#: src/reference/external-tools.md:13
msgid "support for custom subcommands."
msgstr ""

#: src/reference/external-tools.md:16
msgid "Information about package structure"
msgstr ""

#: src/reference/external-tools.md:18
msgid ""
"You can use [`cargo metadata`](../commands/cargo-metadata.md) command to get "
"information about package structure and dependencies. See the [`cargo "
"metadata`](../commands/cargo-metadata.md) documentation for details on the "
"format of the output."
msgstr ""

#: src/reference/external-tools.md:22
msgid ""
"The format is stable and versioned. When calling `cargo metadata`, you "
"should pass `--format-version` flag explicitly to avoid forward "
"incompatibility hazard."
msgstr ""

#: src/reference/external-tools.md:26
msgid ""
"If you are using Rust, the [cargo_metadata](https://crates.io/crates/"
"cargo_metadata) crate can be used to parse the output."
msgstr ""

#: src/reference/external-tools.md:32
#: src/reference/credential-provider-protocol.md:12
msgid "JSON messages"
msgstr ""

#: src/reference/external-tools.md:34
msgid ""
"When passing `--message-format=json`, Cargo will output the following "
"information during the build:"
msgstr ""

#: src/reference/external-tools.md:37
msgid "compiler errors and warnings,"
msgstr ""

#: src/reference/external-tools.md:39
msgid "produced artifacts,"
msgstr ""

#: src/reference/external-tools.md:41
msgid "results of the build scripts (for example, native dependencies)."
msgstr ""

#: src/reference/external-tools.md:43
msgid ""
"The output goes to stdout in the JSON object per line format. The `reason` "
"field distinguishes different kinds of messages. The `package_id` field is a "
"unique identifier for referring to the package, and as the `--package` "
"argument to many commands. The syntax grammar can be found in chapter "
"[Package ID Specifications](./pkgid-spec.md)."
msgstr ""

#: src/reference/external-tools.md:49
msgid ""
"**Note:** `--message-format=json` only controls Cargo and Rustc's output. "
"This cannot control the output of other tools, e.g. `cargo run --message-"
"format=json`, or arbitrary output from procedural macros. A possible "
"workaround in these situations is to only interpret a line as JSON if it "
"starts with `{`."
msgstr ""

#: src/reference/external-tools.md:55
msgid ""
"The `--message-format` option can also take additional formatting values "
"which alter the way the JSON messages are computed and rendered. See the "
"description of the `--message-format` option in the [build command "
"documentation](../commands/cargo-build.md) for more details."
msgstr ""

#: src/reference/external-tools.md:60
msgid ""
"If you are using Rust, the [cargo_metadata](https://crates.io/crates/"
"cargo_metadata) crate can be used to parse these messages."
msgstr ""

#: src/reference/external-tools.md:63
msgid ""
"**MSRV:** 1.77 is required for `package_id` to be a Package ID "
"Specification. Before that, it was opaque."
msgstr ""

#: src/reference/external-tools.md:69
msgid "Compiler messages"
msgstr ""

#: src/reference/external-tools.md:71
msgid ""
"The \"compiler-message\" message includes output from the compiler, such as "
"warnings and errors. See the [rustc JSON chapter](../../rustc/json.md) for "
"details on `rustc`'s message format, which is embedded in the following "
"structure:"
msgstr ""

#: src/reference/external-tools.md:78 src/reference/external-tools.md:149
#: src/reference/external-tools.md:218 src/reference/external-tools.md:256
msgid "/* The \"reason\" indicates the kind of message. */"
msgstr ""

#: src/reference/external-tools.md:79 src/reference/external-tools.md:150
#: src/reference/external-tools.md:219 src/reference/external-tools.md:257
msgid "\"reason\""
msgstr ""

#: src/reference/external-tools.md:79
msgid "\"compiler-message\""
msgstr ""

#: src/reference/external-tools.md:80 src/reference/external-tools.md:151
#: src/reference/external-tools.md:220
msgid "/* The Package ID, a unique identifier for referring to the package. */"
msgstr ""

#: src/reference/external-tools.md:81 src/reference/external-tools.md:152
#: src/reference/external-tools.md:221
msgid "\"package_id\""
msgstr ""

#: src/reference/external-tools.md:81 src/reference/external-tools.md:152
#: src/reference/external-tools.md:221 src/commands/cargo-metadata.md:59
#: src/commands/cargo-metadata.md:252 src/commands/cargo-metadata.md:258
#: src/commands/cargo-metadata.md:276 src/commands/cargo-metadata.md:319
msgid "\"file:///path/to/my-package#0.1.0\""
msgstr ""

#: src/reference/external-tools.md:82 src/reference/external-tools.md:153
msgid "/* Absolute path to the package manifest. */"
msgstr ""

#: src/reference/external-tools.md:83 src/reference/external-tools.md:154
#: src/commands/cargo-metadata.md:196
msgid "\"manifest_path\""
msgstr ""

#: src/reference/external-tools.md:83 src/reference/external-tools.md:154
#: src/commands/cargo-metadata.md:196
msgid "\"/path/to/my-package/Cargo.toml\""
msgstr ""

#: src/reference/external-tools.md:84
msgid ""
"/* The Cargo target (lib, bin, example, etc.) that generated the message. */"
msgstr ""

#: src/reference/external-tools.md:85 src/reference/external-tools.md:158
#: src/reference/unstable.md:810 src/commands/cargo-metadata.md:117
#: src/commands/cargo-metadata.md:304
msgid "\"target\""
msgstr ""

#: src/reference/external-tools.md:86
msgid ""
"/* Array of target kinds.\n"
"           - lib targets list the `crate-type` values from the\n"
"             manifest such as \"lib\", \"rlib\", \"dylib\",\n"
"             \"proc-macro\", etc. (default [\"lib\"])\n"
"           - binary is [\"bin\"]\n"
"           - example is [\"example\"]\n"
"           - integration test is [\"test\"]\n"
"           - benchmark is [\"bench\"]\n"
"           - build script is [\"custom-build\"]\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:96 src/reference/external-tools.md:159
#: src/reference/credential-provider-protocol.md:165
#: src/reference/credential-provider-protocol.md:223
#: src/reference/unstable.md:811 src/commands/cargo-metadata.md:103
#: src/commands/cargo-metadata.md:147 src/commands/cargo-metadata.md:300
msgid "\"kind\""
msgstr ""

#: src/reference/external-tools.md:97 src/reference/external-tools.md:106
#: src/reference/external-tools.md:160 src/reference/external-tools.md:163
#: src/reference/unstable.md:811 src/reference/unstable.md:812
msgid "\"lib\""
msgstr ""

#: src/reference/external-tools.md:99
msgid ""
"/* Array of crate types.\n"
"           - lib and example libraries list the `crate-type` values\n"
"             from the manifest such as \"lib\", \"rlib\", \"dylib\",\n"
"             \"proc-macro\", etc. (default [\"lib\"])\n"
"           - all other target kinds are [\"bin\"]\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:105 src/reference/external-tools.md:162
#: src/reference/unstable.md:812 src/commands/cargo-metadata.md:156
msgid "\"crate_types\""
msgstr ""

#: src/reference/external-tools.md:108
msgid ""
"/* The name of the target.\n"
"           For lib targets, dashes will be replaced with underscores.\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:111 src/reference/external-tools.md:165
#: src/reference/credential-provider-protocol.md:53
#: src/reference/credential-provider-protocol.md:83
#: src/reference/credential-provider-protocol.md:107
#: src/reference/unstable.md:813 src/reference/unstable.md:826
#: src/commands/cargo-metadata.md:53 src/commands/cargo-metadata.md:91
#: src/commands/cargo-metadata.md:162 src/commands/cargo-metadata.md:291
msgid "\"name\""
msgstr ""

#: src/reference/external-tools.md:111 src/reference/external-tools.md:165
#: src/reference/unstable.md:813
msgid "\"my_package\""
msgstr ""

#: src/reference/external-tools.md:112 src/commands/cargo-metadata.md:163
msgid "/* Absolute path to the root source file of the target. */"
msgstr ""

#: src/reference/external-tools.md:113 src/reference/external-tools.md:166
#: src/reference/unstable.md:814 src/commands/cargo-metadata.md:164
msgid "\"src_path\""
msgstr ""

#: src/reference/external-tools.md:113 src/reference/external-tools.md:166
#: src/reference/unstable.md:814
msgid "\"/path/to/my-package/src/lib.rs\""
msgstr ""

#: src/reference/external-tools.md:114
msgid ""
"/* The Rust edition of the target.\n"
"           Defaults to the package edition.\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:117 src/reference/external-tools.md:167
#: src/reference/unstable.md:815 src/commands/cargo-metadata.md:168
#: src/commands/cargo-metadata.md:241
msgid "\"edition\""
msgstr ""

#: src/reference/external-tools.md:117 src/reference/external-tools.md:167
#: src/reference/unstable.md:815 src/commands/cargo-metadata.md:168
#: src/commands/cargo-metadata.md:241
msgid "\"2018\""
msgstr ""

#: src/reference/external-tools.md:118
msgid ""
"/* Array of required features.\n"
"           This property is not included if no required features are set.\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:121 src/commands/cargo-metadata.md:172
msgid "\"required-features\""
msgstr ""

#: src/reference/external-tools.md:121 src/reference/external-tools.md:189
#: src/commands/cargo-metadata.md:172 src/commands/cargo-metadata.md:190
#: src/commands/cargo-metadata.md:192
msgid "\"feat1\""
msgstr ""

#: src/reference/external-tools.md:122 src/commands/cargo-metadata.md:173
msgid "/* Whether the target should be documented by `cargo doc`. */"
msgstr ""

#: src/reference/external-tools.md:123 src/reference/external-tools.md:168
#: src/commands/cargo-metadata.md:174
msgid "\"doc\""
msgstr ""

#: src/reference/external-tools.md:124
msgid ""
"/* Whether or not this target has doc tests enabled, and\n"
"           the target is compatible with doc testing.\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:127 src/reference/external-tools.md:169
#: src/reference/unstable.md:817 src/commands/cargo-metadata.md:178
msgid "\"doctest\""
msgstr ""

#: src/reference/external-tools.md:128
msgid ""
"/* Whether or not this target should be built and run with `--test`\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:130 src/reference/external-tools.md:170
#: src/reference/external-tools.md:186 src/reference/unstable.md:816
#: src/commands/cargo-metadata.md:181
msgid "\"test\""
msgstr ""

#: src/reference/external-tools.md:132
msgid ""
"/* The message emitted by the compiler.\n"
"\n"
"    See https://doc.rust-lang.org/rustc/json.html for details.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:136
msgid "\"message\""
msgstr ""

#: src/reference/external-tools.md:137
msgid "/* ... */"
msgstr ""

#: src/reference/external-tools.md:142
msgid "Artifact messages"
msgstr ""

#: src/reference/external-tools.md:144
msgid ""
"For every compilation step, a \"compiler-artifact\" message is emitted with "
"the following structure:"
msgstr ""

#: src/reference/external-tools.md:150
msgid "\"compiler-artifact\""
msgstr ""

#: src/reference/external-tools.md:155
msgid ""
"/* The Cargo target (lib, bin, example, etc.) that generated the artifacts.\n"
"       See the definition above for `compiler-message` for details.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:172
msgid "/* The profile indicates which compiler settings were used. */"
msgstr ""

#: src/reference/external-tools.md:173 src/reference/unstable.md:824
msgid "\"profile\""
msgstr ""

#: src/reference/external-tools.md:174
msgid "/* The optimization level. */"
msgstr ""

#: src/reference/external-tools.md:175 src/reference/unstable.md:828
msgid "\"opt_level\""
msgstr ""

#: src/reference/external-tools.md:175 src/reference/unstable.md:828
msgid "\"0\""
msgstr ""

#: src/reference/external-tools.md:176
msgid ""
"/* The debug level, an integer of 0, 1, or 2, or a string\n"
"           \"line-directives-only\" or \"line-tables-only\". If `null`, it "
"implies\n"
"           rustc's default of 0.\n"
"        */"
msgstr ""

#: src/reference/external-tools.md:180 src/reference/unstable.md:838
msgid "\"debuginfo\""
msgstr ""

#: src/reference/external-tools.md:181
msgid "/* Whether or not debug assertions are enabled. */"
msgstr ""

#: src/reference/external-tools.md:182 src/reference/unstable.md:840
msgid "\"debug_assertions\""
msgstr ""

#: src/reference/external-tools.md:183
msgid "/* Whether or not overflow checks are enabled. */"
msgstr ""

#: src/reference/external-tools.md:184 src/reference/unstable.md:842
msgid "\"overflow_checks\""
msgstr ""

#: src/reference/external-tools.md:185
msgid "/* Whether or not the `--test` flag is used. */"
msgstr ""

#: src/reference/external-tools.md:188 src/commands/cargo-metadata.md:112
msgid "/* Array of features enabled. */"
msgstr ""

#: src/reference/external-tools.md:189 src/reference/unstable.md:867
#: src/commands/cargo-metadata.md:113 src/commands/cargo-metadata.md:188
#: src/commands/cargo-metadata.md:310
msgid "\"features\""
msgstr ""

#: src/reference/external-tools.md:189 src/commands/cargo-metadata.md:193
msgid "\"feat2\""
msgstr ""

#: src/reference/external-tools.md:190
msgid "/* Array of files generated by this step. */"
msgstr ""

#: src/reference/external-tools.md:191
msgid "\"filenames\""
msgstr ""

#: src/reference/external-tools.md:192
msgid "\"/path/to/my-package/target/debug/libmy_package.rlib\""
msgstr ""

#: src/reference/external-tools.md:193
msgid ""
"\"/path/to/my-package/target/debug/deps/libmy_package-"
"be9f3faac0a26ef0.rmeta\""
msgstr ""

#: src/reference/external-tools.md:195
msgid ""
"/* A string of the path to the executable that was created, or null if\n"
"       this step did not generate an executable.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:198
msgid "\"executable\""
msgstr ""

#: src/reference/external-tools.md:199
msgid ""
"/* Whether or not this step was actually executed.\n"
"       When `true`, this means that the pre-existing artifacts were\n"
"       up-to-date, and `rustc` was not executed. When `false`, this means "
"that\n"
"       `rustc` was run to generate the artifacts.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:204
msgid "\"fresh\""
msgstr ""

#: src/reference/external-tools.md:209
msgid "Build script output"
msgstr ""

#: src/reference/external-tools.md:211
msgid ""
"The \"build-script-executed\" message includes the parsed output of a build "
"script. Note that this is emitted even if the build script is not run; it "
"will display the previously cached value. More details about build script "
"output may be found in [the chapter on build scripts](build-scripts.md)."
msgstr ""

#: src/reference/external-tools.md:219
msgid "\"build-script-executed\""
msgstr ""

#: src/reference/external-tools.md:222
msgid ""
"/* Array of libraries to link, as indicated by the `cargo::rustc-link-lib`\n"
"       instruction. Note that this may include a \"KIND=\" prefix in the "
"string\n"
"       where KIND is the library kind.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:226
msgid "\"linked_libs\""
msgstr ""

#: src/reference/external-tools.md:226
msgid "\"static=bar\""
msgstr ""

#: src/reference/external-tools.md:227
msgid ""
"/* Array of paths to include in the library search path, as indicated by\n"
"       the `cargo::rustc-link-search` instruction. Note that this may "
"include a\n"
"       \"KIND=\" prefix in the string where KIND is the library kind.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:231
msgid "\"linked_paths\""
msgstr ""

#: src/reference/external-tools.md:231
msgid "\"/some/path\""
msgstr ""

#: src/reference/external-tools.md:231
msgid "\"native=/another/path\""
msgstr ""

#: src/reference/external-tools.md:232
msgid ""
"/* Array of cfg values to enable, as indicated by the `cargo::rustc-cfg`\n"
"       instruction.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:235
msgid "\"cfgs\""
msgstr ""

#: src/reference/external-tools.md:235
msgid "\"cfg1\""
msgstr ""

#: src/reference/external-tools.md:235
msgid "\"cfg2=\\\"string\\\"\""
msgstr ""

#: src/reference/external-tools.md:236
msgid ""
"/* Array of [KEY, VALUE] arrays of environment variables to set, as\n"
"       indicated by the `cargo::rustc-env` instruction.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:239
msgid "\"env\""
msgstr ""

#: src/reference/external-tools.md:240
msgid "\"SOME_KEY\""
msgstr ""

#: src/reference/external-tools.md:240
msgid "\"some value\""
msgstr ""

#: src/reference/external-tools.md:241
msgid "\"ANOTHER_KEY\""
msgstr ""

#: src/reference/external-tools.md:241
msgid "\"another value\""
msgstr ""

#: src/reference/external-tools.md:243
msgid ""
"/* An absolute path which is used as a value of `OUT_DIR` environmental\n"
"       variable when compiling current package.\n"
"    */"
msgstr ""

#: src/reference/external-tools.md:246
msgid "\"out_dir\""
msgstr ""

#: src/reference/external-tools.md:246
msgid "\"/some/path/in/target/dir\""
msgstr ""

#: src/reference/external-tools.md:250
msgid "Build finished"
msgstr ""

#: src/reference/external-tools.md:252
msgid "The \"build-finished\" message is emitted at the end of the build."
msgstr ""

#: src/reference/external-tools.md:257
msgid "\"build-finished\""
msgstr ""

#: src/reference/external-tools.md:258
msgid "/* Whether or not the build finished successfully. */"
msgstr ""

#: src/reference/external-tools.md:259
msgid "\"success\""
msgstr ""

#: src/reference/external-tools.md:263
msgid ""
"This message can be helpful for tools to know when to stop reading JSON "
"messages. Commands such as `cargo test` or `cargo run` can produce "
"additional output after the build has finished. This message lets a tool "
"know that Cargo will not produce additional JSON messages, but there may be "
"additional output that may be generated afterwards (such as the output "
"generated by the program executed by `cargo run`)."
msgstr ""

#: src/reference/external-tools.md:270
msgid ""
"Note: There is experimental nightly-only support for JSON output for tests, "
"so additional test-specific JSON messages may begin arriving after the "
"\"build-finished\" message if that is enabled."
msgstr ""

#: src/reference/external-tools.md:274
msgid "Custom subcommands"
msgstr ""

#: src/reference/external-tools.md:276
msgid ""
"Cargo is designed to be extensible with new subcommands without having to "
"modify Cargo itself. This is achieved by translating a cargo invocation of "
"the form cargo `(?<command>[^ ]+)` into an invocation of an external tool "
"`cargo-${command}`. The external tool must be present in one of the user's "
"`$PATH` directories."
msgstr ""

#: src/reference/external-tools.md:282
msgid ""
"**Note**: Cargo defaults to prioritizing external tools in `$CARGO_HOME/bin` "
"over `$PATH`. Users can override this precedence by adding `$CARGO_HOME/bin` "
"to `$PATH`."
msgstr ""

#: src/reference/external-tools.md:286
msgid ""
"When Cargo invokes a custom subcommand, the first argument to the subcommand "
"will be the filename of the custom subcommand, as usual. The second argument "
"will be the subcommand name itself. For example, the second argument would "
"be `${command}` when invoking `cargo-${command}`. Any additional arguments "
"on the command line will be forwarded unchanged."
msgstr ""

#: src/reference/external-tools.md:292
msgid ""
"Cargo can also display the help output of a custom subcommand with `cargo "
"help ${command}`. Cargo assumes that the subcommand will print a help "
"message if its third argument is `--help`. So, `cargo help ${command}` would "
"invoke `cargo-${command} ${command} --help`."
msgstr ""

#: src/reference/external-tools.md:297
msgid ""
"Custom subcommands may use the `CARGO` environment variable to call back to "
"Cargo. Alternatively, it can link to `cargo` crate as a library, but this "
"approach has drawbacks:"
msgstr ""

#: src/reference/external-tools.md:301
msgid "Cargo as a library is unstable: the  API may change without deprecation"
msgstr ""

#: src/reference/external-tools.md:302
msgid ""
"versions of the linked Cargo library may be different from the Cargo binary"
msgstr ""

#: src/reference/external-tools.md:304
msgid ""
"Instead, it is encouraged to use the CLI interface to drive Cargo. The "
"[`cargo metadata`](../commands/cargo-metadata.md) command can be used to "
"obtain information about the current project (the [`cargo_metadata`](https://"
"crates.io/crates/cargo_metadata) crate provides a Rust interface to this "
"command)."
msgstr ""

#: src/reference/registries.md:3
msgid ""
"Cargo installs crates and fetches dependencies from a \"registry\". The "
"default registry is [crates.io](https://crates.io/). A registry contains an "
"\"index\" which contains a searchable list of available crates. A registry "
"may also provide a web API to support publishing new crates directly from "
"Cargo."
msgstr ""

#: src/reference/registries.md:8
msgid ""
"Note: If you are interested in mirroring or vendoring an existing registry, "
"take a look at [Source Replacement](source-replacement.md)."
msgstr ""

#: src/reference/registries.md:11
msgid ""
"If you are implementing a registry server, see [Running a Registry](running-"
"a-registry.md) for more details about the protocol between Cargo and a "
"registry."
msgstr ""

#: src/reference/registries.md:14
msgid ""
"If you're using a registry that requires authentication, see [Registry "
"Authentication](registry-authentication.md). If you are implementing a "
"credential provider, see [Credential Provider Protocol](credential-provider-"
"protocol.md) for details."
msgstr ""

#: src/reference/registries.md:18
msgid "Using an Alternate Registry"
msgstr ""

#: src/reference/registries.md:20
msgid ""
"To use a registry other than [crates.io](https://crates.io/), the name and "
"index URL of the registry must be added to a [`.cargo/config.toml` file]"
"(config.md). The `registries` table has a key for each registry, for example:"
msgstr ""

#: src/reference/registries.md:24
msgid ""
"```toml\n"
"[registries]\n"
"my-registry = { index = \"https://my-intranet:8080/git/index\" }\n"
"```"
msgstr ""

#: src/reference/registries.md:29
msgid ""
"The `index` key should be a URL to a git repository with the registry's "
"index or a Cargo sparse registry URL with the `sparse+` prefix."
msgstr ""

#: src/reference/registries.md:32
msgid ""
"A crate can then depend on a crate from another registry by specifying the "
"`registry` key and a value of the registry's name in that dependency's entry "
"in `Cargo.toml`:"
msgstr ""

#: src/reference/registries.md:36
msgid ""
"```toml\n"
"# Sample Cargo.toml\n"
"[package]\n"
"name = \"my-project\"\n"
"version = \"0.1.0\"\n"
"edition = \"2024\"\n"
"\n"
"[dependencies]\n"
"other-crate = { version = \"1.0\", registry = \"my-registry\" }\n"
"```"
msgstr ""

#: src/reference/registries.md:47
msgid ""
"As with most config values, the index may be specified with an environment "
"variable instead of a config file. For example, setting the following "
"environment variable will accomplish the same thing as defining a config "
"file:"
msgstr ""

#: src/reference/registries.md:51
msgid ""
"```ignore\n"
"CARGO_REGISTRIES_MY_REGISTRY_INDEX=https://my-intranet:8080/git/index\n"
"```"
msgstr ""

#: src/reference/registries.md:55
msgid ""
"Note: [crates.io](https://crates.io/) does not accept packages that depend "
"on crates from other registries."
msgstr ""

#: src/reference/registries.md:58
msgid "Publishing to an Alternate Registry"
msgstr ""

#: src/reference/registries.md:60
msgid ""
"If the registry supports web API access, then packages can be published "
"directly to the registry from Cargo. Several of Cargo's commands such as "
"[`cargo publish`](../commands/cargo-publish.md) take a `--registry` command-"
"line flag to indicate which registry to use. For example, to publish the "
"package in the current directory:"
msgstr ""

#: src/reference/registries.md:65
msgid "`cargo login --registry=my-registry`"
msgstr ""

#: src/reference/registries.md:67
msgid ""
"This only needs to be done once. You must enter the secret API token "
"retrieved from the registry's website. Alternatively the token may be passed "
"directly to the `publish` command with the `--token` command-line flag or an "
"environment variable with the name of the registry such as "
"`CARGO_REGISTRIES_MY_REGISTRY_TOKEN`."
msgstr ""

#: src/reference/registries.md:73
msgid "`cargo publish --registry=my-registry`"
msgstr ""

#: src/reference/registries.md:75
msgid ""
"Instead of always passing the `--registry` command-line option, the default "
"registry may be set in [`.cargo/config.toml`](config.md) with the "
"`registry.default` key. For example:"
msgstr ""

#: src/reference/registries.md:79
msgid ""
"```toml\n"
"[registry]\n"
"default = \"my-registry\"\n"
"```"
msgstr ""

#: src/reference/registries.md:84
msgid ""
"Setting the `package.publish` key in the `Cargo.toml` manifest restricts "
"which registries the package is allowed to be published to. This is useful "
"to prevent accidentally publishing a closed-source package to [crates.io]"
"(https://crates.io/). The value may be a list of registry names, for example:"
msgstr ""

#: src/reference/registries.md:89
msgid ""
"```toml\n"
"[package]\n"
"# ...\n"
"publish = [\"my-registry\"]\n"
"```"
msgstr ""

#: src/reference/registries.md:95
msgid ""
"The `publish` value may also be `false` to restrict all publishing, which is "
"the same as an empty list."
msgstr ""

#: src/reference/registries.md:98
msgid ""
"The authentication information saved by [`cargo login`](../commands/cargo-"
"login.md) is stored in the `credentials.toml` file in the Cargo home "
"directory (default `$HOME/.cargo`). It has a separate table for each "
"registry, for example:"
msgstr ""

#: src/reference/registries.md:102
msgid ""
"```toml\n"
"[registries.my-registry]\n"
"token = \"854DvwSlUwEHtIo3kWy6x7UCPKHfzCmy\"\n"
"```"
msgstr ""

#: src/reference/registries.md:107
msgid "Registry Protocols"
msgstr ""

#: src/reference/registries.md:108
msgid ""
"Cargo supports two remote registry protocols: `git` and `sparse`. If the "
"registry index URL starts with `sparse+`, Cargo uses the sparse protocol. "
"Otherwise Cargo uses the `git` protocol."
msgstr ""

#: src/reference/registries.md:112
msgid ""
"The `git` protocol stores index metadata in a git repository and requires "
"Cargo to clone the entire repo."
msgstr ""

#: src/reference/registries.md:115
msgid ""
"The `sparse` protocol fetches individual metadata files using plain HTTP "
"requests. Since Cargo only downloads the metadata for relevant crates, the "
"`sparse` protocol can save significant time and bandwidth."
msgstr ""

#: src/reference/registries.md:119
msgid ""
"The [crates.io](https://crates.io/) registry supports both protocols. The "
"protocol for crates.io is controlled via the [`registries.crates-"
"io.protocol`](config.md#registriescrates-ioprotocol) config key."
msgstr ""

#: src/reference/registry-authentication.md:2
msgid ""
"Cargo authenticates to registries with credential providers. These "
"credential providers are external executables or built-in providers that "
"Cargo uses to store and retrieve credentials."
msgstr ""

#: src/reference/registry-authentication.md:6
msgid ""
"Using alternative registries with authentication _requires_ a credential "
"provider to be configured to avoid unknowingly storing unencrypted "
"credentials on disk. For historical reasons, public (non-authenticated) "
"registries do not require credential provider configuration, and the "
"`cargo:token` provider is used if no providers are configured."
msgstr ""

#: src/reference/registry-authentication.md:11
msgid ""
"Cargo also includes platform-specific providers that use the operating "
"system to securely store tokens. The `cargo:token` provider is also included "
"which stores credentials in unencrypted plain text in the [credentials]"
"(config.md#credentials) file."
msgstr ""

#: src/reference/registry-authentication.md:15
msgid "Recommended configuration"
msgstr ""

#: src/reference/registry-authentication.md:16
msgid ""
"It's recommended to configure a global credential provider list in "
"`$CARGO_HOME/config.toml` which defaults to:"
msgstr ""

#: src/reference/registry-authentication.md:19
msgid "Unix: `~/.cargo/config.toml`"
msgstr ""

#: src/reference/registry-authentication.md:21
msgid ""
"This recommended configuration uses the operating system provider, with a "
"fallback to `cargo:token` to look in Cargo's [credentials]"
"(config.md#credentials) file or environment variables:"
msgstr ""

#: src/reference/registry-authentication.md:23
msgid ""
"```toml\n"
"# ~/.cargo/config.toml\n"
"[registry]\n"
"global-credential-providers = [\"cargo:token\", \"cargo:libsecret\", "
"\"cargo:macos-keychain\", \"cargo:wincred\"]\n"
"```"
msgstr ""

#: src/reference/registry-authentication.md:28
msgid ""
"_Note that later entries have higher precedence. See [`registry.global-"
"credential-providers`](config.md#registryglobal-credential-providers) for "
"more details._"
msgstr ""

#: src/reference/registry-authentication.md:32
msgid ""
"Some private registries may also recommend a registry-specific credential-"
"provider. Check your registry's documentation to see if this is the case."
msgstr ""

#: src/reference/registry-authentication.md:35
msgid "Built-in providers"
msgstr ""

#: src/reference/registry-authentication.md:36
msgid ""
"Cargo includes several built-in credential providers. The available built-in "
"providers may change in future Cargo releases (though there are currently no "
"plans to do so)."
msgstr ""

#: src/reference/registry-authentication.md:39
msgid "`cargo:token`"
msgstr ""

#: src/reference/registry-authentication.md:40
msgid ""
"Uses Cargo's [credentials](config.md#credentials) file to store tokens "
"unencrypted in plain text. When retrieving tokens, checks the "
"`CARGO_REGISTRIES_<NAME>_TOKEN` environment variable. If this credential "
"provider is not listed, then the `*_TOKEN` environment variables will not "
"work."
msgstr ""

#: src/reference/registry-authentication.md:44
msgid "`cargo:wincred`"
msgstr ""

#: src/reference/registry-authentication.md:45
msgid "Uses the Windows Credential Manager to store tokens."
msgstr ""

#: src/reference/registry-authentication.md:47
msgid ""
"The credentials are stored as `cargo-registry:<index-url>` in the Credential "
"Manager under \"Windows Credentials\"."
msgstr ""

#: src/reference/registry-authentication.md:50
msgid "`cargo:macos-keychain`"
msgstr ""

#: src/reference/registry-authentication.md:51
msgid "Uses the macOS Keychain to store tokens."
msgstr ""

#: src/reference/registry-authentication.md:53
msgid "The Keychain Access app can be used to view stored tokens."
msgstr ""

#: src/reference/registry-authentication.md:55
msgid "`cargo:libsecret`"
msgstr ""

#: src/reference/registry-authentication.md:56
msgid ""
"Uses [libsecret](https://wiki.gnome.org/Projects/Libsecret) to store tokens."
msgstr ""

#: src/reference/registry-authentication.md:58
msgid ""
"Any password manager with libsecret support can be used to view stored "
"tokens. The following are a few examples (non-exhaustive):"
msgstr ""

#: src/reference/registry-authentication.md:61
msgid "[GNOME Keyring](https://wiki.gnome.org/Projects/GnomeKeyring)"
msgstr ""

#: src/reference/registry-authentication.md:62
msgid ""
"[KDE Wallet Manager](https://apps.kde.org/kwalletmanager5/) (since KDE "
"Frameworks 5.97.0)"
msgstr ""

#: src/reference/registry-authentication.md:63
msgid "[KeePassXC](https://keepassxc.org/) (since 2.5.0)"
msgstr ""

#: src/reference/registry-authentication.md:65
msgid "`cargo:token-from-stdout <command> <args>`"
msgstr ""

#: src/reference/registry-authentication.md:66
msgid ""
"Launch a subprocess that returns a token on stdout. Newlines will be trimmed."
msgstr ""

#: src/reference/registry-authentication.md:67
msgid "The process inherits the user's stdin and stderr."
msgstr ""

#: src/reference/registry-authentication.md:68
msgid "It should exit 0 on success, and nonzero on error."
msgstr ""

#: src/reference/registry-authentication.md:69
msgid ""
"[`cargo login`](../commands/cargo-login.md) and [`cargo logout`](../commands/"
"cargo-logout.md) are not supported and return an error if used."
msgstr ""

#: src/reference/registry-authentication.md:71
msgid ""
"The following environment variables will be provided to the executed command:"
msgstr ""

#: src/reference/registry-authentication.md:73
msgid "`CARGO` --- Path to the `cargo` binary executing the command."
msgstr ""

#: src/reference/registry-authentication.md:74
msgid "`CARGO_REGISTRY_INDEX_URL` --- The URL of the registry index."
msgstr ""

#: src/reference/registry-authentication.md:75
msgid ""
"`CARGO_REGISTRY_NAME_OPT` --- Optional name of the registry. Should not be "
"used as a lookup key."
msgstr ""

#: src/reference/registry-authentication.md:77
msgid "Arguments will be passed on to the subcommand."
msgstr ""

#: src/reference/registry-authentication.md:82
msgid "Credential plugins"
msgstr ""

#: src/reference/registry-authentication.md:83
msgid ""
"For credential provider plugins that follow Cargo's [credential provider "
"protocol](credential-provider-protocol.md), the configuration value should "
"be a string with the path to the executable (or the executable name if on "
"the `PATH`)."
msgstr ""

#: src/reference/registry-authentication.md:86
msgid ""
"For example, to install [cargo-credential-1password](https://crates.io/"
"crates/cargo-credential-1password) from crates.io do the following:"
msgstr ""

#: src/reference/registry-authentication.md:89
msgid "Install the provider with `cargo install cargo-credential-1password`"
msgstr ""

#: src/reference/registry-authentication.md:91
msgid ""
"In the config, add to (or create) `registry.global-credential-providers`:"
msgstr ""

#: src/reference/registry-authentication.md:92
msgid ""
"```toml\n"
"[registry]\n"
"global-credential-providers = [\"cargo:token\", \"cargo-credential-1password "
"--account my.1password.com\"]\n"
"```"
msgstr ""

#: src/reference/registry-authentication.md:97
msgid ""
"The values in `global-credential-providers` are split on spaces into path "
"and command-line arguments. To define a global credential provider where the "
"path or arguments contain spaces, use the [`[credential-alias]` table]"
"(config.md#credential-alias)."
msgstr ""

#: src/reference/credential-provider-protocol.md:2
msgid ""
"This document describes information for building a Cargo credential "
"provider. For information on setting up or using a credential provider, see "
"[Registry Authentication](registry-authentication.md)."
msgstr ""

#: src/reference/credential-provider-protocol.md:5
msgid ""
"When using an external credential provider, Cargo communicates with the "
"credential provider using stdin/stdout messages passed as single lines of "
"JSON."
msgstr ""

#: src/reference/credential-provider-protocol.md:8
msgid ""
"Cargo will always execute the credential provider with the `--cargo-plugin` "
"argument. This enables a credential provider executable to have additional "
"functionality beyond what Cargo needs. Additional arguments are included in "
"the JSON via the `args` field."
msgstr ""

#: src/reference/credential-provider-protocol.md:13
msgid ""
"The JSON messages in this document have newlines added for readability. "
"Actual messages must not contain newlines."
msgstr ""

#: src/reference/credential-provider-protocol.md:16
msgid "Credential hello"
msgstr ""

#: src/reference/credential-provider-protocol.md:17
#: src/reference/credential-provider-protocol.md:114
#: src/reference/credential-provider-protocol.md:141
#: src/reference/credential-provider-protocol.md:151
#: src/reference/credential-provider-protocol.md:161
#: src/reference/credential-provider-protocol.md:174
#: src/reference/credential-provider-protocol.md:187
#: src/reference/credential-provider-protocol.md:200
msgid "Sent by: credential provider"
msgstr ""

#: src/reference/credential-provider-protocol.md:18
msgid "Purpose: used to identify the supported protocols on process startup"
msgstr ""

#: src/reference/credential-provider-protocol.md:21
#: src/reference/credential-provider-protocol.md:217
#: src/reference/credential-provider-protocol.md:222
msgid "\"v\""
msgstr ""

#: src/reference/credential-provider-protocol.md:25
msgid ""
"Requests sent by Cargo will include a `v` field set to one of the versions "
"listed here. If Cargo does not support any of the versions offered by the "
"credential provider, it will issue an error and shut down the credential "
"process."
msgstr ""

#: src/reference/credential-provider-protocol.md:29
msgid "Registry information"
msgstr ""

#: src/reference/credential-provider-protocol.md:30
msgid ""
"Sent by: Cargo Not a message by itself. Included in all messages sent by "
"Cargo as the `registry` field."
msgstr ""

#: src/reference/credential-provider-protocol.md:34
msgid ""
"// Index URL of the registry\n"
"    \"index-url\""
msgstr ""

#: src/reference/credential-provider-protocol.md:35
msgid "\"https://github.com/rust-lang/crates.io-index\""
msgstr ""

#: src/reference/credential-provider-protocol.md:36
msgid ""
"// Name of the registry in configuration (optional)\n"
"    \"name\""
msgstr ""

#: src/reference/credential-provider-protocol.md:37
#: src/commands/cargo-metadata.md:210
msgid "\"crates-io\""
msgstr ""

#: src/reference/credential-provider-protocol.md:38
msgid ""
"// HTTP headers received from attempting to access an authenticated registry "
"(optional)\n"
"    \"headers\""
msgstr ""

#: src/reference/credential-provider-protocol.md:39
msgid "\"WWW-Authenticate: cargo\""
msgstr ""

#: src/reference/credential-provider-protocol.md:43
msgid "Login request"
msgstr ""

#: src/reference/credential-provider-protocol.md:44
#: src/reference/credential-provider-protocol.md:72
#: src/reference/credential-provider-protocol.md:90
msgid "Sent by: Cargo"
msgstr ""

#: src/reference/credential-provider-protocol.md:45
msgid "Purpose: collect and store credentials"
msgstr ""

#: src/reference/credential-provider-protocol.md:48
#: src/reference/credential-provider-protocol.md:76
#: src/reference/credential-provider-protocol.md:94
msgid ""
"// Protocol version\n"
"    \"v\""
msgstr ""

#: src/reference/credential-provider-protocol.md:50
msgid ""
"// Action to perform: login\n"
"    \"kind\""
msgstr ""

#: src/reference/credential-provider-protocol.md:51
#: src/reference/credential-provider-protocol.md:146
msgid "\"login\""
msgstr ""

#: src/reference/credential-provider-protocol.md:52
#: src/reference/credential-provider-protocol.md:82
#: src/reference/credential-provider-protocol.md:106
msgid ""
"// Registry information (see Registry information)\n"
"    \"registry\""
msgstr ""

#: src/reference/credential-provider-protocol.md:53
#: src/reference/credential-provider-protocol.md:83
#: src/reference/credential-provider-protocol.md:107
#: src/reference/credential-provider-protocol.md:225
msgid "\"index-url\""
msgstr ""

#: src/reference/credential-provider-protocol.md:53
#: src/reference/credential-provider-protocol.md:83
#: src/reference/credential-provider-protocol.md:107
#: src/reference/credential-provider-protocol.md:225
msgid "\"sparse+https://registry-url/index/\""
msgstr ""

#: src/reference/credential-provider-protocol.md:53
#: src/reference/credential-provider-protocol.md:83
#: src/reference/credential-provider-protocol.md:107
msgid "\"my-registry\""
msgstr ""

#: src/reference/credential-provider-protocol.md:54
msgid ""
"// User-specified token from stdin or command line (optional)\n"
"    \"token\""
msgstr ""

#: src/reference/credential-provider-protocol.md:55
msgid "\"<the token value>\""
msgstr ""

#: src/reference/credential-provider-protocol.md:56
msgid ""
"// URL that the user could visit to get a token (optional)\n"
"    \"login-url\""
msgstr ""

#: src/reference/credential-provider-protocol.md:57
msgid "\"http://registry-url/login\""
msgstr ""

#: src/reference/credential-provider-protocol.md:58
#: src/reference/credential-provider-protocol.md:84
#: src/reference/credential-provider-protocol.md:108
msgid ""
"// Additional command-line args (optional)\n"
"    \"args\""
msgstr ""

#: src/reference/credential-provider-protocol.md:63
msgid ""
"If the `token` field is set, then the credential provider should use the "
"token provided. If the `token` is not set, then the credential provider "
"should prompt the user for a token."
msgstr ""

#: src/reference/credential-provider-protocol.md:66
msgid ""
"In addition to the arguments that may be passed to the credential provider "
"in configuration, `cargo login` also supports passing additional command "
"line args via `cargo login -- <additional args>`. These additional arguments "
"will be included in the `args` field after any args from Cargo configuration."
msgstr ""

#: src/reference/credential-provider-protocol.md:71
msgid "Read request"
msgstr ""

#: src/reference/credential-provider-protocol.md:73
msgid "Purpose: Get the credential for reading crate information"
msgstr ""

#: src/reference/credential-provider-protocol.md:78
#: src/reference/credential-provider-protocol.md:96
msgid ""
"// Request kind: get credentials\n"
"    \"kind\""
msgstr ""

#: src/reference/credential-provider-protocol.md:79
#: src/reference/credential-provider-protocol.md:97
#: src/reference/credential-provider-protocol.md:119
#: src/reference/credential-provider-protocol.md:223
msgid "\"get\""
msgstr ""

#: src/reference/credential-provider-protocol.md:80
msgid ""
"// Action to perform: read crate information\n"
"    \"operation\""
msgstr ""

#: src/reference/credential-provider-protocol.md:81
#: src/reference/credential-provider-protocol.md:224
msgid "\"read\""
msgstr ""

#: src/reference/credential-provider-protocol.md:89
msgid "Publish request"
msgstr ""

#: src/reference/credential-provider-protocol.md:91
msgid "Purpose: Get the credential for publishing a crate"
msgstr ""

#: src/reference/credential-provider-protocol.md:98
msgid ""
"// Action to perform: publish crate\n"
"    \"operation\""
msgstr ""

#: src/reference/credential-provider-protocol.md:99
#: src/commands/cargo-metadata.md:209
msgid "\"publish\""
msgstr ""

#: src/reference/credential-provider-protocol.md:100
msgid ""
"// Crate name\n"
"    \"name\""
msgstr ""

#: src/reference/credential-provider-protocol.md:101
msgid "\"sample\""
msgstr ""

#: src/reference/credential-provider-protocol.md:102
msgid ""
"// Crate version\n"
"    \"vers\""
msgstr ""

#: src/reference/credential-provider-protocol.md:103
#: src/reference/registry-index.md:128 src/reference/registry-web-api.md:80
#: src/commands/cargo-metadata.md:55
msgid "\"0.1.0\""
msgstr ""

#: src/reference/credential-provider-protocol.md:104
msgid ""
"// Crate checksum\n"
"    \"cksum\""
msgstr ""

#: src/reference/credential-provider-protocol.md:105
#: src/reference/credential-provider-protocol.md:121
#: src/reference/credential-provider-protocol.md:231
msgid "\"...\""
msgstr ""

#: src/reference/credential-provider-protocol.md:113
msgid "Get success response"
msgstr ""

#: src/reference/credential-provider-protocol.md:115
msgid "Purpose: Gives the credential to Cargo"
msgstr ""

#: src/reference/credential-provider-protocol.md:117
#: src/reference/credential-provider-protocol.md:144
#: src/reference/credential-provider-protocol.md:154
msgid "\"Ok\""
msgstr ""

#: src/reference/credential-provider-protocol.md:118
msgid ""
"// Response kind: this was a get request\n"
"    \"kind\""
msgstr ""

#: src/reference/credential-provider-protocol.md:120
msgid ""
"// Token to send to the registry\n"
"    \"token\""
msgstr ""

#: src/reference/credential-provider-protocol.md:122
msgid ""
"// Cache control. Can be one of the following:\n"
"    // * \"never\": do not cache\n"
"    // * \"session\": cache for the current cargo session\n"
"    // * \"expires\": cache for the current cargo session until expiration\n"
"    \"cache\""
msgstr ""

#: src/reference/credential-provider-protocol.md:126
msgid "\"expires\""
msgstr ""

#: src/reference/credential-provider-protocol.md:127
msgid ""
"// Unix timestamp (only for \"cache\": \"expires\")\n"
"    \"expiration\""
msgstr ""

#: src/reference/credential-provider-protocol.md:129
msgid ""
"// Is the token operation independent?\n"
"    \"operation_independent\""
msgstr ""

#: src/reference/credential-provider-protocol.md:134
msgid ""
"The `token` will be sent to the registry as the value of the `Authorization` "
"HTTP header."
msgstr ""

#: src/reference/credential-provider-protocol.md:136
msgid ""
"`operation_independent` indicates whether the token can be cached across "
"different operations (such as publishing or fetching). In general, this "
"should be `true` unless the provider wants to generate tokens that are "
"scoped to specific operations."
msgstr ""

#: src/reference/credential-provider-protocol.md:140
msgid "Login success response"
msgstr ""

#: src/reference/credential-provider-protocol.md:142
msgid "Purpose: Indicates the login was successful"
msgstr ""

#: src/reference/credential-provider-protocol.md:145
msgid ""
"// Response kind: this was a login request\n"
"    \"kind\""
msgstr ""

#: src/reference/credential-provider-protocol.md:150
msgid "Logout success response"
msgstr ""

#: src/reference/credential-provider-protocol.md:152
msgid "Purpose: Indicates the logout was successful"
msgstr ""

#: src/reference/credential-provider-protocol.md:155
msgid ""
"// Response kind: this was a logout request\n"
"    \"kind\""
msgstr ""

#: src/reference/credential-provider-protocol.md:156
msgid "\"logout\""
msgstr ""

#: src/reference/credential-provider-protocol.md:160
msgid "Failure response (URL not supported)"
msgstr ""

#: src/reference/credential-provider-protocol.md:162
#: src/reference/credential-provider-protocol.md:175
#: src/reference/credential-provider-protocol.md:188
#: src/reference/credential-provider-protocol.md:201
msgid "Purpose: Gives error information to Cargo"
msgstr ""

#: src/reference/credential-provider-protocol.md:164
#: src/reference/credential-provider-protocol.md:177
#: src/reference/credential-provider-protocol.md:190
#: src/reference/credential-provider-protocol.md:203
msgid "\"Err\""
msgstr ""

#: src/reference/credential-provider-protocol.md:165
msgid "\"url-not-supported\""
msgstr ""

#: src/reference/credential-provider-protocol.md:168
msgid ""
"Sent if the credential provider is designed to only handle specific registry "
"URLs and the given URL is not supported. Cargo will attempt another provider "
"if available."
msgstr ""

#: src/reference/credential-provider-protocol.md:173
msgid "Failure response (not found)"
msgstr ""

#: src/reference/credential-provider-protocol.md:178
#: src/reference/credential-provider-protocol.md:191
msgid ""
"// Error: The credential could not be found in the provider.\n"
"    \"kind\""
msgstr ""

#: src/reference/credential-provider-protocol.md:179
msgid "\"not-found\""
msgstr ""

#: src/reference/credential-provider-protocol.md:182
msgid ""
"Sent if the credential could not be found. This is expected for `get` "
"requests where the credential is not available, or `logout` requests where "
"there is nothing found to erase."
msgstr ""

#: src/reference/credential-provider-protocol.md:186
msgid "Failure response (operation not supported)"
msgstr ""

#: src/reference/credential-provider-protocol.md:192
msgid "\"operation-not-supported\""
msgstr ""

#: src/reference/credential-provider-protocol.md:195
msgid ""
"Sent if the credential provider does not support the requested operation. If "
"a provider only supports `get` and a `login` is requested, the provider "
"should respond with this error."
msgstr ""

#: src/reference/credential-provider-protocol.md:199
msgid "Failure response (other)"
msgstr ""

#: src/reference/credential-provider-protocol.md:204
msgid ""
"// Error: something else has failed\n"
"    \"kind\""
msgstr ""

#: src/reference/credential-provider-protocol.md:205
msgid "\"other\""
msgstr ""

#: src/reference/credential-provider-protocol.md:206
msgid ""
"// Error message string to be displayed\n"
"    \"message\""
msgstr ""

#: src/reference/credential-provider-protocol.md:207
msgid "\"free form string error message\""
msgstr ""

#: src/reference/credential-provider-protocol.md:208
msgid ""
"// Detailed cause chain for the error (optional)\n"
"    \"caused-by\""
msgstr ""

#: src/reference/credential-provider-protocol.md:209
msgid "\"cause 1\""
msgstr ""

#: src/reference/credential-provider-protocol.md:209
msgid "\"cause 2\""
msgstr ""

#: src/reference/credential-provider-protocol.md:213
msgid "Example communication to request a token for reading:"
msgstr ""

#: src/reference/credential-provider-protocol.md:214
msgid "Cargo spawns the credential process, capturing stdin and stdout."
msgstr ""

#: src/reference/credential-provider-protocol.md:215
msgid "Credential process sends the Hello message to Cargo"
msgstr ""

#: src/reference/credential-provider-protocol.md:219
msgid ""
"Cargo sends the CredentialRequest message to the credential process "
"(newlines added for readability)."
msgstr ""

#: src/reference/credential-provider-protocol.md:224
msgid "\"operation\""
msgstr ""

#: src/reference/credential-provider-protocol.md:225
#: src/commands/cargo-metadata.md:126
msgid "\"registry\""
msgstr ""

#: src/reference/credential-provider-protocol.md:228
msgid ""
"Credential process sends the CredentialResponse to Cargo (newlines added for "
"readability)."
msgstr ""

#: src/reference/credential-provider-protocol.md:231
msgid "\"token\""
msgstr ""

#: src/reference/credential-provider-protocol.md:232
msgid "\"cache\""
msgstr ""

#: src/reference/credential-provider-protocol.md:232
msgid "\"session\""
msgstr ""

#: src/reference/credential-provider-protocol.md:233
msgid "\"operation_independent\""
msgstr ""

#: src/reference/credential-provider-protocol.md:236
msgid "Cargo closes the stdin pipe to the credential provider and it exits."
msgstr ""

#: src/reference/credential-provider-protocol.md:237
msgid ""
"Cargo uses the token for the remainder of the session (until Cargo exits) "
"when interacting with this registry."
msgstr ""

#: src/reference/running-a-registry.md:3
msgid ""
"A minimal registry can be implemented by having a git repository that "
"contains an index, and a server that contains the compressed `.crate` files "
"created by [`cargo package`](../commands/cargo-package.md). Users won't be "
"able to use Cargo to publish to it, but this may be sufficient for closed "
"environments. The index format is described in [Registry Index](registry-"
"index.md)."
msgstr ""

#: src/reference/running-a-registry.md:9
msgid ""
"A full-featured registry that supports publishing will additionally need to "
"have a web API service that conforms to the API used by Cargo. The web API "
"is described in [Registry Web API](registry-web-api.md)."
msgstr ""

#: src/reference/running-a-registry.md:13
msgid ""
"Commercial and community projects are available for building and running a "
"registry. See <https://github.com/rust-lang/cargo/wiki/Third-party-"
"registries> for a list of what is available."
msgstr ""

#: src/reference/registry-index.md:1
msgid "Index Format"
msgstr ""

#: src/reference/registry-index.md:3
msgid ""
"The following defines the format of the index. New features are occasionally "
"added, which are only understood starting with the version of Cargo that "
"introduced them. Older versions of Cargo may not be able to use packages "
"that make use of new features. However, the format for older packages should "
"not change, so older versions of Cargo should be able to use them."
msgstr ""

#: src/reference/registry-index.md:9
msgid "Index Configuration"
msgstr ""

#: src/reference/registry-index.md:10
msgid ""
"The root of the index contains a file named `config.json` which contains "
"JSON information used by Cargo for accessing the registry. This is an "
"example of what the [crates.io](https://crates.io/) config file looks like:"
msgstr ""

#: src/reference/registry-index.md:16
msgid "\"dl\""
msgstr ""

#: src/reference/registry-index.md:16
msgid "\"https://crates.io/api/v1/crates\""
msgstr ""

#: src/reference/registry-index.md:17
msgid "\"api\""
msgstr ""

#: src/reference/registry-index.md:17
msgid "\"https://crates.io\""
msgstr ""

#: src/reference/registry-index.md:21
msgid "The keys are:"
msgstr ""

#: src/reference/registry-index.md:22
msgid ""
"`dl`: This is the URL for downloading crates listed in the index. The value "
"may have the following markers which will be replaced with their "
"corresponding value:"
msgstr ""

#: src/reference/registry-index.md:26
msgid "`{crate}`: The name of crate."
msgstr ""

#: src/reference/registry-index.md:27
msgid "`{version}`: The crate version."
msgstr ""

#: src/reference/registry-index.md:28
msgid ""
"`{prefix}`: A directory prefix computed from the crate name. For example, a "
"crate named `cargo` has a prefix of `ca/rg`. See below for details."
msgstr ""

#: src/reference/registry-index.md:30
msgid "`{lowerprefix}`: Lowercase variant of `{prefix}`."
msgstr ""

#: src/reference/registry-index.md:31
msgid "`{sha256-checksum}`: The crate's sha256 checksum."
msgstr ""

#: src/reference/registry-index.md:33
msgid ""
"If none of the markers are present, then the value `/{crate}/{version}/"
"download` is appended to the end."
msgstr ""

#: src/reference/registry-index.md:35
msgid ""
"`api`: This is the base URL for the web API. This key is optional, but if it "
"is not specified, commands such as [`cargo publish`](../commands/cargo-"
"publish.md) will not work. The web API is described below."
msgstr ""

#: src/reference/registry-index.md:38
msgid ""
"`auth-required`: indicates whether this is a private registry that requires "
"all operations to be authenticated including API requests, crate downloads "
"and sparse index updates."
msgstr ""

#: src/reference/registry-index.md:43
msgid "Download Endpoint"
msgstr ""

#: src/reference/registry-index.md:44
msgid ""
"The download endpoint should send the `.crate` file for the requested "
"package. Cargo supports https, http, and file URLs, HTTP redirects, HTTP1 "
"and HTTP2. The exact specifics of TLS support depend on the platform that "
"Cargo is running on, the version of Cargo, and how it was compiled."
msgstr ""

#: src/reference/registry-index.md:49
msgid ""
"If `auth-required: true` is set in `config.json`, the `Authorization` header "
"will be included with http(s) download requests."
msgstr ""

#: src/reference/registry-index.md:52
msgid "Index files"
msgstr ""

#: src/reference/registry-index.md:53
msgid ""
"The rest of the index repository contains one file for each package, where "
"the filename is the name of the package in lowercase. Each version of the "
"package has a separate line in the file. The files are organized in a tier "
"of directories:"
msgstr ""

#: src/reference/registry-index.md:58
msgid "Packages with 1 character names are placed in a directory named `1`."
msgstr ""

#: src/reference/registry-index.md:59
msgid "Packages with 2 character names are placed in a directory named `2`."
msgstr ""

#: src/reference/registry-index.md:60
msgid ""
"Packages with 3 character names are placed in the directory `3/{first-"
"character}` where `{first-character}` is the first character of the package "
"name."
msgstr ""

#: src/reference/registry-index.md:63
msgid ""
"All other packages are stored in directories named `{first-two}/{second-two}"
"` where the top directory is the first two characters of the package name, "
"and the next subdirectory is the third and fourth characters of the package "
"name. For example, `cargo` would be stored in a file named `ca/rg/cargo`."
msgstr ""

#: src/reference/registry-index.md:69
msgid ""
"Note: Although the index filenames are in lowercase, the fields that contain "
"package names in `Cargo.toml` and the index JSON data are case-sensitive and "
"may contain upper and lower case characters."
msgstr ""

#: src/reference/registry-index.md:73
msgid ""
"The directory name above is calculated based on the package name converted "
"to lowercase; it is represented by the marker `{lowerprefix}`.  When the "
"original package name is used without case conversion, the resulting "
"directory name is represented by the marker `{prefix}`.  For example, the "
"package `MyCrate` would have a `{prefix}` of `My/Cr` and a `{lowerprefix}` "
"of `my/cr`.  In general, using `{prefix}` is recommended over `{lowerprefix}"
"`, but there are pros and cons to each choice.  Using `{prefix}` on case-"
"insensitive filesystems results in (harmless-but-inelegant) directory "
"aliasing.  For example, `crate` and `CrateTwo` have `{prefix}` values of `cr/"
"at` and `Cr/at`; these are distinct on Unix machines but alias to the same "
"directory on Windows.  Using directories with normalized case avoids "
"aliasing, but on case-sensitive filesystems it's harder to support older "
"versions of Cargo that lack `{prefix}`/`{lowerprefix}`. For example, nginx "
"rewrite rules can easily construct `{prefix}` but can't perform case-"
"conversion to construct `{lowerprefix}`."
msgstr ""

#: src/reference/registry-index.md:88
msgid "Name restrictions"
msgstr ""

#: src/reference/registry-index.md:90
msgid ""
"Registries should consider enforcing limitations on package names added to "
"their index. Cargo itself allows names with any [alphanumeric](../../std/"
"primitive.char.html#method.is_alphanumeric), `-`, or `_` characters. "
"[crates.io](https://crates.io/) imposes its own limitations, including the "
"following:"
msgstr ""

#: src/reference/registry-index.md:94
msgid "Only allows ASCII characters."
msgstr ""

#: src/reference/registry-index.md:95
msgid "Only alphanumeric, `-`, and `_` characters."
msgstr ""

#: src/reference/registry-index.md:96
msgid "First character must be alphabetic."
msgstr ""

#: src/reference/registry-index.md:97
msgid "Case-insensitive collision detection."
msgstr ""

#: src/reference/registry-index.md:98
msgid "Prevent differences of `-` vs `_`."
msgstr ""

#: src/reference/registry-index.md:99
msgid "Under a specific length (max 64)."
msgstr ""

#: src/reference/registry-index.md:100
msgid "Rejects reserved names, such as Windows special filenames like \"nul\"."
msgstr ""

#: src/reference/registry-index.md:102
msgid ""
"Registries should consider incorporating similar restrictions, and consider "
"the security implications, such as [IDN homograph attacks](https://"
"en.wikipedia.org/wiki/IDN_homograph_attack) and other concerns in [UTR36]"
"(https://www.unicode.org/reports/tr36/) and [UTS39](https://www.unicode.org/"
"reports/tr39/)."
msgstr ""

#: src/reference/registry-index.md:108
msgid "Version uniqueness"
msgstr ""

#: src/reference/registry-index.md:110
msgid ""
"Indexes _must_ ensure that each version only appears once for each package. "
"This includes ignoring SemVer build metadata. For example, the index must "
"_not_ contain two entries with a version `1.0.7` and `1.0.7+extra`."
msgstr ""

#: src/reference/registry-index.md:114
msgid "JSON schema"
msgstr ""

#: src/reference/registry-index.md:116
msgid ""
"Each line in a package file contains a JSON object that describes a "
"published version of the package. The following is a pretty-printed example "
"with comments explaining the format of the entry."
msgstr ""

#: src/reference/registry-index.md:122
msgid ""
"// The name of the package.\n"
"    // This must only contain alphanumeric, `-`, or `_` characters.\n"
"    \"name\""
msgstr ""

#: src/reference/registry-index.md:125
msgid ""
"// The version of the package this row is describing.\n"
"    // This must be a valid version number according to the Semantic\n"
"    // Versioning 2.0.0 spec at https://semver.org/.\n"
"    \"vers\""
msgstr ""

#: src/reference/registry-index.md:129 src/reference/registry-web-api.md:81
msgid ""
"// Array of direct dependencies of the package.\n"
"    \"deps\""
msgstr ""

#: src/reference/registry-index.md:132
msgid ""
"// Name of the dependency.\n"
"            // If the dependency is renamed from the original package name,\n"
"            // this is the new name. The original package name is stored in\n"
"            // the `package` field.\n"
"            \"name\""
msgstr ""

#: src/reference/registry-index.md:136 src/reference/registry-web-api.md:88
#: src/reference/registry-web-api.md:334
msgid "\"rand\""
msgstr ""

#: src/reference/registry-index.md:137
msgid ""
"// The SemVer requirement for this dependency.\n"
"            // This must be a valid version requirement defined at\n"
"            // https://doc.rust-lang.org/cargo/reference/specifying-"
"dependencies.html.\n"
"            \"req\""
msgstr ""

#: src/reference/registry-index.md:140 src/reference/registry-web-api.md:90
msgid "\"^0.6\""
msgstr ""

#: src/reference/registry-index.md:141
msgid ""
"// Array of features (as strings) enabled for this dependency.\n"
"            // May be omitted since Cargo 1.84.\n"
"            \"features\""
msgstr ""

#: src/reference/registry-index.md:143 src/reference/registry-web-api.md:92
msgid "\"i128_support\""
msgstr ""

#: src/reference/registry-index.md:144
msgid ""
"// Boolean of whether or not this is an optional dependency.\n"
"            // Since Cargo 1.84, defaults to `false` if not specified.\n"
"            \"optional\""
msgstr ""

#: src/reference/registry-index.md:147
msgid ""
"// Boolean of whether or not default features are enabled.\n"
"            // Since Cargo 1.84, defaults to `true` if not specified.\n"
"            \"default_features\""
msgstr ""

#: src/reference/registry-index.md:150
msgid ""
"// The target platform for the dependency.\n"
"            // If not specified or `null`, it is not a target dependency.\n"
"            // Otherwise, a string such as \"cfg(windows)\".\n"
"            \"target\""
msgstr ""

#: src/reference/registry-index.md:154
msgid ""
"// The dependency kind.\n"
"            // \"dev\", \"build\", or \"normal\".\n"
"            // If not specified or `null`, it defaults to \"normal\".\n"
"            \"kind\""
msgstr ""

#: src/reference/registry-index.md:157 src/reference/registry-web-api.md:103
msgid "\"normal\""
msgstr ""

#: src/reference/registry-index.md:158
msgid ""
"// The URL of the index of the registry where this dependency is\n"
"            // from as a string. If not specified or `null`, it is assumed "
"the\n"
"            // dependency is in the current registry.\n"
"            \"registry\""
msgstr ""

#: src/reference/registry-index.md:162
msgid ""
"// If the dependency is renamed, this is a string of the actual\n"
"            // package name. If not specified or `null`, this dependency is "
"not\n"
"            // renamed.\n"
"            \"package\""
msgstr ""

#: src/reference/registry-index.md:168
msgid ""
"// A SHA256 checksum of the `.crate` file.\n"
"    \"cksum\""
msgstr ""

#: src/reference/registry-index.md:169
msgid "\"d867001db0e2b6e0496f9fac96930e2d42233ecd3ca0413e0753d4c7695d289c\""
msgstr ""

#: src/reference/registry-index.md:170
msgid ""
"// Set of features defined for the package.\n"
"    // Each feature maps to an array of features or dependencies it "
"enables.\n"
"    // May be omitted since Cargo 1.84.\n"
"    \"features\""
msgstr ""

#: src/reference/registry-index.md:174 src/reference/registry-web-api.md:119
msgid "\"extras\""
msgstr ""

#: src/reference/registry-index.md:174 src/reference/registry-web-api.md:119
msgid "\"rand/simd_support\""
msgstr ""

#: src/reference/registry-index.md:176
msgid ""
"// Boolean of whether or not this version has been yanked.\n"
"    \"yanked\""
msgstr ""

#: src/reference/registry-index.md:178 src/reference/registry-web-api.md:161
msgid ""
"// The `links` string value from the package's manifest, or null if not\n"
"    // specified. This field is optional and defaults to null.\n"
"    \"links\""
msgstr ""

#: src/reference/registry-index.md:181
msgid ""
"// An unsigned 32-bit integer value indicating the schema version of this\n"
"    // entry.\n"
"    //\n"
"    // If this is not specified, it should be interpreted as the default of "
"1.\n"
"    //\n"
"    // Cargo (starting with version 1.51) will ignore versions it does not\n"
"    // recognize. This provides a method to safely introduce changes to "
"index\n"
"    // entries and allow older versions of cargo to ignore newer entries it\n"
"    // doesn't understand. Versions older than 1.51 ignore this field, and\n"
"    // thus may misinterpret the meaning of the index entry.\n"
"    //\n"
"    // The current values are:\n"
"    //\n"
"    // * 1: The schema as documented here, not including newer additions.\n"
"    //      This is honored in Rust version 1.51 and newer.\n"
"    // * 2: The addition of the `features2` field.\n"
"    //      This is honored in Rust version 1.60 and newer.\n"
"    \"v\""
msgstr ""

#: src/reference/registry-index.md:199
msgid ""
"// This optional field contains features with new, extended syntax.\n"
"    // Specifically, namespaced features (`dep:`) and weak dependencies\n"
"    // (`pkg?/feat`).\n"
"    //\n"
"    // This is separated from `features` because versions older than 1.19\n"
"    // will fail to load due to not being able to parse the new syntax, "
"even\n"
"    // with a `Cargo.lock` file.\n"
"    //\n"
"    // Cargo will merge any values listed here with the \"features\" field.\n"
"    //\n"
"    // If this field is included, the \"v\" field should be set to at least "
"2.\n"
"    //\n"
"    // Registries are not required to use this field for extended feature\n"
"    // syntax, they are allowed to include those in the \"features\" field.\n"
"    // Using this is only necessary if the registry wants to support cargo\n"
"    // versions older than 1.19, which in practice is only crates.io since\n"
"    // those older versions do not support other registries.\n"
"    \"features2\""
msgstr ""

#: src/reference/registry-index.md:217
msgid "\"serde\""
msgstr ""

#: src/reference/registry-index.md:217
msgid "\"dep:serde\""
msgstr ""

#: src/reference/registry-index.md:217
msgid "\"chrono?/serde\""
msgstr ""

#: src/reference/registry-index.md:219 src/reference/registry-web-api.md:164
msgid ""
"// The minimal supported Rust version (optional)\n"
"    // This must be a valid version requirement without an operator (e.g. no "
"`=`)\n"
"    \"rust_version\""
msgstr ""

#: src/reference/registry-index.md:221
msgid "\"1.60\""
msgstr ""

#: src/reference/registry-index.md:225
msgid ""
"The JSON objects should not be modified after they are added except for the "
"`yanked` field whose value may change at any time."
msgstr ""

#: src/reference/registry-index.md:228
msgid ""
"**Note**: The index JSON format has subtle differences from the JSON format "
"of the [Publish API](registry-web-api.md#publish) and [`cargo metadata`](../"
"commands/cargo-metadata.md). If you are using one of those as a source to "
"generate index entries, you are encouraged to carefully inspect the "
"documentation differences between them."
msgstr ""

#: src/reference/registry-index.md:231
msgid ""
"For the [Publish API](registry-web-api.md#publish), the differences are:"
msgstr ""

#: src/reference/registry-index.md:233 src/reference/registry-index.md:250
msgid "`deps`"
msgstr ""

#: src/reference/registry-index.md:234
msgid ""
"`name` --- When the dependency is [renamed](specifying-"
"dependencies.md#renaming-dependencies-in-cargotoml) in `Cargo.toml`, the "
"publish API puts the original package name in the `name` field and the "
"aliased name in the `explicit_name_in_toml` field. The index places the "
"aliased name in the `name` field, and the original package name in the "
"`package` field."
msgstr ""

#: src/reference/registry-index.md:236
msgid "`req` --- The Publish API field is called `version_req`."
msgstr ""

#: src/reference/registry-index.md:237
msgid ""
"`cksum` --- The publish API does not specify the checksum, it must be "
"computed by the registry before adding to the index."
msgstr ""

#: src/reference/registry-index.md:238
msgid ""
"`features` --- Some features may be placed in the `features2` field. Note: "
"This is only a legacy requirement for [crates.io](https://crates.io/); other "
"registries should not need to bother with modifying the features map. The "
"`v` field indicates the presence of the `features2` field."
msgstr ""

#: src/reference/registry-index.md:241
msgid ""
"The publish API includes several other fields, such as `description` and "
"`readme`, which don't appear in the index. These are intended to make it "
"easier for a registry to obtain the metadata about the crate to display on a "
"website without needing to extract and parse the `.crate` file. This "
"additional information is typically added to a database on the registry "
"server."
msgstr ""

#: src/reference/registry-index.md:244
msgid ""
"Although `rust_version` is included here, [crates.io](https://crates.io/) "
"will ignore this field and instead read it from the `Cargo.toml` contained "
"in the `.crate` file."
msgstr ""

#: src/reference/registry-index.md:247
msgid ""
"For [`cargo metadata`](../commands/cargo-metadata.md), the differences are:"
msgstr ""

#: src/reference/registry-index.md:249
msgid "`vers` --- The `cargo metadata` field is called `version`."
msgstr ""

#: src/reference/registry-index.md:251
msgid ""
"`name` --- When the dependency is [renamed](specifying-"
"dependencies.md#renaming-dependencies-in-cargotoml) in `Cargo.toml`, `cargo "
"metadata` puts the original package name in the `name` field and the aliased "
"name in the `rename` field. The index places the aliased name in the `name` "
"field, and the original package name in the `package` field."
msgstr ""

#: src/reference/registry-index.md:253
msgid ""
"`default_features` --- The `cargo metadata` field is called "
"`uses_default_features`."
msgstr ""

#: src/reference/registry-index.md:254
msgid ""
"`registry` --- `cargo metadata` uses a value of `null` to indicate that the "
"dependency comes from [crates.io](https://crates.io/). The index uses a "
"value of `null` to indicate that the dependency comes from the same registry "
"as the index. When creating an index entry, a registry other than [crates.io]"
"(https://crates.io/) should translate a value of `null` to be `https://"
"github.com/rust-lang/crates.io-index` and translate a URL that matches the "
"current index to be `null`."
msgstr ""

#: src/reference/registry-index.md:257
msgid ""
"`cargo metadata` includes some extra fields, such as `source` and `path`."
msgstr ""

#: src/reference/registry-index.md:258
msgid ""
"The index includes additional fields such as `yanked`, `cksum`, and `v`."
msgstr ""

#: src/reference/registry-index.md:264
msgid "Index Protocols"
msgstr ""

#: src/reference/registry-index.md:265
msgid ""
"Cargo supports two remote registry protocols: `git` and `sparse`. The `git` "
"protocol stores index files in a git repository and the `sparse` protocol "
"fetches individual files over HTTP."
msgstr ""

#: src/reference/registry-index.md:269
msgid "Git Protocol"
msgstr ""

#: src/reference/registry-index.md:270
msgid ""
"The git protocol has no protocol prefix in the index url. For example the "
"git index URL for [crates.io](https://crates.io/) is `https://github.com/"
"rust-lang/crates.io-index`."
msgstr ""

#: src/reference/registry-index.md:273
msgid ""
"Cargo caches the git repository on disk so that it can efficiently "
"incrementally fetch updates."
msgstr ""

#: src/reference/registry-index.md:276
msgid "Sparse Protocol"
msgstr ""

#: src/reference/registry-index.md:277
msgid ""
"The sparse protocol uses the `sparse+` protocol prefix in the registry URL. "
"For example, the sparse index URL for [crates.io](https://crates.io/) is "
"`sparse+https://index.crates.io/`."
msgstr ""

#: src/reference/registry-index.md:280
msgid ""
"The sparse protocol downloads each index file using an individual HTTP "
"request. Since this results in a large number of small HTTP requests, "
"performance is significantly improved with a server that supports pipelining "
"and HTTP/2."
msgstr ""

#: src/reference/registry-index.md:284
msgid "Sparse authentication"
msgstr ""

#: src/reference/registry-index.md:285
msgid ""
"Cargo will attempt to fetch the `config.json` file before fetching any other "
"files. If the server responds with an HTTP 401, then Cargo will assume that "
"the registry requires authentication and re-attempt the request for "
"`config.json` with the authentication token included."
msgstr ""

#: src/reference/registry-index.md:290
msgid ""
"On authentication failure (or a missing authentication token) the server may "
"include a `www-authenticate` header with a `Cargo login_url=\"<URL>\"` "
"challenge to indicate where the user can go to get a token."
msgstr ""

#: src/reference/registry-index.md:294
msgid ""
"Registries that require authentication must set `auth-required: true` in "
"`config.json`."
msgstr ""

#: src/reference/registry-index.md:296
msgid "Caching"
msgstr ""

#: src/reference/registry-index.md:297
msgid ""
"Cargo caches the crate metadata files, and captures the `ETag` or `Last-"
"Modified` HTTP header from the server for each entry. When refreshing crate "
"metadata, Cargo sends the `If-None-Match` or `If-Modified-Since` header to "
"allow the server to respond with HTTP 304 \"Not Modified\" if the local "
"cache is valid, saving time and bandwidth. If both `ETag` and `Last-"
"Modified` headers are present, Cargo uses the `ETag` only."
msgstr ""

#: src/reference/registry-index.md:303
msgid "Cache Invalidation"
msgstr ""

#: src/reference/registry-index.md:304
msgid ""
"If a registry is using some kind of CDN or proxy which caches access to the "
"index files, then it is recommended that registries implement some form of "
"cache invalidation when the files are updated. If these caches are not "
"updated, then users may not be able to access new crates until the cache is "
"cleared."
msgstr ""

#: src/reference/registry-index.md:309
msgid "Nonexistent Crates"
msgstr ""

#: src/reference/registry-index.md:310
msgid ""
"For crates that do not exist, the registry should respond with a 404 \"Not "
"Found\", 410 \"Gone\" or 451 \"Unavailable For Legal Reasons\" code."
msgstr ""

#: src/reference/registry-index.md:313
msgid "Sparse Limitations"
msgstr ""

#: src/reference/registry-index.md:314
msgid ""
"Since the URL of the registry is stored in the lockfile, it's not "
"recommended to offer a registry with both protocols. Discussion about a "
"transition plan is ongoing in issue [\\#10964](https://github.com/rust-lang/"
"cargo/issues/10964). The [crates.io](https://crates.io/) registry is an "
"exception, since Cargo internally substitutes the equivalent git URL when "
"the sparse protocol is used."
msgstr ""

#: src/reference/registry-index.md:319
msgid ""
"If a registry does offer both protocols, it's currently recommended to "
"choose one protocol as the canonical protocol and use [source replacement]"
"(../reference/source-replacement.md) for the other protocol."
msgstr ""

#: src/reference/registry-web-api.md:1
msgid "Web API"
msgstr ""

#: src/reference/registry-web-api.md:3
msgid ""
"A registry may host a web API at the location defined in `config.json` to "
"support any of the actions listed below."
msgstr ""

#: src/reference/registry-web-api.md:6
msgid ""
"Cargo includes the `Authorization` header for requests that require "
"authentication. The header value is the API token. The server should respond "
"with a 403 response code if the token is not valid. Users are expected to "
"visit the registry's website to obtain a token, and Cargo can store the "
"token using the [`cargo login`](../commands/cargo-login.md) command, or by "
"passing the token on the command-line."
msgstr ""

#: src/reference/registry-web-api.md:13
msgid ""
"Responses use a 2xx response code for success. Errors should use an "
"appropriate response code, such as 404. Failure responses should have a JSON "
"object with the following structure:"
msgstr ""

#: src/reference/registry-web-api.md:20
msgid ""
"// Array of errors to display to the user.\n"
"    \"errors\""
msgstr ""

#: src/reference/registry-web-api.md:23
msgid ""
"// The error message as a string.\n"
"            \"detail\""
msgstr ""

#: src/reference/registry-web-api.md:24
msgid "\"error message text\""
msgstr ""

#: src/reference/registry-web-api.md:30
msgid ""
"If the response has this structure Cargo will display the detailed message "
"to the user, even if the response code is 200. If the response code "
"indicates an error and the content does not have this structure, Cargo will "
"display to the user a message intended to help debugging the server error. A "
"server returning an `errors` object allows a registry to provide a more "
"detailed or user-centric error message."
msgstr ""

#: src/reference/registry-web-api.md:35
msgid ""
"For backwards compatibility, servers should ignore any unexpected query "
"parameters or JSON fields. If a JSON field is missing, it should be assumed "
"to be null. The endpoints are versioned with the `v1` component of the path, "
"and Cargo is responsible for handling backwards compatibility fallbacks "
"should any be required in the future."
msgstr ""

#: src/reference/registry-web-api.md:41
msgid "Cargo sets the following headers for all requests:"
msgstr ""

#: src/reference/registry-web-api.md:43
msgid "`Content-Type`: `application/json` (for requests with a body payload)"
msgstr ""

#: src/reference/registry-web-api.md:44
msgid "`Accept`: `application/json`"
msgstr ""

#: src/reference/registry-web-api.md:45
msgid ""
"`User-Agent`: The Cargo version such as `cargo/1.32.0 (8610973aa "
"2019-01-02)`. This may be modified by the user in a configuration value. "
"Added in 1.29."
msgstr ""

#: src/reference/registry-web-api.md:49
msgid "Publish"
msgstr ""

#: src/reference/registry-web-api.md:51
msgid "Endpoint: `/api/v1/crates/new`"
msgstr ""

#: src/reference/registry-web-api.md:52 src/reference/registry-web-api.md:207
#: src/reference/registry-web-api.md:260
msgid "Method: PUT"
msgstr ""

#: src/reference/registry-web-api.md:53 src/reference/registry-web-api.md:190
#: src/reference/registry-web-api.md:208 src/reference/registry-web-api.md:234
#: src/reference/registry-web-api.md:261 src/reference/registry-web-api.md:292
msgid "Authorization: Included"
msgstr ""

#: src/reference/registry-web-api.md:55
msgid ""
"The publish endpoint is used to publish a new version of a crate. The server "
"should validate the crate, make it available for download, and add it to the "
"index."
msgstr ""

#: src/reference/registry-web-api.md:59
msgid ""
"It is not required for the index to be updated before the successful "
"response is sent. After a successful response, Cargo will poll the index for "
"a short period of time to identify that the new crate has been added. If the "
"crate does not appear in the index after a short period of time, then Cargo "
"will display a warning letting the user know that the new crate is not yet "
"available."
msgstr ""

#: src/reference/registry-web-api.md:63
msgid "The body of the data sent by Cargo is:"
msgstr ""

#: src/reference/registry-web-api.md:65
msgid "32-bit unsigned little-endian integer of the length of JSON data."
msgstr ""

#: src/reference/registry-web-api.md:66
msgid "Metadata of the package as a JSON object."
msgstr ""

#: src/reference/registry-web-api.md:67
msgid ""
"32-bit unsigned little-endian integer of the length of the `.crate` file."
msgstr ""

#: src/reference/registry-web-api.md:68
msgid "The `.crate` file."
msgstr ""

#: src/reference/registry-web-api.md:70
msgid ""
"The following is a commented example of the JSON object. Some notes of some "
"restrictions imposed by [crates.io](https://crates.io/) are included only to "
"illustrate some suggestions on types of validation that may be done, and "
"should not be considered as an exhaustive list of restrictions [crates.io]"
"(https://crates.io/) imposes."
msgstr ""

#: src/reference/registry-web-api.md:77
msgid ""
"// The name of the package.\n"
"    \"name\""
msgstr ""

#: src/reference/registry-web-api.md:79
msgid ""
"// The version of the package being published.\n"
"    \"vers\""
msgstr ""

#: src/reference/registry-web-api.md:84
msgid ""
"// Name of the dependency.\n"
"            // If the dependency is renamed from the original package name,\n"
"            // this is the original name. The new package name is stored in\n"
"            // the `explicit_name_in_toml` field.\n"
"            \"name\""
msgstr ""

#: src/reference/registry-web-api.md:89
msgid ""
"// The semver requirement for this dependency.\n"
"            \"version_req\""
msgstr ""

#: src/reference/registry-web-api.md:91
msgid ""
"// Array of features (as strings) enabled for this dependency.\n"
"            \"features\""
msgstr ""

#: src/reference/registry-web-api.md:93
msgid ""
"// Boolean of whether or not this is an optional dependency.\n"
"            \"optional\""
msgstr ""

#: src/reference/registry-web-api.md:95
msgid ""
"// Boolean of whether or not default features are enabled.\n"
"            \"default_features\""
msgstr ""

#: src/reference/registry-web-api.md:97
msgid ""
"// The target platform for the dependency.\n"
"            // null if not a target dependency.\n"
"            // Otherwise, a string such as \"cfg(windows)\".\n"
"            \"target\""
msgstr ""

#: src/reference/registry-web-api.md:101
msgid ""
"// The dependency kind.\n"
"            // \"dev\", \"build\", or \"normal\".\n"
"            \"kind\""
msgstr ""

#: src/reference/registry-web-api.md:104
msgid ""
"// The URL of the index of the registry where this dependency is\n"
"            // from as a string. If not specified or null, it is assumed "
"the\n"
"            // dependency is in the current registry.\n"
"            \"registry\""
msgstr ""

#: src/reference/registry-web-api.md:108
msgid ""
"// If the dependency is renamed, this is a string of the new\n"
"            // package name. If not specified or null, this dependency is "
"not\n"
"            // renamed.\n"
"            \"explicit_name_in_toml\""
msgstr ""

#: src/reference/registry-web-api.md:114
msgid ""
"// Set of features defined for the package.\n"
"    // Each feature maps to an array of features or dependencies it "
"enables.\n"
"    // Cargo does not impose limitations on feature names, but crates.io\n"
"    // requires alphanumeric ASCII, `_` or `-` characters.\n"
"    \"features\""
msgstr ""

#: src/reference/registry-web-api.md:121
msgid ""
"// List of strings of the authors.\n"
"    // May be empty.\n"
"    \"authors\""
msgstr ""

#: src/reference/registry-web-api.md:123
msgid "\"Alice <a@example.com>\""
msgstr ""

#: src/reference/registry-web-api.md:124
msgid ""
"// Description field from the manifest.\n"
"    // May be null. crates.io requires at least some content.\n"
"    \"description\""
msgstr ""

#: src/reference/registry-web-api.md:127
msgid ""
"// String of the URL to the website for this package's documentation.\n"
"    // May be null.\n"
"    \"documentation\""
msgstr ""

#: src/reference/registry-web-api.md:130
msgid ""
"// String of the URL to the website for this package's home page.\n"
"    // May be null.\n"
"    \"homepage\""
msgstr ""

#: src/reference/registry-web-api.md:133
msgid ""
"// String of the content of the README file.\n"
"    // May be null.\n"
"    \"readme\""
msgstr ""

#: src/reference/registry-web-api.md:136
msgid ""
"// String of a relative path to a README file in the crate.\n"
"    // May be null.\n"
"    \"readme_file\""
msgstr ""

#: src/reference/registry-web-api.md:139
msgid ""
"// Array of strings of keywords for the package.\n"
"    \"keywords\""
msgstr ""

#: src/reference/registry-web-api.md:141
msgid ""
"// Array of strings of categories for the package.\n"
"    \"categories\""
msgstr ""

#: src/reference/registry-web-api.md:143
msgid ""
"// String of the license for the package.\n"
"    // May be null. crates.io requires either `license` or `license_file` to "
"be set.\n"
"    \"license\""
msgstr ""

#: src/reference/registry-web-api.md:146
msgid ""
"// String of a relative path to a license file in the crate.\n"
"    // May be null.\n"
"    \"license_file\""
msgstr ""

#: src/reference/registry-web-api.md:149
msgid ""
"// String of the URL to the website for the source repository of this "
"package.\n"
"    // May be null.\n"
"    \"repository\""
msgstr ""

#: src/reference/registry-web-api.md:152
msgid ""
"// Optional object of \"status\" badges. Each value is an object of\n"
"    // arbitrary string to string mappings.\n"
"    // crates.io has special interpretation of the format of the badges.\n"
"    \"badges\""
msgstr ""

#: src/reference/registry-web-api.md:156
msgid "\"travis-ci\""
msgstr ""

#: src/reference/registry-web-api.md:157
msgid "\"branch\""
msgstr ""

#: src/reference/registry-web-api.md:157
msgid "\"master\""
msgstr ""

#: src/reference/registry-web-api.md:158 src/commands/cargo-metadata.md:233
msgid "\"repository\""
msgstr ""

#: src/reference/registry-web-api.md:158
msgid "\"rust-lang/cargo\""
msgstr ""

#: src/reference/registry-web-api.md:170 src/reference/registry-web-api.md:195
#: src/reference/registry-web-api.md:213 src/reference/registry-web-api.md:238
#: src/reference/registry-web-api.md:277 src/reference/registry-web-api.md:304
#: src/reference/registry-web-api.md:326
msgid "A successful response includes the JSON object:"
msgstr ""

#: src/reference/registry-web-api.md:174
msgid ""
"// Optional object of warnings to display to the user.\n"
"    \"warnings\""
msgstr ""

#: src/reference/registry-web-api.md:176
msgid ""
"// Array of strings of categories that are invalid and ignored.\n"
"        \"invalid_categories\""
msgstr ""

#: src/reference/registry-web-api.md:178
msgid ""
"// Array of strings of badge names that are invalid and ignored.\n"
"        \"invalid_badges\""
msgstr ""

#: src/reference/registry-web-api.md:180
msgid ""
"// Array of strings of arbitrary warnings to display to the user.\n"
"        \"other\""
msgstr ""

#: src/reference/registry-web-api.md:186
msgid "Yank"
msgstr ""

#: src/reference/registry-web-api.md:188
msgid "Endpoint: `/api/v1/crates/{crate_name}/{version}/yank`"
msgstr ""

#: src/reference/registry-web-api.md:189 src/reference/registry-web-api.md:291
msgid "Method: DELETE"
msgstr ""

#: src/reference/registry-web-api.md:192
msgid ""
"The yank endpoint will set the `yank` field of the given version of a crate "
"to `true` in the index."
msgstr ""

#: src/reference/registry-web-api.md:199
msgid ""
"// Indicates the yank succeeded, always true.\n"
"    \"ok\""
msgstr ""

#: src/reference/registry-web-api.md:204
msgid "Unyank"
msgstr ""

#: src/reference/registry-web-api.md:206
msgid "Endpoint: `/api/v1/crates/{crate_name}/{version}/unyank`"
msgstr ""

#: src/reference/registry-web-api.md:210
msgid ""
"The unyank endpoint will set the `yank` field of the given version of a "
"crate to `false` in the index."
msgstr ""

#: src/reference/registry-web-api.md:217
msgid ""
"// Indicates the unyank succeeded, always true.\n"
"    \"ok\""
msgstr ""

#: src/reference/registry-web-api.md:222
msgid "Owners"
msgstr ""

#: src/reference/registry-web-api.md:224
msgid ""
"Cargo does not have an inherent notion of users and owners, but it does "
"provide the `owner` command to assist managing who has authorization to "
"control a crate. It is up to the registry to decide exactly how users and "
"owners are handled. See the [publishing documentation](publishing.md#cargo-"
"owner) for a description of how [crates.io](https://crates.io/) handles "
"owners via GitHub users and teams."
msgstr ""

#: src/reference/registry-web-api.md:230
msgid "Owners: List"
msgstr ""

#: src/reference/registry-web-api.md:232 src/reference/registry-web-api.md:259
#: src/reference/registry-web-api.md:290
msgid "Endpoint: `/api/v1/crates/{crate_name}/owners`"
msgstr ""

#: src/reference/registry-web-api.md:233 src/reference/registry-web-api.md:318
msgid "Method: GET"
msgstr ""

#: src/reference/registry-web-api.md:236
msgid "The owners endpoint returns a list of owners of the crate."
msgstr ""

#: src/reference/registry-web-api.md:242
msgid ""
"// Array of owners of the crate.\n"
"    \"users\""
msgstr ""

#: src/reference/registry-web-api.md:245
msgid ""
"// Unique unsigned 32-bit integer of the owner.\n"
"            \"id\""
msgstr ""

#: src/reference/registry-web-api.md:247
msgid ""
"// The unique username of the owner.\n"
"            \"login\""
msgstr ""

#: src/reference/registry-web-api.md:248
msgid "\"github:rust-lang:core\""
msgstr ""

#: src/reference/registry-web-api.md:249
msgid ""
"// Name of the owner.\n"
"            // This is optional and may be null.\n"
"            \"name\""
msgstr ""

#: src/reference/registry-web-api.md:251
msgid "\"Core\""
msgstr ""

#: src/reference/registry-web-api.md:257
msgid "Owners: Add"
msgstr ""

#: src/reference/registry-web-api.md:263
msgid ""
"A PUT request will send a request to the registry to add a new owner to a "
"crate. It is up to the registry how to handle the request. For example, "
"[crates.io](https://crates.io/) sends an invite to the user that they must "
"accept before being added."
msgstr ""

#: src/reference/registry-web-api.md:268
msgid "The request should include the following JSON object:"
msgstr ""

#: src/reference/registry-web-api.md:272
msgid ""
"// Array of `login` strings of owners to add.\n"
"    \"users\""
msgstr ""

#: src/reference/registry-web-api.md:273 src/reference/registry-web-api.md:300
msgid "\"login_name\""
msgstr ""

#: src/reference/registry-web-api.md:281
msgid ""
"// Indicates the add succeeded, always true.\n"
"    \"ok\""
msgstr ""

#: src/reference/registry-web-api.md:283
msgid ""
"// A string to be displayed to the user.\n"
"    \"msg\""
msgstr ""

#: src/reference/registry-web-api.md:284
msgid "\"user ehuss has been invited to be an owner of crate cargo\""
msgstr ""

#: src/reference/registry-web-api.md:288
msgid "Owners: Remove"
msgstr ""

#: src/reference/registry-web-api.md:294
msgid ""
"A DELETE request will remove an owner from a crate. The request should "
"include the following JSON object:"
msgstr ""

#: src/reference/registry-web-api.md:299
msgid ""
"// Array of `login` strings of owners to remove.\n"
"    \"users\""
msgstr ""

#: src/reference/registry-web-api.md:308
msgid ""
"// Indicates the remove succeeded, always true.\n"
"    \"ok\""
msgstr ""

#: src/reference/registry-web-api.md:310
msgid ""
"// A string to be displayed to the user. Currently ignored by cargo.\n"
"    \"msg\""
msgstr ""

#: src/reference/registry-web-api.md:311
msgid "\"owners successfully removed\""
msgstr ""

#: src/reference/registry-web-api.md:315
msgid "Search"
msgstr ""

#: src/reference/registry-web-api.md:317
msgid "Endpoint: `/api/v1/crates`"
msgstr ""

#: src/reference/registry-web-api.md:319
msgid "Query Parameters:"
msgstr ""

#: src/reference/registry-web-api.md:320
msgid "`q`: The search query string."
msgstr ""

#: src/reference/registry-web-api.md:321
msgid "`per_page`: Number of results, default 10, max 100."
msgstr ""

#: src/reference/registry-web-api.md:323
msgid ""
"The search request will perform a search for crates, using criteria defined "
"on the server."
msgstr ""

#: src/reference/registry-web-api.md:330
msgid ""
"// Array of results.\n"
"    \"crates\""
msgstr ""

#: src/reference/registry-web-api.md:333
msgid ""
"// Name of the crate.\n"
"            \"name\""
msgstr ""

#: src/reference/registry-web-api.md:335
msgid ""
"// The highest version available.\n"
"            \"max_version\""
msgstr ""

#: src/reference/registry-web-api.md:336
msgid "\"0.6.1\""
msgstr ""

#: src/reference/registry-web-api.md:337
msgid ""
"// Textual description of the crate.\n"
"            \"description\""
msgstr ""

#: src/reference/registry-web-api.md:338
msgid "\"Random number generators and other randomness functionality.\\n\""
msgstr ""

#: src/reference/registry-web-api.md:341
msgid "\"meta\""
msgstr ""

#: src/reference/registry-web-api.md:342
msgid ""
"// Total number of results available on the server.\n"
"        \"total\""
msgstr ""

#: src/reference/registry-web-api.md:348
msgid "Login"
msgstr ""

#: src/reference/registry-web-api.md:350
msgid "Endpoint: `/me`"
msgstr ""

#: src/reference/registry-web-api.md:352
msgid ""
"The \"login\" endpoint is not an actual API request. It exists solely for "
"the [`cargo login`](../commands/cargo-login.md) command to display a URL to "
"instruct a user to visit in a web browser to log in and retrieve an API "
"token."
msgstr ""

#: src/reference/semver.md:3
msgid ""
"This chapter provides details on what is conventionally considered a "
"compatible or breaking SemVer change for new releases of a package. See the "
"[SemVer compatibility](resolver.md#semver-compatibility) section for details "
"on what SemVer is, and how Cargo uses it to ensure compatibility of "
"libraries."
msgstr ""

#: src/reference/semver.md:8
msgid ""
"These are only _guidelines_, and not necessarily hard-and-fast rules that "
"all projects will obey. The [Change categories](#change-categories) section "
"details how this guide classifies the level and severity of a change. Most "
"of this guide focuses on changes that will cause `cargo` and `rustc` to fail "
"to build something that previously worked. Almost every change carries some "
"risk that it will negatively affect the runtime behavior, and for those "
"cases it is usually a judgment call by the project maintainers whether or "
"not it is a SemVer-incompatible change."
msgstr ""

#: src/reference/semver.md:20
msgid "Change categories"
msgstr ""

#: src/reference/semver.md:22
msgid ""
"All of the policies listed below are categorized by the level of change:"
msgstr ""

#: src/reference/semver.md:24
msgid "**Major change**: a change that requires a major SemVer bump."
msgstr ""

#: src/reference/semver.md:25
msgid "**Minor change**: a change that requires only a minor SemVer bump."
msgstr ""

#: src/reference/semver.md:26
msgid ""
"**Possibly-breaking change**: a change that some projects may consider major "
"and others consider minor."
msgstr ""

#: src/reference/semver.md:29
msgid ""
"The \"Possibly-breaking\" category covers changes that have the _potential_ "
"to break during an update, but may not necessarily cause a breakage. The "
"impact of these changes should be considered carefully. The exact nature "
"will depend on the change and the principles of the project maintainers."
msgstr ""

#: src/reference/semver.md:34
msgid ""
"Some projects may choose to only bump the patch number on a minor change. It "
"is encouraged to follow the SemVer spec, and only apply bug fixes in patch "
"releases. However, a bug fix may require an API change that is marked as a "
"\"minor change\", and shouldn't affect compatibility. This guide does not "
"take a stance on how each individual \"minor change\" should be treated, as "
"the difference between minor and patch changes are conventions that depend "
"on the nature of the change."
msgstr ""

#: src/reference/semver.md:42
msgid ""
"Some changes are marked as \"minor\", even though they carry the potential "
"risk of breaking a build. This is for situations where the potential is "
"extremely low, and the potentially breaking code is unlikely to be written "
"in idiomatic Rust, or is specifically discouraged from use."
msgstr ""

#: src/reference/semver.md:47
msgid ""
"This guide uses the terms \"major\" and \"minor\" assuming this relates to a "
"\"1.0.0\" release or later. Initial development releases starting with "
"\"0.y.z\" can treat changes in \"y\" as a major release, and \"z\" as a "
"minor release. \"0.0.z\" releases are always major changes. This is because "
"Cargo uses the convention that only changes in the left-most non-zero "
"component are considered incompatible."
msgstr ""

#: src/reference/semver.md:54 src/reference/semver.md:107
msgid "API compatibility"
msgstr ""

#: src/reference/semver.md:55
msgid "Items"
msgstr ""

#: src/reference/semver.md:56
msgid "[Major: renaming/moving/removing any public items](#item-remove)"
msgstr ""

#: src/reference/semver.md:57
msgid "[Minor: adding new public items](#item-new)"
msgstr ""

#: src/reference/semver.md:58
msgid "Types"
msgstr ""

#: src/reference/semver.md:59
msgid ""
"[Major: Changing the alignment, layout, or size of a well-defined type]"
"(#type-layout)"
msgstr ""

#: src/reference/semver.md:60
msgid "Structs"
msgstr ""

#: src/reference/semver.md:61
msgid ""
"[Major: adding a private struct field when all current fields are public]"
"(#struct-add-private-field-when-public)"
msgstr ""

#: src/reference/semver.md:62
msgid ""
"[Major: adding a public field when no private field exists](#struct-add-"
"public-field-when-no-private)"
msgstr ""

#: src/reference/semver.md:63
msgid ""
"[Minor: adding or removing private fields when at least one already exists]"
"(#struct-private-fields-with-private)"
msgstr ""

#: src/reference/semver.md:64
msgid ""
"[Minor: going from a tuple struct with all private fields (with at least one "
"field) to a normal struct, or vice versa](#struct-tuple-normal-with-private)"
msgstr ""

#: src/reference/semver.md:65
msgid "Enums"
msgstr ""

#: src/reference/semver.md:66
msgid ""
"[Major: adding new enum variants (without `non_exhaustive`)](#enum-variant-"
"new)"
msgstr ""

#: src/reference/semver.md:67
msgid "[Major: adding new fields to an enum variant](#enum-fields-new)"
msgstr ""

#: src/reference/semver.md:68
msgid "Traits"
msgstr ""

#: src/reference/semver.md:69
msgid "[Major: adding a non-defaulted trait item](#trait-new-item-no-default)"
msgstr ""

#: src/reference/semver.md:70
msgid "[Major: any change to trait item signatures](#trait-item-signature)"
msgstr ""

#: src/reference/semver.md:71
msgid ""
"[Possibly-breaking: adding a defaulted trait item](#trait-new-default-item)"
msgstr ""

#: src/reference/semver.md:72
msgid ""
"[Major: adding a trait item that makes the trait non-object safe](#trait-"
"object-safety)"
msgstr ""

#: src/reference/semver.md:73
msgid ""
"[Major: adding a type parameter without a default](#trait-new-parameter-no-"
"default)"
msgstr ""

#: src/reference/semver.md:74
msgid ""
"[Minor: adding a defaulted trait type parameter](#trait-new-parameter-"
"default)"
msgstr ""

#: src/reference/semver.md:75
msgid "Implementations"
msgstr ""

#: src/reference/semver.md:76
msgid "[Possibly-breaking change: adding any inherent items](#impl-item-new)"
msgstr ""

#: src/reference/semver.md:77
msgid "Generics"
msgstr ""

#: src/reference/semver.md:78
msgid "[Major: tightening generic bounds](#generic-bounds-tighten)"
msgstr ""

#: src/reference/semver.md:79
msgid "[Minor: loosening generic bounds](#generic-bounds-loosen)"
msgstr ""

#: src/reference/semver.md:80
msgid "[Minor: adding defaulted type parameters](#generic-new-default)"
msgstr ""

#: src/reference/semver.md:81
msgid ""
"[Minor: generalizing a type to use generics (with identical types)](#generic-"
"generalize-identical)"
msgstr ""

#: src/reference/semver.md:82
msgid ""
"[Major: generalizing a type to use generics (with possibly different types)]"
"(#generic-generalize-different)"
msgstr ""

#: src/reference/semver.md:83
msgid ""
"[Minor: changing a generic type to a more generic type](#generic-more-"
"generic)"
msgstr ""

#: src/reference/semver.md:84
msgid ""
"[Major: capturing more generic parameters in RPIT](#generic-rpit-capture)"
msgstr ""

#: src/reference/semver.md:85
msgid "Functions"
msgstr ""

#: src/reference/semver.md:86
msgid "[Major: adding/removing function parameters](#fn-change-arity)"
msgstr ""

#: src/reference/semver.md:87
msgid ""
"[Possibly-breaking: introducing a new function type parameter](#fn-generic-"
"new)"
msgstr ""

#: src/reference/semver.md:88
msgid ""
"[Minor: generalizing a function to use generics (supporting original type)]"
"(#fn-generalize-compatible)"
msgstr ""

#: src/reference/semver.md:89
msgid ""
"[Major: generalizing a function to use generics with type mismatch](#fn-"
"generalize-mismatch)"
msgstr ""

#: src/reference/semver.md:90
msgid "[Minor: making an `unsafe` function safe](#fn-unsafe-safe)"
msgstr ""

#: src/reference/semver.md:91
msgid "Attributes"
msgstr ""

#: src/reference/semver.md:92
msgid ""
"[Major: switching from `no_std` support to requiring `std`](#attr-no-std-to-"
"std)"
msgstr ""

#: src/reference/semver.md:93
msgid ""
"[Major: adding `non_exhaustive` to an existing enum, variant, or struct with "
"no private fields](#attr-adding-non-exhaustive)"
msgstr ""

#: src/reference/semver.md:94 src/reference/semver.md:2003
msgid "Tooling and environment compatibility"
msgstr ""

#: src/reference/semver.md:95
msgid ""
"[Possibly-breaking: changing the minimum version of Rust required](#env-new-"
"rust)"
msgstr ""

#: src/reference/semver.md:96
msgid ""
"[Possibly-breaking: changing the platform and environment requirements](#env-"
"change-requirements)"
msgstr ""

#: src/reference/semver.md:97
msgid "[Minor: introducing new lints](#new-lints)"
msgstr ""

#: src/reference/semver.md:98 src/reference/semver.md:2105
#: src/appendix/glossary.md:9
msgid "Cargo"
msgstr ""

#: src/reference/semver.md:99
msgid "[Minor: adding a new Cargo feature](#cargo-feature-add)"
msgstr ""

#: src/reference/semver.md:100
msgid "[Major: removing a Cargo feature](#cargo-feature-remove)"
msgstr ""

#: src/reference/semver.md:101
msgid ""
"[Major: removing a feature from a feature list if that changes functionality "
"or public items](#cargo-feature-remove-another)"
msgstr ""

#: src/reference/semver.md:102
msgid ""
"[Possibly-breaking: removing an optional dependency](#cargo-remove-opt-dep)"
msgstr ""

#: src/reference/semver.md:103
msgid "[Minor: changing dependency features](#cargo-change-dep-feature)"
msgstr ""

#: src/reference/semver.md:104
msgid "[Minor: adding dependencies](#cargo-dep-add)"
msgstr ""

#: src/reference/semver.md:105
msgid "[Application compatibility](#application-compatibility)"
msgstr ""

#: src/reference/semver.md:109
msgid ""
"All of the examples below contain three parts: the original code, the code "
"after it has been modified, and an example usage of the code that could "
"appear in another project. In a minor change, the example usage should "
"successfully build with both the before and after versions."
msgstr ""

#: src/reference/semver.md:114
msgid "Major: renaming/moving/removing any public items"
msgstr ""

#: src/reference/semver.md:116
msgid ""
"The absence of a publicly exposed [item](../../reference/items.html) will "
"cause any uses of that item to fail to compile."
msgstr ""

#: src/reference/semver.md:120 src/reference/semver.md:453
#: src/reference/semver.md:479 src/reference/semver.md:512
#: src/reference/semver.md:554 src/reference/semver.md:585
#: src/reference/semver.md:635 src/reference/semver.md:673
#: src/reference/semver.md:711 src/reference/semver.md:747
#: src/reference/semver.md:801 src/reference/semver.md:856
#: src/reference/semver.md:892 src/reference/semver.md:927
#: src/reference/semver.md:957 src/reference/semver.md:991
#: src/reference/semver.md:1057 src/reference/semver.md:1114
#: src/reference/semver.md:1150 src/reference/semver.md:1202
#: src/reference/semver.md:1234 src/reference/semver.md:1323
#: src/reference/semver.md:1356 src/reference/semver.md:1457
#: src/reference/semver.md:1574 src/reference/semver.md:1625
#: src/reference/semver.md:1668 src/reference/semver.md:1827
#: src/reference/semver.md:1892 src/reference/semver.md:1938
msgid "// MAJOR CHANGE\n"
msgstr ""

#: src/reference/semver.md:121 src/reference/semver.md:288
#: src/reference/semver.md:327 src/reference/semver.md:364
#: src/reference/semver.md:394 src/reference/semver.md:426
#: src/reference/semver.md:454 src/reference/semver.md:480
#: src/reference/semver.md:513 src/reference/semver.md:555
#: src/reference/semver.md:586 src/reference/semver.md:636
#: src/reference/semver.md:674 src/reference/semver.md:712
#: src/reference/semver.md:748 src/reference/semver.md:802
#: src/reference/semver.md:857 src/reference/semver.md:893
#: src/reference/semver.md:928 src/reference/semver.md:958
#: src/reference/semver.md:992 src/reference/semver.md:1026
#: src/reference/semver.md:1058 src/reference/semver.md:1084
#: src/reference/semver.md:1115 src/reference/semver.md:1151
#: src/reference/semver.md:1203 src/reference/semver.md:1235
#: src/reference/semver.md:1275 src/reference/semver.md:1324
#: src/reference/semver.md:1357 src/reference/semver.md:1385
#: src/reference/semver.md:1411 src/reference/semver.md:1458
#: src/reference/semver.md:1487 src/reference/semver.md:1517
#: src/reference/semver.md:1547 src/reference/semver.md:1575
#: src/reference/semver.md:1602 src/reference/semver.md:1626
#: src/reference/semver.md:1669 src/reference/semver.md:1699
#: src/reference/semver.md:1731 src/reference/semver.md:1764
#: src/reference/semver.md:1797 src/reference/semver.md:1828
#: src/reference/semver.md:1859 src/reference/semver.md:1893
#: src/reference/semver.md:1939 src/reference/semver.md:2059
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Before\n"
msgstr ""

#: src/reference/semver.md:125
msgid ""
"///////////////////////////////////////////////////////////\n"
"// After\n"
"// ... item has been removed\n"
msgstr ""

#: src/reference/semver.md:129 src/reference/semver.md:186
#: src/reference/semver.md:469 src/reference/semver.md:489
#: src/reference/semver.md:526 src/reference/semver.md:571
#: src/reference/semver.md:604 src/reference/semver.md:652
#: src/reference/semver.md:690 src/reference/semver.md:728
#: src/reference/semver.md:764 src/reference/semver.md:818
#: src/reference/semver.md:875 src/reference/semver.md:911
#: src/reference/semver.md:938 src/reference/semver.md:971
#: src/reference/semver.md:1005 src/reference/semver.md:1068
#: src/reference/semver.md:1128 src/reference/semver.md:1163
#: src/reference/semver.md:1213 src/reference/semver.md:1250
#: src/reference/semver.md:1285 src/reference/semver.md:1335
#: src/reference/semver.md:1365 src/reference/semver.md:1423
#: src/reference/semver.md:1470 src/reference/semver.md:1583
#: src/reference/semver.md:1638 src/reference/semver.md:1677
#: src/reference/semver.md:1707 src/reference/semver.md:1809
#: src/reference/semver.md:1836 src/reference/semver.md:1978
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Example usage that will break.\n"
msgstr ""

#: src/reference/semver.md:133
msgid "// Error: cannot find function `foo`\n"
msgstr ""

#: src/reference/semver.md:137
msgid ""
"This includes adding any sort of [`cfg` attribute](../../reference/"
"conditional-compilation.md#the-cfg-attribute) which can change which items "
"or behavior is available based on [conditional compilation](../../reference/"
"conditional-compilation.md)."
msgstr ""

#: src/reference/semver.md:140 src/reference/semver.md:1374
#: src/reference/semver.md:1685 src/reference/semver.md:2091
msgid "Mitigating strategies:"
msgstr ""

#: src/reference/semver.md:141
msgid ""
"Mark items to be removed as [deprecated](../../reference/attributes/"
"diagnostics.html#the-deprecated-attribute), and then remove them at a later "
"date in a SemVer-breaking release."
msgstr ""

#: src/reference/semver.md:143
msgid ""
"Mark renamed items as [deprecated](../../reference/attributes/"
"diagnostics.html#the-deprecated-attribute), and use a [`pub use`](../../"
"reference/items/use-declarations.html) item to re-export to the old name."
msgstr ""

#: src/reference/semver.md:146
msgid "Minor: adding new public items"
msgstr ""

#: src/reference/semver.md:148
msgid ""
"Adding new, public [items](../../reference/items.html) is a minor change."
msgstr ""

#: src/reference/semver.md:151 src/reference/semver.md:287
#: src/reference/semver.md:326 src/reference/semver.md:363
#: src/reference/semver.md:393 src/reference/semver.md:425
#: src/reference/semver.md:1025 src/reference/semver.md:1083
#: src/reference/semver.md:1384 src/reference/semver.md:1486
#: src/reference/semver.md:1516 src/reference/semver.md:1546
#: src/reference/semver.md:1601 src/reference/semver.md:1730
#: src/reference/semver.md:1763 src/reference/semver.md:1858
#: src/reference/semver.md:2058
msgid "// MINOR CHANGE\n"
msgstr ""

#: src/reference/semver.md:152
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Before\n"
"// ... absence of item\n"
msgstr ""

#: src/reference/semver.md:156 src/reference/semver.md:178
#: src/reference/semver.md:297 src/reference/semver.md:336
#: src/reference/semver.md:371 src/reference/semver.md:402
#: src/reference/semver.md:431 src/reference/semver.md:461
#: src/reference/semver.md:484 src/reference/semver.md:519
#: src/reference/semver.md:563 src/reference/semver.md:595
#: src/reference/semver.md:644 src/reference/semver.md:682
#: src/reference/semver.md:720 src/reference/semver.md:756
#: src/reference/semver.md:902 src/reference/semver.md:964
#: src/reference/semver.md:998 src/reference/semver.md:1033
#: src/reference/semver.md:1063 src/reference/semver.md:1089
#: src/reference/semver.md:1121 src/reference/semver.md:1157
#: src/reference/semver.md:1207 src/reference/semver.md:1241
#: src/reference/semver.md:1279 src/reference/semver.md:1328
#: src/reference/semver.md:1361 src/reference/semver.md:1389
#: src/reference/semver.md:1415 src/reference/semver.md:1464
#: src/reference/semver.md:1493 src/reference/semver.md:1522
#: src/reference/semver.md:1551 src/reference/semver.md:1579
#: src/reference/semver.md:1606 src/reference/semver.md:1632
#: src/reference/semver.md:1673 src/reference/semver.md:1703
#: src/reference/semver.md:1738 src/reference/semver.md:1769
#: src/reference/semver.md:1803 src/reference/semver.md:1832
#: src/reference/semver.md:1863 src/reference/semver.md:1898
#: src/reference/semver.md:1955 src/reference/semver.md:2063
msgid ""
"///////////////////////////////////////////////////////////\n"
"// After\n"
msgstr ""

#: src/reference/semver.md:160
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Example use of the library that will safely work.\n"
"// `foo` is not used since it didn't previously exist.\n"
msgstr ""

#: src/reference/semver.md:166
msgid ""
"Note that in some rare cases this can be a **breaking change** due to glob "
"imports. For example, if you add a new trait, and a project has used a glob "
"import that brings that trait into scope, and the new trait introduces an "
"associated item that conflicts with any types it is implemented on, this can "
"cause a compile-time error due to the ambiguity. Example:"
msgstr ""

#: src/reference/semver.md:173 src/reference/semver.md:1274
#: src/reference/semver.md:1410 src/reference/semver.md:1698
#: src/reference/semver.md:1796
msgid "// Breaking change example\n"
msgstr ""

#: src/reference/semver.md:174
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Before\n"
"// ... absence of trait\n"
msgstr ""

#: src/reference/semver.md:198
msgid "// Error:  multiple applicable items in scope\n"
msgstr ""

#: src/reference/semver.md:202
msgid ""
"This is not considered a major change because conventionally glob imports "
"are a known forwards-compatibility hazard. Glob imports of items from "
"external crates should be avoided."
msgstr ""

#: src/reference/semver.md:206
msgid "Major: Changing the alignment, layout, or size of a well-defined type"
msgstr ""

#: src/reference/semver.md:208
msgid ""
"It is a breaking change to change the alignment, layout, or size of a type "
"that was previously well-defined."
msgstr ""

#: src/reference/semver.md:210
msgid ""
"In general, types that use the [the default representation](../../reference/"
"type-layout.html#the-default-representation) do not have a well-defined "
"alignment, layout, or size. The compiler is free to alter the alignment, "
"layout, or size, so code should not make any assumptions about it."
msgstr ""

#: src/reference/semver.md:213
msgid ""
"**Note**: It may be possible for external crates to break if they make "
"assumptions about the alignment, layout, or size of a type even if it is not "
"well-defined. This is not considered a SemVer breaking change since those "
"assumptions should not be made."
msgstr ""

#: src/reference/semver.md:216
msgid ""
"Some examples of changes that are not a breaking change are (assuming no "
"other rules in this guide are violated):"
msgstr ""

#: src/reference/semver.md:218
msgid ""
"Adding, removing, reordering, or changing fields of a default representation "
"struct, union, or enum in such a way that the change follows the other rules "
"in this guide (for example, using `non_exhaustive` to allow those changes, "
"or changes to private fields that are already private). See [struct-add-"
"private-field-when-public](#struct-add-private-field-when-public), [struct-"
"add-public-field-when-no-private](#struct-add-public-field-when-no-private), "
"[struct-private-fields-with-private](#struct-private-fields-with-private), "
"[enum-fields-new](#enum-fields-new)."
msgstr ""

#: src/reference/semver.md:220
msgid ""
"Adding variants to a default representation enum, if the enum uses "
"`non_exhaustive`. This may change the alignment or size of the enumeration, "
"but those are not well-defined. See [enum-variant-new](#enum-variant-new)."
msgstr ""

#: src/reference/semver.md:223
msgid ""
"Adding, removing, reordering, or changing private fields of a `repr(C)` "
"struct, union, or enum, following the other rules in this guide (for "
"example, using `non_exhaustive`, or adding private fields when other private "
"fields already exist). See [repr-c-private-change](#repr-c-private-change)."
msgstr ""

#: src/reference/semver.md:225
msgid ""
"Adding variants to a `repr(C)` enum, if the enum uses `non_exhaustive`. See "
"[repr-c-enum-variant-new](#repr-c-enum-variant-new)."
msgstr ""

#: src/reference/semver.md:227
msgid ""
"Adding `repr(C)` to a default representation struct, union, or enum. See "
"[repr-c-add](#repr-c-add)."
msgstr ""

#: src/reference/semver.md:229
msgid ""
"Adding `repr(<int>)` [primitive representation](../../reference/type-"
"layout.html#primitive-representations) to an enum. See [repr-int-enum-add]"
"(#repr-int-enum-add)."
msgstr ""

#: src/reference/semver.md:231
msgid ""
"Adding `repr(transparent)` to a default representation struct or enum. See "
"[repr-transparent-add](#repr-transparent-add)."
msgstr ""

#: src/reference/semver.md:234
msgid ""
"Types that use the [`repr` attribute](../../reference/type-"
"layout.html#representations) can be said to have an alignment and layout "
"that is defined in some way that code may make some assumptions about that "
"may break as a result of changing that type."
msgstr ""

#: src/reference/semver.md:236
msgid ""
"In some cases, types with a `repr` attribute may not have an alignment, "
"layout, or size that is well-defined. In these cases, it may be safe to make "
"changes to the types, though care should be exercised. For example, types "
"with private fields that do not otherwise document their alignment, layout, "
"or size guarantees cannot be relied upon by external crates since the public "
"API does not fully define the alignment, layout, or size of the type."
msgstr ""

#: src/reference/semver.md:240
msgid ""
"A common example where a type with _private_ fields is well-defined is a "
"type with a single private field with a generic type, using "
"`repr(transparent)`, and the prose of the documentation discusses that it is "
"transparent to the generic type. For example, see [`UnsafeCell`](../../std/"
"cell/struct.UnsafeCell.html#memory-layout)."
msgstr ""

#: src/reference/semver.md:244
msgid "Some examples of breaking changes are:"
msgstr ""

#: src/reference/semver.md:246
msgid ""
"Adding `repr(packed)` to a struct or union. See [repr-packed-add](#repr-"
"packed-add)."
msgstr ""

#: src/reference/semver.md:248
msgid ""
"Adding `repr(align)` to a struct, union, or enum. See [repr-align-add](#repr-"
"align-add)."
msgstr ""

#: src/reference/semver.md:250
msgid ""
"Removing `repr(packed)` from a struct or union. See [repr-packed-remove]"
"(#repr-packed-remove)."
msgstr ""

#: src/reference/semver.md:252
msgid ""
"Changing the value N of `repr(packed(N))` if that changes the alignment or "
"layout. See [repr-packed-n-change](#repr-packed-n-change)."
msgstr ""

#: src/reference/semver.md:254
msgid ""
"Changing the value N of `repr(align(N))` if that changes the alignment. See "
"[repr-align-n-change](#repr-align-n-change)."
msgstr ""

#: src/reference/semver.md:256
msgid ""
"Removing `repr(align)` from a struct, union, or enum. See [repr-align-remove]"
"(#repr-align-remove)."
msgstr ""

#: src/reference/semver.md:258
msgid ""
"Changing the order of public fields of a `repr(C)` type. See [repr-c-shuffle]"
"(#repr-c-shuffle)."
msgstr ""

#: src/reference/semver.md:260
msgid ""
"Removing `repr(C)` from a struct, union, or enum. See [repr-c-remove](#repr-"
"c-remove)."
msgstr ""

#: src/reference/semver.md:262
msgid ""
"Removing `repr(<int>)` from an enum. See [repr-int-enum-remove](#repr-int-"
"enum-remove)."
msgstr ""

#: src/reference/semver.md:264
msgid ""
"Changing the primitive representation of a `repr(<int>)` enum. See [repr-int-"
"enum-change](#repr-int-enum-change)."
msgstr ""

#: src/reference/semver.md:266
msgid ""
"Removing `repr(transparent)` from a struct or enum. See [repr-transparent-"
"remove](#repr-transparent-remove)."
msgstr ""

#: src/reference/semver.md:275
msgid "Minor: `repr(C)` add, remove, or change a private field"
msgstr ""

#: src/reference/semver.md:277
msgid ""
"It is usually safe to add, remove, or change a private field of a `repr(C)` "
"struct, union, or enum, assuming it follows the other guidelines in this "
"guide (see [struct-add-private-field-when-public](#struct-add-private-field-"
"when-public), [struct-add-public-field-when-no-private](#struct-add-public-"
"field-when-no-private), [struct-private-fields-with-private](#struct-private-"
"fields-with-private), [enum-fields-new](#enum-fields-new))."
msgstr ""

#: src/reference/semver.md:279
msgid ""
"For example, adding private fields can only be done if there are already "
"other private fields, or it is `non_exhaustive`. Public fields may be added "
"if there are private fields, or it is `non_exhaustive`, and the addition "
"does not alter the layout of the other fields."
msgstr ""

#: src/reference/semver.md:282
msgid ""
"However, this may change the size and alignment of the type. Care should be "
"taken if the size or alignment changes. Code should not make assumptions "
"about the size or alignment of types with private fields or `non_exhaustive` "
"unless it has a documented size or alignment."
msgstr ""

#: src/reference/semver.md:295
msgid "// a private field\n"
msgstr ""

#: src/reference/semver.md:305
msgid "// a new field\n"
msgstr ""

#: src/reference/semver.md:307 src/reference/semver.md:346
#: src/reference/semver.md:379 src/reference/semver.md:411
#: src/reference/semver.md:437 src/reference/semver.md:1040
#: src/reference/semver.md:1096 src/reference/semver.md:1393
#: src/reference/semver.md:1499 src/reference/semver.md:1529
#: src/reference/semver.md:1555 src/reference/semver.md:1610
#: src/reference/semver.md:1746 src/reference/semver.md:1774
#: src/reference/semver.md:2068
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Example use of the library that will safely work.\n"
msgstr ""

#: src/reference/semver.md:311
msgid ""
"// NOTE: Users should not make assumptions about the size or alignment\n"
"    // since they are not documented.\n"
msgstr ""

#: src/reference/semver.md:317
msgid "Minor: `repr(C)` add enum variant"
msgstr ""

#: src/reference/semver.md:319
msgid ""
"It is usually safe to add variants to a `repr(C)` enum, if the enum uses "
"`non_exhaustive`. See [enum-variant-new](#enum-variant-new) for more "
"discussion."
msgstr ""

#: src/reference/semver.md:322
msgid ""
"Note that this may be a breaking change since it changes the size and "
"alignment of the type. See [repr-c-private-change](#repr-c-private-change) "
"for similar concerns."
msgstr ""

#: src/reference/semver.md:344 src/reference/semver.md:374
#: src/reference/semver.md:405 src/reference/semver.md:435
#: src/reference/semver.md:464 src/reference/semver.md:522
msgid "// added\n"
msgstr ""

#: src/reference/semver.md:350
msgid ""
"// NOTE: Users should not make assumptions about the size or alignment\n"
"    // since they are not specified. For example, this raised the size from "
"8\n"
"    // to 16 bytes.\n"
msgstr ""

#: src/reference/semver.md:357
msgid "Minor: Adding `repr(C)` to a default representation"
msgstr ""

#: src/reference/semver.md:359
msgid ""
"It is safe to add `repr(C)` to a struct, union, or enum with [the default "
"representation](../../reference/type-layout.html#the-default-"
"representation). This is safe because users should not make assumptions "
"about the alignment, layout, or size of types with the default "
"representation."
msgstr ""

#: src/reference/semver.md:387
msgid "Minor: Adding `repr(<int>)` to an enum"
msgstr ""

#: src/reference/semver.md:389
msgid ""
"It is safe to add `repr(<int>)` [primitive representation](../../reference/"
"type-layout.html#primitive-representations) to an enum with [the default "
"representation](../../reference/type-layout.html#the-default-"
"representation). This is safe because users should not make assumptions "
"about the alignment, layout, or size of an enum with the default "
"representation."
msgstr ""

#: src/reference/semver.md:419
msgid ""
"Minor: Adding `repr(transparent)` to a default representation struct or enum"
msgstr ""

#: src/reference/semver.md:421
msgid ""
"It is safe to add `repr(transparent)` to a struct or enum with [the default "
"representation](../../reference/type-layout.html#the-default-"
"representation). This is safe because users should not make assumptions "
"about the alignment, layout, or size of a struct or enum with the default "
"representation."
msgstr ""

#: src/reference/semver.md:445
msgid "Major: Adding `repr(packed)` to a struct or union"
msgstr ""

#: src/reference/semver.md:447
msgid ""
"It is a breaking change to add `repr(packed)` to a struct or union. Making a "
"type `repr(packed)` makes changes that can break code, such as being invalid "
"to take a reference to a field, or causing truncation of disjoint closure "
"captures."
msgstr ""

#: src/reference/semver.md:474 src/reference/semver.md:659
msgid "// Error: reference to packed field is unaligned\n"
msgstr ""

#: src/reference/semver.md:495
msgid ""
"// Without repr(packed), the closure precisely captures `&f.0`.\n"
"        // With repr(packed), the closure captures `&f` to avoid undefined "
"behavior.\n"
msgstr ""

#: src/reference/semver.md:499
msgid "// Error: cannot assign to `f.1` because it is borrowed\n"
msgstr ""

#: src/reference/semver.md:504
msgid "Major: Adding `repr(align)` to a struct, union, or enum"
msgstr ""

#: src/reference/semver.md:506
msgid ""
"It is a breaking change to add `repr(align)` to a struct, union, or enum. "
"Making a type `repr(align)` would break any use of that type in a "
"`repr(packed)` type because that combination is not allowed."
msgstr ""

#: src/reference/semver.md:532
msgid ""
"// Error: packed type cannot transitively contain a `#[repr(align)]` type\n"
msgstr ""

#: src/reference/semver.md:543
msgid "Major: Removing `repr(packed)` from a struct or union"
msgstr ""

#: src/reference/semver.md:545
msgid ""
"It is a breaking change to remove `repr(packed)` from a struct or union. "
"This may change the alignment or layout that extern crates are relying on."
msgstr ""

#: src/reference/semver.md:548
msgid ""
"If any fields are public, then removing `repr(packed)` may change the way "
"disjoint closure captures work. In some cases, this can cause code to break, "
"similar to those outlined in the [edition guide](../../edition-guide/"
"rust-2021/disjoint-capture-in-closures.html)."
msgstr ""

#: src/reference/semver.md:566 src/reference/semver.md:598
msgid "// removed packed\n"
msgstr ""

#: src/reference/semver.md:578
msgid ""
"// Some assumption about the size of the type.\n"
"    // Without `packed`, this fails since the size is 4.\n"
msgstr ""

#: src/reference/semver.md:580 src/reference/semver.md:699
#: src/reference/semver.md:737
msgid "// Error: evaluation of constant value failed\n"
msgstr ""

#: src/reference/semver.md:617
msgid ""
"// When the structure was packed, the closure captures `p` which is Send.\n"
"    // When `packed` is removed, this ends up capturing `p.a` which is not "
"Send.\n"
msgstr ""

#: src/reference/semver.md:620
msgid "// Error: cannot be sent between threads safely\n"
msgstr ""

#: src/reference/semver.md:625
msgid ""
"Major: Changing the value N of `repr(packed(N))` if that changes the "
"alignment or layout"
msgstr ""

#: src/reference/semver.md:627
msgid ""
"It is a breaking change to change the value of N of `repr(packed(N))` if "
"that changes the alignment or layout. This may change the alignment or "
"layout that external crates are relying on."
msgstr ""

#: src/reference/semver.md:630
msgid ""
"If the value `N` is lowered below the alignment of a public field, then that "
"would break any code that attempts to take a reference of that field."
msgstr ""

#: src/reference/semver.md:632
msgid ""
"Note that some changes to `N` may not change the alignment or layout, for "
"example increasing it when the current value is already equal to the natural "
"alignment of the type."
msgstr ""

#: src/reference/semver.md:647
msgid "// changed to 2\n"
msgstr ""

#: src/reference/semver.md:663
msgid ""
"Major: Changing the value N of `repr(align(N))` if that changes the alignment"
msgstr ""

#: src/reference/semver.md:665
msgid ""
"It is a breaking change to change the value `N` of `repr(align(N))` if that "
"changes the alignment. This may change the alignment that external crates "
"are relying on."
msgstr ""

#: src/reference/semver.md:668
msgid ""
"This change should be safe to make if the type is not well-defined as "
"discussed in [type layout](#type-layout) (such as having any private fields "
"and having an undocumented alignment or layout)."
msgstr ""

#: src/reference/semver.md:670
msgid ""
"Note that some changes to `N` may not change the alignment or layout, for "
"example decreasing it when the current value is already equal to or less "
"than the natural alignment of the type."
msgstr ""

#: src/reference/semver.md:685
msgid "// changed to 4\n"
msgstr ""

#: src/reference/semver.md:697 src/reference/semver.md:735
msgid ""
"// Some assumption about the size of the type.\n"
"    // The alignment has changed from 8 to 4.\n"
msgstr ""

#: src/reference/semver.md:703
msgid "Major: Removing `repr(align)` from a struct, union, or enum"
msgstr ""

#: src/reference/semver.md:705
msgid ""
"It is a breaking change to remove `repr(align)` from a struct, union, or "
"enum, if their layout was well-defined. This may change the alignment or "
"layout that external crates are relying on."
msgstr ""

#: src/reference/semver.md:708
msgid ""
"This change should be safe to make if the type is not well-defined as "
"discussed in [type layout](#type-layout) (such as having any private fields "
"and having an undocumented alignment)."
msgstr ""

#: src/reference/semver.md:723
msgid "// removed align\n"
msgstr ""

#: src/reference/semver.md:741
msgid "Major: Changing the order of public fields of a `repr(C)` type"
msgstr ""

#: src/reference/semver.md:743
msgid ""
"It is a breaking change to change the order of public fields of a `repr(C)` "
"type. External crates may be relying on the specific ordering of the fields."
msgstr ""

#: src/reference/semver.md:761
msgid "// changed order\n"
msgstr ""

#: src/reference/semver.md:770 src/reference/semver.md:824
msgid ""
"// This C function is assuming a specific layout defined in a C header.\n"
msgstr ""

#: src/reference/semver.md:776
msgid "// Error: value not equal to 2\n"
msgstr ""

#: src/reference/semver.md:780 src/reference/semver.md:834
msgid ""
"// This simulates what would normally be something included from a build "
"script.\n"
msgstr ""

#: src/reference/semver.md:781 src/reference/semver.md:835
msgid "// This definition would be in a C header.\n"
msgstr ""

#: src/reference/semver.md:795
msgid "Major: Removing `repr(C)` from a struct, union, or enum"
msgstr ""

#: src/reference/semver.md:797
msgid ""
"It is a breaking change to remove `repr(C)` from a struct, union, or enum. "
"External crates may be relying on the specific layout of the type."
msgstr ""

#: src/reference/semver.md:810
msgid ""
"///////////////////////////////////////////////////////////\n"
"// After\n"
"// removed repr(C)\n"
msgstr ""

#: src/reference/semver.md:825 src/reference/semver.md:945
msgid "// Error: is not FFI-safe\n"
msgstr ""

#: src/reference/semver.md:849
msgid "Major: Removing `repr(<int>)` from an enum"
msgstr ""

#: src/reference/semver.md:851
msgid ""
"It is a breaking change to remove `repr(<int>)` from an enum. External "
"crates may be assuming that the discriminant is a specific size. For "
"example, [`std::mem::transmute`](../../std/mem/fn.transmute.html) of an enum "
"may fail."
msgstr ""

#: src/reference/semver.md:866
msgid ""
"///////////////////////////////////////////////////////////\n"
"// After\n"
"// removed repr(u16)\n"
msgstr ""

#: src/reference/semver.md:881 src/reference/semver.md:917
msgid "// Error: cannot transmute between types of different sizes\n"
msgstr ""

#: src/reference/semver.md:885
msgid "Major: Changing the primitive representation of a `repr(<int>)` enum"
msgstr ""

#: src/reference/semver.md:887
msgid ""
"It is a breaking change to change the primitive representation of a "
"`repr(<int>)` enum. External crates may be assuming that the discriminant is "
"a specific size. For example, [`std::mem::transmute`](../../std/mem/"
"fn.transmute.html) of an enum may fail."
msgstr ""

#: src/reference/semver.md:905
msgid "// changed repr size\n"
msgstr ""

#: src/reference/semver.md:921
msgid "Major: Removing `repr(transparent)` from a struct or enum"
msgstr ""

#: src/reference/semver.md:923
msgid ""
"It is a breaking change to remove `repr(transparent)` from a struct or enum. "
"External crates may be relying on the type having the alignment, layout, or "
"size of the transparent field."
msgstr ""

#: src/reference/semver.md:933
msgid ""
"///////////////////////////////////////////////////////////\n"
"// After\n"
"// removed repr\n"
msgstr ""

#: src/reference/semver.md:951
msgid "Major: adding a private struct field when all current fields are public"
msgstr ""

#: src/reference/semver.md:953
msgid ""
"When a private field is added to a struct that previously had all public "
"fields, this will break any code that attempts to construct it with a "
"[struct literal](../../reference/expressions/struct-expr.html)."
msgstr ""

#: src/reference/semver.md:975
msgid "// Error: cannot construct `Foo`\n"
msgstr ""

#: src/reference/semver.md:979 src/reference/semver.md:1013
#: src/reference/semver.md:1140 src/reference/semver.md:1175
#: src/reference/semver.md:1222 src/reference/semver.md:1261
#: src/reference/semver.md:1310 src/reference/semver.md:1444
#: src/reference/semver.md:1916 src/reference/semver.md:1998
#: src/reference/semver.md:2020 src/reference/semver.md:2048
#: src/reference/semver.md:2148 src/reference/semver.md:2225
msgid "Mitigation strategies:"
msgstr ""

#: src/reference/semver.md:980 src/reference/semver.md:1014
msgid "Do not add new fields to all-public field structs."
msgstr ""

#: src/reference/semver.md:981 src/reference/semver.md:1015
msgid ""
"Mark structs as [`#[non_exhaustive]`](../../reference/attributes/"
"type_system.html#the-non_exhaustive-attribute) when first introducing a "
"struct to prevent users from using struct literal syntax, and instead "
"provide a constructor method and/or [Default](../../std/default/"
"trait.Default.html) implementation."
msgstr ""

#: src/reference/semver.md:985
msgid "Major: adding a public field when no private field exists"
msgstr ""

#: src/reference/semver.md:987
msgid ""
"When a public field is added to a struct that has all public fields, this "
"will break any code that attempts to construct it with a [struct literal]"
"(../../reference/expressions/struct-expr.html)."
msgstr ""

#: src/reference/semver.md:1009
msgid "// Error: missing field `f2`\n"
msgstr ""

#: src/reference/semver.md:1019
msgid ""
"Minor: adding or removing private fields when at least one already exists"
msgstr ""

#: src/reference/semver.md:1021
msgid ""
"It is safe to add or remove private fields from a struct when the struct "
"already has at least one private field."
msgstr ""

#: src/reference/semver.md:1044 src/reference/semver.md:1100
msgid "// Cannot access private fields.\n"
msgstr ""

#: src/reference/semver.md:1049
msgid ""
"This is safe because existing code cannot use a [struct literal](../../"
"reference/expressions/struct-expr.html) to construct it, nor exhaustively "
"match its contents."
msgstr ""

#: src/reference/semver.md:1052
msgid ""
"Note that for tuple structs, this is a **major change** if the tuple "
"contains public fields, and the addition or removal of a private field "
"changes the index of any public field."
msgstr ""

#: src/reference/semver.md:1073
msgid "// Error: is private\n"
msgstr ""

#: src/reference/semver.md:1077
msgid ""
"Minor: going from a tuple struct with all private fields (with at least one "
"field) to a normal struct, or vice versa"
msgstr ""

#: src/reference/semver.md:1079
msgid ""
"Changing a tuple struct to a normal struct (or vice-versa) is safe if all "
"fields are private."
msgstr ""

#: src/reference/semver.md:1105
msgid ""
"This is safe because existing code cannot use a [struct literal](../../"
"reference/expressions/struct-expr.html) to construct it, nor match its "
"contents."
msgstr ""

#: src/reference/semver.md:1108
msgid "Major: adding new enum variants (without `non_exhaustive`)"
msgstr ""

#: src/reference/semver.md:1110
msgid ""
"It is a breaking change to add a new enum variant if the enum does not use "
"the [`#[non_exhaustive]`](../../reference/attributes/type_system.html#the-"
"non_exhaustive-attribute) attribute."
msgstr ""

#: src/reference/semver.md:1134
msgid "// Error: `E::Variant2` not covered\n"
msgstr ""

#: src/reference/semver.md:1141
msgid ""
"When introducing the enum, mark it as [`#[non_exhaustive]`](../../reference/"
"attributes/type_system.html#the-non_exhaustive-attribute) to force users to "
"use [wildcard patterns](../../reference/patterns.html#wildcard-pattern) to "
"catch new variants."
msgstr ""

#: src/reference/semver.md:1144
msgid "Major: adding new fields to an enum variant"
msgstr ""

#: src/reference/semver.md:1146
msgid ""
"It is a breaking change to add new fields to an enum variant because all "
"fields are public, and constructors and matching will fail to compile."
msgstr ""

#: src/reference/semver.md:1168 src/reference/semver.md:1170
msgid "// Error: missing f2\n"
msgstr ""

#: src/reference/semver.md:1176
msgid ""
"When introducing the enum, mark the variant as [`non_exhaustive`](../../"
"reference/attributes/type_system.html#the-non_exhaustive-attribute) so that "
"it cannot be constructed or matched without wildcards."
msgstr ""

#: src/reference/semver.md:1184
msgid ""
"When introducing the enum, use an explicit struct as a value, where you can "
"have control over the field visibility."
msgstr ""

#: src/reference/semver.md:1196
msgid "Major: adding a non-defaulted trait item"
msgstr ""

#: src/reference/semver.md:1198
msgid ""
"It is a breaking change to add a non-defaulted item to a trait. This will "
"break any implementors of the trait."
msgstr ""

#: src/reference/semver.md:1219
msgid "// Error: not all trait items implemented\n"
msgstr ""

#: src/reference/semver.md:1223
msgid ""
"Always provide a default implementation or value for new associated trait "
"items."
msgstr ""

#: src/reference/semver.md:1225 src/reference/semver.md:1264
msgid ""
"When introducing the trait, use the [sealed trait](https://rust-"
"lang.github.io/api-guidelines/future-proofing.html#sealed-traits-protect-"
"against-downstream-implementations-c-sealed) technique to prevent users "
"outside of the crate from implementing the trait."
msgstr ""

#: src/reference/semver.md:1228
msgid "Major: any change to trait item signatures"
msgstr ""

#: src/reference/semver.md:1230
msgid ""
"It is a breaking change to make any change to a trait item signature. This "
"can break external implementors of the trait."
msgstr ""

#: src/reference/semver.md:1245
msgid ""
"// For sealed traits or normal functions, this would be a minor change\n"
"    // because generalizing with generics strictly expands the possible "
"uses.\n"
"    // But in this case, trait implementations must use the same signature.\n"
msgstr ""

#: src/reference/semver.md:1257
msgid "// Error: trait declaration has 1 type parameter\n"
msgstr ""

#: src/reference/semver.md:1262
msgid ""
"Introduce new items with default implementations to cover the new "
"functionality instead of modifying existing items."
msgstr ""

#: src/reference/semver.md:1267
msgid "Possibly-breaking: adding a defaulted trait item"
msgstr ""

#: src/reference/semver.md:1269
msgid ""
"It is usually safe to add a defaulted trait item. However, this can "
"sometimes cause a compile error. For example, this can introduce an "
"ambiguity if a method of the same name exists in another trait."
msgstr ""

#: src/reference/semver.md:1300
msgid "// Error: multiple applicable items in scope\n"
msgstr ""

#: src/reference/semver.md:1304
msgid ""
"Note that this ambiguity does _not_ exist for name collisions on [inherent "
"implementations](../../reference/items/implementations.html#inherent-"
"implementations), as they take priority over trait items."
msgstr ""

#: src/reference/semver.md:1307
msgid ""
"See [trait-object-safety](#trait-object-safety) for a special case to "
"consider when adding trait items."
msgstr ""

#: src/reference/semver.md:1311 src/reference/semver.md:1445
msgid ""
"Some projects may deem this acceptable breakage, particularly if the new "
"item name is unlikely to collide with any existing code. Choose names "
"carefully to help avoid these collisions. Additionally, it may be acceptable "
"to require downstream users to add [disambiguation syntax](../../reference/"
"expressions/call-expr.html#disambiguating-function-calls) to select the "
"correct function when updating the dependency."
msgstr ""

#: src/reference/semver.md:1317
msgid "Major: adding a trait item that makes the trait non-object safe"
msgstr ""

#: src/reference/semver.md:1319
msgid ""
"It is a breaking change to add a trait item that changes the trait to not be "
"[object safe](../../reference/items/traits.html#object-safety)."
msgstr ""

#: src/reference/semver.md:1332
msgid "// An associated const makes the trait not object-safe.\n"
msgstr ""

#: src/reference/semver.md:1344
msgid "// Error: cannot be made into an object\n"
msgstr ""

#: src/reference/semver.md:1348
msgid ""
"It is safe to do the converse (making a non-object safe trait into a safe "
"one)."
msgstr ""

#: src/reference/semver.md:1351
msgid "Major: adding a type parameter without a default"
msgstr ""

#: src/reference/semver.md:1353
msgid ""
"It is a breaking change to add a type parameter without a default to a trait."
msgstr ""

#: src/reference/semver.md:1371
msgid "// Error: missing generics\n"
msgstr ""

#: src/reference/semver.md:1375
msgid ""
"See [adding a defaulted trait type parameter](#trait-new-parameter-default)."
msgstr ""

#: src/reference/semver.md:1377
msgid "Minor: adding a defaulted trait type parameter"
msgstr ""

#: src/reference/semver.md:1379
msgid ""
"It is safe to add a type parameter to a trait as long as it has a default. "
"External implementors will use the default without needing to specify the "
"parameter."
msgstr ""

#: src/reference/semver.md:1402
msgid "Possibly-breaking change: adding any inherent items"
msgstr ""

#: src/reference/semver.md:1404
msgid ""
"Usually adding inherent items to an implementation should be safe because "
"inherent items take priority over trait items. However, in some cases the "
"collision can cause problems if the name is the same as an implemented trait "
"item with a different signature."
msgstr ""

#: src/reference/semver.md:1436
msgid "// Error: this method takes 0 arguments but 1 argument was supplied\n"
msgstr ""

#: src/reference/semver.md:1440
msgid ""
"Note that if the signatures match, there would not be a compile-time error, "
"but possibly a silent change in runtime behavior (because it is now "
"executing a different function)."
msgstr ""

#: src/reference/semver.md:1451
msgid "Major: tightening generic bounds"
msgstr ""

#: src/reference/semver.md:1453
msgid ""
"It is a breaking change to tighten generic bounds on a type since this can "
"break users expecting the looser bounds."
msgstr ""

#: src/reference/semver.md:1476
msgid "// Error: the trait bound `{float}: Eq` is not satisfied\n"
msgstr ""

#: src/reference/semver.md:1480
msgid "Minor: loosening generic bounds"
msgstr ""

#: src/reference/semver.md:1482
msgid ""
"It is safe to loosen the generic bounds on a type, as it only expands what "
"is allowed."
msgstr ""

#: src/reference/semver.md:1509
msgid "Minor: adding defaulted type parameters"
msgstr ""

#: src/reference/semver.md:1511
msgid ""
"It is safe to add a type parameter to a type as long as it has a default. "
"All existing references will use the default without needing to specify the "
"parameter."
msgstr ""

#: src/reference/semver.md:1539
msgid "Minor: generalizing a type to use generics (with identical types)"
msgstr ""

#: src/reference/semver.md:1541
msgid ""
"A struct or enum field can change from a concrete type to a generic type "
"parameter, provided that the change results in an identical type for all "
"existing use cases. For example, the following change is permitted:"
msgstr ""

#: src/reference/semver.md:1565
msgid ""
"because existing uses of `Foo` are shorthand for `Foo<u8>` which yields the "
"identical field type."
msgstr ""

#: src/reference/semver.md:1568
msgid ""
"Major: generalizing a type to use generics (with possibly different types)"
msgstr ""

#: src/reference/semver.md:1570
msgid ""
"Changing a struct or enum field from a concrete type to a generic type "
"parameter can break if the type can change."
msgstr ""

#: src/reference/semver.md:1589
msgid "// Error: mismatched types\n"
msgstr ""

#: src/reference/semver.md:1593
msgid "Minor: changing a generic type to a more generic type"
msgstr ""

#: src/reference/semver.md:1595
msgid ""
"It is safe to change a generic type to a more generic one. For example, the "
"following adds a generic parameter that defaults to the original type, which "
"is safe because all existing users will be using the same type for both "
"fields, the defaulted parameter does not need to be specified."
msgstr ""

#: src/reference/semver.md:1620
msgid "Major: capturing more generic parameters in RPIT"
msgstr ""

#: src/reference/semver.md:1622
msgid ""
"It is a breaking change to capture additional generic parameters in an [RPIT]"
"(../../reference/types/impl-trait.md#abstract-return-types) (return-position "
"impl trait)."
msgstr ""

#: src/reference/semver.md:1645
msgid "// Error: cannot move out of `b` because it is borrowed\n"
msgstr ""

#: src/reference/semver.md:1649
msgid ""
"Adding generic parameters to an RPIT places additional constraints on how "
"the resulting type may be used."
msgstr ""

#: src/reference/semver.md:1651
msgid ""
"Note that there are implicit captures when the `use<>` syntax is not "
"specified. In Rust 2021 and earlier editions, the lifetime parameters are "
"only captured if they appear syntactically within a bound in the RPIT type "
"signature. Starting in Rust 2024, all lifetime parameters are "
"unconditionally captured. This means that starting in Rust 2024, the default "
"is maximally compatible, requiring you to be explicit when you want to "
"capture less, which is a SemVer commitment."
msgstr ""

#: src/reference/semver.md:1653
msgid ""
"See the [edition guide](../../edition-guide/rust-2024/rpit-lifetime-"
"capture.html) and the [reference](../../reference/types/impl-"
"trait.md#capturing) for more information on RPIT capturing."
msgstr ""

#: src/reference/semver.md:1655
msgid "It is a minor change to capture fewer generic parameters in an RPIT."
msgstr ""

#: src/reference/semver.md:1657
msgid ""
"Note: All in-scope type and const generic parameters must be either "
"implicitly captured (no `+ use<…>` specified) or explicitly captured (must "
"be listed in `+ use<…>`), and thus currently it is not allowed to change "
"what is captured of those kinds of generics."
msgstr ""

#: src/reference/semver.md:1663
msgid "Major: adding/removing function parameters"
msgstr ""

#: src/reference/semver.md:1665
msgid "Changing the arity of a function is a breaking change."
msgstr ""

#: src/reference/semver.md:1681
msgid "// Error: this function takes 1 argument\n"
msgstr ""

#: src/reference/semver.md:1686
msgid ""
"Introduce a new function with the new signature and possibly [deprecate]"
"(../../reference/attributes/diagnostics.html#the-deprecated-attribute) the "
"old one."
msgstr ""

#: src/reference/semver.md:1688
msgid ""
"Introduce functions that take a struct argument, where the struct is built "
"with the builder pattern. This allows new fields to be added to the struct "
"in the future."
msgstr ""

#: src/reference/semver.md:1692
msgid "Possibly-breaking: introducing a new function type parameter"
msgstr ""

#: src/reference/semver.md:1694
msgid ""
"Usually, adding a non-defaulted type parameter is safe, but in some cases it "
"can be a breaking change:"
msgstr ""

#: src/reference/semver.md:1713
msgid ""
"// Error: function takes 2 generic arguments but 1 generic argument was "
"supplied\n"
msgstr ""

#: src/reference/semver.md:1717
msgid ""
"However, such explicit calls are rare enough (and can usually be written in "
"other ways) that this breakage is usually acceptable. One should take into "
"account how likely it is that the function in question is being called with "
"explicit type arguments."
msgstr ""

#: src/reference/semver.md:1722
msgid ""
"Minor: generalizing a function to use generics (supporting original type)"
msgstr ""

#: src/reference/semver.md:1724
msgid ""
"The type of a parameter to a function, or its return value, can be "
"_generalized_ to use generics, including by introducing a new type "
"parameter, as long as it can be instantiated to the original type. For "
"example, the following changes are allowed:"
msgstr ""

#: src/reference/semver.md:1757
msgid "because all existing uses are instantiations of the new signature."
msgstr ""

#: src/reference/semver.md:1759
msgid ""
"Perhaps somewhat surprisingly, generalization applies to trait objects as "
"well, given that every trait implements itself:"
msgstr ""

#: src/reference/semver.md:1788
msgid ""
"(The use of `?Sized` is essential; otherwise you couldn't recover the "
"original signature.)"
msgstr ""

#: src/reference/semver.md:1791
msgid ""
"Introducing generics in this way can potentially create type inference "
"failures. These are usually rare, and may be acceptable breakage for some "
"projects, as this can be fixed with additional type annotations."
msgstr ""

#: src/reference/semver.md:1815
msgid "// Error: type annotations needed\n"
msgstr ""

#: src/reference/semver.md:1819
msgid "Major: generalizing a function to use generics with type mismatch"
msgstr ""

#: src/reference/semver.md:1821
msgid ""
"It is a breaking change to change a function parameter or return type if the "
"generic type constrains or changes the types previously allowed. For "
"example, the following adds a generic constraint that may not be satisfied "
"by existing code:"
msgstr ""

#: src/reference/semver.md:1842
msgid "// Error: `Copy` is not implemented for `Vec<u8>`\n"
msgstr ""

#: src/reference/semver.md:1846
msgid "Minor: making an `unsafe` function safe"
msgstr ""

#: src/reference/semver.md:1848
msgid "A previously `unsafe` function can be made safe without breaking code."
msgstr ""

#: src/reference/semver.md:1850
msgid ""
"Note however that it may cause the [`unused_unsafe`](../../rustc/lints/"
"listing/warn-by-default.html#unused-unsafe) lint to trigger as in the "
"example below, which will cause local crates that have specified `#!"
"[deny(warnings)]` to stop compiling. Per [introducing new lints](#new-"
"lints), it is allowed for updates to introduce new warnings."
msgstr ""

#: src/reference/semver.md:1855
msgid ""
"Going the other way (making a safe function `unsafe`) is a breaking change."
msgstr ""

#: src/reference/semver.md:1867
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Example use of the library that will trigger a lint.\n"
msgstr ""

#: src/reference/semver.md:1877
msgid "// The `unused_unsafe` lint will trigger here\n"
msgstr ""

#: src/reference/semver.md:1882
msgid ""
"Making a previously `unsafe` associated function or method on structs / "
"enums safe is also a minor change, while the same is not true for associated "
"function on traits (see [any change to trait item signatures](#trait-item-"
"signature))."
msgstr ""

#: src/reference/semver.md:1886
msgid "Major: switching from `no_std` support to requiring `std`"
msgstr ""

#: src/reference/semver.md:1888
msgid ""
"If your library specifically supports a [`no_std`](../../reference/names/"
"preludes.html#the-no_std-attribute) environment, it is a breaking change to "
"make a new release that requires `std`."
msgstr ""

#: src/reference/semver.md:1904
msgid ""
"///////////////////////////////////////////////////////////\n"
"// Example usage that will break.\n"
"// This will fail to link for no_std targets because they don't have a `std` "
"crate.\n"
msgstr ""

#: src/reference/semver.md:1917
msgid ""
"A common idiom to avoid this is to include a `std` [Cargo feature]"
"(features.md) that optionally enables `std` support, and when the feature is "
"off, the library can be used in a `no_std` environment."
msgstr ""

#: src/reference/semver.md:1921
msgid ""
"Major: adding `non_exhaustive` to an existing enum, variant, or struct with "
"no private fields"
msgstr ""

#: src/reference/semver.md:1923
msgid ""
"Making items [`#[non_exhaustive]`](../../reference/attributes/"
"type_system.html#the-non_exhaustive-attribute) changes how they may be used "
"outside the crate where they are defined:"
msgstr ""

#: src/reference/semver.md:1926
msgid ""
"Non-exhaustive structs and enum variants cannot be constructed using [struct "
"literal](../../reference/expressions/struct-expr.html) syntax, including "
"[functional update syntax](../../reference/expressions/struct-"
"expr.html#functional-update-syntax)."
msgstr ""

#: src/reference/semver.md:1928
msgid ""
"Pattern matching on non-exhaustive structs requires `..` and matching on "
"enums does not count towards exhaustiveness."
msgstr ""

#: src/reference/semver.md:1930
msgid "Casting enum variants to their discriminant with `as` is not allowed."
msgstr ""

#: src/reference/semver.md:1932
msgid ""
"Structs with private fields cannot be constructed using [struct literal]"
"(../../reference/expressions/struct-expr.html) syntax regardless of whether "
"[`#[non_exhaustive]`](../../reference/attributes/type_system.html#the-"
"non_exhaustive-attribute) is used. Adding [`#[non_exhaustive]`](../../"
"reference/attributes/type_system.html#the-non_exhaustive-attribute) to such "
"a struct is not a breaking change."
msgstr ""

#: src/reference/semver.md:1984
msgid "// Error: cannot create non-exhaustive struct using struct expression\n"
msgstr ""

#: src/reference/semver.md:1986
msgid "// Error: unit variant `X` is private\n"
msgstr ""

#: src/reference/semver.md:1987
msgid "// Error: tuple variant `Y` is private\n"
msgstr ""

#: src/reference/semver.md:1988
msgid ""
"// Error: cannot create non-exhaustive variant using struct expression\n"
msgstr ""

#: src/reference/semver.md:1993
msgid "// Error: non-exhaustive patterns: `_` not covered\n"
msgstr ""

#: src/reference/semver.md:1999
msgid ""
"Mark structs, enums, and enum variants as [`#[non_exhaustive]`](../../"
"reference/attributes/type_system.html#the-non_exhaustive-attribute) when "
"first introducing them, rather than adding [`#[non_exhaustive]`](../../"
"reference/attributes/type_system.html#the-non_exhaustive-attribute) later on."
msgstr ""

#: src/reference/semver.md:2005
msgid "Possibly-breaking: changing the minimum version of Rust required"
msgstr ""

#: src/reference/semver.md:2007
msgid ""
"Introducing the use of new features in a new release of Rust can break "
"projects that are using older versions of Rust. This also includes using new "
"features in a new release of Cargo, and requiring the use of a nightly-only "
"feature in a crate that previously worked on stable."
msgstr ""

#: src/reference/semver.md:2012
msgid ""
"It is generally recommended to treat this as a minor change, rather than as "
"a major change, for [various reasons](https://github.com/rust-lang/api-"
"guidelines/discussions/231). It is usually relatively easy to update to a "
"newer version of Rust. Rust also has a rapid 6-week release cycle, and some "
"projects will provide compatibility within a window of releases (such as the "
"current stable release plus N previous releases). Just keep in mind that "
"some large projects may not be able to update their Rust toolchain rapidly."
msgstr ""

#: src/reference/semver.md:2021
msgid "Use [Cargo features](features.md) to make the new features opt-in."
msgstr ""

#: src/reference/semver.md:2022
msgid "Provide a large window of support for older releases."
msgstr ""

#: src/reference/semver.md:2023
msgid ""
"Copy the source of new standard library items if possible so that you can "
"continue to use an older version but take advantage of the new feature."
msgstr ""

#: src/reference/semver.md:2025
msgid ""
"Provide a separate branch of older minor releases that can receive backports "
"of important bugfixes."
msgstr ""

#: src/reference/semver.md:2027
msgid ""
"Keep an eye out for the [`[cfg(version(..))]`](https://github.com/rust-lang/"
"rust/issues/64796) and [`#[cfg(accessible(..))]`](https://github.com/rust-"
"lang/rust/issues/64797) features which provide an opt-in mechanism for new "
"features. These are currently unstable and only available in the nightly "
"channel."
msgstr ""

#: src/reference/semver.md:2032
msgid "Possibly-breaking: changing the platform and environment requirements"
msgstr ""

#: src/reference/semver.md:2034
msgid ""
"There is a very wide range of assumptions a library makes about the "
"environment that it runs in, such as the host platform, operating system "
"version, available services, filesystem support, etc. It can be a breaking "
"change if you make a new release that restricts what was previously "
"supported, for example requiring a newer version of an operating system. "
"These changes can be difficult to track, since you may not always know if a "
"change breaks in an environment that is not automatically tested."
msgstr ""

#: src/reference/semver.md:2042
msgid ""
"Some projects may deem this acceptable breakage, particularly if the "
"breakage is unlikely for most users, or the project doesn't have the "
"resources to support all environments. Another notable situation is when a "
"vendor discontinues support for some hardware or OS, the project may deem it "
"reasonable to also discontinue support."
msgstr ""

#: src/reference/semver.md:2049
msgid "Document the platforms and environments you specifically support."
msgstr ""

#: src/reference/semver.md:2050
msgid "Test your code on a wide range of environments in CI."
msgstr ""

#: src/reference/semver.md:2052
msgid "Minor: introducing new lints"
msgstr ""

#: src/reference/semver.md:2054
msgid ""
"Some changes to a library may cause new lints to be triggered in users of "
"that library. This should generally be considered a compatible change."
msgstr ""

#: src/reference/semver.md:2073
msgid "// Warning: use of deprecated function\n"
msgstr ""

#: src/reference/semver.md:2077
msgid ""
"Beware that it may be possible for this to technically cause a project to "
"fail if they have explicitly denied the warning, and the updated crate is a "
"direct dependency. Denying warnings should be done with care and the "
"understanding that new lints may be introduced over time. However, library "
"authors should be cautious about introducing new warnings and may want to "
"consider the potential impact on their users."
msgstr ""

#: src/reference/semver.md:2081
msgid ""
"The following lints are examples of those that may be introduced when "
"updating a dependency:"
msgstr ""

#: src/reference/semver.md:2083
msgid ""
"[`deprecated`](../../rustc/lints/listing/warn-by-default.html#deprecated) "
"--- Introduced when a dependency adds the [`#[deprecated]` attribute](../../"
"reference/attributes/diagnostics.html#the-deprecated-attribute) to an item "
"you are using."
msgstr ""

#: src/reference/semver.md:2084
msgid ""
"[`unused_must_use`](../../rustc/lints/listing/warn-by-default.html#unused-"
"must-use) --- Introduced when a dependency adds the [`#[must_use]` attribute]"
"(../../reference/attributes/diagnostics.html#the-must_use-attribute) to an "
"item where you are not consuming the result."
msgstr ""

#: src/reference/semver.md:2085
msgid ""
"[`unused_unsafe`](../../rustc/lints/listing/warn-by-default.html#unused-"
"unsafe) --- Introduced when a dependency _removes_ the `unsafe` qualifier "
"from a function, and that is the only unsafe function called in an unsafe "
"block."
msgstr ""

#: src/reference/semver.md:2087
msgid ""
"Additionally, updating `rustc` to a new version may introduce new lints."
msgstr ""

#: src/reference/semver.md:2089
msgid ""
"Transitive dependencies which introduce new lints should not usually cause a "
"failure because Cargo uses [`--cap-lints`](../../rustc/lints/"
"levels.html#capping-lints) to suppress all lints in dependencies."
msgstr ""

#: src/reference/semver.md:2092
msgid ""
"If you build with warnings denied, understand you may need to deal with "
"resolving new warnings whenever you update your dependencies. If using "
"RUSTFLAGS to pass `-Dwarnings`, also add the `-A` flag to allow lints that "
"are likely to cause issues, such as `-Adeprecated`."
msgstr ""

#: src/reference/semver.md:2094
msgid ""
"Introduce deprecations behind a [feature](features.md). For example "
"`#[cfg_attr(feature = \"deprecated\", deprecated=\"use bar instead\")]`. "
"Then, when you plan to remove an item in a future SemVer breaking change, "
"you can communicate with your users that they should enable the `deprecated` "
"feature _before_ updating to remove the use of the deprecated items. This "
"allows users to choose when to respond to deprecations without needing to "
"immediately respond to them. A downside is that it can be difficult to "
"communicate to users that they need to take these manual steps to prepare "
"for a major update."
msgstr ""

#: src/reference/semver.md:2107
msgid "Minor: adding a new Cargo feature"
msgstr ""

#: src/reference/semver.md:2109
msgid ""
"It is usually safe to add new [Cargo features](features.md). If the feature "
"introduces new changes that cause a breaking change, this can cause "
"difficulties for projects that have stricter backwards-compatibility needs. "
"In that scenario, avoid adding the feature to the \"default\" list, and "
"possibly document the consequences of enabling the feature."
msgstr ""

#: src/reference/semver.md:2129
msgid "Major: removing a Cargo feature"
msgstr ""

#: src/reference/semver.md:2131
msgid ""
"It is usually a breaking change to remove [Cargo features](features.md). "
"This will cause an error for any project that enabled the feature."
msgstr ""

#: src/reference/semver.md:2149
msgid ""
"Clearly document your features. If there is an internal or experimental "
"feature, mark it as such, so that users know the status of the feature."
msgstr ""

#: src/reference/semver.md:2151
msgid ""
"Leave the old feature in `Cargo.toml`, but otherwise remove its "
"functionality. Document that the feature is deprecated, and remove it in a "
"future major SemVer release."
msgstr ""

#: src/reference/semver.md:2155
msgid ""
"Major: removing a feature from a feature list if that changes functionality "
"or public items"
msgstr ""

#: src/reference/semver.md:2157
msgid ""
"If removing a feature from another feature, this can break existing users if "
"they are expecting that functionality to be available through that feature."
msgstr ""

#: src/reference/semver.md:2160
msgid ""
"```toml\n"
"# Breaking change example\n"
"\n"
"###########################################################\n"
"# Before\n"
"[features]\n"
"default = [\"std\"]\n"
"std = []\n"
"\n"
"###########################################################\n"
"# After\n"
"[features]\n"
"default = []  # This may cause packages to fail if they are expecting std to "
"be enabled.\n"
"std = []\n"
"```"
msgstr ""

#: src/reference/semver.md:2176
msgid "Possibly-breaking: removing an optional dependency"
msgstr ""

#: src/reference/semver.md:2178
msgid ""
"Removing an [optional dependency](features.md#optional-dependencies) can "
"break a project using your library because another project may be enabling "
"that dependency via [Cargo features](features.md)."
msgstr ""

#: src/reference/semver.md:2181
msgid ""
"When there is an optional dependency, cargo implicitly defines a feature of "
"the same name to provide a mechanism to enable the dependency and to check "
"when it is enabled. This problem can be avoided by using the `dep:` syntax "
"in the `[features]` table, which disables this implicit feature. Using "
"`dep:` makes it possible to hide the existence of optional dependencies "
"under more semantically-relevant names which can be more safely modified."
msgstr ""

#: src/reference/semver.md:2188
msgid ""
"```toml\n"
"# Breaking change example\n"
"\n"
"###########################################################\n"
"# Before\n"
"[dependencies]\n"
"curl = { version = \"0.4.31\", optional = true }\n"
"\n"
"###########################################################\n"
"# After\n"
"[dependencies]\n"
"# ..curl removed\n"
"```"
msgstr ""

#: src/reference/semver.md:2202
msgid ""
"```toml\n"
"# MINOR CHANGE\n"
"#\n"
"# This example shows how to avoid breaking changes with optional "
"dependencies.\n"
"\n"
"###########################################################\n"
"# Before\n"
"[dependencies]\n"
"curl = { version = \"0.4.31\", optional = true }\n"
"\n"
"[features]\n"
"networking = [\"dep:curl\"]\n"
"\n"
"###########################################################\n"
"# After\n"
"[dependencies]\n"
"# Here, one optional dependency was replaced with another.\n"
"hyper = { version = \"0.14.27\", optional = true }\n"
"\n"
"[features]\n"
"networking = [\"dep:hyper\"]\n"
"```"
msgstr ""

#: src/reference/semver.md:2226
msgid ""
"Use the `dep:` syntax in the `[features]` table to avoid exposing optional "
"dependencies in the first place. See [optional dependencies]"
"(features.md#optional-dependencies) for more information."
msgstr ""

#: src/reference/semver.md:2229
msgid ""
"Clearly document your features. If the optional dependency is not included "
"in the documented list of features, then you may decide to consider it safe "
"to change undocumented entries."
msgstr ""

#: src/reference/semver.md:2232
msgid ""
"Leave the optional dependency, and just don't use it within your library."
msgstr ""

#: src/reference/semver.md:2233
msgid ""
"Replace the optional dependency with a [Cargo feature](features.md) that "
"does nothing, and document that it is deprecated."
msgstr ""

#: src/reference/semver.md:2235
msgid ""
"Use high-level features which enable optional dependencies, and document "
"those as the preferred way to enable the extended functionality. For "
"example, if your library has optional support for something like "
"\"networking\", create a generic feature name \"networking\" that enables "
"the optional dependencies necessary to implement \"networking\". Then "
"document the \"networking\" feature."
msgstr ""

#: src/reference/semver.md:2244
msgid "Minor: changing dependency features"
msgstr ""

#: src/reference/semver.md:2246
msgid ""
"It is usually safe to change the features on a dependency, as long as the "
"feature does not introduce a breaking change."
msgstr ""

#: src/reference/semver.md:2249
msgid ""
"```toml\n"
"# MINOR CHANGE\n"
"\n"
"###########################################################\n"
"# Before\n"
"[dependencies]\n"
"rand = { version = \"0.7.3\", features = [\"small_rng\"] }\n"
"\n"
"\n"
"###########################################################\n"
"# After\n"
"[dependencies]\n"
"rand = \"0.7.3\"\n"
"```"
msgstr ""

#: src/reference/semver.md:2264
msgid "Minor: adding dependencies"
msgstr ""

#: src/reference/semver.md:2266
msgid ""
"It is usually safe to add new dependencies, as long as the new dependency "
"does not introduce new requirements that result in a breaking change. For "
"example, adding a new dependency that requires nightly in a project that "
"previously worked on stable is a major change."
msgstr ""

#: src/reference/semver.md:2271
msgid ""
"```toml\n"
"# MINOR CHANGE\n"
"\n"
"###########################################################\n"
"# Before\n"
"[dependencies]\n"
"# ..empty\n"
"\n"
"###########################################################\n"
"# After\n"
"[dependencies]\n"
"log = \"0.4.11\"\n"
"```"
msgstr ""

#: src/reference/semver.md:2285
msgid "Application compatibility"
msgstr ""

#: src/reference/semver.md:2287
msgid ""
"Cargo projects may also include executable binaries which have their own "
"interfaces (such as a CLI interface, OS-level interaction, etc.). Since "
"these are part of the Cargo package, they often use and share the same "
"version as the package. You will need to decide if and how you want to "
"employ a SemVer contract with your users in the changes you make to your "
"application. The potential breaking and compatible changes to an application "
"are too numerous to list, so you are encouraged to use the spirit of the "
"[SemVer](https://semver.org/) spec to guide your decisions on how to apply "
"versioning to your application, or at least document what your commitments "
"are."
msgstr ""

#: src/reference/future-incompat-report.md:3
msgid ""
"Cargo checks for future-incompatible warnings in all dependencies. These are "
"warnings for changes that may become hard errors in the future, causing the "
"dependency to stop building in a future version of rustc. If any warnings "
"are found, a small notice is displayed indicating that the warnings were "
"found, and provides instructions on how to display a full report."
msgstr ""

#: src/reference/future-incompat-report.md:9
msgid "For example, you may see something like this at the end of a build:"
msgstr ""

#: src/reference/future-incompat-report.md:18
msgid ""
"A full report can be displayed with the `cargo report future-"
"incompatibilities --id ID` command, or by running the build again with the "
"`--future-incompat-report` flag. The developer should then update their "
"dependencies to a version where the issue is fixed, or work with the "
"developers of the dependencies to help resolve the issue."
msgstr ""

#: src/reference/future-incompat-report.md:26
msgid ""
"This feature can be configured through a [`[future-incompat-report]`]"
"(config.md#future-incompat-report) section in `.cargo/config.toml`. "
"Currently, the supported options are:"
msgstr ""

#: src/reference/future-incompat-report.md:29
msgid ""
"```toml\n"
"[future-incompat-report]\n"
"frequency = \"always\"\n"
"```"
msgstr ""

#: src/reference/future-incompat-report.md:34
msgid ""
"The supported values for the frequency are `\"always\"` and `\"never\"`, "
"which control whether or not a message is printed out at the end of `cargo "
"build` / `cargo check`."
msgstr ""

#: src/reference/timings.md:2
msgid ""
"The `--timings` option gives some information about how long each "
"compilation takes, and tracks concurrency information over time."
msgstr ""

#: src/reference/timings.md:9
msgid ""
"This writes an HTML report in `target/cargo-timings/cargo-timing.html`. This "
"also writes a copy of the report to the same directory with a timestamp in "
"the filename, if you want to look at older runs."
msgstr ""

#: src/reference/timings.md:13
msgid "Reading the graphs"
msgstr ""

#: src/reference/timings.md:15
msgid "There are two tables and two graphs in the output."
msgstr ""

#: src/reference/timings.md:17
msgid ""
"The first table displays the build information of the project, including the "
"number of units built, the maximum number of concurrency, build time, and "
"the version information of the currently used compiler."
msgstr ""

#: src/reference/timings.md:21
msgid "![build-info](../images/build-info.png)"
msgstr ""

#: src/reference/timings.md:23
msgid ""
"The \"unit\" graph shows the duration of each unit over time. A \"unit\" is "
"a single compiler invocation. There are lines that show which additional "
"units are \"unlocked\" when a unit finishes. That is, it shows the new units "
"that are now allowed to run because their dependencies are all finished. "
"Hover the mouse over a unit to highlight the lines. This can help visualize "
"the critical path of dependencies. This may change between runs because the "
"units may finish in different orders."
msgstr ""

#: src/reference/timings.md:31
msgid ""
"The \"codegen\" times are highlighted in a lavender color. In some cases, "
"build pipelining allows units to start when their dependencies are "
"performing code generation. This information is not always displayed (for "
"example, binary units do not show when code generation starts)."
msgstr ""

#: src/reference/timings.md:36
msgid ""
"The \"custom build\" units are `build.rs` scripts, which when run are "
"highlighted in orange."
msgstr ""

#: src/reference/timings.md:39
msgid "![build-unit-time](../images/build-unit-time.png)"
msgstr ""

#: src/reference/timings.md:41
msgid ""
"The second graph shows Cargo's concurrency over time. The background "
"indicates CPU usage. The three lines are:"
msgstr ""

#: src/reference/timings.md:43
msgid ""
"\"Waiting\" (red) --- This is the number of units waiting for a CPU slot to "
"open."
msgstr ""

#: src/reference/timings.md:45
msgid ""
"\"Inactive\" (blue) --- This is the number of units that are waiting for "
"their dependencies to finish."
msgstr ""

#: src/reference/timings.md:47
msgid "\"Active\" (green) --- This is the number of units currently running."
msgstr ""

#: src/reference/timings.md:49
msgid ""
"![cargo-concurrency-over-time](../images/cargo-concurrency-over-time.png)"
msgstr ""

#: src/reference/timings.md:51
msgid ""
"Note: This does not show the concurrency in the compiler itself. `rustc` "
"coordinates with Cargo via the \"job server\" to stay within the concurrency "
"limit. This currently mostly applies to the code generation phase."
msgstr ""

#: src/reference/timings.md:55
msgid "Tips for addressing compile times:"
msgstr ""

#: src/reference/timings.md:56
msgid "Look for slow dependencies."
msgstr ""

#: src/reference/timings.md:57
msgid "Check if they have features that you may wish to consider disabling."
msgstr ""

#: src/reference/timings.md:58
msgid "Consider trying to remove the dependency completely."
msgstr ""

#: src/reference/timings.md:59
msgid ""
"Look for a crate being built multiple times with different versions. Try to "
"remove the older versions from the dependency graph."
msgstr ""

#: src/reference/timings.md:61
msgid "Split large crates into smaller pieces."
msgstr ""

#: src/reference/timings.md:62
msgid ""
"If there are a large number of crates bottlenecked on a single crate, focus "
"your attention on improving that one crate to improve parallelism."
msgstr ""

#: src/reference/timings.md:65
msgid ""
"The last table lists the total time and \"codegen\" time spent on each unit, "
"as well as the features that were enabled during each unit's compilation."
msgstr ""

#: src/reference/lints.md:3
msgid ""
"Note: [Cargo's linting system is unstable](unstable.md#lintscargo) and can "
"only be used on nightly toolchains"
msgstr ""

#: src/reference/lints.md:5
msgid "Warn-by-default"
msgstr ""

#: src/reference/lints.md:7
msgid "These lints are all set to the 'warn' level by default."
msgstr ""

#: src/reference/lints.md:8
msgid "[`unknown_lints`](#unknown_lints)"
msgstr ""

#: src/reference/lints.md:10
msgid "`unknown_lints`"
msgstr ""

#: src/reference/lints.md:11
msgid "Set to `warn` by default"
msgstr ""

#: src/reference/lints.md:13
msgid "What it does"
msgstr ""

#: src/reference/lints.md:14
msgid "Checks for unknown lints in the `[lints.cargo]` table"
msgstr ""

#: src/reference/lints.md:16
msgid "Why it is bad"
msgstr ""

#: src/reference/lints.md:17
msgid ""
"The lint name could be misspelled, leading to confusion as to why it is not "
"working as expected"
msgstr ""

#: src/reference/lints.md:19
msgid ""
"The unknown lint could end up causing an error if `cargo` decides to make a "
"lint with the same name in the future"
msgstr ""

#: src/reference/lints.md:23
msgid ""
"```toml\n"
"[lints.cargo]\n"
"this-lint-does-not-exist = \"warn\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:3
msgid ""
"Experimental Cargo features are only available on the [nightly channel]"
"(../../book/appendix-07-nightly-rust.html). You are encouraged to experiment "
"with these features to see if they meet your needs, and if there are any "
"issues or problems. Check the linked tracking issues listed below for more "
"information on the feature, and click the GitHub subscribe button if you "
"want future updates."
msgstr ""

#: src/reference/unstable.md:9
msgid ""
"After some period of time, if the feature does not have any major concerns, "
"it can be [stabilized](https://doc.crates.io/contrib/process/"
"unstable.html#stabilization), which will make it available on stable once "
"the current nightly release reaches the stable channel (anywhere from 6 to "
"12 weeks)."
msgstr ""

#: src/reference/unstable.md:13
msgid ""
"There are three different ways that unstable features can be enabled based "
"on how the feature works:"
msgstr ""

#: src/reference/unstable.md:16
msgid ""
"New syntax in `Cargo.toml` requires a `cargo-features` key at the top of "
"`Cargo.toml`, before any tables. For example:"
msgstr ""

#: src/reference/unstable.md:19
msgid ""
"```toml\n"
"# This specifies which new Cargo.toml features are enabled.\n"
"cargo-features = [\"test-dummy-unstable\"]\n"
"\n"
"[package]\n"
"name = \"my-package\"\n"
"version = \"0.1.0\"\n"
"im-a-teapot = true  # This is a new option enabled by test-dummy-unstable.\n"
"```"
msgstr ""

#: src/reference/unstable.md:29
msgid ""
"New command-line flags, options, and subcommands require the `-Z unstable-"
"options` CLI option to also be included. For example, the new `--artifact-"
"dir` option is only available on nightly:"
msgstr ""

#: src/reference/unstable.md:33
msgid "`cargo +nightly build --artifact-dir=out -Z unstable-options`"
msgstr ""

#: src/reference/unstable.md:35
msgid ""
"`-Z` command-line flags are used to enable new functionality that may not "
"have an interface, or the interface has not yet been designed, or for more "
"complex features that affect multiple parts of Cargo. For example, the "
"[mtime-on-use](#mtime-on-use) feature can be enabled with:"
msgstr ""

#: src/reference/unstable.md:40
msgid "`cargo +nightly build -Z mtime-on-use`"
msgstr ""

#: src/reference/unstable.md:42
msgid "Run `cargo -Z help` to see a list of flags available."
msgstr ""

#: src/reference/unstable.md:44
msgid ""
"Anything which can be configured with a `-Z` flag can also be set in the "
"cargo [config file](config.md) (`.cargo/config.toml`) in the `unstable` "
"table. For example:"
msgstr ""

#: src/reference/unstable.md:48
msgid ""
"```toml\n"
"[unstable]\n"
"mtime-on-use = true\n"
"build-std = [\"core\", \"alloc\"]\n"
"```"
msgstr ""

#: src/reference/unstable.md:54
msgid "Each new feature described below should explain how to use it."
msgstr ""

#: src/reference/unstable.md:56
msgid ""
"_For the latest nightly, see the [nightly version](https://doc.rust-lang.org/"
"nightly/cargo/reference/unstable.html) of this page._"
msgstr ""

#: src/reference/unstable.md:63
msgid "List of unstable features"
msgstr ""

#: src/reference/unstable.md:65
msgid "Unstable-specific features"
msgstr ""

#: src/reference/unstable.md:66
msgid ""
"[\\-Z allow-features](#allow-features) --- Provides a way to restrict which "
"unstable features are used."
msgstr ""

#: src/reference/unstable.md:67
msgid "Build scripts and linking"
msgstr ""

#: src/reference/unstable.md:68
msgid "[Metabuild](#metabuild) --- Provides declarative build scripts."
msgstr ""

#: src/reference/unstable.md:69
msgid "Resolver and features"
msgstr ""

#: src/reference/unstable.md:70
msgid ""
"[no-index-update](#no-index-update) --- Prevents cargo from updating the "
"index cache."
msgstr ""

#: src/reference/unstable.md:71
msgid ""
"[avoid-dev-deps](#avoid-dev-deps) --- Prevents the resolver from including "
"dev-dependencies during resolution."
msgstr ""

#: src/reference/unstable.md:72
msgid ""
"[minimal-versions](#minimal-versions) --- Forces the resolver to use the "
"lowest compatible version instead of the highest."
msgstr ""

#: src/reference/unstable.md:73
msgid ""
"[direct-minimal-versions](#direct-minimal-versions) — Forces the resolver to "
"use the lowest compatible version instead of the highest."
msgstr ""

#: src/reference/unstable.md:74
msgid ""
"[public-dependency](#public-dependency) --- Allows dependencies to be "
"classified as either public or private."
msgstr ""

#: src/reference/unstable.md:75
msgid ""
"[msrv-policy](#msrv-policy) --- MSRV-aware resolver and version selection"
msgstr ""

#: src/reference/unstable.md:76
msgid ""
"[precise-pre-release](#precise-pre-release) --- Allows pre-release versions "
"to be selected with `update --precise`"
msgstr ""

#: src/reference/unstable.md:77
msgid ""
"[sbom](#sbom) --- Generates SBOM pre-cursor files for compiled artifacts"
msgstr ""

#: src/reference/unstable.md:78
msgid ""
"[update-breaking](#update-breaking) --- Allows upgrading to breaking "
"versions with `update --breaking`"
msgstr ""

#: src/reference/unstable.md:79
msgid ""
"[feature-unification](#feature-unification) --- Enable new feature "
"unification modes in workspaces"
msgstr ""

#: src/reference/unstable.md:80
msgid "Output behavior"
msgstr ""

#: src/reference/unstable.md:81
msgid ""
"[artifact-dir](#artifact-dir) --- Adds a directory where artifacts are "
"copied to."
msgstr ""

#: src/reference/unstable.md:82
msgid ""
"[build-dir](#build-dir) --- Adds a directory where intermediate build "
"artifacts are stored."
msgstr ""

#: src/reference/unstable.md:83
msgid ""
"[Different binary name](#different-binary-name) --- Assign a name to the "
"built binary that is separate from the crate name."
msgstr ""

#: src/reference/unstable.md:84
msgid ""
"[root-dir](#root-dir) --- Controls the root directory relative to which "
"paths are printed"
msgstr ""

#: src/reference/unstable.md:85
msgid "Compile behavior"
msgstr ""

#: src/reference/unstable.md:86
msgid ""
"[mtime-on-use](#mtime-on-use) --- Updates the last-modified timestamp on "
"every dependency every time it is used, to provide a mechanism to delete "
"unused artifacts."
msgstr ""

#: src/reference/unstable.md:87
msgid ""
"[doctest-xcompile](#doctest-xcompile) --- Supports running doctests with the "
"`--target` flag."
msgstr ""

#: src/reference/unstable.md:88
msgid ""
"[build-std](#build-std) --- Builds the standard library instead of using pre-"
"built binaries."
msgstr ""

#: src/reference/unstable.md:89
msgid ""
"[build-std-features](#build-std-features) --- Sets features to use with the "
"standard library."
msgstr ""

#: src/reference/unstable.md:90
msgid ""
"[binary-dep-depinfo](#binary-dep-depinfo) --- Causes the dep-info file to "
"track binary dependencies."
msgstr ""

#: src/reference/unstable.md:91
msgid ""
"[checksum-freshness](#checksum-freshness) --- When passed, the decision as "
"to whether a crate needs to be rebuilt is made using file checksums instead "
"of the file mtime."
msgstr ""

#: src/reference/unstable.md:92
msgid ""
"[panic-abort-tests](#panic-abort-tests) --- Allows running tests with the "
"\"abort\" panic strategy."
msgstr ""

#: src/reference/unstable.md:93
msgid ""
"[host-config](#host-config) --- Allows setting `[target]`\\-like "
"configuration settings for host build targets."
msgstr ""

#: src/reference/unstable.md:94
msgid ""
"[target-applies-to-host](#target-applies-to-host) --- Alters whether certain "
"flags will be passed to host build targets."
msgstr ""

#: src/reference/unstable.md:95
msgid "[gc](#gc) --- Global cache garbage collection."
msgstr ""

#: src/reference/unstable.md:96
msgid ""
"[open-namespaces](#open-namespaces) --- Allow multiple packages to "
"participate in the same API namespace"
msgstr ""

#: src/reference/unstable.md:97
msgid "rustdoc"
msgstr ""

#: src/reference/unstable.md:98
msgid ""
"[rustdoc-map](#rustdoc-map) --- Provides mappings for documentation to link "
"to external sites like [docs.rs](https://docs.rs/)."
msgstr ""

#: src/reference/unstable.md:99
msgid ""
"[scrape-examples](#scrape-examples) --- Shows examples within documentation."
msgstr ""

#: src/reference/unstable.md:100
msgid ""
"[output-format](#output-format-for-rustdoc) --- Allows documentation to also "
"be emitted in the experimental [JSON format](https://doc.rust-lang.org/"
"nightly/nightly-rustc/rustdoc_json_types/)."
msgstr ""

#: src/reference/unstable.md:101
msgid "`Cargo.toml` extensions"
msgstr ""

#: src/reference/unstable.md:102
msgid ""
"[Profile `rustflags` option](#profile-rustflags-option) --- Passed directly "
"to rustc."
msgstr ""

#: src/reference/unstable.md:103
msgid ""
"[codegen-backend](#codegen-backend) --- Select the codegen backend used by "
"rustc."
msgstr ""

#: src/reference/unstable.md:104
msgid ""
"[per-package-target](#per-package-target) --- Sets the `--target` to use for "
"each individual package."
msgstr ""

#: src/reference/unstable.md:105
msgid ""
"[artifact dependencies](#artifact-dependencies) --- Allow build artifacts to "
"be included into other build artifacts and build them for different targets."
msgstr ""

#: src/reference/unstable.md:106
msgid ""
"[Profile `trim-paths` option](#profile-trim-paths-option) --- Control the "
"sanitization of file paths in build outputs."
msgstr ""

#: src/reference/unstable.md:107
msgid "[`[lints.cargo]`](#lintscargo) --- Allows configuring lints for Cargo."
msgstr ""

#: src/reference/unstable.md:108
msgid ""
"[path bases](#path-bases) --- Named base directories for path dependencies."
msgstr ""

#: src/reference/unstable.md:109
msgid "Information and metadata"
msgstr ""

#: src/reference/unstable.md:110
msgid ""
"[Build-plan](#build-plan) --- Emits JSON information on which commands will "
"be run."
msgstr ""

#: src/reference/unstable.md:111
msgid ""
"[unit-graph](#unit-graph) --- Emits JSON for Cargo's internal graph "
"structure."
msgstr ""

#: src/reference/unstable.md:112
msgid ""
"[`cargo rustc --print`](#rustc---print) --- Calls rustc with `--print` to "
"display information from rustc."
msgstr ""

#: src/reference/unstable.md:114
msgid ""
"[config-include](#config-include) --- Adds the ability for config files to "
"include other files."
msgstr ""

#: src/reference/unstable.md:115
msgid ""
"[`cargo config`](#cargo-config) --- Adds a new subcommand for viewing config "
"files."
msgstr ""

#: src/reference/unstable.md:117
msgid ""
"[publish-timeout](#publish-timeout) --- Controls the timeout between "
"uploading the crate and being available in the index"
msgstr ""

#: src/reference/unstable.md:118
msgid ""
"[asymmetric-token](#asymmetric-token) --- Adds support for authentication "
"tokens using asymmetric cryptography (`cargo:paseto` provider)."
msgstr ""

#: src/reference/unstable.md:119
msgid "Other"
msgstr ""

#: src/reference/unstable.md:120
msgid ""
"[gitoxide](#gitoxide) --- Use `gitoxide` instead of `git2` for a set of "
"operations."
msgstr ""

#: src/reference/unstable.md:121
msgid "[script](#script) --- Enable support for single-file `.rs` packages."
msgstr ""

#: src/reference/unstable.md:122
msgid ""
"[lockfile-path](#lockfile-path) --- Allows to specify a path to lockfile "
"other than the default path `<workspace_root>/Cargo.lock`."
msgstr ""

#: src/reference/unstable.md:123
msgid ""
"[package-workspace](#package-workspace) --- Allows for packaging and "
"publishing multiple crates in a workspace."
msgstr ""

#: src/reference/unstable.md:124
msgid ""
"[native-completions](#native-completions) --- Move cargo shell completions "
"to native completions."
msgstr ""

#: src/reference/unstable.md:125
msgid ""
"[warnings](#warnings) --- controls warning behavior; options for allowing or "
"denying warnings."
msgstr ""

#: src/reference/unstable.md:127
msgid "allow-features"
msgstr ""

#: src/reference/unstable.md:129
msgid ""
"This permanently-unstable flag makes it so that only a listed set of "
"unstable features can be used. Specifically, if you pass `-Zallow-"
"features=foo,bar`, you'll continue to be able to pass `-Zfoo` and `-Zbar` to "
"`cargo`, but you will be unable to pass `-Zbaz`. You can pass an empty "
"string (`-Zallow-features=`) to disallow all unstable features."
msgstr ""

#: src/reference/unstable.md:136
msgid ""
"`-Zallow-features` also restricts which unstable features can be passed to "
"the `cargo-features` entry in `Cargo.toml`. If, for example, you want to "
"allow"
msgstr ""

#: src/reference/unstable.md:140
msgid ""
"```toml\n"
"cargo-features = [\"test-dummy-unstable\"]\n"
"```"
msgstr ""

#: src/reference/unstable.md:144
msgid ""
"where `test-dummy-unstable` is unstable, that features would also be "
"disallowed by `-Zallow-features=`, and allowed with `-Zallow-features=test-"
"dummy-unstable`."
msgstr ""

#: src/reference/unstable.md:148
msgid ""
"The list of features passed to cargo's `-Zallow-features` is also passed to "
"any Rust tools that cargo ends up calling (like `rustc` or `rustdoc`). Thus, "
"if you run `cargo -Zallow-features=`, no unstable Cargo _or_ Rust features "
"can be used."
msgstr ""

#: src/reference/unstable.md:153
msgid "no-index-update"
msgstr ""

#: src/reference/unstable.md:154
msgid ""
"Original Issue: [\\#3479](https://github.com/rust-lang/cargo/issues/3479)"
msgstr ""

#: src/reference/unstable.md:155
msgid ""
"Tracking Issue: [\\#7404](https://github.com/rust-lang/cargo/issues/7404)"
msgstr ""

#: src/reference/unstable.md:157
msgid ""
"The `-Z no-index-update` flag ensures that Cargo does not attempt to update "
"the registry index. This is intended for tools such as Crater that issue "
"many Cargo commands, and you want to avoid the network latency for updating "
"the index each time."
msgstr ""

#: src/reference/unstable.md:162
msgid "mtime-on-use"
msgstr ""

#: src/reference/unstable.md:163
msgid "Original Issue: [\\#6477](https://github.com/rust-lang/cargo/pull/6477)"
msgstr ""

#: src/reference/unstable.md:164
msgid ""
"Cache usage meta tracking issue: [\\#7150](https://github.com/rust-lang/"
"cargo/issues/7150)"
msgstr ""

#: src/reference/unstable.md:166
msgid ""
"The `-Z mtime-on-use` flag is an experiment to have Cargo update the mtime "
"of used files to make it easier for tools like cargo-sweep to detect which "
"files are stale. For many workflows this needs to be set on _all_ "
"invocations of cargo. To make this more practical setting the "
"`unstable.mtime_on_use` flag in `.cargo/config.toml` or the corresponding "
"ENV variable will apply the `-Z mtime-on-use` to all invocations of nightly "
"cargo. (the config flag is ignored by stable)"
msgstr ""

#: src/reference/unstable.md:173
msgid "avoid-dev-deps"
msgstr ""

#: src/reference/unstable.md:174
msgid ""
"Original Issue: [\\#4988](https://github.com/rust-lang/cargo/issues/4988)"
msgstr ""

#: src/reference/unstable.md:175
msgid ""
"Tracking Issue: [\\#5133](https://github.com/rust-lang/cargo/issues/5133)"
msgstr ""

#: src/reference/unstable.md:177
msgid ""
"When running commands such as `cargo install` or `cargo build`, Cargo "
"currently requires dev-dependencies to be downloaded, even if they are not "
"used. The `-Z avoid-dev-deps` flag allows Cargo to avoid downloading dev-"
"dependencies if they are not needed. The `Cargo.lock` file will not be "
"generated if dev-dependencies are skipped."
msgstr ""

#: src/reference/unstable.md:183
msgid "minimal-versions"
msgstr ""

#: src/reference/unstable.md:184 src/reference/unstable.md:204
msgid ""
"Original Issue: [\\#4100](https://github.com/rust-lang/cargo/issues/4100)"
msgstr ""

#: src/reference/unstable.md:185 src/reference/unstable.md:205
msgid ""
"Tracking Issue: [\\#5657](https://github.com/rust-lang/cargo/issues/5657)"
msgstr ""

#: src/reference/unstable.md:187
msgid ""
"Note: It is not recommended to use this feature. Because it enforces minimal "
"versions for all transitive dependencies, its usefulness is limited since "
"not all external dependencies declare proper lower version bounds. It is "
"intended that it will be changed in the future to only enforce minimal "
"versions for direct dependencies."
msgstr ""

#: src/reference/unstable.md:193
msgid ""
"When a `Cargo.lock` file is generated, the `-Z minimal-versions` flag will "
"resolve the dependencies to the minimum SemVer version that will satisfy the "
"requirements (instead of the greatest version)."
msgstr ""

#: src/reference/unstable.md:197 src/reference/unstable.md:211
msgid ""
"The intended use-case of this flag is to check, during continuous "
"integration, that the versions specified in Cargo.toml are a correct "
"reflection of the minimum versions that you are actually using. That is, if "
"Cargo.toml says `foo = \"1.0.0\"` that you don't accidentally depend on "
"features added only in `foo 1.5.0`."
msgstr ""

#: src/reference/unstable.md:203
msgid "direct-minimal-versions"
msgstr ""

#: src/reference/unstable.md:207
msgid ""
"When a `Cargo.lock` file is generated, the `-Z direct-minimal-versions` flag "
"will resolve the dependencies to the minimum SemVer version that will "
"satisfy the requirements (instead of the greatest version) for direct "
"dependencies only."
msgstr ""

#: src/reference/unstable.md:217
msgid ""
"Indirect dependencies are resolved as normal so as not to be blocked on "
"their minimal version validation."
msgstr ""

#: src/reference/unstable.md:220
msgid "artifact-dir"
msgstr ""

#: src/reference/unstable.md:221
msgid ""
"Original Issue: [\\#4875](https://github.com/rust-lang/cargo/issues/4875)"
msgstr ""

#: src/reference/unstable.md:222
msgid ""
"Tracking Issue: [\\#6790](https://github.com/rust-lang/cargo/issues/6790)"
msgstr ""

#: src/reference/unstable.md:224
msgid ""
"This feature allows you to specify the directory where artifacts will be "
"copied to after they are built. Typically artifacts are only written to the "
"`target/release` or `target/debug` directories. However, determining the "
"exact filename can be tricky since you need to parse JSON output. The `--"
"artifact-dir` flag makes it easier to predictably access the artifacts. Note "
"that the artifacts are copied, so the originals are still in the `target` "
"directory. Example:"
msgstr ""

#: src/reference/unstable.md:236
msgid "This can also be specified in `.cargo/config.toml` files."
msgstr ""

#: src/reference/unstable.md:238
msgid ""
"```toml\n"
"[build]\n"
"artifact-dir = \"out\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:243
msgid "build-dir"
msgstr ""

#: src/reference/unstable.md:244
msgid ""
"Original Issue: [\\#14125](https://github.com/rust-lang/cargo/issues/14125)"
msgstr ""

#: src/reference/unstable.md:245
msgid ""
"Tracking Issue: [\\#14125](https://github.com/rust-lang/cargo/issues/14125)"
msgstr ""

#: src/reference/unstable.md:247
msgid ""
"The directory where intermediate build artifacts will be stored. "
"Intermediate artifacts are produced by Rustc/Cargo during the build process."
msgstr ""

#: src/reference/unstable.md:250
msgid ""
"```toml\n"
"[build]\n"
"build-dir = \"out\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:255
msgid "`build.build-dir`"
msgstr ""

#: src/reference/unstable.md:258
msgid "Default: Defaults to the value of `build.target-dir`"
msgstr ""

#: src/reference/unstable.md:259
msgid "Environment: `CARGO_BUILD_BUILD_DIR`"
msgstr ""

#: src/reference/unstable.md:261
msgid "The path to where internal files used as part of the build are placed."
msgstr ""

#: src/reference/unstable.md:264
msgid "root-dir"
msgstr ""

#: src/reference/unstable.md:265
msgid ""
"Original Issue: [\\#9887](https://github.com/rust-lang/cargo/issues/9887)"
msgstr ""

#: src/reference/unstable.md:266
msgid "Tracking Issue: None (not currently slated for stabilization)"
msgstr ""

#: src/reference/unstable.md:268
msgid ""
"The `-Zroot-dir` flag sets the root directory relative to which paths are "
"printed. This affects both diagnostics and paths emitted by the `file!()` "
"macro."
msgstr ""

#: src/reference/unstable.md:271
msgid "doctest-xcompile"
msgstr ""

#: src/reference/unstable.md:272
msgid ""
"Tracking Issue: [\\#7040](https://github.com/rust-lang/cargo/issues/7040)"
msgstr ""

#: src/reference/unstable.md:273
msgid ""
"Tracking Rustc Issue: [\\#64245](https://github.com/rust-lang/rust/issues/"
"64245)"
msgstr ""

#: src/reference/unstable.md:275
msgid ""
"This flag changes `cargo test`'s behavior when handling doctests when a "
"target is passed. Currently, if a target is passed that is different from "
"the host cargo will simply skip testing doctests. If this flag is present, "
"cargo will continue as normal, passing the tests to doctest, while also "
"passing it a `--target` option, as well as enabling `-Zunstable-features --"
"enable-per-target-ignores` and passing along information from `.cargo/"
"config.toml`. See the rustc issue for more information."
msgstr ""

#: src/reference/unstable.md:287
msgid "Build-plan"
msgstr ""

#: src/reference/unstable.md:288
msgid ""
"Tracking Issue: [\\#5579](https://github.com/rust-lang/cargo/issues/5579)"
msgstr ""

#: src/reference/unstable.md:292
msgid ""
"The build-plan feature is deprecated and may be removed in a future version. "
"See <https://github.com/rust-lang/cargo/issues/7614>."
msgstr ""

#: src/reference/unstable.md:297
msgid ""
"The `--build-plan` argument for the `build` command will output JSON with "
"information about which commands would be run without actually executing "
"anything. This can be useful when integrating with another build tool. "
"Example:"
msgstr ""

#: src/reference/unstable.md:306
msgid "Metabuild"
msgstr ""

#: src/reference/unstable.md:307
msgid ""
"Tracking Issue: [rust-lang/rust#49803](https://github.com/rust-lang/rust/"
"issues/49803)"
msgstr ""

#: src/reference/unstable.md:308
msgid ""
"RFC: [\\#2196](https://github.com/rust-lang/rfcs/blob/master/text/2196-"
"metabuild.md)"
msgstr ""

#: src/reference/unstable.md:310
msgid ""
"Metabuild is a feature to have declarative build scripts. Instead of writing "
"a `build.rs` script, you specify a list of build dependencies in the "
"`metabuild` key in `Cargo.toml`. A build script is automatically generated "
"that runs each build dependency in order. Metabuild packages can then read "
"metadata from `Cargo.toml` to specify their behavior."
msgstr ""

#: src/reference/unstable.md:316
msgid ""
"Include `cargo-features` at the top of `Cargo.toml`, a `metabuild` key in "
"the `package`, list the dependencies in `build-dependencies`, and add any "
"metadata that the metabuild packages require under `package.metadata`. "
"Example:"
msgstr ""

#: src/reference/unstable.md:320
msgid ""
"```toml\n"
"cargo-features = [\"metabuild\"]\n"
"\n"
"[package]\n"
"name = \"mypackage\"\n"
"version = \"0.0.1\"\n"
"metabuild = [\"foo\", \"bar\"]\n"
"\n"
"[build-dependencies]\n"
"foo = \"1.0\"\n"
"bar = \"1.0\"\n"
"\n"
"[package.metadata.foo]\n"
"extra-info = \"qwerty\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:336
msgid ""
"Metabuild packages should have a public function called `metabuild` that "
"performs the same actions as a regular `build.rs` script would perform."
msgstr ""

#: src/reference/unstable.md:339
msgid "public-dependency"
msgstr ""

#: src/reference/unstable.md:340
msgid ""
"Tracking Issue: [\\#44663](https://github.com/rust-lang/rust/issues/44663)"
msgstr ""

#: src/reference/unstable.md:342
msgid ""
"The 'public-dependency' feature allows marking dependencies as 'public' or "
"'private'. When this feature is enabled, additional information is passed to "
"rustc to allow the [exported_private_dependencies](../../rustc/lints/listing/"
"warn-by-default.html#exported-private-dependencies) lint to function "
"properly."
msgstr ""

#: src/reference/unstable.md:346
msgid "To enable this feature, you can either use `-Zpublic-dependency`"
msgstr ""

#: src/reference/unstable.md:352
msgid "or `[unstable]` table, for example,"
msgstr ""

#: src/reference/unstable.md:360
msgid ""
"`public-dependency` could also be enabled in `cargo-features`, **though this "
"is deprecated and will be removed soon**."
msgstr ""

#: src/reference/unstable.md:362
msgid ""
"```toml\n"
"cargo-features = [\"public-dependency\"]\n"
"\n"
"[dependencies]\n"
"my_dep = { version = \"1.2.3\", public = true }\n"
"private_dep = \"2.0.0\" # Will be 'private' by default\n"
"```"
msgstr ""

#: src/reference/unstable.md:370
msgid "Documentation updates:"
msgstr ""

#: src/reference/unstable.md:371
msgid ""
"For workspace's \"The `dependencies` table\" section, include `public` as an "
"unsupported field for `workspace.dependencies`"
msgstr ""

#: src/reference/unstable.md:373
msgid "msrv-policy"
msgstr ""

#: src/reference/unstable.md:374
msgid ""
"[RFC: MSRV-aware Resolver](https://rust-lang.github.io/rfcs/3537-msrv-"
"resolver.html)"
msgstr ""

#: src/reference/unstable.md:375
msgid ""
"[\\#9930](https://github.com/rust-lang/cargo/issues/9930) (MSRV-aware "
"resolver)"
msgstr ""

#: src/reference/unstable.md:377
msgid ""
"Catch-all unstable feature for MSRV-aware cargo features under [RFC 2495]"
"(https://github.com/rust-lang/rfcs/pull/2495)."
msgstr ""

#: src/reference/unstable.md:380
msgid "MSRV-aware cargo add"
msgstr ""

#: src/reference/unstable.md:382
msgid ""
"This was stabilized in 1.79 in [\\#13608](https://github.com/rust-lang/cargo/"
"pull/13608)."
msgstr ""

#: src/reference/unstable.md:384
msgid "MSRV-aware resolver"
msgstr ""

#: src/reference/unstable.md:386
msgid ""
"This was stabilized in 1.84 in [\\#14639](https://github.com/rust-lang/cargo/"
"pull/14639)."
msgstr ""

#: src/reference/unstable.md:388
msgid "Convert `incompatible_toolchain` error into a lint"
msgstr ""

#: src/reference/unstable.md:390 src/reference/unstable.md:394
#: src/reference/unstable.md:398 src/reference/unstable.md:402
msgid "Unimplemented"
msgstr ""

#: src/reference/unstable.md:392
msgid "`--update-rust-version` flag for `cargo add`, `cargo update`"
msgstr ""

#: src/reference/unstable.md:396
msgid "`package.rust-version = \"toolchain\"`"
msgstr ""

#: src/reference/unstable.md:400
msgid ""
"Update `cargo new` template to set `package.rust-version = \"toolchain\"`"
msgstr ""

#: src/reference/unstable.md:404
msgid "precise-pre-release"
msgstr ""

#: src/reference/unstable.md:406
msgid ""
"Tracking Issue: [\\#13290](https://github.com/rust-lang/cargo/issues/13290)"
msgstr ""

#: src/reference/unstable.md:407
msgid "RFC: [\\#3493](https://github.com/rust-lang/rfcs/pull/3493)"
msgstr ""

#: src/reference/unstable.md:409
msgid ""
"The `precise-pre-release` feature allows pre-release versions to be selected "
"with `update --precise` even when a pre-release is not specified by a "
"projects `Cargo.toml`."
msgstr ""

#: src/reference/unstable.md:412
msgid "Take for example this `Cargo.toml`."
msgstr ""

#: src/reference/unstable.md:414
msgid ""
"```toml\n"
"[dependencies]\n"
"my-dependency = \"0.1.1\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:419
msgid ""
"It's possible to update `my-dependency` to a pre-release with `update "
"-Zunstable-options my-dependency --precise 0.1.2-pre.0`. This is because "
"`0.1.2-pre.0` is considered compatible with `0.1.1`. It would not be "
"possible to upgrade to `0.2.0-pre.0` from `0.1.1` in the same way."
msgstr ""

#: src/reference/unstable.md:423
msgid "sbom"
msgstr ""

#: src/reference/unstable.md:424
msgid ""
"Tracking Issue: [\\#13709](https://github.com/rust-lang/cargo/pull/13709)"
msgstr ""

#: src/reference/unstable.md:425
msgid "RFC: [\\#3553](https://github.com/rust-lang/rfcs/pull/3553)"
msgstr ""

#: src/reference/unstable.md:427
msgid ""
"The `sbom` build config allows to generate so-called SBOM pre-cursor files "
"alongside each compiled artifact. A Software Bill Of Material (SBOM) tool "
"can incorporate these generated files to collect important information from "
"the cargo build process that are difficult or impossible to obtain in "
"another way."
msgstr ""

#: src/reference/unstable.md:432
msgid ""
"To enable this feature either set the `sbom` field in the `.cargo/"
"config.toml`"
msgstr ""

#: src/reference/unstable.md:442
msgid ""
"or set the `CARGO_BUILD_SBOM` environment variable to `true`. The "
"functionality is available behind the flag `-Z sbom`."
msgstr ""

#: src/reference/unstable.md:445
msgid ""
"The generated output files are in JSON format and follow the naming scheme "
"`<artifact>.cargo-sbom.json`. The JSON file contains information about "
"dependencies, target, features and the used `rustc` compiler."
msgstr ""

#: src/reference/unstable.md:449
msgid ""
"SBOM pre-cursor files are generated for all executable and linkable outputs "
"that are uplifted into the target or artifact directories."
msgstr ""

#: src/reference/unstable.md:454
msgid ""
"`CARGO_SBOM_PATH` -- a list of generated SBOM precursor files, separated by "
"the platform PATH separator. The list can be split with "
"`std::env::split_paths`."
msgstr ""

#: src/reference/unstable.md:456
msgid "SBOM pre-cursor schema"
msgstr ""

#: src/reference/unstable.md:458
msgid ""
"```json5\n"
"{\n"
"  // Schema version.\n"
"  \"version\": 1,\n"
"  // Index into the crates array for the root crate.\n"
"  \"root\": 0,\n"
"  // Array of all crates. There may be duplicates of the same crate if that\n"
"  // crate is compiled differently (different opt-level, features, etc).\n"
"  \"crates\": [\n"
"    {\n"
"      // Package ID specification\n"
"      \"id\": \"path+file:///sample-package#0.1.0\",\n"
"      // List of target kinds: bin, lib, rlib, dylib, cdylib, staticlib, "
"proc-macro, example, test, bench, custom-build\n"
"      \"kind\": [\"bin\"],\n"
"      // Enabled feature flags.\n"
"      \"features\": [],\n"
"      // Dependencies for this crate.\n"
"      \"dependencies\": [\n"
"        {\n"
"          // Index in to the crates array.\n"
"          \"index\": 1,\n"
"          // Dependency kind: \n"
"          // Normal: A dependency linked to the artifact produced by this "
"crate.\n"
"          // Build: A compile-time dependency used to build this crate "
"(build-script or proc-macro).\n"
"          \"kind\": \"normal\"\n"
"        },\n"
"        {\n"
"          // A crate can depend on another crate with both normal and build "
"edges.\n"
"          \"index\": 1,\n"
"          \"kind\": \"build\"\n"
"        }\n"
"      ]\n"
"    },\n"
"    {\n"
"      \"id\": \"registry+https://github.com/rust-lang/crates.io-"
"index#zerocopy@0.8.16\",\n"
"      \"kind\": [\"bin\"],\n"
"      \"features\": [],\n"
"      \"dependencies\": []\n"
"    }\n"
"  ],\n"
"  // Information about rustc used to perform the compilation.\n"
"  \"rustc\": {\n"
"    // Compiler version\n"
"    \"version\": \"1.86.0-nightly\",\n"
"    // Compiler wrapper\n"
"    \"wrapper\": null,\n"
"    // Compiler workspace wrapper\n"
"    \"workspace_wrapper\": null,\n"
"    // Commit hash for rustc\n"
"    \"commit_hash\": \"bef3c3b01f690de16738b1c9f36470fbfc6ac623\",\n"
"    // Host target triple\n"
"    \"host\": \"x86_64-pc-windows-msvc\",\n"
"    // Verbose version string: `rustc -vV`\n"
"    \"verbose_version\": \"rustc 1.86.0-nightly (bef3c3b01 "
"2025-02-04)\\nbinary: rustc\\ncommit-hash: "
"bef3c3b01f690de16738b1c9f36470fbfc6ac623\\ncommit-date: 2025-02-04\\nhost: "
"x86_64-pc-windows-msvc\\nrelease: 1.86.0-nightly\\nLLVM version: "
"19.1.7\\n\"\n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/reference/unstable.md:516
msgid "update-breaking"
msgstr ""

#: src/reference/unstable.md:518
msgid ""
"Tracking Issue: [\\#12425](https://github.com/rust-lang/cargo/issues/12425)"
msgstr ""

#: src/reference/unstable.md:520
msgid ""
"Allow upgrading dependencies version requirements in `Cargo.toml` across "
"SemVer incompatible versions using with the `--breaking` flag."
msgstr ""

#: src/reference/unstable.md:523
msgid "This only applies to dependencies when"
msgstr ""

#: src/reference/unstable.md:524
msgid "The package is a dependency of a workspace member"
msgstr ""

#: src/reference/unstable.md:525
msgid "The dependency is not renamed"
msgstr ""

#: src/reference/unstable.md:526
msgid "A SemVer-incompatible version is available"
msgstr ""

#: src/reference/unstable.md:527
msgid "The \"SemVer operator\" is used (`^` which is the default)"
msgstr ""

#: src/reference/unstable.md:529
msgid ""
"Users may further restrict which packages get upgraded by specifying them on "
"the command line."
msgstr ""

#: src/reference/unstable.md:538
msgid ""
"_This is meant to fill a similar role as [cargo-upgrade](https://github.com/"
"killercup/cargo-edit/)_"
msgstr ""

#: src/reference/unstable.md:540
msgid "build-std"
msgstr ""

#: src/reference/unstable.md:541 src/reference/unstable.md:617
msgid "Tracking Repository: <https://github.com/rust-lang/wg-cargo-std-aware>"
msgstr ""

#: src/reference/unstable.md:543
msgid ""
"The `build-std` feature enables Cargo to compile the standard library itself "
"as part of a crate graph compilation. This feature has also historically "
"been known as \"std-aware Cargo\". This feature is still in very early "
"stages of development, and is also a possible massive feature addition to "
"Cargo. This is a very large feature to document, even in the minimal form "
"that it exists in today, so if you're curious to stay up to date you'll want "
"to follow the [tracking repository](https://github.com/rust-lang/wg-cargo-"
"std-aware) and its set of issues."
msgstr ""

#: src/reference/unstable.md:552
msgid ""
"The functionality implemented today is behind a flag called `-Z build-std`. "
"This flag indicates that Cargo should compile the standard library from "
"source code using the same profile as the main build itself. Note that for "
"this to work you need to have the source code for the standard library "
"available, and at this time the only supported method of doing so is to add "
"the `rust-src` rust rustup component:"
msgstr ""

#: src/reference/unstable.md:563
msgid "Usage looks like:"
msgstr ""

#: src/reference/unstable.md:577
msgid ""
"Here we recompiled the standard library in debug mode with debug assertions "
"(like `src/main.rs` is compiled) and everything was linked together at the "
"end."
msgstr ""

#: src/reference/unstable.md:580
msgid ""
"Using `-Z build-std` will implicitly compile the stable crates `core`, "
"`std`, `alloc`, and `proc_macro`. If you're using `cargo test` it will also "
"compile the `test` crate. If you're working with an environment which does "
"not support some of these crates, then you can pass an argument to `-Zbuild-"
"std` as well:"
msgstr ""

#: src/reference/unstable.md:589
msgid ""
"The value here is a comma-separated list of standard library crates to build."
msgstr ""

#: src/reference/unstable.md:591
msgid "Requirements"
msgstr ""

#: src/reference/unstable.md:593
msgid "As a summary, a list of requirements today to use `-Z build-std` are:"
msgstr ""

#: src/reference/unstable.md:595
msgid ""
"You must install libstd's source code through `rustup component add rust-src`"
msgstr ""

#: src/reference/unstable.md:596
msgid "You must use both a nightly Cargo and a nightly rustc"
msgstr ""

#: src/reference/unstable.md:597
msgid "The `-Z build-std` flag must be passed to all `cargo` invocations."
msgstr ""

#: src/reference/unstable.md:599
msgid "Reporting bugs and helping out"
msgstr ""

#: src/reference/unstable.md:601
msgid ""
"The `-Z build-std` feature is in the very early stages of development! This "
"feature for Cargo has an extremely long history and is very large in scope, "
"and this is just the beginning. If you'd like to report bugs please either "
"report them to:"
msgstr ""

#: src/reference/unstable.md:606
msgid ""
"Cargo --- <https://github.com/rust-lang/cargo/issues/new> --- for "
"implementation bugs"
msgstr ""

#: src/reference/unstable.md:607
msgid ""
"The tracking repository --- <https://github.com/rust-lang/wg-cargo-std-aware/"
"issues/new> --- for larger design questions."
msgstr ""

#: src/reference/unstable.md:611
msgid ""
"Also if you'd like to see a feature that's not yet implemented and/or if "
"something doesn't quite work the way you'd like it to, feel free to check "
"out the [issue tracker](https://github.com/rust-lang/wg-cargo-std-aware/"
"issues) of the tracking repository, and if it's not there please file a new "
"issue!"
msgstr ""

#: src/reference/unstable.md:616
msgid "build-std-features"
msgstr ""

#: src/reference/unstable.md:619
msgid ""
"This flag is a sibling to the `-Zbuild-std` feature flag. This will "
"configure the features enabled for the standard library itself when building "
"the standard library. The default enabled features, at this time, are "
"`backtrace` and `panic-unwind`. This flag expects a comma-separated list "
"and, if provided, will override the default list of features enabled."
msgstr ""

#: src/reference/unstable.md:625
msgid "binary-dep-depinfo"
msgstr ""

#: src/reference/unstable.md:626
msgid ""
"Tracking rustc issue: [\\#63012](https://github.com/rust-lang/rust/issues/"
"63012)"
msgstr ""

#: src/reference/unstable.md:628
msgid ""
"The `-Z binary-dep-depinfo` flag causes Cargo to forward the same flag to "
"`rustc` which will then cause `rustc` to include the paths of all binary "
"dependencies in the \"dep info\" file (with the `.d` extension). Cargo then "
"uses that information for change-detection (if any binary dependency "
"changes, then the crate will be rebuilt). The primary use case is for "
"building the compiler itself, which has implicit dependencies on the "
"standard library that would otherwise be untracked for change-detection."
msgstr ""

#: src/reference/unstable.md:636
msgid "checksum-freshness"
msgstr ""

#: src/reference/unstable.md:637
msgid ""
"Tracking issue: [\\#14136](https://github.com/rust-lang/cargo/issues/14136)"
msgstr ""

#: src/reference/unstable.md:639
msgid ""
"The `-Z checksum-freshness` flag will replace the use of file mtimes in "
"cargo's fingerprints with a file checksum value. This is most useful on "
"systems with a poor mtime implementation, or in CI/CD. The checksum "
"algorithm can change without notice between cargo versions. Fingerprints are "
"used by cargo to determine when a crate needs to be rebuilt."
msgstr ""

#: src/reference/unstable.md:644
msgid ""
"For the time being files ingested by build script will continue to use "
"mtimes, even when `checksum-freshness` is enabled. This is not intended as a "
"long term solution."
msgstr ""

#: src/reference/unstable.md:647
msgid "panic-abort-tests"
msgstr ""

#: src/reference/unstable.md:648
msgid ""
"Tracking Issue: [\\#67650](https://github.com/rust-lang/rust/issues/67650)"
msgstr ""

#: src/reference/unstable.md:649
msgid ""
"Original Pull Request: [\\#7460](https://github.com/rust-lang/cargo/pull/"
"7460)"
msgstr ""

#: src/reference/unstable.md:651
msgid ""
"The `-Z panic-abort-tests` flag will enable nightly support to compile test "
"harness crates with `-Cpanic=abort`. Without this flag Cargo will compile "
"tests, and everything they depend on, with `-Cpanic=unwind` because it's the "
"only way `test`\\-the-crate knows how to operate. As of [rust-lang/"
"rust#64158](https://github.com/rust-lang/rust/pull/64158), however, the "
"`test` crate supports `-C panic=abort` with a test-per-process, and can help "
"avoid compiling crate graphs multiple times."
msgstr ""

#: src/reference/unstable.md:658
msgid ""
"It's currently unclear how this feature will be stabilized in Cargo, but "
"we'd like to stabilize it somehow!"
msgstr ""

#: src/reference/unstable.md:663
msgid "config-include"
msgstr ""

#: src/reference/unstable.md:664
msgid ""
"Tracking Issue: [\\#7723](https://github.com/rust-lang/cargo/issues/7723)"
msgstr ""

#: src/reference/unstable.md:666
msgid "This feature requires the `-Zconfig-include` command-line option."
msgstr ""

#: src/reference/unstable.md:668
msgid ""
"The `include` key in a config file can be used to load another config file. "
"It takes a string for a path to another file relative to the config file, or "
"an array of config file paths. Only path ending with `.toml` is accepted."
msgstr ""

#: src/reference/unstable.md:672
msgid ""
"```toml\n"
"# a path ending with `.toml`\n"
"include = \"path/to/mordor.toml\"\n"
"\n"
"# or an array of paths\n"
"include = [\"frodo.toml\", \"samwise.toml\"]\n"
"```"
msgstr ""

#: src/reference/unstable.md:680
msgid ""
"Unlike other config values, the merge behavior of the `include` key is "
"different. When a config file contains an `include` key:"
msgstr ""

#: src/reference/unstable.md:683
msgid "The config values are first loaded from the `include` path."
msgstr ""

#: src/reference/unstable.md:684
msgid ""
"If the value of the `include` key is an array of paths, the config values "
"are loaded and merged from left to right for each path."
msgstr ""

#: src/reference/unstable.md:686
msgid ""
"Recurse this step if the config values from the `include` path also contain "
"an `include` key."
msgstr ""

#: src/reference/unstable.md:688
msgid ""
"Then, the config file's own values are merged on top of the config from the "
"`include` path."
msgstr ""

#: src/reference/unstable.md:691
msgid "target-applies-to-host"
msgstr ""

#: src/reference/unstable.md:692 src/reference/unstable.md:734
msgid ""
"Original Pull Request: [\\#9322](https://github.com/rust-lang/cargo/pull/"
"9322)"
msgstr ""

#: src/reference/unstable.md:693
msgid ""
"Tracking Issue: [\\#9453](https://github.com/rust-lang/cargo/issues/9453)"
msgstr ""

#: src/reference/unstable.md:695
msgid ""
"Historically, Cargo's behavior for whether the `linker` and `rustflags` "
"configuration options from environment variables and [`[target]`]"
"(config.md#target) are respected for build scripts, plugins, and other "
"artifacts that are _always_ built for the host platform has been somewhat "
"inconsistent. When `--target` is _not_ passed, Cargo respects the same "
"`linker` and `rustflags` for build scripts as for all other compile "
"artifacts. When `--target` _is_ passed, however, Cargo respects `linker` "
"from [`[target.<host triple>]`](config.md#targettriplelinker), and does not "
"pick up any `rustflags` configuration. This dual behavior is confusing, but "
"also makes it difficult to correctly configure builds where the host triple "
"and the [target triple](../appendix/glossary.md#target \"\\\"target\\\" "
"(glossary)\") happen to be the same, but artifacts intended to run on the "
"build host should still be configured differently."
msgstr ""

#: src/reference/unstable.md:710
msgid ""
"`-Ztarget-applies-to-host` enables the top-level `target-applies-to-host` "
"setting in Cargo configuration files which allows users to opt into "
"different (and more consistent) behavior for these properties. When `target-"
"applies-to-host` is unset, or set to `true`, in the configuration file, the "
"existing Cargo behavior is preserved (though see `-Zhost-config`, which "
"changes that default). When it is set to `false`, no options from `[target."
"<host triple>]`, `RUSTFLAGS`, or `[build]` are respected for host artifacts "
"regardless of whether `--target` is passed to Cargo. To customize artifacts "
"intended to be run on the host, use `[host]` ([`host-config`](#host-config))."
msgstr ""

#: src/reference/unstable.md:721
msgid ""
"In the future, `target-applies-to-host` may end up defaulting to `false` to "
"provide more sane and consistent default behavior."
msgstr ""

#: src/reference/unstable.md:733
msgid "host-config"
msgstr ""

#: src/reference/unstable.md:735
msgid ""
"Tracking Issue: [\\#9452](https://github.com/rust-lang/cargo/issues/9452)"
msgstr ""

#: src/reference/unstable.md:737
msgid ""
"The `host` key in a config file can be used to pass flags to host build "
"targets such as build scripts that must run on the host system instead of "
"the target system when cross compiling. It supports both generic and host "
"arch specific tables. Matching host arch tables take precedence over generic "
"host tables."
msgstr ""

#: src/reference/unstable.md:742
msgid ""
"It requires the `-Zhost-config` and `-Ztarget-applies-to-host` command-line "
"options to be set, and that `target-applies-to-host = false` is set in the "
"Cargo configuration file."
msgstr ""

#: src/reference/unstable.md:746
msgid ""
"```toml\n"
"# config.toml\n"
"[host]\n"
"linker = \"/path/to/host/linker\"\n"
"[host.x86_64-unknown-linux-gnu]\n"
"linker = \"/path/to/host/arch/linker\"\n"
"rustflags = [\"-Clink-arg=--verbose\"]\n"
"[target.x86_64-unknown-linux-gnu]\n"
"linker = \"/path/to/target/linker\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:757
msgid ""
"The generic `host` table above will be entirely ignored when building on an "
"`x86_64-unknown-linux-gnu` host as the `host.x86_64-unknown-linux-gnu` table "
"takes precedence."
msgstr ""

#: src/reference/unstable.md:761
msgid ""
"Setting `-Zhost-config` changes the default for `target-applies-to-host` to "
"`false` from `true`."
msgstr ""

#: src/reference/unstable.md:768
msgid "unit-graph"
msgstr ""

#: src/reference/unstable.md:769
msgid ""
"Tracking Issue: [\\#8002](https://github.com/rust-lang/cargo/issues/8002)"
msgstr ""

#: src/reference/unstable.md:771
msgid ""
"The `--unit-graph` flag can be passed to any build command (`build`, "
"`check`, `run`, `test`, `bench`, `doc`, etc.) to emit a JSON object to "
"stdout which represents Cargo's internal unit graph. Nothing is actually "
"built, and the command returns immediately after printing. Each \"unit\" "
"corresponds to an execution of the compiler. These objects also include "
"which unit each unit depends on."
msgstr ""

#: src/reference/unstable.md:782
msgid ""
"This structure provides a more complete view of the dependency relationship "
"as Cargo sees it. In particular, the \"features\" field supports the new "
"feature resolver where a dependency can be built multiple times with "
"different features. `cargo metadata` fundamentally cannot represent the "
"relationship of features between different dependency kinds, and features "
"now depend on which command is run and which packages and targets are "
"selected. Additionally it can provide details about intra-package "
"dependencies like build scripts or tests."
msgstr ""

#: src/reference/unstable.md:791
msgid "The following is a description of the JSON structure:"
msgstr ""

#: src/reference/unstable.md:795
msgid ""
"/* Version of the JSON output structure. If any backwards incompatible\n"
"     changes are made, this value will be increased.\n"
"  */"
msgstr ""

#: src/reference/unstable.md:798 src/commands/cargo-metadata.md:55
#: src/commands/cargo-metadata.md:326
msgid "\"version\""
msgstr ""

#: src/reference/unstable.md:799
msgid "/* Array of all build units. */"
msgstr ""

#: src/reference/unstable.md:800
msgid "\"units\""
msgstr ""

#: src/reference/unstable.md:802
msgid ""
"/* An opaque string which indicates the package.\n"
"         Information about the package can be obtained from `cargo "
"metadata`.\n"
"      */"
msgstr ""

#: src/reference/unstable.md:805
msgid "\"pkg_id\""
msgstr ""

#: src/reference/unstable.md:805
msgid "\"my-package 0.1.0 (path+file:///path/to/my-package)\""
msgstr ""

#: src/reference/unstable.md:806
msgid ""
"/* The Cargo target. See the `cargo metadata` documentation for more\n"
"         information about these fields.\n"
"         https://doc.rust-lang.org/cargo/commands/cargo-metadata.html\n"
"      */"
msgstr ""

#: src/reference/unstable.md:819
msgid ""
"/* The profile settings for this unit.\n"
"         These values may not match the profile defined in the manifest.\n"
"         Units can use modified profile settings. For example, the "
"\"panic\"\n"
"         setting can be overridden for tests to force it to \"unwind\".\n"
"      */"
msgstr ""

#: src/reference/unstable.md:825
msgid "/* The profile name these settings are derived from. */"
msgstr ""

#: src/reference/unstable.md:826
msgid "\"dev\""
msgstr ""

#: src/reference/unstable.md:827
msgid "/* The optimization level as a string. */"
msgstr ""

#: src/reference/unstable.md:829
msgid "/* The LTO setting as a string. */"
msgstr ""

#: src/reference/unstable.md:830
msgid "\"lto\""
msgstr ""

#: src/reference/unstable.md:830
msgid "\"false\""
msgstr ""

#: src/reference/unstable.md:831
msgid ""
"/* The codegen units as an integer.\n"
"           `null` if it should use the compiler's default.\n"
"        */"
msgstr ""

#: src/reference/unstable.md:834
msgid "\"codegen_units\""
msgstr ""

#: src/reference/unstable.md:835
msgid ""
"/* The debug information level as an integer.\n"
"           `null` if it should use the compiler's default (0).\n"
"        */"
msgstr ""

#: src/reference/unstable.md:839
msgid "/* Whether or not debug-assertions are enabled. */"
msgstr ""

#: src/reference/unstable.md:841
msgid "/* Whether or not overflow-checks are enabled. */"
msgstr ""

#: src/reference/unstable.md:843
msgid "/* Whether or not rpath is enabled. */"
msgstr ""

#: src/reference/unstable.md:844
msgid "\"rpath\""
msgstr ""

#: src/reference/unstable.md:845
msgid "/* Whether or not incremental is enabled. */"
msgstr ""

#: src/reference/unstable.md:846
msgid "\"incremental\""
msgstr ""

#: src/reference/unstable.md:847
msgid "/* The panic strategy, \"unwind\" or \"abort\". */"
msgstr ""

#: src/reference/unstable.md:848
msgid "\"panic\""
msgstr ""

#: src/reference/unstable.md:848
msgid "\"unwind\""
msgstr ""

#: src/reference/unstable.md:850
msgid ""
"/* Which platform this target is being built for.\n"
"         A value of `null` indicates it is for the host.\n"
"         Otherwise it is a string of the target triple (such as\n"
"         \"x86_64-unknown-linux-gnu\").\n"
"      */"
msgstr ""

#: src/reference/unstable.md:855
msgid "\"platform\""
msgstr ""

#: src/reference/unstable.md:856
msgid ""
"/* The \"mode\" for this unit. Valid values:\n"
"\n"
"         * \"test\" --- Build using `rustc` as a test.\n"
"         * \"build\" --- Build using `rustc`.\n"
"         * \"check\" --- Build using `rustc` in \"check\" mode.\n"
"         * \"doc\" --- Build using `rustdoc`.\n"
"         * \"doctest\" --- Test using `rustdoc`.\n"
"         * \"run-custom-build\" --- Represents the execution of a build "
"script.\n"
"      */"
msgstr ""

#: src/reference/unstable.md:865
msgid "\"mode\""
msgstr ""

#: src/reference/unstable.md:865
msgid "\"build\""
msgstr ""

#: src/reference/unstable.md:866
msgid "/* Array of features enabled on this unit as strings. */"
msgstr ""

#: src/reference/unstable.md:867
msgid "\"somefeat\""
msgstr ""

#: src/reference/unstable.md:868
msgid ""
"/* Whether or not this is a standard-library unit,\n"
"         part of the unstable build-std feature.\n"
"         If not set, treat as `false`.\n"
"      */"
msgstr ""

#: src/reference/unstable.md:872
msgid "\"is_std\""
msgstr ""

#: src/reference/unstable.md:873
msgid "/* Array of dependencies of this unit. */"
msgstr ""

#: src/reference/unstable.md:874 src/commands/cargo-metadata.md:88
#: src/commands/cargo-metadata.md:278
msgid "\"dependencies\""
msgstr ""

#: src/reference/unstable.md:876
msgid "/* Index in the \"units\" array for the dependency. */"
msgstr ""

#: src/reference/unstable.md:877
msgid "\"index\""
msgstr ""

#: src/reference/unstable.md:878
msgid "/* The name that this dependency will be referred as. */"
msgstr ""

#: src/reference/unstable.md:879
msgid "\"extern_crate_name\""
msgstr ""

#: src/reference/unstable.md:879
msgid "\"unicode_xid\""
msgstr ""

#: src/reference/unstable.md:880
msgid ""
"/* Whether or not this dependency is \"public\",\n"
"             part of the unstable public-dependency feature.\n"
"             If not set, the public-dependency feature is not enabled.\n"
"          */"
msgstr ""

#: src/reference/unstable.md:884 src/commands/cargo-metadata.md:131
msgid "\"public\""
msgstr ""

#: src/reference/unstable.md:885
msgid ""
"/* Whether or not this dependency is injected into the prelude,\n"
"             currently used by the build-std feature.\n"
"             If not set, treat as `false`.\n"
"          */"
msgstr ""

#: src/reference/unstable.md:889
msgid "\"noprelude\""
msgstr ""

#: src/reference/unstable.md:895
msgid ""
"/* Array of indices in the \"units\" array that are the \"roots\" of the\n"
"     dependency graph.\n"
"  */"
msgstr ""

#: src/reference/unstable.md:898
msgid "\"roots\""
msgstr ""

#: src/reference/unstable.md:902
msgid "Profile `rustflags` option"
msgstr ""

#: src/reference/unstable.md:903
msgid ""
"Original Issue: [rust-lang/cargo#7878](https://github.com/rust-lang/cargo/"
"issues/7878)"
msgstr ""

#: src/reference/unstable.md:904
msgid ""
"Tracking Issue: [rust-lang/cargo#10271](https://github.com/rust-lang/cargo/"
"issues/10271)"
msgstr ""

#: src/reference/unstable.md:906
msgid ""
"This feature provides a new option in the `[profile]` section to specify "
"flags that are passed directly to rustc. This can be enabled like so:"
msgstr ""

#: src/reference/unstable.md:910
msgid ""
"```toml\n"
"cargo-features = [\"profile-rustflags\"]\n"
"\n"
"[package]\n"
"# ...\n"
"\n"
"[profile.release]\n"
"rustflags = [ \"-C\", \"...\" ]\n"
"```"
msgstr ""

#: src/reference/unstable.md:920
msgid ""
"To set this in a profile in Cargo configuration, you need to use either `-Z "
"profile-rustflags` or `[unstable]` table to enable it. For example,"
msgstr ""

#: src/reference/unstable.md:923
msgid ""
"```toml\n"
"# .cargo/config.toml\n"
"[unstable]\n"
"profile-rustflags = true\n"
"\n"
"[profile.release]\n"
"rustflags = [ \"-C\", \"...\" ]\n"
"```"
msgstr ""

#: src/reference/unstable.md:932
msgid "rustdoc-map"
msgstr ""

#: src/reference/unstable.md:933
msgid ""
"Tracking Issue: [\\#8296](https://github.com/rust-lang/cargo/issues/8296)"
msgstr ""

#: src/reference/unstable.md:935
msgid ""
"This feature adds configuration settings that are passed to `rustdoc` so "
"that it can generate links to dependencies whose documentation is hosted "
"elsewhere when the dependency is not documented. First, add this to `.cargo/"
"config`:"
msgstr ""

#: src/reference/unstable.md:939
msgid ""
"```toml\n"
"[doc.extern-map.registries]\n"
"crates-io = \"https://docs.rs/\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:944
msgid ""
"Then, when building documentation, use the following flags to cause links to "
"dependencies to link to [docs.rs](https://docs.rs/):"
msgstr ""

#: src/reference/unstable.md:951
msgid ""
"The `registries` table contains a mapping of registry name to the URL to "
"link to. The URL may have the markers `{pkg_name}` and `{version}` which "
"will get replaced with the corresponding values. If neither are specified, "
"then Cargo defaults to appending `{pkg_name}/{version}/` to the end of the "
"URL."
msgstr ""

#: src/reference/unstable.md:956
msgid ""
"Another config setting is available to redirect standard library links. By "
"default, rustdoc creates links to <https://doc.rust-lang.org/nightly/>. To "
"change this behavior, use the `doc.extern-map.std` setting:"
msgstr ""

#: src/reference/unstable.md:960
msgid ""
"```toml\n"
"[doc.extern-map]\n"
"std = \"local\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:965
msgid ""
"A value of `\"local\"` means to link to the documentation found in the "
"`rustc` sysroot. If you are using rustup, this documentation can be "
"installed with `rustup component add rust-docs`."
msgstr ""

#: src/reference/unstable.md:969
msgid "The default value is `\"remote\"`."
msgstr ""

#: src/reference/unstable.md:971
msgid "The value may also take a URL for a custom location."
msgstr ""

#: src/reference/unstable.md:973
msgid "per-package-target"
msgstr ""

#: src/reference/unstable.md:974
msgid "Tracking Issue: [\\#9406](https://github.com/rust-lang/cargo/pull/9406)"
msgstr ""

#: src/reference/unstable.md:975
msgid ""
"Original Pull Request: [\\#9030](https://github.com/rust-lang/cargo/pull/"
"9030)"
msgstr ""

#: src/reference/unstable.md:976
msgid "Original Issue: [\\#7004](https://github.com/rust-lang/cargo/pull/7004)"
msgstr ""

#: src/reference/unstable.md:978
msgid ""
"The `per-package-target` feature adds two keys to the manifest: "
"`package.default-target` and `package.forced-target`. The first makes the "
"package be compiled by default (ie. when no `--target` argument is passed) "
"for some target. The second one makes the package always be compiled for the "
"target."
msgstr ""

#: src/reference/unstable.md:986
msgid ""
"```toml\n"
"[package]\n"
"forced-target = \"wasm32-unknown-unknown\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:991
msgid ""
"In this example, the crate is always built for `wasm32-unknown-unknown`, for "
"instance because it is going to be used as a plugin for a main program that "
"runs on the host (or provided on the command line) target."
msgstr ""

#: src/reference/unstable.md:996
msgid "artifact-dependencies"
msgstr ""

#: src/reference/unstable.md:998
msgid "Tracking Issue: [\\#9096](https://github.com/rust-lang/cargo/pull/9096)"
msgstr ""

#: src/reference/unstable.md:999
msgid ""
"Original Pull Request: [\\#9992](https://github.com/rust-lang/cargo/pull/"
"9992)"
msgstr ""

#: src/reference/unstable.md:1001
msgid ""
"Artifact dependencies allow Cargo packages to depend on `bin`, `cdylib`, and "
"`staticlib` crates, and use the artifacts built by those crates at compile "
"time."
msgstr ""

#: src/reference/unstable.md:1004
msgid "Run `cargo` with `-Z bindeps` to enable this functionality."
msgstr ""

#: src/reference/unstable.md:1006
msgid "artifact-dependencies: Dependency declarations"
msgstr ""

#: src/reference/unstable.md:1008
msgid ""
"Artifact-dependencies adds the following keys to a dependency declaration in "
"`Cargo.toml`:"
msgstr ""

#: src/reference/unstable.md:1010
msgid ""
"`artifact` --- This specifies the [Cargo Target](cargo-targets.md) to build. "
"Normally without this field, Cargo will only build the `[lib]` target from a "
"dependency. This field allows specifying which target will be built, and "
"made available as a binary at build time:"
msgstr ""

#: src/reference/unstable.md:1014
msgid ""
"`\"bin\"` --- Compiled executable binaries, corresponding to all of the "
"`[[bin]]` sections in the dependency's manifest."
msgstr ""

#: src/reference/unstable.md:1015
msgid ""
"`\"bin:<bin-name>\"` --- Compiled executable binary, corresponding to a "
"specific binary target specified by the given `<bin-name>`."
msgstr ""

#: src/reference/unstable.md:1016
msgid ""
"`\"cdylib\"` --- A C-compatible dynamic library, corresponding to a `[lib]` "
"section with `crate-type = [\"cdylib\"]` in the dependency's manifest."
msgstr ""

#: src/reference/unstable.md:1017
msgid ""
"`\"staticlib\"` --- A C-compatible static library, corresponding to a "
"`[lib]` section with `crate-type = [\"staticlib\"]` in the dependency's "
"manifest."
msgstr ""

#: src/reference/unstable.md:1019
msgid ""
"The `artifact` value can be a string, or it can be an array of strings to "
"specify multiple targets."
msgstr ""

#: src/reference/unstable.md:1023
msgid ""
"```toml\n"
"[dependencies]\n"
"bar = { version = \"1.0\", artifact = \"staticlib\" }\n"
"zoo = { version = \"1.0\", artifact = [\"bin:cat\", \"bin:dog\"]}\n"
"```"
msgstr ""

#: src/reference/unstable.md:1029
msgid ""
"`lib` --- This is a Boolean value which indicates whether or not to also "
"build the dependency's library as a normal Rust `lib` dependency. This field "
"can only be specified when `artifact` is specified."
msgstr ""

#: src/reference/unstable.md:1032
msgid ""
"The default for this field is `false` when `artifact` is specified. If this "
"is set to `true`, then the dependency's `[lib]` target will also be built "
"for the platform target the declaring package is being built for. This "
"allows the package to use the dependency from Rust code like a normal "
"dependency in addition to an artifact dependency."
msgstr ""

#: src/reference/unstable.md:1038
msgid ""
"```toml\n"
"[dependencies]\n"
"bar = { version = \"1.0\", artifact = \"bin\", lib = true }\n"
"```"
msgstr ""

#: src/reference/unstable.md:1043
msgid ""
"`target` --- The platform target to build the dependency for. This field can "
"only be specified when `artifact` is specified."
msgstr ""

#: src/reference/unstable.md:1046
msgid ""
"The default if this is not specified depends on the dependency kind. For "
"build dependencies, it will be built for the host target. For all other "
"dependencies, it will be built for the same targets the declaring package is "
"built for."
msgstr ""

#: src/reference/unstable.md:1050
msgid ""
"For a build dependency, this can also take the special value of `\"target\"` "
"which means to build the dependency for the same targets that the package is "
"being built for."
msgstr ""

#: src/reference/unstable.md:1052
msgid ""
"```toml\n"
"[build-dependencies]\n"
"bar = { version = \"1.0\", artifact = \"cdylib\", target = \"wasm32-unknown-"
"unknown\"}\n"
"same-target = { version = \"1.0\", artifact = \"bin\", target = "
"\"target\" }\n"
"```"
msgstr ""

#: src/reference/unstable.md:1058
msgid "artifact-dependencies: Environment variables"
msgstr ""

#: src/reference/unstable.md:1060
msgid ""
"After building an artifact dependency, Cargo provides the following "
"environment variables that you can use to access the artifact:"
msgstr ""

#: src/reference/unstable.md:1062
msgid ""
"`CARGO_<ARTIFACT-TYPE>_DIR_<DEP>` --- This is the directory containing all "
"the artifacts from the dependency."
msgstr ""

#: src/reference/unstable.md:1064
msgid ""
"`<ARTIFACT-TYPE>` is the `artifact` specified for the dependency (uppercased "
"as in `CDYLIB`, `STATICLIB`, or `BIN`) and `<DEP>` is the name of the "
"dependency. As with other Cargo environment variables, dependency names are "
"converted to uppercase, with dashes replaced by underscores."
msgstr ""

#: src/reference/unstable.md:1067
msgid ""
"If your manifest renames the dependency, `<DEP>` corresponds to the name you "
"specify, not the original package name."
msgstr ""

#: src/reference/unstable.md:1069
msgid ""
"`CARGO_<ARTIFACT-TYPE>_FILE_<DEP>_<NAME>` --- This is the full path to the "
"artifact."
msgstr ""

#: src/reference/unstable.md:1071
msgid ""
"`<ARTIFACT-TYPE>` is the `artifact` specified for the dependency (uppercased "
"as above), `<DEP>` is the name of the dependency (transformed as above), and "
"`<NAME>` is the name of the artifact from the dependency."
msgstr ""

#: src/reference/unstable.md:1073
msgid ""
"Note that `<NAME>` is not modified in any way from the `name` specified in "
"the crate supplying the artifact, or the crate name if not specified; for "
"instance, it may be in lowercase, or contain dashes."
msgstr ""

#: src/reference/unstable.md:1075
msgid ""
"For convenience, if the artifact name matches the original package name, "
"cargo additionally supplies a copy of this variable with the `_<NAME>` "
"suffix omitted. For instance, if the `cmake` crate supplies a binary named "
"`cmake`, Cargo supplies both `CARGO_BIN_FILE_CMAKE` and "
"`CARGO_BIN_FILE_CMAKE_cmake`."
msgstr ""

#: src/reference/unstable.md:1078
msgid ""
"For each kind of dependency, these variables are supplied to the same part "
"of the build process that has access to that kind of dependency:"
msgstr ""

#: src/reference/unstable.md:1080
msgid ""
"For build-dependencies, these variables are supplied to the `build.rs` "
"script, and can be accessed using [`std::env::var_os`](https://doc.rust-"
"lang.org/std/env/fn.var_os.html). (As with any OS file path, these may or "
"may not be valid UTF-8.)"
msgstr ""

#: src/reference/unstable.md:1082
msgid ""
"For normal dependencies, these variables are supplied during the compilation "
"of the crate, and can be accessed using the [`env!`](https://doc.rust-"
"lang.org/std/macro.env.html) macro."
msgstr ""

#: src/reference/unstable.md:1083
msgid ""
"For dev-dependencies, these variables are supplied during the compilation of "
"examples, tests, and benchmarks, and can be accessed using the [`env!`]"
"(https://doc.rust-lang.org/std/macro.env.html) macro."
msgstr ""

#: src/reference/unstable.md:1087
msgid "artifact-dependencies: Examples"
msgstr ""

#: src/reference/unstable.md:1089
msgid "Example: use a binary executable from a build script"
msgstr ""

#: src/reference/unstable.md:1091
msgid ""
"In the `Cargo.toml` file, you can specify a dependency on a binary to make "
"available for a build script:"
msgstr ""

#: src/reference/unstable.md:1093
msgid ""
"```toml\n"
"[build-dependencies]\n"
"some-build-tool = { version = \"1.0\", artifact = \"bin\" }\n"
"```"
msgstr ""

#: src/reference/unstable.md:1098
msgid "Then inside the build script, the binary can be executed at build time:"
msgstr ""

#: src/reference/unstable.md:1102
msgid "\"CARGO_BIN_FILE_SOME_BUILD_TOOL\""
msgstr ""

#: src/reference/unstable.md:1104
msgid "\"do-stuff\""
msgstr ""

#: src/reference/unstable.md:1108
msgid "\"failed!\""
msgstr ""

#: src/reference/unstable.md:1114
msgid "Example: use _cdylib_ artifact in build script"
msgstr ""

#: src/reference/unstable.md:1116
msgid ""
"The `Cargo.toml` in the consuming package, building the `bar` library as "
"`cdylib` for a specific build target…"
msgstr ""

#: src/reference/unstable.md:1119
msgid ""
"```toml\n"
"[build-dependencies]\n"
"bar = { artifact = \"cdylib\", version = \"1.0\", target = \"wasm32-unknown-"
"unknown\" }\n"
"```"
msgstr ""

#: src/reference/unstable.md:1124
msgid "…along with the build script in `build.rs`."
msgstr ""

#: src/reference/unstable.md:1128
msgid "\"CARGO_CDYLIB_FILE_BAR\""
msgstr ""

#: src/reference/unstable.md:1132
msgid "Example: use _binary_ artifact and its library in a binary"
msgstr ""

#: src/reference/unstable.md:1134
msgid ""
"The `Cargo.toml` in the consuming package, building the `bar` binary for "
"inclusion as artifact while making it available as library as well…"
msgstr ""

#: src/reference/unstable.md:1137
msgid ""
"```toml\n"
"[dependencies]\n"
"bar = { artifact = \"bin\", version = \"1.0\", lib = true }\n"
"```"
msgstr ""

#: src/reference/unstable.md:1142
msgid "…along with the executable using `main.rs`."
msgstr ""

#: src/reference/unstable.md:1147
msgid "\"CARGO_BIN_FILE_BAR\""
msgstr ""

#: src/reference/unstable.md:1151
msgid "publish-timeout"
msgstr ""

#: src/reference/unstable.md:1152
msgid ""
"Tracking Issue: [11222](https://github.com/rust-lang/cargo/issues/11222)"
msgstr ""

#: src/reference/unstable.md:1154
msgid ""
"The `publish.timeout` key in a config file can be used to control how long "
"`cargo publish` waits between posting a package to the registry and it being "
"available in the local index."
msgstr ""

#: src/reference/unstable.md:1158
msgid ""
"A timeout of `0` prevents any checks from occurring. The current default is "
"`60` seconds."
msgstr ""

#: src/reference/unstable.md:1161
msgid "It requires the `-Zpublish-timeout` command-line options to be set."
msgstr ""

#: src/reference/unstable.md:1169
msgid "asymmetric-token"
msgstr ""

#: src/reference/unstable.md:1170
msgid ""
"Tracking Issue: [10519](https://github.com/rust-lang/cargo/issues/10519)"
msgstr ""

#: src/reference/unstable.md:1171
msgid "RFC: [\\#3231](https://github.com/rust-lang/rfcs/pull/3231)"
msgstr ""

#: src/reference/unstable.md:1173
msgid ""
"The `-Z asymmetric-token` flag enables the `cargo:paseto` credential "
"provider which allows Cargo to authenticate to registries without sending "
"secrets over the network."
msgstr ""

#: src/reference/unstable.md:1175
msgid ""
"In [`config.toml`](config.md) and `credentials.toml` files there is a field "
"called `private-key`, which is a private key formatted in the secret [subset "
"of `PASERK`](https://github.com/paseto-standard/paserk/blob/master/types/"
"secret.md) and is used to sign asymmetric tokens"
msgstr ""

#: src/reference/unstable.md:1177
msgid ""
"A keypair can be generated with `cargo login --generate-keypair` which will:"
msgstr ""

#: src/reference/unstable.md:1178
msgid "generate a public/private keypair in the currently recommended fashion."
msgstr ""

#: src/reference/unstable.md:1179
msgid "save the private key in `credentials.toml`."
msgstr ""

#: src/reference/unstable.md:1180
msgid ""
"print the public key in [PASERK public](https://github.com/paseto-standard/"
"paserk/blob/master/types/public.md) format."
msgstr ""

#: src/reference/unstable.md:1182
msgid ""
"It is recommended that the `private-key` be saved in `credentials.toml`. It "
"is also supported in `config.toml`, primarily so that it can be set using "
"the associated environment variable, which is the recommended way to provide "
"it in CI contexts. This setup is what we have for the `token` field for "
"setting a secret token."
msgstr ""

#: src/reference/unstable.md:1184
msgid ""
"There is also an optional field called `private-key-subject` which is a "
"string chosen by the registry. This string will be included as part of an "
"asymmetric token and should not be secret. It is intended for the rare use "
"cases like \"cryptographic proof that the central CA server authorized this "
"action\". Cargo requires it to be non-whitespace printable ASCII. Registries "
"that need non-ASCII data should base64 encode it."
msgstr ""

#: src/reference/unstable.md:1188
msgid ""
"Both fields can be set with `cargo login --registry=name --private-key --"
"private-key-subject=\"subject\"` which will prompt you to put in the key "
"value."
msgstr ""

#: src/reference/unstable.md:1190
msgid "A registry can have at most one of `private-key` or `token` set."
msgstr ""

#: src/reference/unstable.md:1192
msgid ""
"All PASETOs will include `iat`, the current time in ISO 8601 format. Cargo "
"will include the following where appropriate:"
msgstr ""

#: src/reference/unstable.md:1193
msgid ""
"`sub` an optional, non-secret string chosen by the registry that is expected "
"to be claimed with every request. The value will be the `private-key-"
"subject` from the `config.toml` file."
msgstr ""

#: src/reference/unstable.md:1194
msgid ""
"`mutation` if present, indicates that this request is a mutating operation "
"(or a read-only operation if not present), must be one of the strings "
"`publish`, `yank`, or `unyank`."
msgstr ""

#: src/reference/unstable.md:1195
msgid "`name` name of the crate related to this request."
msgstr ""

#: src/reference/unstable.md:1196
msgid "`vers` version string of the crate related to this request."
msgstr ""

#: src/reference/unstable.md:1197
msgid ""
"`cksum` the SHA256 hash of the crate contents, as a string of 64 lowercase "
"hexadecimal digits, must be present only when `mutation` is equal to "
"`publish`"
msgstr ""

#: src/reference/unstable.md:1198
msgid ""
"`challenge` the challenge string received from a 401/403 from this server "
"this session. Registries that issue challenges must track which challenges "
"have been issued/used and never accept a given challenge more than once "
"within the same validity period (avoiding the need to track every challenge "
"ever issued)."
msgstr ""

#: src/reference/unstable.md:1200
msgid ""
"The \"footer\" (which is part of the signature) will be a JSON string in "
"UTF-8 and include:"
msgstr ""

#: src/reference/unstable.md:1201
msgid "`url` the RFC 3986 compliant URL where cargo got the config.json file,"
msgstr ""

#: src/reference/unstable.md:1202
msgid ""
"If this is a registry with an HTTP index, then this is the base URL that all "
"index queries are relative to."
msgstr ""

#: src/reference/unstable.md:1203
msgid ""
"If this is a registry with a GIT index, it is the URL Cargo used to clone "
"the index."
msgstr ""

#: src/reference/unstable.md:1204
msgid ""
"`kid` the identifier of the private key used to sign the request, using the "
"[PASERK IDs](https://github.com/paseto-standard/paserk/blob/master/"
"operations/ID.md) standard."
msgstr ""

#: src/reference/unstable.md:1206
msgid ""
"PASETO includes the message that was signed, so the server does not have to "
"reconstruct the exact string from the request in order to check the "
"signature. The server does need to check that the signature is valid for the "
"string in the PASETO and that the contents of that string matches the "
"request. If a claim should be expected for the request but is missing in the "
"PASETO then the request must be rejected."
msgstr ""

#: src/reference/unstable.md:1209
msgid "`cargo config`"
msgstr ""

#: src/reference/unstable.md:1211
msgid ""
"Original Issue: [\\#2362](https://github.com/rust-lang/cargo/issues/2362)"
msgstr ""

#: src/reference/unstable.md:1212
msgid ""
"Tracking Issue: [\\#9301](https://github.com/rust-lang/cargo/issues/9301)"
msgstr ""

#: src/reference/unstable.md:1214
msgid ""
"The `cargo config` subcommand provides a way to display the configuration "
"files that cargo loads. It currently includes the `get` subcommand which can "
"take an optional config value to display."
msgstr ""

#: src/reference/unstable.md:1222
msgid ""
"If no config value is included, it will display all config values. See the "
"`--help` output for more options available."
msgstr ""

#: src/reference/unstable.md:1225
msgid "rustc `--print`"
msgstr ""

#: src/reference/unstable.md:1227
msgid ""
"Tracking Issue: [\\#9357](https://github.com/rust-lang/cargo/issues/9357)"
msgstr ""

#: src/reference/unstable.md:1229
msgid ""
"`cargo rustc --print=VAL` forwards the `--print` flag to `rustc` in order to "
"extract information from `rustc`. This runs `rustc` with the corresponding "
"[`--print`](https://doc.rust-lang.org/rustc/command-line-arguments.html#--"
"print-print-compiler-information) flag, and then immediately exits without "
"compiling. Exposing this as a cargo flag allows cargo to inject the correct "
"target and RUSTFLAGS based on the current configuration."
msgstr ""

#: src/reference/unstable.md:1236
msgid ""
"The primary use case is to run `cargo rustc --print=cfg` to get config "
"values for the appropriate target and influenced by any other RUSTFLAGS."
msgstr ""

#: src/reference/unstable.md:1240
msgid "Different binary name"
msgstr ""

#: src/reference/unstable.md:1242
msgid ""
"Tracking Issue: [\\#9778](https://github.com/rust-lang/cargo/issues/9778)"
msgstr ""

#: src/reference/unstable.md:1243
msgid "PR: [\\#9627](https://github.com/rust-lang/cargo/pull/9627)"
msgstr ""

#: src/reference/unstable.md:1245
msgid ""
"The `different-binary-name` feature allows setting the filename of the "
"binary without having to obey the restrictions placed on crate names. For "
"example, the crate name must use only `alphanumeric` characters or `-` or "
"`_`, and cannot be empty."
msgstr ""

#: src/reference/unstable.md:1249
msgid ""
"The `filename` parameter should **not** include the binary extension, "
"`cargo` will figure out the appropriate extension and use that for the "
"binary on its own."
msgstr ""

#: src/reference/unstable.md:1252
msgid ""
"The `filename` parameter is only available in the `[[bin]]` section of the "
"manifest."
msgstr ""

#: src/reference/unstable.md:1254
msgid ""
"```toml\n"
"cargo-features = [\"different-binary-name\"]\n"
"\n"
"[package]\n"
"name =  \"foo\"\n"
"version = \"0.0.1\"\n"
"\n"
"[[bin]]\n"
"name = \"foo\"\n"
"filename = \"007bar\"\n"
"path = \"src/main.rs\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:1267
msgid "scrape-examples"
msgstr ""

#: src/reference/unstable.md:1269
msgid "RFC: [\\#3123](https://github.com/rust-lang/rfcs/pull/3123)"
msgstr ""

#: src/reference/unstable.md:1270
msgid ""
"Tracking Issue: [\\#9910](https://github.com/rust-lang/cargo/issues/9910)"
msgstr ""

#: src/reference/unstable.md:1272
msgid ""
"The `-Z rustdoc-scrape-examples` flag tells Rustdoc to search crates in the "
"current workspace for calls to functions. Those call-sites are then included "
"as documentation. You can use the flag like this:"
msgstr ""

#: src/reference/unstable.md:1280
msgid ""
"By default, Cargo will scrape examples from the example targets of packages "
"being documented. You can individually enable or disable targets from being "
"scraped with the `doc-scrape-examples` flag, such as:"
msgstr ""

#: src/reference/unstable.md:1283
msgid ""
"```toml\n"
"# Enable scraping examples from a library\n"
"[lib]\n"
"doc-scrape-examples = true\n"
"\n"
"# Disable scraping examples from an example target\n"
"[[example]]\n"
"name = \"my-example\"\n"
"doc-scrape-examples = false\n"
"```"
msgstr ""

#: src/reference/unstable.md:1294
msgid ""
"**Note on tests:** enabling `doc-scrape-examples` on test targets will not "
"currently have any effect. Scraping examples from tests is a work-in-"
"progress."
msgstr ""

#: src/reference/unstable.md:1297
msgid ""
"**Note on dev-dependencies:** documenting a library does not normally "
"require the crate's dev-dependencies. However, example targets require dev-"
"deps. For backwards compatibility, `-Z rustdoc-scrape-examples` will _not_ "
"introduce a dev-deps requirement for `cargo doc`. Therefore examples will "
"_not_ be scraped from example targets under the following conditions:"
msgstr ""

#: src/reference/unstable.md:1302
msgid "No target being documented requires dev-deps, AND"
msgstr ""

#: src/reference/unstable.md:1303
msgid "At least one crate with targets being documented has dev-deps, AND"
msgstr ""

#: src/reference/unstable.md:1304
msgid ""
"The `doc-scrape-examples` parameter is unset or false for all `[[example]]` "
"targets."
msgstr ""

#: src/reference/unstable.md:1306
msgid ""
"If you want examples to be scraped from example targets, then you must not "
"satisfy one of the above conditions. For example, you can set `doc-scrape-"
"examples` to true for one example target, and that signals to Cargo that you "
"are ok with dev-deps being build for `cargo doc`."
msgstr ""

#: src/reference/unstable.md:1310
msgid "output-format for rustdoc"
msgstr ""

#: src/reference/unstable.md:1312
msgid ""
"Tracking Issue: [\\#13283](https://github.com/rust-lang/cargo/issues/13283)"
msgstr ""

#: src/reference/unstable.md:1314
msgid ""
"This flag determines the output format of `cargo rustdoc`, accepting `html` "
"or `json`, providing tools with a way to lean on [rustdoc's experimental "
"JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/"
"rustdoc_json_types/)."
msgstr ""

#: src/reference/unstable.md:1316
msgid "You can use the flag like this:"
msgstr ""

#: src/reference/unstable.md:1322
msgid "codegen-backend"
msgstr ""

#: src/reference/unstable.md:1324
msgid ""
"The `codegen-backend` feature makes it possible to select the codegen "
"backend used by rustc using a profile."
msgstr ""

#: src/reference/unstable.md:1328
msgid ""
"```toml\n"
"[package]\n"
"name = \"foo\"\n"
"\n"
"[dependencies]\n"
"serde = \"1.0.117\"\n"
"\n"
"[profile.dev.package.foo]\n"
"codegen-backend = \"cranelift\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:1339
msgid ""
"To set this in a profile in Cargo configuration, you need to use either `-Z "
"codegen-backend` or `[unstable]` table to enable it. For example,"
msgstr ""

#: src/reference/unstable.md:1342
msgid ""
"```toml\n"
"# .cargo/config.toml\n"
"[unstable]\n"
"codegen-backend = true\n"
"\n"
"[profile.dev.package.foo]\n"
"codegen-backend = \"cranelift\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:1351
msgid "gitoxide"
msgstr ""

#: src/reference/unstable.md:1353
msgid ""
"Tracking Issue: [\\#11813](https://github.com/rust-lang/cargo/issues/11813)"
msgstr ""

#: src/reference/unstable.md:1355
msgid ""
"With the 'gitoxide' unstable feature, all or the specified git operations "
"will be performed by the `gitoxide` crate instead of `git2`."
msgstr ""

#: src/reference/unstable.md:1358
msgid ""
"While `-Zgitoxide` enables all currently implemented features, one can "
"individually select git operations to run with `gitoxide` with the `-"
"Zgitoxide=operation[,operationN]` syntax."
msgstr ""

#: src/reference/unstable.md:1361 src/reference/unstable.md:1376
msgid "Valid operations are the following:"
msgstr ""

#: src/reference/unstable.md:1363
msgid ""
"`fetch` - All fetches are done with `gitoxide`, which includes git "
"dependencies as well as the crates index."
msgstr ""

#: src/reference/unstable.md:1364
msgid ""
"`checkout` _(planned)_ - checkout the worktree, with support for filters and "
"submodules."
msgstr ""

#: src/reference/unstable.md:1366
msgid "git"
msgstr ""

#: src/reference/unstable.md:1368
msgid ""
"Tracking Issue: [\\#13285](https://github.com/rust-lang/cargo/issues/13285)"
msgstr ""

#: src/reference/unstable.md:1370
msgid ""
"With the 'git' unstable feature, both `gitoxide` and `git2` will perform "
"shallow fetches of the crate index and git dependencies."
msgstr ""

#: src/reference/unstable.md:1373
msgid ""
"While `-Zgit` enables all currently implemented features, one can "
"individually select when to perform shallow fetches with the `-"
"Zgit=operation[,operationN]` syntax."
msgstr ""

#: src/reference/unstable.md:1378
msgid "`shallow-index` - perform a shallow clone of the index."
msgstr ""

#: src/reference/unstable.md:1379
msgid "`shallow-deps` - perform a shallow clone of git dependencies."
msgstr ""

#: src/reference/unstable.md:1381
msgid "**Details on shallow clones**"
msgstr ""

#: src/reference/unstable.md:1383
msgid ""
"To enable shallow clones, add `-Zgit=shallow-deps` for fetching git "
"dependencies or `-Zgit=shallow-index` for fetching registry index."
msgstr ""

#: src/reference/unstable.md:1384
msgid ""
"Shallow-cloned and shallow-checked-out git repositories reside at their own "
"`-shallow` suffixed directories, i.e,"
msgstr ""

#: src/reference/unstable.md:1385
msgid "`~/.cargo/registry/index/*-shallow`"
msgstr ""

#: src/reference/unstable.md:1386
msgid "`~/.cargo/git/db/*-shallow`"
msgstr ""

#: src/reference/unstable.md:1387
msgid "`~/.cargo/git/checkouts/*-shallow`"
msgstr ""

#: src/reference/unstable.md:1388
msgid ""
"When the unstable feature is on, fetching/cloning a git repository is always "
"a shallow fetch. This roughly equals to `git fetch --depth 1` everywhere."
msgstr ""

#: src/reference/unstable.md:1389
msgid ""
"Even with the presence of `Cargo.lock` or specifying a commit `{ rev = \"…"
"\" }`, gitoxide and libgit2 are still smart enough to shallow fetch without "
"unshallowing the existing repository."
msgstr ""

#: src/reference/unstable.md:1393
msgid ""
"Tracking Issue: [\\#12207](https://github.com/rust-lang/cargo/issues/12207)"
msgstr ""

#: src/reference/unstable.md:1395
msgid "Cargo can directly run `.rs` files as:"
msgstr ""

#: src/reference/unstable.md:1399
msgid "where `file.rs` can be as simple as:"
msgstr ""

#: src/reference/unstable.md:1404
msgid ""
"A user may optionally specify a manifest in a `cargo` code fence in a module-"
"level comment, like:"
msgstr ""

#: src/reference/unstable.md:1409
msgid "\"4.2\""
msgstr ""

#: src/reference/unstable.md:1409
msgid "\"derive\""
msgstr ""

#: src/reference/unstable.md:1423
msgid "\"{:?}\""
msgstr ""

#: src/reference/unstable.md:1427
msgid "Single-file packages"
msgstr ""

#: src/reference/unstable.md:1429
msgid ""
"In addition to today's multi-file packages (`Cargo.toml` file with other "
"`.rs` files), we are adding the concept of single-file packages which may "
"contain an embedded manifest.  There is no required distinguishment for a "
"single-file `.rs` package from any other `.rs` file."
msgstr ""

#: src/reference/unstable.md:1434
msgid ""
"Single-file packages may be selected via `--manifest-path`, like `cargo test "
"--manifest-path foo.rs`. Unlike `Cargo.toml`, these files cannot be auto-"
"discovered."
msgstr ""

#: src/reference/unstable.md:1437
msgid ""
"A single-file package may contain an embedded manifest.  An embedded "
"manifest is stored using `TOML` in rust \"frontmatter\", a markdown code-"
"fence with `cargo` at the start of the infostring at the top of the file."
msgstr ""

#: src/reference/unstable.md:1441
msgid "Inferred / defaulted manifest fields:"
msgstr ""

#: src/reference/unstable.md:1442
msgid "`package.name = <slugified file stem>`"
msgstr ""

#: src/reference/unstable.md:1443
msgid ""
"`package.edition = <current>` to avoid always having to add an embedded "
"manifest at the cost of potentially breaking scripts on rust upgrades"
msgstr ""

#: src/reference/unstable.md:1445
msgid "Warn when `edition` is unspecified to raise awareness of this"
msgstr ""

#: src/reference/unstable.md:1447
msgid "Disallowed manifest fields:"
msgstr ""

#: src/reference/unstable.md:1448
msgid ""
"`[workspace]`, `[lib]`, `[[bin]]`, `[[example]]`, `[[test]]`, `[[bench]]`"
msgstr ""

#: src/reference/unstable.md:1449
msgid ""
"`package.workspace`, `package.build`, `package.links`, `package.autolib`, "
"`package.autobins`, `package.autoexamples`, `package.autotests`, "
"`package.autobenches`"
msgstr ""

#: src/reference/unstable.md:1451
msgid ""
"The default `CARGO_TARGET_DIR` for single-file packages is at `$CARGO_HOME/"
"target/<hash>`:"
msgstr ""

#: src/reference/unstable.md:1452
msgid ""
"Avoid conflicts from multiple single-file packages being in the same "
"directory"
msgstr ""

#: src/reference/unstable.md:1453
msgid ""
"Avoid problems with the single-file package's parent directory being read-"
"only"
msgstr ""

#: src/reference/unstable.md:1454
msgid "Avoid cluttering the user's directory"
msgstr ""

#: src/reference/unstable.md:1456
msgid ""
"The lockfile for single-file packages will be placed in `CARGO_TARGET_DIR`.  "
"In the future, when workspaces are supported, that will allow a user to have "
"a persistent lockfile."
msgstr ""

#: src/reference/unstable.md:1460
msgid "Manifest-commands"
msgstr ""

#: src/reference/unstable.md:1462
msgid ""
"You may pass a manifest directly to the `cargo` command, without a "
"subcommand, like `foo/Cargo.toml` or a single-file package like `foo.rs`.  "
"This is mostly intended for being put in `#!` lines."
msgstr ""

#: src/reference/unstable.md:1466
msgid "The precedence for how to interpret `cargo <subcommand>` is"
msgstr ""

#: src/reference/unstable.md:1467
msgid "Built-in xor single-file packages"
msgstr ""

#: src/reference/unstable.md:1468
msgid "Aliases"
msgstr ""

#: src/reference/unstable.md:1469
msgid "External subcommands"
msgstr ""

#: src/reference/unstable.md:1471
msgid "A parameter is identified as a manifest-command if it has one of:"
msgstr ""

#: src/reference/unstable.md:1472
msgid "Path separators"
msgstr ""

#: src/reference/unstable.md:1473
msgid "A `.rs` extension"
msgstr ""

#: src/reference/unstable.md:1474
msgid "The file name is `Cargo.toml`"
msgstr ""

#: src/reference/unstable.md:1476
msgid ""
"Differences between `cargo run --manifest-path <path>` and `cargo <path>`"
msgstr ""

#: src/reference/unstable.md:1477
msgid ""
"`cargo <path>` runs with the config for `<path>` and not the current dir, "
"more like `cargo install --path <path>`"
msgstr ""

#: src/reference/unstable.md:1478
msgid ""
"`cargo <path>` is at a verbosity level below the normal default.  Pass `-v` "
"to get normal output."
msgstr ""

#: src/reference/unstable.md:1480
msgid "Documentation Updates"
msgstr ""

#: src/reference/unstable.md:1482
msgid "Profile `trim-paths` option"
msgstr ""

#: src/reference/unstable.md:1484
msgid ""
"Tracking Issue: [rust-lang/cargo#12137](https://github.com/rust-lang/cargo/"
"issues/12137)"
msgstr ""

#: src/reference/unstable.md:1485
msgid ""
"Tracking Rustc Issue: [rust-lang/rust#111540](https://github.com/rust-lang/"
"rust/issues/111540)"
msgstr ""

#: src/reference/unstable.md:1487
msgid ""
"This adds a new profile setting to control how paths are sanitized in the "
"resulting binary. This can be enabled like so:"
msgstr ""

#: src/reference/unstable.md:1490
msgid ""
"```toml\n"
"cargo-features = [\"trim-paths\"]\n"
"\n"
"[package]\n"
"# ...\n"
"\n"
"[profile.release]\n"
"trim-paths = [\"diagnostics\", \"object\"]\n"
"```"
msgstr ""

#: src/reference/unstable.md:1500
msgid ""
"To set this in a profile in Cargo configuration, you need to use either `-Z "
"trim-paths` or `[unstable]` table to enable it. For example,"
msgstr ""

#: src/reference/unstable.md:1504
msgid ""
"```toml\n"
"# .cargo/config.toml\n"
"[unstable]\n"
"trim-paths = true\n"
"\n"
"[profile.release]\n"
"trim-paths = [\"diagnostics\", \"object\"]\n"
"```"
msgstr ""

#: src/reference/unstable.md:1513
msgid "Documentation updates"
msgstr ""

#: src/reference/unstable.md:1515
msgid "trim-paths"
msgstr ""

#: src/reference/unstable.md:1517
msgid ""
"_as a new [\"Profiles settings\" entry](./profiles.html#profile-settings)_"
msgstr ""

#: src/reference/unstable.md:1519
msgid ""
"`trim-paths` is a profile setting which enables and controls the "
"sanitization of file paths in build outputs. It takes the following values:"
msgstr ""

#: src/reference/unstable.md:1522
msgid "`\"none\"` and `false` --- disable path sanitization"
msgstr ""

#: src/reference/unstable.md:1523
msgid ""
"`\"macro\"` --- sanitize paths in the expansion of `std::file!()` macro. "
"This is where paths in embedded panic messages come from"
msgstr ""

#: src/reference/unstable.md:1525
msgid "`\"diagnostics\"` --- sanitize paths in printed compiler diagnostics"
msgstr ""

#: src/reference/unstable.md:1526
msgid "`\"object\"` --- sanitize paths in compiled executables or libraries"
msgstr ""

#: src/reference/unstable.md:1527
msgid "`\"all\"` and `true` --- sanitize paths in all possible locations"
msgstr ""

#: src/reference/unstable.md:1529
msgid ""
"It also takes an array with the combinations of `\"macro\"`, "
"`\"diagnostics\"`, and `\"object\"`."
msgstr ""

#: src/reference/unstable.md:1531
msgid ""
"It is defaulted to `none` for the `dev` profile, and `object` for the "
"`release` profile. You can manually override it by specifying this option in "
"`Cargo.toml`:"
msgstr ""

#: src/reference/unstable.md:1534
msgid ""
"```toml\n"
"[profile.dev]\n"
"trim-paths = \"all\"\n"
"\n"
"[profile.release]\n"
"trim-paths = [\"object\", \"diagnostics\"]\n"
"```"
msgstr ""

#: src/reference/unstable.md:1542
msgid ""
"The default `release` profile setting (`object`) sanitizes only the paths in "
"emitted executable or library files. It always affects paths from macros "
"such as panic messages, and in debug information only if they will be "
"embedded together with the binary (the default on platforms with ELF "
"binaries, such as Linux and windows-gnu), but will not touch them if they "
"are in separate files (the default on Windows MSVC and macOS). But the paths "
"to these separate files are sanitized."
msgstr ""

#: src/reference/unstable.md:1548
msgid ""
"If `trim-paths` is not `none` or `false`, then the following paths are "
"sanitized if they appear in a selected scope:"
msgstr ""

#: src/reference/unstable.md:1550
msgid ""
"Path to the source files of the standard and core library (sysroot) will "
"begin with `/rustc/[rustc commit hash]`, e.g. `/home/username/.rustup/"
"toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/"
"core/src/result.rs` -> `/rustc/fe72845f7bb6a77b9e671e6a4f32fe714962cec4/"
"library/core/src/result.rs`"
msgstr ""

#: src/reference/unstable.md:1553
msgid ""
"Path to the current package will be stripped, relatively to the current "
"workspace root, e.g. `/home/username/crate/src/lib.rs` -> `src/lib.rs`."
msgstr ""

#: src/reference/unstable.md:1554
msgid ""
"Path to dependency packages will be replaced with `[package name]-"
"[version]`. E.g. `/home/username/deps/foo/src/lib.rs` -> `foo-0.1.0/src/"
"lib.rs`"
msgstr ""

#: src/reference/unstable.md:1556
msgid ""
"When a path to the source files of the standard and core library is _not_ in "
"scope for sanitization, the emitted path will depend on if `rust-src` "
"component is present. If it is, then some paths will point to the copy of "
"the source files on your file system; if it isn't, then they will show up as "
"`/rustc/[rustc commit hash]/library/...` (just like when it is selected for "
"sanitization). Paths to all other source files will not be affected."
msgstr ""

#: src/reference/unstable.md:1563
msgid ""
"This will not affect any hard-coded paths in the source code, such as in "
"strings."
msgstr ""

#: src/reference/unstable.md:1565
msgid "Environment variable"
msgstr ""

#: src/reference/unstable.md:1567
msgid ""
"_as a new entry of [\"Environment variables Cargo sets for build scripts\"]"
"(./environment-variables.md#environment-variables-cargo-sets-for-crates)_"
msgstr ""

#: src/reference/unstable.md:1569
msgid ""
"`CARGO_TRIM_PATHS` --- The value of `trim-paths` profile option. `false`, "
"`\"none\"`, and empty arrays would be converted to `none`. `true` and "
"`\"all\"` become `all`. Values in a non-empty array would be joined into a "
"comma-separated list. If the build script introduces absolute paths to built "
"artifacts (such as by invoking a compiler), the user may request them to be "
"sanitized in different types of artifacts. Common paths requiring "
"sanitization include `OUT_DIR`, `CARGO_MANIFEST_DIR` and "
"`CARGO_MANIFEST_PATH`, plus any other introduced by the build script, such "
"as include directories."
msgstr ""

#: src/reference/unstable.md:1578
msgid "gc"
msgstr ""

#: src/reference/unstable.md:1580
msgid ""
"Tracking Issue: [\\#12633](https://github.com/rust-lang/cargo/issues/12633)"
msgstr ""

#: src/reference/unstable.md:1582
msgid ""
"The `-Zgc` flag enables garbage-collection within cargo's global cache "
"within the cargo home directory. This includes downloaded dependencies such "
"as compressed `.crate` files, extracted `src` directories, registry index "
"caches, and git dependencies. When `-Zgc` is present, cargo will track the "
"last time any index and dependency was used, and then uses those timestamps "
"to manually or automatically delete cache entries that have not been used "
"for a while."
msgstr ""

#: src/reference/unstable.md:1591
msgid "Automatic garbage collection"
msgstr ""

#: src/reference/unstable.md:1593
msgid ""
"Automatic deletion happens on commands that are already doing a significant "
"amount of work, such as all of the build commands (`cargo build`, `cargo "
"test`, `cargo check`, etc.), and `cargo fetch`. The deletion happens just "
"after resolution and packages have been downloaded. Automatic deletion is "
"only done once per day (see `gc.auto.frequency` to configure). Automatic "
"deletion is disabled if cargo is offline such as with `--offline` or `--"
"frozen` to avoid deleting artifacts that may need to be used if you are "
"offline for a long period of time."
msgstr ""

#: src/reference/unstable.md:1599
msgid "Automatic gc configuration"
msgstr ""

#: src/reference/unstable.md:1601
msgid ""
"The automatic gc behavior can be specified via a cargo configuration "
"setting. The settings available are:"
msgstr ""

#: src/reference/unstable.md:1604
msgid ""
"```toml\n"
"# Example config.toml file.\n"
"\n"
"# This table defines the behavior for automatic garbage collection.\n"
"[gc.auto]\n"
"# The maximum frequency that automatic garbage collection happens.\n"
"# Can be \"never\" to disable automatic-gc, or \"always\" to run on every "
"command.\n"
"frequency = \"1 day\"\n"
"# Anything older than this duration will be deleted in the source cache.\n"
"max-src-age = \"1 month\"\n"
"# Anything older than this duration will be deleted in the compressed crate "
"cache.\n"
"max-crate-age = \"3 months\"\n"
"# Any index older than this duration will be deleted from the index cache.\n"
"max-index-age = \"3 months\"\n"
"# Any git checkout older than this duration will be deleted from the "
"checkout cache.\n"
"max-git-co-age = \"1 month\"\n"
"# Any git clone older than this duration will be deleted from the git "
"cache.\n"
"max-git-db-age = \"3 months\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:1624
msgid "Manual garbage collection with `cargo clean`"
msgstr ""

#: src/reference/unstable.md:1626
msgid ""
"Manual deletion can be done with the `cargo clean gc` command. Deletion of "
"cache contents can be performed by passing one of the cache options:"
msgstr ""

#: src/reference/unstable.md:1629
msgid ""
"`--max-src-age=DURATION` --- Deletes source cache files that have not been "
"used since the given age."
msgstr ""

#: src/reference/unstable.md:1630
msgid ""
"`--max-crate-age=DURATION` --- Deletes crate cache files that have not been "
"used since the given age."
msgstr ""

#: src/reference/unstable.md:1631
msgid ""
"`--max-index-age=DURATION` --- Deletes registry indexes that have not been "
"used since then given age (including their `.crate` and `src` files)."
msgstr ""

#: src/reference/unstable.md:1632
msgid ""
"`--max-git-co-age=DURATION` --- Deletes git dependency checkouts that have "
"not been used since then given age."
msgstr ""

#: src/reference/unstable.md:1633
msgid ""
"`--max-git-db-age=DURATION` --- Deletes git dependency clones that have not "
"been used since then given age."
msgstr ""

#: src/reference/unstable.md:1634
msgid ""
"`--max-download-age=DURATION` --- Deletes any downloaded cache data that has "
"not been used since then given age."
msgstr ""

#: src/reference/unstable.md:1635
msgid ""
"`--max-src-size=SIZE` --- Deletes the oldest source cache files until the "
"cache is under the given size."
msgstr ""

#: src/reference/unstable.md:1636
msgid ""
"`--max-crate-size=SIZE` --- Deletes the oldest crate cache files until the "
"cache is under the given size."
msgstr ""

#: src/reference/unstable.md:1637
msgid ""
"`--max-git-size=SIZE` --- Deletes the oldest git dependency caches until the "
"cache is under the given size."
msgstr ""

#: src/reference/unstable.md:1638
msgid ""
"`--max-download-size=SIZE` --- Deletes the oldest downloaded cache data "
"until the cache is under the given size."
msgstr ""

#: src/reference/unstable.md:1640
msgid ""
"A DURATION is specified in the form \"N seconds/minutes/days/weeks/months\" "
"where N is an integer."
msgstr ""

#: src/reference/unstable.md:1642
msgid ""
"A SIZE is specified in the form \"N _suffix_\" where _suffix_ is B, kB, MB, "
"GB, kiB, MiB, or GiB, and N is an integer or floating point number. If no "
"suffix is specified, the number is the number of bytes."
msgstr ""

#: src/reference/unstable.md:1650
msgid "open-namespaces"
msgstr ""

#: src/reference/unstable.md:1652
msgid ""
"Tracking Issue: [\\#13576](https://github.com/rust-lang/cargo/issues/13576)"
msgstr ""

#: src/reference/unstable.md:1654
msgid "Allow multiple packages to participate in the same API namespace"
msgstr ""

#: src/reference/unstable.md:1656
msgid "This can be enabled like so:"
msgstr ""

#: src/reference/unstable.md:1657
msgid ""
"```toml\n"
"cargo-features = [\"open-namespaces\"]\n"
"\n"
"[package]\n"
"# ...\n"
"```"
msgstr ""

#: src/reference/unstable.md:1664
msgid "`[lints.cargo]`"
msgstr ""

#: src/reference/unstable.md:1666
msgid ""
"Tracking Issue: [\\#12235](https://github.com/rust-lang/cargo/issues/12235)"
msgstr ""

#: src/reference/unstable.md:1668
msgid ""
"A new `lints` tool table for `cargo` that can be used to configure lints "
"emitted by `cargo` itself when `-Zcargo-lints` is used"
msgstr ""

#: src/reference/unstable.md:1670
msgid ""
"```toml\n"
"[lints.cargo]\n"
"implicit-features = \"warn\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:1675
msgid ""
"This will work with [RFC 2906 `workspace-deduplicate`](https://rust-"
"lang.github.io/rfcs/2906-cargo-workspace-deduplicate.html):"
msgstr ""

#: src/reference/unstable.md:1677
msgid ""
"```toml\n"
"[workspace.lints.cargo]\n"
"implicit-features = \"warn\"\n"
"\n"
"[lints]\n"
"workspace = true\n"
"```"
msgstr ""

#: src/reference/unstable.md:1685
msgid "Path Bases"
msgstr ""

#: src/reference/unstable.md:1687
msgid ""
"Tracking Issue: [\\#14355](https://github.com/rust-lang/cargo/issues/14355)"
msgstr ""

#: src/reference/unstable.md:1689
msgid ""
"A `path` dependency may optionally specify a base by setting the `base` key "
"to the name of a path base from the `[path-bases]` table in either the "
"[configuration](config.md) or one of the [built-in path bases](#built-in-"
"path-bases). The value of that path base is prepended to the `path` value "
"(along with a path separator if necessary) to produce the actual location "
"where Cargo will look for the dependency."
msgstr ""

#: src/reference/unstable.md:1696
msgid "For example, if the `Cargo.toml` contains:"
msgstr ""

#: src/reference/unstable.md:1698
msgid ""
"```toml\n"
"cargo-features = [\"path-bases\"]\n"
"\n"
"[dependencies]\n"
"foo = { base = \"dev\", path = \"foo\" }\n"
"```"
msgstr ""

#: src/reference/unstable.md:1705
msgid "Given a `[path-bases]` table in the configuration that contains:"
msgstr ""

#: src/reference/unstable.md:1707
msgid ""
"```toml\n"
"[path-bases]\n"
"dev = \"/home/user/dev/rust/libraries/\"\n"
"```"
msgstr ""

#: src/reference/unstable.md:1712
msgid ""
"This will produce a `path` dependency `foo` located at `/home/user/dev/rust/"
"libraries/foo`."
msgstr ""

#: src/reference/unstable.md:1715
msgid ""
"Path bases can be either absolute or relative. Relative path bases are "
"relative to the parent directory of the configuration file that declared "
"that path base."
msgstr ""

#: src/reference/unstable.md:1718
msgid ""
"The name of a path base must use only [alphanumeric](https://doc.rust-"
"lang.org/std/primitive.char.html#method.is_alphanumeric) characters or `-` "
"or `_`, must start with an [alphabetic](https://doc.rust-lang.org/std/"
"primitive.char.html#method.is_alphabetic) character, and must not be empty."
msgstr ""

#: src/reference/unstable.md:1722
msgid ""
"If the name of path base used in a dependency is neither in the "
"configuration nor one of the built-in path base, then Cargo will raise an "
"error."
msgstr ""

#: src/reference/unstable.md:1725
msgid "Built-in path bases"
msgstr ""

#: src/reference/unstable.md:1727
msgid ""
"Cargo provides implicit path bases that can be used without the need to "
"specify them in a `[path-bases]` table."
msgstr ""

#: src/reference/unstable.md:1730
msgid ""
"`workspace` - If a project is [a workspace or workspace member]"
"(workspaces.md) then this path base is defined as the parent directory of "
"the root `Cargo.toml` of the workspace."
msgstr ""

#: src/reference/unstable.md:1734
msgid ""
"If a built-in path base name is also declared in the configuration, then "
"Cargo will prefer the value in the configuration. The allows Cargo to add "
"new built-in path bases without compatibility issues (as existing uses will "
"shadow the built-in name)."
msgstr ""

#: src/reference/unstable.md:1739
msgid "lockfile-path"
msgstr ""

#: src/reference/unstable.md:1740
msgid ""
"Original Issue: [\\#5707](https://github.com/rust-lang/cargo/issues/5707)"
msgstr ""

#: src/reference/unstable.md:1741
msgid ""
"Tracking Issue: [\\#14421](https://github.com/rust-lang/cargo/issues/14421)"
msgstr ""

#: src/reference/unstable.md:1743
msgid ""
"This feature allows you to specify the path of lockfile Cargo.lock. By "
"default, lockfile is written into `<workspace_root>/Cargo.lock`. However, "
"when sources are stored in read-only directory, most of the cargo commands "
"would fail, trying to write a lockfile. The `--lockfile-path` flag makes it "
"easier to work with readonly sources. Note, that currently path must end "
"with `Cargo.lock`. Meaning, if you want to use this feature in multiple "
"projects, lockfiles should be stored in different directories. Example:"
msgstr ""

#: src/reference/unstable.md:1756
msgid "package-workspace"
msgstr ""

#: src/reference/unstable.md:1757
msgid ""
"Tracking Issue: [\\#10948](https://github.com/rust-lang/cargo/issues/10948)"
msgstr ""

#: src/reference/unstable.md:1759
msgid ""
"This allows cargo to package (or publish) multiple crates in a workspace, "
"even if they have inter-dependencies. For example, consider a workspace "
"containing packages `foo` and `dep`, where `foo` depends on `dep`. Then"
msgstr ""

#: src/reference/unstable.md:1767
msgid "will package both `foo` and `dep`, while"
msgstr ""

#: src/reference/unstable.md:1773
msgid ""
"will publish both `foo` and `dep`. If `foo` and `dep` are the only crates in "
"the workspace, you can use the `--workspace` flag instead of specifying the "
"crates individually:"
msgstr ""

#: src/reference/unstable.md:1782
msgid "Lock-file behavior"
msgstr ""

#: src/reference/unstable.md:1784
msgid ""
"When packaging a binary at the same time as one of its dependencies, the "
"binary will be packaged with a lock-file pointing at the dependency's "
"registry entry _as though the dependency were already published_, even "
"though it has not yet been. In this case, `cargo` needs to know the registry "
"that the dependency will eventually be published on. `cargo` will attempt to "
"infer this registry by examining the [the `publish` field](manifest.md#the-"
"publish-field), falling back to `crates.io` if no `publish` field is set. To "
"explicitly set the registry, pass a `--registry` or `--index` flag."
msgstr ""

#: src/reference/unstable.md:1798
msgid "native-completions"
msgstr ""

#: src/reference/unstable.md:1799
msgid ""
"Original Issue: [\\#6645](https://github.com/rust-lang/cargo/issues/6645)"
msgstr ""

#: src/reference/unstable.md:1800
msgid ""
"Tracking Issue: [\\#14520](https://github.com/rust-lang/cargo/issues/14520)"
msgstr ""

#: src/reference/unstable.md:1802
msgid ""
"This feature moves the handwritten completion scripts to Rust native, making "
"it easier for us to add, extend and test new completions. This feature is "
"enabled with the nightly channel, without requiring additional `-Z` options."
msgstr ""

#: src/reference/unstable.md:1806
msgid "Areas of particular interest for feedback"
msgstr ""

#: src/reference/unstable.md:1807
msgid "Arguments that need escaping or quoting that aren't handled correctly"
msgstr ""

#: src/reference/unstable.md:1808
msgid "Inaccuracies in the information"
msgstr ""

#: src/reference/unstable.md:1809
msgid "Bugs in parsing of the command-line"
msgstr ""

#: src/reference/unstable.md:1810
msgid "Arguments that don't report their completions"
msgstr ""

#: src/reference/unstable.md:1811
msgid "If a known issue is being problematic"
msgstr ""

#: src/reference/unstable.md:1813
msgid "Feedback can be broken down into"
msgstr ""

#: src/reference/unstable.md:1814
msgid "What completion candidates are reported"
msgstr ""

#: src/reference/unstable.md:1815
msgid ""
"Known issues: [\\#14520](https://github.com/rust-lang/cargo/issues/14520), "
"[`A-completions`](https://github.com/rust-lang/cargo/labels/A-completions)"
msgstr ""

#: src/reference/unstable.md:1816
msgid ""
"[Report an issue](https://github.com/rust-lang/cargo/issues/new) or [discuss "
"the behavior](https://github.com/rust-lang/cargo/issues/14520)"
msgstr ""

#: src/reference/unstable.md:1817
msgid "Shell integration, command-line parsing, and completion filtering"
msgstr ""

#: src/reference/unstable.md:1818
msgid ""
"Known issues: [clap#3166](https://github.com/clap-rs/clap/issues/3166), "
"[clap's `A-completions`](https://github.com/clap-rs/clap/labels/A-completion)"
msgstr ""

#: src/reference/unstable.md:1819
msgid ""
"[Report an issue](https://github.com/clap-rs/clap/issues/new/choose) or "
"[discuss the behavior](https://github.com/clap-rs/clap/discussions/new/"
"choose)"
msgstr ""

#: src/reference/unstable.md:1821
msgid ""
"When in doubt, you can discuss this in [\\#14520](https://github.com/rust-"
"lang/cargo/issues/14520) or on [zulip](https://rust-lang.zulipchat.com/"
"#narrow/stream/246057-t-cargo)"
msgstr ""

#: src/reference/unstable.md:1823
msgid "How to use native-completions feature:"
msgstr ""

#: src/reference/unstable.md:1824
msgid ""
"bash: Add `source <(CARGO_COMPLETE=bash cargo +nightly)` to your .bashrc."
msgstr ""

#: src/reference/unstable.md:1827
msgid "zsh: Add `source <(CARGO_COMPLETE=zsh cargo +nightly)` to your .zshrc."
msgstr ""

#: src/reference/unstable.md:1830
msgid ""
"fish: Add `source (CARGO_COMPLETE=fish cargo +nightly | psub)` to "
"`$XDG_CONFIG_HOME/fish/completions/cargo.fish`"
msgstr ""

#: src/reference/unstable.md:1833
msgid ""
"elvish: Add `eval (E:CARGO_COMPLETE=elvish cargo +nightly | slurp)` to "
"`$XDG_CONFIG_HOME/elvish/rc.elv`"
msgstr ""

#: src/reference/unstable.md:1836
msgid ""
"powershell: Add `CARGO_COMPLETE=powershell cargo +nightly | Invoke-"
"Expression` to `$PROFILE`."
msgstr ""

#: src/reference/unstable.md:1839
msgid "warnings"
msgstr ""

#: src/reference/unstable.md:1841
msgid ""
"Original Issue: [\\#8424](https://github.com/rust-lang/cargo/issues/8424)"
msgstr ""

#: src/reference/unstable.md:1842
msgid ""
"Tracking Issue: [\\#14802](https://github.com/rust-lang/cargo/issues/14802)"
msgstr ""

#: src/reference/unstable.md:1844
msgid ""
"The `-Z warnings` feature enables the `build.warnings` configuration option "
"to control how Cargo handles warnings. If the `-Z warnings` unstable flag is "
"not enabled, then the `build.warnings` config will be ignored."
msgstr ""

#: src/reference/unstable.md:1848
msgid ""
"This setting currently only applies to rustc warnings. It may apply to "
"additional warnings (such as Cargo lints or Cargo warnings) in the future."
msgstr ""

#: src/reference/unstable.md:1851
msgid "`build.warnings`"
msgstr ""

#: src/reference/unstable.md:1853
msgid "Default: `warn`"
msgstr ""

#: src/reference/unstable.md:1854
msgid "Environment: `CARGO_BUILD_WARNINGS`"
msgstr ""

#: src/reference/unstable.md:1856
msgid "Controls how Cargo handles warnings. Allowed values are:"
msgstr ""

#: src/reference/unstable.md:1857
msgid "`warn`: warnings are emitted as warnings (default)."
msgstr ""

#: src/reference/unstable.md:1858
msgid "`allow`: warnings are hidden."
msgstr ""

#: src/reference/unstable.md:1859
msgid ""
"`deny`: if warnings are emitted, an error will be raised at the end of the "
"operation and the process will exit with a failure exit code."
msgstr ""

#: src/reference/unstable.md:1861
msgid "feature unification"
msgstr ""

#: src/reference/unstable.md:1863
msgid ""
"RFC: [\\#3692](https://github.com/rust-lang/rfcs/blob/master/text/3692-"
"feature-unification.md)"
msgstr ""

#: src/reference/unstable.md:1864
msgid ""
"Tracking Issue: [\\#14774](https://github.com/rust-lang/cargo/issues/14774)"
msgstr ""

#: src/reference/unstable.md:1866
msgid ""
"The `-Z feature-unification` enables the `resolver.feature-unification` "
"configuration option to control how features are unified across a workspace. "
"If the `-Z feature-unification` unstable flag is not enabled, then the "
"`resolver.feature-unification` configuration will be ignored."
msgstr ""

#: src/reference/unstable.md:1871
msgid "`resolver.feature-unification`"
msgstr ""

#: src/reference/unstable.md:1874
msgid "Default: `\"selected\"`"
msgstr ""

#: src/reference/unstable.md:1875
msgid "Environment: `CARGO_RESOLVER_FEATURE_UNIFICATION`"
msgstr ""

#: src/reference/unstable.md:1877
msgid ""
"Specify which packages participate in [feature unification](../reference/"
"features.html#feature-unification)."
msgstr ""

#: src/reference/unstable.md:1879
msgid ""
"`selected`: Merge dependency features from all packages specified for the "
"current build."
msgstr ""

#: src/reference/unstable.md:1880
msgid ""
"`workspace`: Merge dependency features across all workspace members, "
"regardless of which packages are specified for the current build."
msgstr ""

#: src/reference/unstable.md:1882
msgid ""
"`package` _(unimplemented)_: Dependency features are considered on a package-"
"by-package basis, preferring duplicate builds of dependencies when different "
"sets of features are activated by the packages."
msgstr ""

#: src/reference/unstable.md:1885
msgid "Stabilized and removed features"
msgstr ""

#: src/reference/unstable.md:1887
msgid "Compile progress"
msgstr ""

#: src/reference/unstable.md:1889
msgid ""
"The compile-progress feature has been stabilized in the 1.30 release. "
"Progress bars are now enabled by default. See [`term.progress`]"
"(config.md#termprogresswhen) for more information about controlling this "
"feature."
msgstr ""

#: src/reference/unstable.md:1894 src/appendix/glossary.md:35
msgid "Edition"
msgstr ""

#: src/reference/unstable.md:1896
msgid ""
"Specifying the `edition` in `Cargo.toml` has been stabilized in the 1.31 "
"release. See [the edition field](manifest.md#the-edition-field) for more "
"information about specifying this field."
msgstr ""

#: src/reference/unstable.md:1900
msgid "rename-dependency"
msgstr ""

#: src/reference/unstable.md:1902
msgid ""
"Specifying renamed dependencies in `Cargo.toml` has been stabilized in the "
"1.31 release. See [renaming dependencies](specifying-"
"dependencies.md#renaming-dependencies-in-cargotoml) for more information "
"about renaming dependencies."
msgstr ""

#: src/reference/unstable.md:1906
msgid "Alternate Registries"
msgstr ""

#: src/reference/unstable.md:1908
msgid ""
"Support for alternate registries has been stabilized in the 1.34 release. "
"See the [Registries chapter](registries.md) for more information about "
"alternate registries."
msgstr ""

#: src/reference/unstable.md:1911
msgid "Offline Mode"
msgstr ""

#: src/reference/unstable.md:1913
msgid ""
"The offline feature has been stabilized in the 1.36 release. See the [`--"
"offline` flag](../commands/cargo.md#option-cargo---offline) for more "
"information on using the offline mode."
msgstr ""

#: src/reference/unstable.md:1917
msgid "publish-lockfile"
msgstr ""

#: src/reference/unstable.md:1919
msgid ""
"The `publish-lockfile` feature has been removed in the 1.37 release. The "
"`Cargo.lock` file is always included when a package is published if the "
"package contains a binary target. `cargo install` requires the `--locked` "
"flag to use the `Cargo.lock` file. See [`cargo package`](../commands/cargo-"
"package.md) and [`cargo install`](../commands/cargo-install.md) for more "
"information."
msgstr ""

#: src/reference/unstable.md:1926
msgid "default-run"
msgstr ""

#: src/reference/unstable.md:1928
msgid ""
"The `default-run` feature has been stabilized in the 1.37 release. See [the "
"`default-run` field](manifest.md#the-default-run-field) for more information "
"about specifying the default target to run."
msgstr ""

#: src/reference/unstable.md:1932
msgid "cache-messages"
msgstr ""

#: src/reference/unstable.md:1934
msgid ""
"Compiler message caching has been stabilized in the 1.40 release. Compiler "
"warnings are now cached by default and will be replayed automatically when "
"re-running Cargo."
msgstr ""

#: src/reference/unstable.md:1938
msgid "install-upgrade"
msgstr ""

#: src/reference/unstable.md:1940
msgid ""
"The `install-upgrade` feature has been stabilized in the 1.41 release. "
"[`cargo install`](../commands/cargo-install.md) will now automatically "
"upgrade packages if they appear to be out-of-date. See the [`cargo install`]"
"(../commands/cargo-install.md) documentation for more information."
msgstr ""

#: src/reference/unstable.md:1946
msgid "Profile Overrides"
msgstr ""

#: src/reference/unstable.md:1948
msgid ""
"Profile overrides have been stabilized in the 1.41 release. See [Profile "
"Overrides](profiles.md#overrides) for more information on using overrides."
msgstr ""

#: src/reference/unstable.md:1952
msgid "Config Profiles"
msgstr ""

#: src/reference/unstable.md:1954
msgid ""
"Specifying profiles in Cargo config files and environment variables has been "
"stabilized in the 1.43 release. See the [config `[profile]` table]"
"(config.md#profile) for more information about specifying [profiles]"
"(profiles.md) in config files."
msgstr ""

#: src/reference/unstable.md:1959
msgid "crate-versions"
msgstr ""

#: src/reference/unstable.md:1961
msgid ""
"The `-Z crate-versions` flag has been stabilized in the 1.47 release. The "
"crate version is now automatically included in the [`cargo doc`](../commands/"
"cargo-doc.md) documentation sidebar."
msgstr ""

#: src/reference/unstable.md:1967
msgid ""
"The `-Z features` flag has been stabilized in the 1.51 release. See [feature "
"resolver version 2](features.md#feature-resolver-version-2) for more "
"information on using the new feature resolver."
msgstr ""

#: src/reference/unstable.md:1971
msgid "package-features"
msgstr ""

#: src/reference/unstable.md:1973
msgid ""
"The `-Z package-features` flag has been stabilized in the 1.51 release. See "
"the [resolver version 2 command-line flags](features.md#resolver-version-2-"
"command-line-flags) for more information on using the features CLI options."
msgstr ""

#: src/reference/unstable.md:1977
msgid "Resolver"
msgstr ""

#: src/reference/unstable.md:1979
msgid ""
"The `resolver` feature in `Cargo.toml` has been stabilized in the 1.51 "
"release. See the [resolver versions](resolver.md#resolver-versions) for more "
"information about specifying resolvers."
msgstr ""

#: src/reference/unstable.md:1983
msgid "extra-link-arg"
msgstr ""

#: src/reference/unstable.md:1985
msgid ""
"The `extra-link-arg` feature to specify additional linker arguments in build "
"scripts has been stabilized in the 1.56 release. See the [build script "
"documentation](build-scripts.md#outputs-of-the-build-script) for more "
"information on specifying extra linker arguments."
msgstr ""

#: src/reference/unstable.md:1990
msgid "configurable-env"
msgstr ""

#: src/reference/unstable.md:1992
msgid ""
"The `configurable-env` feature to specify environment variables in Cargo "
"configuration has been stabilized in the 1.56 release. See the [config "
"documentation](config.html#env) for more information about configuring "
"environment variables."
msgstr ""

#: src/reference/unstable.md:1997
msgid "rust-version"
msgstr ""

#: src/reference/unstable.md:1999
msgid ""
"The `rust-version` field in `Cargo.toml` has been stabilized in the 1.56 "
"release. See the [rust-version field](manifest.html#the-rust-version-field) "
"for more information on using the `rust-version` field and the `--ignore-"
"rust-version` option."
msgstr ""

#: src/reference/unstable.md:2003
msgid "patch-in-config"
msgstr ""

#: src/reference/unstable.md:2005
msgid ""
"The `-Z patch-in-config` flag, and the corresponding support for `[patch]` "
"section in Cargo configuration files has been stabilized in the 1.56 "
"release. See the [patch field](config.html#patch) for more information."
msgstr ""

#: src/reference/unstable.md:2010
msgid "edition 2021"
msgstr ""

#: src/reference/unstable.md:2012
msgid ""
"The 2021 edition has been stabilized in the 1.56 release. See the [`edition` "
"field](manifest.md#the-edition-field) for more information on setting the "
"edition. See [`cargo fix --edition`](../commands/cargo-fix.md) and [The "
"Edition Guide](../../edition-guide/index.html) for more information on "
"migrating existing projects."
msgstr ""

#: src/reference/unstable.md:2017
msgid "Custom named profiles"
msgstr ""

#: src/reference/unstable.md:2019
msgid ""
"Custom named profiles have been stabilized in the 1.57 release. See the "
"[profiles chapter](profiles.md#custom-profiles) for more information."
msgstr ""

#: src/reference/unstable.md:2022
msgid "Profile `strip` option"
msgstr ""

#: src/reference/unstable.md:2024
msgid ""
"The profile `strip` option has been stabilized in the 1.59 release. See the "
"[profiles chapter](profiles.md#strip) for more information."
msgstr ""

#: src/reference/unstable.md:2029
msgid ""
"Support for generating a future-incompat report has been stabilized in the "
"1.59 release. See the [future incompat report chapter](future-incompat-"
"report.md) for more information."
msgstr ""

#: src/reference/unstable.md:2033
msgid "Namespaced features"
msgstr ""

#: src/reference/unstable.md:2035
msgid ""
"Namespaced features has been stabilized in the 1.60 release. See the "
"[Features chapter](features.md#optional-dependencies) for more information."
msgstr ""

#: src/reference/unstable.md:2038
msgid "Weak dependency features"
msgstr ""

#: src/reference/unstable.md:2040
msgid ""
"Weak dependency features has been stabilized in the 1.60 release. See the "
"[Features chapter](features.md#dependency-features) for more information."
msgstr ""

#: src/reference/unstable.md:2043
msgid "timings"
msgstr ""

#: src/reference/unstable.md:2045
msgid ""
"The `-Ztimings` option has been stabilized as `--timings` in the 1.60 "
"release. (`--timings=html` and the machine-readable `--timings=json` output "
"remain unstable and require `-Zunstable-options`.)"
msgstr ""

#: src/reference/unstable.md:2049
msgid "config-cli"
msgstr ""

#: src/reference/unstable.md:2051
msgid ""
"The `--config` CLI option has been stabilized in the 1.63 release. See the "
"[config documentation](config.html#command-line-overrides) for more "
"information."
msgstr ""

#: src/reference/unstable.md:2055
msgid "multitarget"
msgstr ""

#: src/reference/unstable.md:2057
msgid ""
"The `-Z multitarget` option has been stabilized in the 1.64 release. See "
"[`build.target`](config.md#buildtarget) for more information about setting "
"the default [target platform triples](../appendix/glossary.md#target \"\\"
"\"target\\\" (glossary)\")."
msgstr ""

#: src/reference/unstable.md:2061
msgid "crate-type"
msgstr ""

#: src/reference/unstable.md:2063
msgid ""
"The `--crate-type` flag for `cargo rustc` has been stabilized in the 1.64 "
"release. See the [`cargo rustc` documentation](../commands/cargo-rustc.md) "
"for more information."
msgstr ""

#: src/reference/unstable.md:2068
msgid "Workspace Inheritance"
msgstr ""

#: src/reference/unstable.md:2070
msgid ""
"Workspace Inheritance has been stabilized in the 1.64 release. See "
"[workspace.package](workspaces.md#the-package-table), "
"[workspace.dependencies](workspaces.md#the-dependencies-table), and "
"[inheriting-a-dependency-from-a-workspace](specifying-"
"dependencies.md#inheriting-a-dependency-from-a-workspace) for more "
"information."
msgstr ""

#: src/reference/unstable.md:2076
msgid "terminal-width"
msgstr ""

#: src/reference/unstable.md:2078
msgid ""
"The `-Z terminal-width` option has been stabilized in the 1.68 release. The "
"terminal width is always passed to the compiler when running from a terminal "
"where Cargo can automatically detect the width."
msgstr ""

#: src/reference/unstable.md:2082
msgid "sparse-registry"
msgstr ""

#: src/reference/unstable.md:2084
msgid ""
"Sparse registry support has been stabilized in the 1.68 release. See "
"[Registry Protocols](registries.md#registry-protocols) for more information."
msgstr ""

#: src/reference/unstable.md:2087
msgid "`cargo logout`"
msgstr ""

#: src/reference/unstable.md:2089
msgid ""
"The [`cargo logout`](../commands/cargo-logout.md) command has been "
"stabilized in the 1.70 release."
msgstr ""

#: src/reference/unstable.md:2094
msgid "`doctest-in-workspace`"
msgstr ""

#: src/reference/unstable.md:2096
msgid ""
"The `-Z doctest-in-workspace` option for `cargo test` has been stabilized "
"and enabled by default in the 1.72 release. See the [`cargo test` "
"documentation](../commands/cargo-test.md#working-directory-of-tests) for "
"more information about the working directory for compiling and running tests."
msgstr ""

#: src/reference/unstable.md:2101
msgid "keep-going"
msgstr ""

#: src/reference/unstable.md:2103
msgid ""
"The `--keep-going` option has been stabilized in the 1.74 release. See the "
"[`--keep-going` flag](../commands/cargo-build.html#option-cargo-build---keep-"
"going) in `cargo build` as an example for more details."
msgstr ""

#: src/reference/unstable.md:2107
msgid "`[lints]`"
msgstr ""

#: src/reference/unstable.md:2109
msgid ""
"[`[lints]`](manifest.html#the-lints-section) (enabled via `-Zlints`) has "
"been stabilized in the 1.74 release."
msgstr ""

#: src/reference/unstable.md:2111
msgid "credential-process"
msgstr ""

#: src/reference/unstable.md:2113
msgid ""
"The `-Z credential-process` feature has been stabilized in the 1.74 release."
msgstr ""

#: src/reference/unstable.md:2115 src/reference/unstable.md:2122
msgid ""
"See [Registry Authentication](registry-authentication.md) documentation for "
"details."
msgstr ""

#: src/reference/unstable.md:2117
msgid "registry-auth"
msgstr ""

#: src/reference/unstable.md:2119
msgid ""
"The `-Z registry-auth` feature has been stabilized in the 1.74 release with "
"the additional requirement that a credential-provider is configured."
msgstr ""

#: src/reference/unstable.md:2124
msgid "check-cfg"
msgstr ""

#: src/reference/unstable.md:2126
msgid ""
"The `-Z check-cfg` feature has been stabilized in the 1.80 release by making "
"it the default behavior."
msgstr ""

#: src/reference/unstable.md:2129
msgid ""
"See the [build script documentation](build-scripts.md#rustc-check-cfg) for "
"information about specifying custom cfgs."
msgstr ""

#: src/reference/unstable.md:2132
msgid "Edition 2024"
msgstr ""

#: src/reference/unstable.md:2134
msgid ""
"The 2024 edition has been stabilized in the 1.85 release. See the [`edition` "
"field](manifest.md#the-edition-field) for more information on setting the "
"edition. See [`cargo fix --edition`](../commands/cargo-fix.md) and [The "
"Edition Guide](../../edition-guide/index.html) for more information on "
"migrating existing projects."
msgstr ""

#: src/commands/index.md:2
msgid "[General Commands](general-commands.md)"
msgstr ""

#: src/commands/index.md:3
msgid "[Build Commands](build-commands.md)"
msgstr ""

#: src/commands/index.md:4
msgid "[Manifest Commands](manifest-commands.md)"
msgstr ""

#: src/commands/index.md:5
msgid "[Package Commands](package-commands.md)"
msgstr ""

#: src/commands/index.md:6
msgid "[Publishing Commands](publishing-commands.md)"
msgstr ""

#: src/commands/index.md:7
msgid "[Deprecated and Removed](deprecated-and-removed.md)"
msgstr ""

#: src/commands/general-commands.md:2
msgid "[cargo](cargo.md)"
msgstr ""

#: src/commands/general-commands.md:3
msgid "[cargo help](cargo-help.md)"
msgstr ""

#: src/commands/general-commands.md:4
msgid "[cargo version](cargo-version.md)"
msgstr ""

#: src/commands/cargo.md:1
msgid "cargo(1)"
msgstr ""

#: src/commands/cargo.md:3 src/commands/cargo-help.md:3
#: src/commands/cargo-version.md:3 src/commands/cargo-bench.md:2
#: src/commands/cargo-build.md:2 src/commands/cargo-check.md:2
#: src/commands/cargo-clean.md:2 src/commands/cargo-clippy.md:3
#: src/commands/cargo-doc.md:2 src/commands/cargo-fetch.md:2
#: src/commands/cargo-fix.md:2 src/commands/cargo-fmt.md:3
#: src/commands/cargo-miri.md:3 src/commands/cargo-report.md:3
#: src/commands/cargo-run.md:2 src/commands/cargo-rustc.md:2
#: src/commands/cargo-rustdoc.md:2 src/commands/cargo-test.md:2
#: src/commands/cargo-add.md:2 src/commands/cargo-generate-lockfile.md:3
#: src/commands/cargo-info.md:3 src/commands/cargo-locate-project.md:3
#: src/commands/cargo-metadata.md:3 src/commands/cargo-pkgid.md:3
#: src/commands/cargo-remove.md:2 src/commands/cargo-tree.md:2
#: src/commands/cargo-update.md:3 src/commands/cargo-vendor.md:3
#: src/commands/cargo-init.md:3 src/commands/cargo-install.md:2
#: src/commands/cargo-new.md:3 src/commands/cargo-search.md:3
#: src/commands/cargo-uninstall.md:3 src/commands/cargo-login.md:3
#: src/commands/cargo-logout.md:3 src/commands/cargo-owner.md:3
#: src/commands/cargo-package.md:2 src/commands/cargo-publish.md:2
#: src/commands/cargo-yank.md:3
msgid "NAME"
msgstr ""

#: src/commands/cargo.md:5
msgid "cargo --- The Rust package manager"
msgstr ""

#: src/commands/cargo.md:7 src/commands/cargo-help.md:7
#: src/commands/cargo-version.md:7 src/commands/cargo-bench.md:6
#: src/commands/cargo-build.md:6 src/commands/cargo-check.md:6
#: src/commands/cargo-clean.md:6 src/commands/cargo-doc.md:6
#: src/commands/cargo-fetch.md:6 src/commands/cargo-fix.md:6
#: src/commands/cargo-report.md:7 src/commands/cargo-run.md:6
#: src/commands/cargo-rustc.md:6 src/commands/cargo-rustdoc.md:6
#: src/commands/cargo-test.md:6 src/commands/cargo-add.md:6
#: src/commands/cargo-generate-lockfile.md:7 src/commands/cargo-info.md:7
#: src/commands/cargo-locate-project.md:7 src/commands/cargo-metadata.md:7
#: src/commands/cargo-pkgid.md:7 src/commands/cargo-remove.md:6
#: src/commands/cargo-tree.md:6 src/commands/cargo-update.md:7
#: src/commands/cargo-vendor.md:7 src/commands/cargo-init.md:7
#: src/commands/cargo-install.md:6 src/commands/cargo-new.md:7
#: src/commands/cargo-search.md:7 src/commands/cargo-uninstall.md:7
#: src/commands/cargo-login.md:7 src/commands/cargo-logout.md:7
#: src/commands/cargo-owner.md:7 src/commands/cargo-package.md:6
#: src/commands/cargo-publish.md:6 src/commands/cargo-yank.md:7
msgid "SYNOPSIS"
msgstr ""

#: src/commands/cargo.md:9
msgid ""
"`cargo` \\[_options_\\] _command_ \\[_args_\\]  \n"
"`cargo` \\[_options_\\] `--version`  \n"
"`cargo` \\[_options_\\] `--list`  \n"
"`cargo` \\[_options_\\] `--help`  \n"
"`cargo` \\[_options_\\] `--explain` _code_"
msgstr ""

#: src/commands/cargo.md:15 src/commands/cargo-help.md:11
#: src/commands/cargo-version.md:11 src/commands/cargo-bench.md:10
#: src/commands/cargo-build.md:10 src/commands/cargo-check.md:10
#: src/commands/cargo-clean.md:10 src/commands/cargo-clippy.md:7
#: src/commands/cargo-doc.md:10 src/commands/cargo-fetch.md:10
#: src/commands/cargo-fix.md:10 src/commands/cargo-fmt.md:7
#: src/commands/cargo-miri.md:7 src/commands/cargo-report.md:11
#: src/commands/cargo-run.md:10 src/commands/cargo-rustc.md:10
#: src/commands/cargo-rustdoc.md:10 src/commands/cargo-test.md:10
#: src/commands/cargo-add.md:13 src/commands/cargo-generate-lockfile.md:11
#: src/commands/cargo-info.md:11 src/commands/cargo-locate-project.md:11
#: src/commands/cargo-metadata.md:11 src/commands/cargo-pkgid.md:11
#: src/commands/cargo-remove.md:10 src/commands/cargo-tree.md:10
#: src/commands/cargo-update.md:11 src/commands/cargo-vendor.md:11
#: src/commands/cargo-init.md:11 src/commands/cargo-install.md:13
#: src/commands/cargo-new.md:11 src/commands/cargo-search.md:11
#: src/commands/cargo-uninstall.md:11 src/commands/cargo-login.md:11
#: src/commands/cargo-logout.md:11 src/commands/cargo-owner.md:13
#: src/commands/cargo-package.md:10 src/commands/cargo-publish.md:10
#: src/commands/cargo-yank.md:12
msgid "DESCRIPTION"
msgstr ""

#: src/commands/cargo.md:17
msgid ""
"This program is a package manager and build tool for the Rust language, "
"available at <https://rust-lang.org>."
msgstr ""

#: src/commands/cargo.md:20
msgid "COMMANDS"
msgstr ""

#: src/commands/cargo.md:24
msgid ""
"[cargo-bench(1)](cargo-bench.html)  \n"
"    Execute benchmarks of a package."
msgstr ""

#: src/commands/cargo.md:27
msgid ""
"[cargo-build(1)](cargo-build.html)  \n"
"    Compile a package."
msgstr ""

#: src/commands/cargo.md:30
msgid ""
"[cargo-check(1)](cargo-check.html)  \n"
"    Check a local package and all of its dependencies for errors."
msgstr ""

#: src/commands/cargo.md:33
msgid ""
"[cargo-clean(1)](cargo-clean.html)  \n"
"    Remove artifacts that Cargo has generated in the past."
msgstr ""

#: src/commands/cargo.md:36
msgid ""
"[cargo-doc(1)](cargo-doc.html)  \n"
"    Build a package's documentation."
msgstr ""

#: src/commands/cargo.md:39
msgid ""
"[cargo-fetch(1)](cargo-fetch.html)  \n"
"    Fetch dependencies of a package from the network."
msgstr ""

#: src/commands/cargo.md:42
msgid ""
"[cargo-fix(1)](cargo-fix.html)  \n"
"    Automatically fix lint warnings reported by rustc."
msgstr ""

#: src/commands/cargo.md:45
msgid ""
"[cargo-run(1)](cargo-run.html)  \n"
"    Run a binary or example of the local package."
msgstr ""

#: src/commands/cargo.md:48
msgid ""
"[cargo-rustc(1)](cargo-rustc.html)  \n"
"    Compile a package, and pass extra options to the compiler."
msgstr ""

#: src/commands/cargo.md:51
msgid ""
"[cargo-rustdoc(1)](cargo-rustdoc.html)  \n"
"    Build a package's documentation, using specified custom flags."
msgstr ""

#: src/commands/cargo.md:54
msgid ""
"[cargo-test(1)](cargo-test.html)  \n"
"    Execute unit and integration tests of a package."
msgstr ""

#: src/commands/cargo.md:59
msgid ""
"[cargo-add(1)](cargo-add.html)  \n"
"    Add dependencies to a `Cargo.toml` manifest file."
msgstr ""

#: src/commands/cargo.md:62
msgid ""
"[cargo-generate-lockfile(1)](cargo-generate-lockfile.html)  \n"
"    Generate `Cargo.lock` for a project."
msgstr ""

#: src/commands/cargo.md:65
msgid ""
"[cargo-info(1)](cargo-info.html)  \n"
"    Display information about a package in the registry. Default registry is "
"crates.io."
msgstr ""

#: src/commands/cargo.md:68
msgid ""
"[cargo-locate-project(1)](cargo-locate-project.html)  \n"
"    Print a JSON representation of a `Cargo.toml` file's location."
msgstr ""

#: src/commands/cargo.md:71
msgid ""
"[cargo-metadata(1)](cargo-metadata.html)  \n"
"    Output the resolved dependencies of a package in machine-readable format."
msgstr ""

#: src/commands/cargo.md:74
msgid ""
"[cargo-pkgid(1)](cargo-pkgid.html)  \n"
"    Print a fully qualified package specification."
msgstr ""

#: src/commands/cargo.md:77
msgid ""
"[cargo-remove(1)](cargo-remove.html)  \n"
"    Remove dependencies from a `Cargo.toml` manifest file."
msgstr ""

#: src/commands/cargo.md:80
msgid ""
"[cargo-tree(1)](cargo-tree.html)  \n"
"    Display a tree visualization of a dependency graph."
msgstr ""

#: src/commands/cargo.md:83
msgid ""
"[cargo-update(1)](cargo-update.html)  \n"
"    Update dependencies as recorded in the local lock file."
msgstr ""

#: src/commands/cargo.md:86
msgid ""
"[cargo-vendor(1)](cargo-vendor.html)  \n"
"    Vendor all dependencies locally."
msgstr ""

#: src/commands/cargo.md:91
msgid ""
"[cargo-init(1)](cargo-init.html)  \n"
"    Create a new Cargo package in an existing directory."
msgstr ""

#: src/commands/cargo.md:94
msgid ""
"[cargo-install(1)](cargo-install.html)  \n"
"    Build and install a Rust binary."
msgstr ""

#: src/commands/cargo.md:97
msgid ""
"[cargo-new(1)](cargo-new.html)  \n"
"    Create a new Cargo package."
msgstr ""

#: src/commands/cargo.md:100
msgid ""
"[cargo-search(1)](cargo-search.html)  \n"
"    Search packages in crates.io."
msgstr ""

#: src/commands/cargo.md:103
msgid ""
"[cargo-uninstall(1)](cargo-uninstall.html)  \n"
"    Remove a Rust binary."
msgstr ""

#: src/commands/cargo.md:108
msgid ""
"[cargo-login(1)](cargo-login.html)  \n"
"    Save an API token from the registry locally."
msgstr ""

#: src/commands/cargo.md:111
msgid ""
"[cargo-logout(1)](cargo-logout.html)  \n"
"    Remove an API token from the registry locally."
msgstr ""

#: src/commands/cargo.md:114
msgid ""
"[cargo-owner(1)](cargo-owner.html)  \n"
"    Manage the owners of a crate on the registry."
msgstr ""

#: src/commands/cargo.md:117
msgid ""
"[cargo-package(1)](cargo-package.html)  \n"
"    Assemble the local package into a distributable tarball."
msgstr ""

#: src/commands/cargo.md:120
msgid ""
"[cargo-publish(1)](cargo-publish.html)  \n"
"    Upload a package to the registry."
msgstr ""

#: src/commands/cargo.md:123
msgid ""
"[cargo-yank(1)](cargo-yank.html)  \n"
"    Remove a pushed crate from the index."
msgstr ""

#: src/commands/cargo.md:128
msgid ""
"[cargo-help(1)](cargo-help.html)  \n"
"    Display help information about Cargo."
msgstr ""

#: src/commands/cargo.md:131
msgid ""
"[cargo-version(1)](cargo-version.html)  \n"
"    Show version information."
msgstr ""

#: src/commands/cargo.md:134 src/commands/cargo-version.md:15
#: src/commands/cargo-bench.md:63 src/commands/cargo-build.md:14
#: src/commands/cargo-check.md:19 src/commands/cargo-clean.md:17
#: src/commands/cargo-doc.md:15 src/commands/cargo-fetch.md:26
#: src/commands/cargo-fix.md:64 src/commands/cargo-report.md:15
#: src/commands/cargo-run.md:22 src/commands/cargo-rustc.md:31
#: src/commands/cargo-rustdoc.md:31 src/commands/cargo-test.md:71
#: src/commands/cargo-add.md:36 src/commands/cargo-generate-lockfile.md:20
#: src/commands/cargo-info.md:16 src/commands/cargo-locate-project.md:22
#: src/commands/cargo-metadata.md:344 src/commands/cargo-pkgid.md:40
#: src/commands/cargo-remove.md:14 src/commands/cargo-tree.md:70
#: src/commands/cargo-update.md:17 src/commands/cargo-vendor.md:30
#: src/commands/cargo-init.md:26 src/commands/cargo-install.md:87
#: src/commands/cargo-new.md:21 src/commands/cargo-search.md:17
#: src/commands/cargo-uninstall.md:28 src/commands/cargo-login.md:33
#: src/commands/cargo-logout.md:32 src/commands/cargo-owner.md:28
#: src/commands/cargo-package.md:73 src/commands/cargo-publish.md:33
#: src/commands/cargo-yank.md:78
msgid "OPTIONS"
msgstr ""

#: src/commands/cargo.md:136
msgid "Special Options"
msgstr ""

#: src/commands/cargo.md:158 src/commands/cargo-bench.md:305
#: src/commands/cargo-build.md:235 src/commands/cargo-check.md:226
#: src/commands/cargo-clean.md:74 src/commands/cargo-doc.md:201
#: src/commands/cargo-fetch.md:43 src/commands/cargo-fix.md:306
#: src/commands/cargo-run.md:143 src/commands/cargo-rustc.md:237
#: src/commands/cargo-rustdoc.md:221 src/commands/cargo-test.md:333
#: src/commands/cargo-add.md:147 src/commands/cargo-generate-lockfile.md:22
#: src/commands/cargo-info.md:40 src/commands/cargo-locate-project.md:33
#: src/commands/cargo-metadata.md:399 src/commands/cargo-pkgid.md:53
#: src/commands/cargo-remove.md:45 src/commands/cargo-tree.md:297
#: src/commands/cargo-update.md:80 src/commands/cargo-vendor.md:114
#: src/commands/cargo-init.md:69 src/commands/cargo-install.md:326
#: src/commands/cargo-new.md:64 src/commands/cargo-search.md:40
#: src/commands/cargo-uninstall.md:49 src/commands/cargo-login.md:46
#: src/commands/cargo-logout.md:45 src/commands/cargo-owner.md:73
#: src/commands/cargo-package.md:277 src/commands/cargo-publish.md:262
#: src/commands/cargo-yank.md:117
msgid "Display Options"
msgstr ""

#: src/commands/cargo.md:191 src/commands/cargo-bench.md:367
#: src/commands/cargo-build.md:298 src/commands/cargo-check.md:280
#: src/commands/cargo-clean.md:105 src/commands/cargo-doc.md:255
#: src/commands/cargo-fetch.md:74 src/commands/cargo-fix.md:360
#: src/commands/cargo-run.md:199 src/commands/cargo-rustc.md:293
#: src/commands/cargo-rustdoc.md:275 src/commands/cargo-test.md:395
#: src/commands/cargo-add.md:178 src/commands/cargo-generate-lockfile.md:53
#: src/commands/cargo-info.md:71 src/commands/cargo-locate-project.md:73
#: src/commands/cargo-metadata.md:430 src/commands/cargo-pkgid.md:84
#: src/commands/cargo-remove.md:76 src/commands/cargo-tree.md:218
#: src/commands/cargo-update.md:111 src/commands/cargo-vendor.md:62
#: src/commands/cargo-install.md:266 src/commands/cargo-package.md:202
#: src/commands/cargo-publish.md:187
msgid "Manifest Options"
msgstr ""

#: src/commands/cargo.md:224 src/commands/cargo-bench.md:421
#: src/commands/cargo-build.md:352 src/commands/cargo-check.md:334
#: src/commands/cargo-clean.md:155 src/commands/cargo-doc.md:309
#: src/commands/cargo-fetch.md:122 src/commands/cargo-fix.md:414
#: src/commands/cargo-run.md:255 src/commands/cargo-rustc.md:349
#: src/commands/cargo-rustdoc.md:329 src/commands/cargo-test.md:451
#: src/commands/cargo-add.md:237 src/commands/cargo-generate-lockfile.md:107
#: src/commands/cargo-info.md:104 src/commands/cargo-locate-project.md:82
#: src/commands/cargo-metadata.md:480 src/commands/cargo-pkgid.md:136
#: src/commands/cargo-remove.md:137 src/commands/cargo-tree.md:330
#: src/commands/cargo-update.md:167 src/commands/cargo-vendor.md:147
#: src/commands/cargo-init.md:100 src/commands/cargo-install.md:381
#: src/commands/cargo-new.md:95 src/commands/cargo-search.md:71
#: src/commands/cargo-uninstall.md:82 src/commands/cargo-login.md:77
#: src/commands/cargo-logout.md:76 src/commands/cargo-owner.md:104
#: src/commands/cargo-package.md:308 src/commands/cargo-publish.md:293
#: src/commands/cargo-yank.md:150
msgid "Common Options"
msgstr ""

#: src/commands/cargo.md:264 src/commands/cargo-bench.md:487
#: src/commands/cargo-build.md:420 src/commands/cargo-check.md:402
#: src/commands/cargo-clean.md:195 src/commands/cargo-doc.md:372
#: src/commands/cargo-fetch.md:162 src/commands/cargo-fix.md:477
#: src/commands/cargo-run.md:318 src/commands/cargo-rustc.md:417
#: src/commands/cargo-rustdoc.md:401 src/commands/cargo-test.md:526
#: src/commands/cargo-add.md:277 src/commands/cargo-generate-lockfile.md:147
#: src/commands/cargo-info.md:144 src/commands/cargo-locate-project.md:122
#: src/commands/cargo-metadata.md:520 src/commands/cargo-pkgid.md:176
#: src/commands/cargo-remove.md:177 src/commands/cargo-tree.md:370
#: src/commands/cargo-update.md:207 src/commands/cargo-vendor.md:187
#: src/commands/cargo-init.md:140 src/commands/cargo-install.md:421
#: src/commands/cargo-new.md:135 src/commands/cargo-search.md:111
#: src/commands/cargo-uninstall.md:122 src/commands/cargo-login.md:117
#: src/commands/cargo-logout.md:116 src/commands/cargo-owner.md:144
#: src/commands/cargo-package.md:348 src/commands/cargo-publish.md:333
#: src/commands/cargo-yank.md:190
msgid "ENVIRONMENT"
msgstr ""

#: src/commands/cargo.md:266 src/commands/cargo-bench.md:489
#: src/commands/cargo-build.md:422 src/commands/cargo-check.md:404
#: src/commands/cargo-clean.md:197 src/commands/cargo-doc.md:374
#: src/commands/cargo-fetch.md:164 src/commands/cargo-fix.md:479
#: src/commands/cargo-run.md:320 src/commands/cargo-rustc.md:419
#: src/commands/cargo-rustdoc.md:403 src/commands/cargo-test.md:528
#: src/commands/cargo-add.md:279 src/commands/cargo-generate-lockfile.md:149
#: src/commands/cargo-info.md:146 src/commands/cargo-locate-project.md:124
#: src/commands/cargo-metadata.md:522 src/commands/cargo-pkgid.md:178
#: src/commands/cargo-remove.md:179 src/commands/cargo-tree.md:372
#: src/commands/cargo-update.md:209 src/commands/cargo-vendor.md:189
#: src/commands/cargo-init.md:142 src/commands/cargo-install.md:423
#: src/commands/cargo-new.md:137 src/commands/cargo-search.md:113
#: src/commands/cargo-uninstall.md:124 src/commands/cargo-login.md:119
#: src/commands/cargo-logout.md:118 src/commands/cargo-owner.md:146
#: src/commands/cargo-package.md:350 src/commands/cargo-publish.md:335
#: src/commands/cargo-yank.md:192
msgid ""
"See [the reference](../reference/environment-variables.html) for details on "
"environment variables that Cargo reads."
msgstr ""

#: src/commands/cargo.md:269 src/commands/cargo-bench.md:492
#: src/commands/cargo-build.md:425 src/commands/cargo-check.md:407
#: src/commands/cargo-clean.md:200 src/commands/cargo-doc.md:377
#: src/commands/cargo-fetch.md:167 src/commands/cargo-fix.md:482
#: src/commands/cargo-run.md:323 src/commands/cargo-rustc.md:422
#: src/commands/cargo-rustdoc.md:406 src/commands/cargo-test.md:531
#: src/commands/cargo-add.md:282 src/commands/cargo-generate-lockfile.md:152
#: src/commands/cargo-info.md:149 src/commands/cargo-locate-project.md:127
#: src/commands/cargo-metadata.md:525 src/commands/cargo-pkgid.md:181
#: src/commands/cargo-remove.md:182 src/commands/cargo-tree.md:375
#: src/commands/cargo-update.md:212 src/commands/cargo-vendor.md:192
#: src/commands/cargo-init.md:145 src/commands/cargo-install.md:426
#: src/commands/cargo-new.md:140 src/commands/cargo-search.md:116
#: src/commands/cargo-uninstall.md:127 src/commands/cargo-login.md:122
#: src/commands/cargo-logout.md:121 src/commands/cargo-owner.md:149
#: src/commands/cargo-package.md:353 src/commands/cargo-publish.md:338
#: src/commands/cargo-yank.md:195
msgid "EXIT STATUS"
msgstr ""

#: src/commands/cargo.md:271 src/commands/cargo-bench.md:494
#: src/commands/cargo-build.md:427 src/commands/cargo-check.md:409
#: src/commands/cargo-clean.md:202 src/commands/cargo-doc.md:379
#: src/commands/cargo-fetch.md:169 src/commands/cargo-fix.md:484
#: src/commands/cargo-run.md:325 src/commands/cargo-rustc.md:424
#: src/commands/cargo-rustdoc.md:408 src/commands/cargo-test.md:533
#: src/commands/cargo-add.md:284 src/commands/cargo-generate-lockfile.md:154
#: src/commands/cargo-info.md:151 src/commands/cargo-locate-project.md:129
#: src/commands/cargo-metadata.md:527 src/commands/cargo-pkgid.md:183
#: src/commands/cargo-remove.md:184 src/commands/cargo-tree.md:377
#: src/commands/cargo-update.md:214 src/commands/cargo-vendor.md:194
#: src/commands/cargo-init.md:147 src/commands/cargo-install.md:428
#: src/commands/cargo-new.md:142 src/commands/cargo-search.md:118
#: src/commands/cargo-uninstall.md:129 src/commands/cargo-login.md:124
#: src/commands/cargo-logout.md:123 src/commands/cargo-owner.md:151
#: src/commands/cargo-package.md:355 src/commands/cargo-publish.md:340
#: src/commands/cargo-yank.md:197
msgid "`0`: Cargo succeeded."
msgstr ""

#: src/commands/cargo.md:272 src/commands/cargo-bench.md:495
#: src/commands/cargo-build.md:428 src/commands/cargo-check.md:410
#: src/commands/cargo-clean.md:203 src/commands/cargo-doc.md:380
#: src/commands/cargo-fetch.md:170 src/commands/cargo-fix.md:485
#: src/commands/cargo-run.md:326 src/commands/cargo-rustc.md:425
#: src/commands/cargo-rustdoc.md:409 src/commands/cargo-test.md:534
#: src/commands/cargo-add.md:285 src/commands/cargo-generate-lockfile.md:155
#: src/commands/cargo-info.md:152 src/commands/cargo-locate-project.md:130
#: src/commands/cargo-metadata.md:528 src/commands/cargo-pkgid.md:184
#: src/commands/cargo-remove.md:185 src/commands/cargo-tree.md:378
#: src/commands/cargo-update.md:215 src/commands/cargo-vendor.md:195
#: src/commands/cargo-init.md:148 src/commands/cargo-install.md:429
#: src/commands/cargo-new.md:143 src/commands/cargo-search.md:119
#: src/commands/cargo-uninstall.md:130 src/commands/cargo-login.md:125
#: src/commands/cargo-logout.md:124 src/commands/cargo-owner.md:152
#: src/commands/cargo-package.md:356 src/commands/cargo-publish.md:341
#: src/commands/cargo-yank.md:198
msgid "`101`: Cargo failed to complete."
msgstr ""

#: src/commands/cargo.md:274
msgid "FILES"
msgstr ""

#: src/commands/cargo.md:276
msgid ""
"`~/.cargo/`  \n"
"    Default location for Cargo's \"home\" directory where it stores various "
"files. The location can be changed with the `CARGO_HOME` environment "
"variable."
msgstr ""

#: src/commands/cargo.md:281
msgid ""
"`$CARGO_HOME/bin/`  \n"
"    Binaries installed by [cargo-install(1)](cargo-install.html) will be "
"located here. If using [rustup](https://rust-lang.github.io/rustup/), "
"executables distributed with Rust are also located here."
msgstr ""

#: src/commands/cargo.md:285
msgid ""
"`$CARGO_HOME/config.toml`  \n"
"    The global configuration file. See [the reference](../reference/"
"config.html) for more information about configuration files."
msgstr ""

#: src/commands/cargo.md:289
msgid ""
"`.cargo/config.toml`  \n"
"    Cargo automatically searches for a file named `.cargo/config.toml` in "
"the current directory, and all parent directories. These configuration files "
"will be merged with the global configuration file."
msgstr ""

#: src/commands/cargo.md:294
msgid ""
"`$CARGO_HOME/credentials.toml`  \n"
"    Private authentication information for logging in to a registry."
msgstr ""

#: src/commands/cargo.md:297
msgid ""
"`$CARGO_HOME/registry/`  \n"
"    This directory contains cached downloads of the registry index and any "
"downloaded dependencies."
msgstr ""

#: src/commands/cargo.md:301
msgid ""
"`$CARGO_HOME/git/`  \n"
"    This directory contains cached downloads of git dependencies."
msgstr ""

#: src/commands/cargo.md:304
msgid ""
"Please note that the internal structure of the `$CARGO_HOME` directory is "
"not stable yet and may be subject to change."
msgstr ""

#: src/commands/cargo.md:309 src/commands/cargo-help.md:15
#: src/commands/cargo-version.md:26 src/commands/cargo-bench.md:497
#: src/commands/cargo-build.md:430 src/commands/cargo-check.md:412
#: src/commands/cargo-clean.md:205 src/commands/cargo-doc.md:382
#: src/commands/cargo-fetch.md:172 src/commands/cargo-fix.md:487
#: src/commands/cargo-report.md:30 src/commands/cargo-run.md:328
#: src/commands/cargo-rustc.md:427 src/commands/cargo-rustdoc.md:411
#: src/commands/cargo-test.md:536 src/commands/cargo-add.md:287
#: src/commands/cargo-generate-lockfile.md:157 src/commands/cargo-info.md:154
#: src/commands/cargo-locate-project.md:132 src/commands/cargo-metadata.md:530
#: src/commands/cargo-pkgid.md:186 src/commands/cargo-remove.md:187
#: src/commands/cargo-tree.md:380 src/commands/cargo-update.md:217
#: src/commands/cargo-vendor.md:197 src/commands/cargo-init.md:150
#: src/commands/cargo-install.md:431 src/commands/cargo-new.md:145
#: src/commands/cargo-search.md:121 src/commands/cargo-uninstall.md:132
#: src/commands/cargo-login.md:127 src/commands/cargo-logout.md:126
#: src/commands/cargo-owner.md:154 src/commands/cargo-package.md:358
#: src/commands/cargo-publish.md:343 src/commands/cargo-yank.md:200
msgid "EXAMPLES"
msgstr ""

#: src/commands/cargo.md:311
msgid "Build a local package and all of its dependencies:"
msgstr ""

#: src/commands/cargo.md:315
msgid "Build a package with optimizations:"
msgstr ""

#: src/commands/cargo.md:319
msgid "Run tests for a cross-compiled target:"
msgstr ""

#: src/commands/cargo.md:323
msgid "Create a new package that builds an executable:"
msgstr ""

#: src/commands/cargo.md:327
msgid "Create a package in the current directory:"
msgstr ""

#: src/commands/cargo.md:332
msgid "Learn about a command's options and usage:"
msgstr ""

#: src/commands/cargo.md:336
msgid "BUGS"
msgstr ""

#: src/commands/cargo.md:338
msgid "See <https://github.com/rust-lang/cargo/issues> for issues."
msgstr ""

#: src/commands/cargo.md:340 src/commands/cargo-help.md:25
#: src/commands/cargo-version.md:41 src/commands/cargo-bench.md:507
#: src/commands/cargo-build.md:440 src/commands/cargo-check.md:422
#: src/commands/cargo-clean.md:215 src/commands/cargo-clippy.md:15
#: src/commands/cargo-doc.md:389 src/commands/cargo-fetch.md:178
#: src/commands/cargo-fix.md:501 src/commands/cargo-fmt.md:15
#: src/commands/cargo-miri.md:17 src/commands/cargo-report.md:40
#: src/commands/cargo-run.md:338 src/commands/cargo-rustc.md:442
#: src/commands/cargo-rustdoc.md:417 src/commands/cargo-test.md:550
#: src/commands/cargo-add.md:309 src/commands/cargo-generate-lockfile.md:163
#: src/commands/cargo-info.md:166 src/commands/cargo-locate-project.md:138
#: src/commands/cargo-metadata.md:536 src/commands/cargo-pkgid.md:204
#: src/commands/cargo-remove.md:201 src/commands/cargo-tree.md:441
#: src/commands/cargo-update.md:231 src/commands/cargo-vendor.md:215
#: src/commands/cargo-init.md:156 src/commands/cargo-install.md:445
#: src/commands/cargo-new.md:151 src/commands/cargo-search.md:127
#: src/commands/cargo-uninstall.md:138 src/commands/cargo-login.md:137
#: src/commands/cargo-logout.md:136 src/commands/cargo-owner.md:168
#: src/commands/cargo-package.md:364 src/commands/cargo-publish.md:349
#: src/commands/cargo-yank.md:206
msgid "SEE ALSO"
msgstr ""

#: src/commands/cargo.md:342
msgid ""
"[rustc(1)](https://doc.rust-lang.org/rustc/index.html), [rustdoc(1)](https://"
"doc.rust-lang.org/rustdoc/index.html)"
msgstr ""

#: src/commands/cargo-help.md:1
msgid "cargo-help(1)"
msgstr ""

#: src/commands/cargo-help.md:5
msgid "cargo-help --- Get help for a Cargo command"
msgstr ""

#: src/commands/cargo-help.md:9
msgid "`cargo help` \\[_subcommand_\\]"
msgstr ""

#: src/commands/cargo-help.md:13
msgid "Prints a help message for the given command."
msgstr ""

#: src/commands/cargo-help.md:17
msgid "Get help for a command:"
msgstr ""

#: src/commands/cargo-help.md:21
msgid "Help is also available with the `--help` flag:"
msgstr ""

#: src/commands/cargo-help.md:26 src/commands/cargo-version.md:42
#: src/commands/cargo-report.md:43 src/commands/cargo-vendor.md:216
msgid "[cargo(1)](cargo.html)"
msgstr ""

#: src/commands/cargo-version.md:1
msgid "cargo-version(1)"
msgstr ""

#: src/commands/cargo-version.md:5
msgid "cargo-version --- Show version information"
msgstr ""

#: src/commands/cargo-version.md:9
msgid "`cargo version` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-version.md:13
msgid "Displays the version of Cargo."
msgstr ""

#: src/commands/cargo-version.md:28
msgid "Display the version:"
msgstr ""

#: src/commands/cargo-version.md:32
msgid "The version is also available via flags:"
msgstr ""

#: src/commands/cargo-version.md:37
msgid "Display extra version information:"
msgstr ""

#: src/commands/build-commands.md:2
msgid "[cargo bench](cargo-bench.md)"
msgstr ""

#: src/commands/build-commands.md:3
msgid "[cargo build](cargo-build.md)"
msgstr ""

#: src/commands/build-commands.md:4
msgid "[cargo check](cargo-check.md)"
msgstr ""

#: src/commands/build-commands.md:5
msgid "[cargo clean](cargo-clean.md)"
msgstr ""

#: src/commands/build-commands.md:6
msgid "[cargo clippy](cargo-clippy.md)"
msgstr ""

#: src/commands/build-commands.md:7
msgid "[cargo doc](cargo-doc.md)"
msgstr ""

#: src/commands/build-commands.md:8
msgid "[cargo fetch](cargo-fetch.md)"
msgstr ""

#: src/commands/build-commands.md:9
msgid "[cargo fix](cargo-fix.md)"
msgstr ""

#: src/commands/build-commands.md:10
msgid "[cargo fmt](cargo-fmt.md)"
msgstr ""

#: src/commands/build-commands.md:11
msgid "[cargo miri](cargo-miri.md)"
msgstr ""

#: src/commands/build-commands.md:12
msgid "[cargo report](cargo-report.md)"
msgstr ""

#: src/commands/build-commands.md:13
msgid "[cargo run](cargo-run.md)"
msgstr ""

#: src/commands/build-commands.md:14
msgid "[cargo rustc](cargo-rustc.md)"
msgstr ""

#: src/commands/build-commands.md:15
msgid "[cargo rustdoc](cargo-rustdoc.md)"
msgstr ""

#: src/commands/build-commands.md:16
msgid "[cargo test](cargo-test.md)"
msgstr ""

#: src/commands/cargo-bench.md:1
msgid "cargo-bench(1)"
msgstr ""

#: src/commands/cargo-bench.md:4
msgid "cargo-bench --- Execute benchmarks of a package"
msgstr ""

#: src/commands/cargo-bench.md:8
msgid ""
"`cargo bench` \\[_options_\\] \\[_benchname_\\] \\[`--` _bench-options_\\]"
msgstr ""

#: src/commands/cargo-bench.md:12
msgid "Compile and execute benchmarks."
msgstr ""

#: src/commands/cargo-bench.md:14
msgid ""
"The benchmark filtering argument _benchname_ and all the arguments following "
"the two dashes (`--`) are passed to the benchmark binaries and thus to "
"_libtest_ (rustc's built in unit-test and micro-benchmarking framework). If "
"you are passing arguments to both Cargo and the binary, the ones after `--` "
"go to the binary, the ones before go to Cargo. For details about libtest's "
"arguments see the output of `cargo bench -- --help` and check out the rustc "
"book's chapter on how tests work at <https://doc.rust-lang.org/rustc/tests/"
"index.html>."
msgstr ""

#: src/commands/cargo-bench.md:23
msgid ""
"As an example, this will run only the benchmark named `foo` (and skip other "
"similarly named benchmarks like `foobar`):"
msgstr ""

#: src/commands/cargo-bench.md:28
msgid ""
"Benchmarks are built with the `--test` option to `rustc` which creates a "
"special executable by linking your code with libtest. The executable "
"automatically runs all functions annotated with the `#[bench]` attribute. "
"Cargo passes the `--bench` flag to the test harness to tell it to run only "
"benchmarks, regardless of whether the harness is libtest or a custom harness."
msgstr ""

#: src/commands/cargo-bench.md:34
msgid ""
"The libtest harness may be disabled by setting `harness = false` in the "
"target manifest settings, in which case your code will need to provide its "
"own `main` function to handle running benchmarks."
msgstr ""

#: src/commands/cargo-bench.md:38
msgid ""
"**Note**: The [`#[bench]` attribute](https://doc.rust-lang.org/nightly/"
"unstable-book/library-features/test.html) is currently unstable and only "
"available on the [nightly channel](https://doc.rust-lang.org/book/"
"appendix-07-nightly-rust.html). There are some packages available on "
"[crates.io](https://crates.io/keywords/benchmark) that may help with running "
"benchmarks on the stable channel, such as [Criterion](https://crates.io/"
"crates/criterion)."
msgstr ""

#: src/commands/cargo-bench.md:47
msgid ""
"By default, `cargo bench` uses the [`bench` profile](../reference/"
"profiles.html#bench), which enables optimizations and disables debugging "
"information. If you need to debug a benchmark, you can use the `--"
"profile=dev` command-line option to switch to the dev profile. You can then "
"run the debug-enabled benchmark within a debugger."
msgstr ""

#: src/commands/cargo-bench.md:55
msgid "Working directory of benchmarks"
msgstr ""

#: src/commands/cargo-bench.md:57
msgid ""
"The working directory of every benchmark is set to the root directory of the "
"package the benchmark belongs to. Setting the working directory of "
"benchmarks to the package's root directory makes it possible for benchmarks "
"to reliably access the package's files using relative paths, regardless from "
"where `cargo bench` was executed from."
msgstr ""

#: src/commands/cargo-bench.md:65
msgid "Benchmark Options"
msgstr ""

#: src/commands/cargo-bench.md:82 src/commands/cargo-build.md:16
#: src/commands/cargo-check.md:21 src/commands/cargo-clean.md:19
#: src/commands/cargo-doc.md:38 src/commands/cargo-fix.md:101
#: src/commands/cargo-run.md:24 src/commands/cargo-rustc.md:33
#: src/commands/cargo-rustdoc.md:46 src/commands/cargo-test.md:90
#: src/commands/cargo-pkgid.md:42 src/commands/cargo-remove.md:126
#: src/commands/cargo-tree.md:179 src/commands/cargo-package.md:111
#: src/commands/cargo-publish.md:78
msgid "Package Selection"
msgstr ""

#: src/commands/cargo-bench.md:84 src/commands/cargo-build.md:18
#: src/commands/cargo-check.md:23 src/commands/cargo-doc.md:40
#: src/commands/cargo-fix.md:103 src/commands/cargo-test.md:92
#: src/commands/cargo-tree.md:181 src/commands/cargo-package.md:113
#: src/commands/cargo-publish.md:80
msgid ""
"By default, when no package selection options are given, the packages "
"selected depend on the selected manifest file (based on the current working "
"directory if `--manifest-path` is not given). If the manifest is the root of "
"a workspace then the workspaces default members are selected, otherwise only "
"the package defined by the manifest will be selected."
msgstr ""

#: src/commands/cargo-bench.md:90 src/commands/cargo-build.md:24
#: src/commands/cargo-check.md:29 src/commands/cargo-doc.md:46
#: src/commands/cargo-fix.md:109 src/commands/cargo-test.md:98
#: src/commands/cargo-tree.md:187 src/commands/cargo-package.md:119
#: src/commands/cargo-publish.md:86
msgid ""
"The default members of a workspace can be set explicitly with the "
"`workspace.default-members` key in the root manifest. If this is not set, a "
"virtual workspace will include all workspace members (equivalent to passing "
"`--workspace`), and a non-virtual workspace will include only the root crate "
"itself."
msgstr ""

#: src/commands/cargo-bench.md:124 src/commands/cargo-build.md:58
#: src/commands/cargo-check.md:63 src/commands/cargo-doc.md:80
#: src/commands/cargo-fix.md:143 src/commands/cargo-run.md:39
#: src/commands/cargo-rustc.md:48 src/commands/cargo-rustdoc.md:61
#: src/commands/cargo-test.md:132
msgid "Target Selection"
msgstr ""

#: src/commands/cargo-bench.md:126
msgid ""
"When no target selection options are given, `cargo bench` will build the "
"following targets of the selected packages:"
msgstr ""

#: src/commands/cargo-bench.md:129
msgid "lib --- used to link with binaries and benchmarks"
msgstr ""

#: src/commands/cargo-bench.md:130
msgid ""
"bins (only if benchmark targets are built and required features are "
"available)"
msgstr ""

#: src/commands/cargo-bench.md:132
msgid "lib as a benchmark"
msgstr ""

#: src/commands/cargo-bench.md:133
msgid "bins as benchmarks"
msgstr ""

#: src/commands/cargo-bench.md:134
msgid "benchmark targets"
msgstr ""

#: src/commands/cargo-bench.md:136
msgid ""
"The default behavior can be changed by setting the `bench` flag for the "
"target in the manifest settings. Setting examples to `bench = true` will "
"build and run the example as a benchmark, replacing the example's `main` "
"function with the libtest harness."
msgstr ""

#: src/commands/cargo-bench.md:141
msgid ""
"Setting targets to `bench = false` will stop them from being benchmarked by "
"default. Target selection options that take a target by name (such as `--"
"example foo`) ignore the `bench` flag and will always benchmark the given "
"target."
msgstr ""

#: src/commands/cargo-bench.md:146 src/commands/cargo-test.md:159
msgid ""
"See [Configuring a target](../reference/cargo-targets.html#configuring-a-"
"target) for more information on per-target settings."
msgstr ""

#: src/commands/cargo-bench.md:149
msgid ""
"Binary targets are automatically built if there is an integration test or "
"benchmark being selected to benchmark. This allows an integration test to "
"execute the binary to exercise and test its behavior. The "
"`CARGO_BIN_EXE_<name>` [environment variable](../reference/environment-"
"variables.html#environment-variables-cargo-sets-for-crates) is set when the "
"integration test is built so that it can use the [`env` macro](https://"
"doc.rust-lang.org/std/macro.env.html) to locate the executable."
msgstr ""

#: src/commands/cargo-bench.md:158
msgid ""
"Passing target selection flags will benchmark only the specified targets."
msgstr ""

#: src/commands/cargo-bench.md:161 src/commands/cargo-build.md:76
#: src/commands/cargo-check.md:72 src/commands/cargo-fix.md:152
#: src/commands/cargo-rustc.md:65 src/commands/cargo-rustdoc.md:71
#: src/commands/cargo-test.md:174
msgid ""
"Note that `--bin`, `--example`, `--test` and `--bench` flags also support "
"common Unix glob patterns like `*`, `?` and `[]`. However, to avoid your "
"shell accidentally expanding glob patterns before Cargo handles them, you "
"must use single quotes or double quotes around each glob pattern."
msgstr ""

#: src/commands/cargo-bench.md:226 src/commands/cargo-build.md:141
#: src/commands/cargo-check.md:137 src/commands/cargo-doc.md:116
#: src/commands/cargo-fix.md:217 src/commands/cargo-run.md:58
#: src/commands/cargo-rustc.md:130 src/commands/cargo-rustdoc.md:136
#: src/commands/cargo-test.md:248 src/commands/cargo-metadata.md:371
#: src/commands/cargo-tree.md:269 src/commands/cargo-install.md:182
#: src/commands/cargo-package.md:174 src/commands/cargo-publish.md:159
msgid "Feature Selection"
msgstr ""

#: src/commands/cargo-bench.md:228 src/commands/cargo-build.md:143
#: src/commands/cargo-check.md:139 src/commands/cargo-doc.md:118
#: src/commands/cargo-fix.md:219 src/commands/cargo-run.md:60
#: src/commands/cargo-rustc.md:132 src/commands/cargo-rustdoc.md:138
#: src/commands/cargo-test.md:250 src/commands/cargo-metadata.md:373
#: src/commands/cargo-tree.md:271 src/commands/cargo-install.md:184
#: src/commands/cargo-package.md:176 src/commands/cargo-publish.md:161
msgid ""
"The feature flags allow you to control which features are enabled. When no "
"feature options are given, the `default` feature is activated for every "
"selected package."
msgstr ""

#: src/commands/cargo-bench.md:232 src/commands/cargo-build.md:147
#: src/commands/cargo-check.md:143 src/commands/cargo-doc.md:122
#: src/commands/cargo-fix.md:223 src/commands/cargo-run.md:64
#: src/commands/cargo-rustc.md:136 src/commands/cargo-rustdoc.md:142
#: src/commands/cargo-test.md:254 src/commands/cargo-metadata.md:377
#: src/commands/cargo-tree.md:275 src/commands/cargo-install.md:188
#: src/commands/cargo-package.md:180 src/commands/cargo-publish.md:165
msgid ""
"See [the features documentation](../reference/features.html#command-line-"
"feature-options) for more details."
msgstr ""

#: src/commands/cargo-bench.md:254 src/commands/cargo-build.md:169
#: src/commands/cargo-check.md:165 src/commands/cargo-doc.md:144
#: src/commands/cargo-fix.md:245 src/commands/cargo-run.md:86
#: src/commands/cargo-rustc.md:158 src/commands/cargo-rustdoc.md:164
#: src/commands/cargo-test.md:276 src/commands/cargo-install.md:210
#: src/commands/cargo-package.md:150 src/commands/cargo-publish.md:135
msgid "Compilation Options"
msgstr ""

#: src/commands/cargo-bench.md:294 src/commands/cargo-build.md:215
#: src/commands/cargo-check.md:215 src/commands/cargo-doc.md:190
#: src/commands/cargo-fix.md:295 src/commands/cargo-run.md:132
#: src/commands/cargo-rustc.md:226 src/commands/cargo-rustdoc.md:210
#: src/commands/cargo-test.md:322 src/commands/cargo-metadata.md:346
msgid "Output Options"
msgstr ""

#: src/commands/cargo-bench.md:307
msgid ""
"By default the Rust test harness hides output from benchmark execution to "
"keep results readable. Benchmark output can be recovered (e.g., for "
"debugging) by passing `--nocapture` to the benchmark binaries:"
msgstr ""

#: src/commands/cargo-bench.md:461 src/commands/cargo-build.md:392
#: src/commands/cargo-check.md:374 src/commands/cargo-doc.md:349
#: src/commands/cargo-fix.md:454 src/commands/cargo-run.md:295
#: src/commands/cargo-rustc.md:389 src/commands/cargo-rustdoc.md:369
#: src/commands/cargo-test.md:491 src/commands/cargo-remove.md:35
#: src/commands/cargo-install.md:303 src/commands/cargo-package.md:254
#: src/commands/cargo-publish.md:239
msgid "Miscellaneous Options"
msgstr ""

#: src/commands/cargo-bench.md:463
msgid ""
"The `--jobs` argument affects the building of the benchmark executable but "
"does not affect how many threads are used when running the benchmarks. The "
"Rust test harness runs benchmarks serially in a single thread."
msgstr ""

#: src/commands/cargo-bench.md:479
msgid ""
"While `cargo bench` involves compilation, it does not provide a `--keep-"
"going` flag. Use `--no-fail-fast` to run as many benchmarks as possible "
"without stopping at the first failure. To \"compile\" as many benchmarks as "
"possible, use `--benches` to build benchmark binaries separately. For "
"example:"
msgstr ""

#: src/commands/cargo-bench.md:499
msgid "Build and execute all the benchmarks of the current package:"
msgstr ""

#: src/commands/cargo-bench.md:503
msgid "Run only a specific benchmark within a specific benchmark target:"
msgstr ""

#: src/commands/cargo-bench.md:508
msgid "[cargo(1)](cargo.html), [cargo-test(1)](cargo-test.html)"
msgstr ""

#: src/commands/cargo-build.md:1
msgid "cargo-build(1)"
msgstr ""

#: src/commands/cargo-build.md:4
msgid "cargo-build --- Compile the current package"
msgstr ""

#: src/commands/cargo-build.md:8
msgid "`cargo build` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-build.md:12
msgid "Compile local packages and all of their dependencies."
msgstr ""

#: src/commands/cargo-build.md:60
msgid ""
"When no target selection options are given, `cargo build` will build all "
"binary and library targets of the selected packages. Binaries are skipped if "
"they have `required-features` that are missing."
msgstr ""

#: src/commands/cargo-build.md:64 src/commands/cargo-rustc.md:53
msgid ""
"Binary targets are automatically built if there is an integration test or "
"benchmark being selected to build. This allows an integration test to "
"execute the binary to exercise and test its behavior. The "
"`CARGO_BIN_EXE_<name>` [environment variable](../reference/environment-"
"variables.html#environment-variables-cargo-sets-for-crates) is set when the "
"integration test is built so that it can use the [`env` macro](https://"
"doc.rust-lang.org/std/macro.env.html) to locate the executable."
msgstr ""

#: src/commands/cargo-build.md:73 src/commands/cargo-rustc.md:62
msgid "Passing target selection flags will build only the specified targets."
msgstr ""

#: src/commands/cargo-build.md:432
msgid "Build the local package and all of its dependencies:"
msgstr ""

#: src/commands/cargo-build.md:436
msgid "Build with optimizations:"
msgstr ""

#: src/commands/cargo-build.md:441
msgid "[cargo(1)](cargo.html), [cargo-rustc(1)](cargo-rustc.html)"
msgstr ""

#: src/commands/cargo-check.md:1
msgid "cargo-check(1)"
msgstr ""

#: src/commands/cargo-check.md:4
msgid "cargo-check --- Check the current package"
msgstr ""

#: src/commands/cargo-check.md:8
msgid "`cargo check` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-check.md:12
msgid ""
"Check a local package and all of its dependencies for errors. This will "
"essentially compile the packages without performing the final step of code "
"generation, which is faster than running `cargo build`. The compiler will "
"save metadata files to disk so that future runs will reuse them if the "
"source has not been modified. Some diagnostics and errors are only emitted "
"during code generation, so they inherently won't be reported with `cargo "
"check`."
msgstr ""

#: src/commands/cargo-check.md:65
msgid ""
"When no target selection options are given, `cargo check` will check all "
"binary and library targets of the selected packages. Binaries are skipped if "
"they have `required-features` that are missing."
msgstr ""

#: src/commands/cargo-check.md:69
msgid "Passing target selection flags will check only the specified targets."
msgstr ""

#: src/commands/cargo-check.md:414
msgid "Check the local package for errors:"
msgstr ""

#: src/commands/cargo-check.md:418
msgid "Check all targets, including unit tests:"
msgstr ""

#: src/commands/cargo-check.md:423 src/commands/cargo-clean.md:216
#: src/commands/cargo-run.md:339
msgid "[cargo(1)](cargo.html), [cargo-build(1)](cargo-build.html)"
msgstr ""

#: src/commands/cargo-clean.md:1
msgid "cargo-clean(1)"
msgstr ""

#: src/commands/cargo-clean.md:4
msgid "cargo-clean --- Remove generated artifacts"
msgstr ""

#: src/commands/cargo-clean.md:8
msgid "`cargo clean` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-clean.md:12
msgid ""
"Remove artifacts from the target directory that Cargo has generated in the "
"past."
msgstr ""

#: src/commands/cargo-clean.md:15
msgid "With no options, `cargo clean` will delete the entire target directory."
msgstr ""

#: src/commands/cargo-clean.md:21
msgid ""
"When no packages are selected, all packages and all dependencies in the "
"workspace are cleaned."
msgstr ""

#: src/commands/cargo-clean.md:32
msgid "Clean Options"
msgstr ""

#: src/commands/cargo-clean.md:207
msgid "Remove the entire target directory:"
msgstr ""

#: src/commands/cargo-clean.md:211
msgid "Remove only the release artifacts:"
msgstr ""

#: src/commands/cargo-clippy.md:1
msgid "cargo-clippy(1)"
msgstr ""

#: src/commands/cargo-clippy.md:5
msgid ""
"cargo-clippy --- Checks a package to catch common mistakes and improve your "
"Rust code"
msgstr ""

#: src/commands/cargo-clippy.md:9 src/commands/cargo-fmt.md:9
#: src/commands/cargo-miri.md:9
msgid ""
"This is an external command distributed with the Rust toolchain as an "
"optional component. It is not built into Cargo, and may require additional "
"installation."
msgstr ""

#: src/commands/cargo-clippy.md:12
msgid ""
"For information about usage and installation, see [Clippy Documentation]"
"(../../clippy/index.html)."
msgstr ""

#: src/commands/cargo-clippy.md:17
msgid ""
"[cargo(1)](cargo.md), [cargo-fix(1)](cargo-fix.md), [cargo-fmt(1)](cargo-"
"fmt.md), [Custom subcommands](../reference/external-tools.md#custom-"
"subcommands)"
msgstr ""

#: src/commands/cargo-doc.md:1
msgid "cargo-doc(1)"
msgstr ""

#: src/commands/cargo-doc.md:4
msgid "cargo-doc --- Build a package's documentation"
msgstr ""

#: src/commands/cargo-doc.md:8
msgid "`cargo doc` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-doc.md:12
msgid ""
"Build the documentation for the local package and all dependencies. The "
"output is placed in `target/doc` in rustdoc's usual format."
msgstr ""

#: src/commands/cargo-doc.md:17 src/commands/cargo-rustdoc.md:33
msgid "Documentation Options"
msgstr ""

#: src/commands/cargo-doc.md:82
msgid ""
"When no target selection options are given, `cargo doc` will document all "
"binary and library targets of the selected package. The binary will be "
"skipped if its name is the same as the lib target. Binaries are skipped if "
"they have `required-features` that are missing."
msgstr ""

#: src/commands/cargo-doc.md:87
msgid ""
"The default behavior can be changed by setting `doc = false` for the target "
"in the manifest settings. Using target selection options will ignore the "
"`doc` flag and will always document the given target."
msgstr ""

#: src/commands/cargo-doc.md:384
msgid ""
"Build the local package documentation and its dependencies and output to "
"`target/doc`."
msgstr ""

#: src/commands/cargo-doc.md:390
msgid ""
"[cargo(1)](cargo.html), [cargo-rustdoc(1)](cargo-rustdoc.html), [rustdoc(1)]"
"(https://doc.rust-lang.org/rustdoc/index.html)"
msgstr ""

#: src/commands/cargo-fetch.md:1
msgid "cargo-fetch(1)"
msgstr ""

#: src/commands/cargo-fetch.md:4
msgid "cargo-fetch --- Fetch dependencies of a package from the network"
msgstr ""

#: src/commands/cargo-fetch.md:8
msgid "`cargo fetch` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-fetch.md:12
msgid ""
"If a `Cargo.lock` file is available, this command will ensure that all of "
"the git dependencies and/or registry dependencies are downloaded and locally "
"available. Subsequent Cargo commands will be able to run offline after a "
"`cargo fetch` unless the lock file changes."
msgstr ""

#: src/commands/cargo-fetch.md:17
msgid ""
"If the lock file is not available, then this command will generate the lock "
"file before fetching the dependencies."
msgstr ""

#: src/commands/cargo-fetch.md:20
msgid ""
"If `--target` is not specified, then all target dependencies are fetched."
msgstr ""

#: src/commands/cargo-fetch.md:22
msgid ""
"See also the [cargo-prefetch](https://crates.io/crates/cargo-prefetch) "
"plugin which adds a command to download popular crates. This may be useful "
"if you plan to use Cargo without a network with the `--offline` flag."
msgstr ""

#: src/commands/cargo-fetch.md:28
msgid "Fetch options"
msgstr ""

#: src/commands/cargo-fetch.md:174
msgid "Fetch all dependencies:"
msgstr ""

#: src/commands/cargo-fetch.md:179
msgid ""
"[cargo(1)](cargo.html), [cargo-update(1)](cargo-update.html), [cargo-"
"generate-lockfile(1)](cargo-generate-lockfile.html)"
msgstr ""

#: src/commands/cargo-fix.md:1
msgid "cargo-fix(1)"
msgstr ""

#: src/commands/cargo-fix.md:4
msgid "cargo-fix --- Automatically fix lint warnings reported by rustc"
msgstr ""

#: src/commands/cargo-fix.md:8
msgid "`cargo fix` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-fix.md:12
msgid ""
"This Cargo subcommand will automatically take rustc's suggestions from "
"diagnostics like warnings and apply them to your source code. This is "
"intended to help automate tasks that rustc itself already knows how to tell "
"you to fix!"
msgstr ""

#: src/commands/cargo-fix.md:16
msgid ""
"Executing `cargo fix` will under the hood execute [cargo-check(1)](cargo-"
"check.html). Any warnings applicable to your crate will be automatically "
"fixed (if possible) and all remaining warnings will be displayed when the "
"check process is finished. For example if you'd like to apply all fixes to "
"the current package, you can run:"
msgstr ""

#: src/commands/cargo-fix.md:23
msgid "which behaves the same as `cargo check --all-targets`."
msgstr ""

#: src/commands/cargo-fix.md:25
msgid ""
"`cargo fix` is only capable of fixing code that is normally compiled with "
"`cargo check`. If code is conditionally enabled with optional features, you "
"will need to enable those features for that code to be analyzed:"
msgstr ""

#: src/commands/cargo-fix.md:31
msgid ""
"Similarly, other `cfg` expressions like platform-specific code will need to "
"pass `--target` to fix code for the given target."
msgstr ""

#: src/commands/cargo-fix.md:36
msgid ""
"If you encounter any problems with `cargo fix` or otherwise have any "
"questions or feature requests please don't hesitate to file an issue at "
"<https://github.com/rust-lang/cargo>."
msgstr ""

#: src/commands/cargo-fix.md:40
msgid "Edition migration"
msgstr ""

#: src/commands/cargo-fix.md:42
msgid ""
"The `cargo fix` subcommand can also be used to migrate a package from one "
"[edition](https://doc.rust-lang.org/edition-guide/editions/transitioning-an-"
"existing-project-to-a-new-edition.html) to the next. The general procedure "
"is:"
msgstr ""

#: src/commands/cargo-fix.md:45
msgid ""
"Run `cargo fix --edition`. Consider also using the `--all-features` flag if "
"your project has multiple features. You may also want to run `cargo fix --"
"edition` multiple times with different `--target` flags if your project has "
"platform-specific code gated by `cfg` attributes."
msgstr ""

#: src/commands/cargo-fix.md:49
msgid ""
"Modify `Cargo.toml` to set the [edition field](../reference/"
"manifest.html#the-edition-field) to the new edition."
msgstr ""

#: src/commands/cargo-fix.md:50
msgid ""
"Run your project tests to verify that everything still works. If new "
"warnings are issued, you may want to consider running `cargo fix` again "
"(without the `--edition` flag) to apply any suggestions given by the "
"compiler."
msgstr ""

#: src/commands/cargo-fix.md:55
msgid ""
"And hopefully that's it! Just keep in mind of the caveats mentioned above "
"that `cargo fix` cannot update code for inactive features or `cfg` "
"expressions. Also, in some rare cases the compiler is unable to "
"automatically migrate all code to the new edition, and this may require "
"manual changes after building with the new edition."
msgstr ""

#: src/commands/cargo-fix.md:66
msgid "Fix options"
msgstr ""

#: src/commands/cargo-fix.md:145
msgid ""
"When no target selection options are given, `cargo fix` will fix all targets "
"(`--all-targets` implied). Binaries are skipped if they have `required-"
"features` that are missing."
msgstr ""

#: src/commands/cargo-fix.md:149
msgid "Passing target selection flags will fix only the specified targets."
msgstr ""

#: src/commands/cargo-fix.md:489
msgid "Apply compiler suggestions to the local package:"
msgstr ""

#: src/commands/cargo-fix.md:493
msgid "Update a package to prepare it for the next edition:"
msgstr ""

#: src/commands/cargo-fix.md:497
msgid "Apply suggested idioms for the current edition:"
msgstr ""

#: src/commands/cargo-fix.md:502
msgid "[cargo(1)](cargo.html), [cargo-check(1)](cargo-check.html)"
msgstr ""

#: src/commands/cargo-fmt.md:1
msgid "cargo-fmt(1)"
msgstr ""

#: src/commands/cargo-fmt.md:5
msgid ""
"cargo-fmt --- Formats all bin and lib files of the current crate using "
"rustfmt"
msgstr ""

#: src/commands/cargo-fmt.md:12
msgid ""
"For information about usage and installation, see <https://github.com/rust-"
"lang/rustfmt>."
msgstr ""

#: src/commands/cargo-fmt.md:17
msgid ""
"[cargo(1)](cargo.md), [cargo-fix(1)](cargo-fix.md), [cargo-clippy(1)](cargo-"
"clippy.md), [Custom subcommands](../reference/external-tools.md#custom-"
"subcommands)"
msgstr ""

#: src/commands/cargo-miri.md:1
msgid "cargo-miri(1)"
msgstr ""

#: src/commands/cargo-miri.md:5
msgid "cargo-miri --- Runs binary crates and tests in Miri"
msgstr ""

#: src/commands/cargo-miri.md:12
msgid ""
"This command is only available on the [nightly](https://doc.rust-lang.org/"
"book/appendix-07-nightly-rust.html) channel."
msgstr ""

#: src/commands/cargo-miri.md:14
msgid ""
"For information about usage and installation, see <https://github.com/rust-"
"lang/miri>."
msgstr ""

#: src/commands/cargo-miri.md:19
msgid ""
"[cargo(1)](cargo.md), [cargo-run(1)](cargo-run.md), [cargo-test(1)](cargo-"
"test.md), [Custom subcommands](../reference/external-tools.md#custom-"
"subcommands)"
msgstr ""

#: src/commands/cargo-report.md:1
msgid "cargo-report(1)"
msgstr ""

#: src/commands/cargo-report.md:5
msgid "cargo-report --- Generate and display various kinds of reports"
msgstr ""

#: src/commands/cargo-report.md:9
msgid "`cargo report` _type_ \\[_options_\\]"
msgstr ""

#: src/commands/cargo-report.md:13
msgid ""
"Displays a report of the given _type_ --- currently, only `future-incompat` "
"is supported"
msgstr ""

#: src/commands/cargo-report.md:32
msgid "Display the latest future-incompat report:"
msgstr ""

#: src/commands/cargo-report.md:36
msgid "Display the latest future-incompat report for a specific package:"
msgstr ""

#: src/commands/cargo-report.md:41
msgid "[Future incompat report](../reference/future-incompat-report.html)"
msgstr ""

#: src/commands/cargo-run.md:1
msgid "cargo-run(1)"
msgstr ""

#: src/commands/cargo-run.md:4
msgid "cargo-run --- Run the current package"
msgstr ""

#: src/commands/cargo-run.md:8
msgid "`cargo run` \\[_options_\\] \\[`--` _args_\\]"
msgstr ""

#: src/commands/cargo-run.md:12
msgid "Run a binary or example of the local package."
msgstr ""

#: src/commands/cargo-run.md:14
msgid ""
"All the arguments following the two dashes (`--`) are passed to the binary "
"to run. If you're passing arguments to both Cargo and the binary, the ones "
"after `--` go to the binary, the ones before go to Cargo."
msgstr ""

#: src/commands/cargo-run.md:18
msgid ""
"Unlike [cargo-test(1)](cargo-test.html) and [cargo-bench(1)](cargo-"
"bench.html), `cargo run` sets the working directory of the binary executed "
"to the current working directory, same as if it was executed in the shell "
"directly."
msgstr ""

#: src/commands/cargo-run.md:26 src/commands/cargo-rustc.md:35
#: src/commands/cargo-rustdoc.md:48
msgid ""
"By default, the package in the current working directory is selected. The `-"
"p` flag can be used to choose a different package in a workspace."
msgstr ""

#: src/commands/cargo-run.md:41
msgid ""
"When no target selection options are given, `cargo run` will run the binary "
"target. If there are multiple binary targets, you must pass a target flag to "
"choose one. Or, the `default-run` field may be specified in the `[package]` "
"section of `Cargo.toml` to choose the name of the binary to run by default."
msgstr ""

#: src/commands/cargo-run.md:330
msgid ""
"Build the local package and run its main target (assuming only one binary):"
msgstr ""

#: src/commands/cargo-run.md:334
msgid "Run an example with extra arguments:"
msgstr ""

#: src/commands/cargo-rustc.md:1
msgid "cargo-rustc(1)"
msgstr ""

#: src/commands/cargo-rustc.md:4
msgid ""
"cargo-rustc --- Compile the current package, and pass extra options to the "
"compiler"
msgstr ""

#: src/commands/cargo-rustc.md:8
msgid "`cargo rustc` \\[_options_\\] \\[`--` _args_\\]"
msgstr ""

#: src/commands/cargo-rustc.md:12
msgid ""
"The specified target for the current package (or package specified by `-p` "
"if provided) will be compiled along with all of its dependencies. The "
"specified _args_ will all be passed to the final compiler invocation, not "
"any of the dependencies. Note that the compiler will still unconditionally "
"receive arguments such as `-L`, `--extern`, and `--crate-type`, and the "
"specified _args_ will simply be added to the compiler invocation."
msgstr ""

#: src/commands/cargo-rustc.md:19
msgid ""
"See <https://doc.rust-lang.org/rustc/index.html> for documentation on rustc "
"flags."
msgstr ""

#: src/commands/cargo-rustc.md:22 src/commands/cargo-rustdoc.md:22
msgid ""
"This command requires that only one target is being compiled when additional "
"arguments are provided. If more than one target is available for the current "
"package the filters of `--lib`, `--bin`, etc, must be used to select which "
"target is compiled."
msgstr ""

#: src/commands/cargo-rustc.md:27
msgid ""
"To pass flags to all compiler processes spawned by Cargo, use the "
"`RUSTFLAGS` [environment variable](../reference/environment-variables.html) "
"or the `build.rustflags` [config value](../reference/config.html)."
msgstr ""

#: src/commands/cargo-rustc.md:50
msgid ""
"When no target selection options are given, `cargo rustc` will build all "
"binary and library targets of the selected package."
msgstr ""

#: src/commands/cargo-rustc.md:429
msgid "Check if your package (not including dependencies) uses unsafe code:"
msgstr ""

#: src/commands/cargo-rustc.md:433
msgid ""
"Try an experimental flag on the nightly compiler, such as this which prints "
"the size of every type:"
msgstr ""

#: src/commands/cargo-rustc.md:438
msgid "Override `crate-type` field in Cargo.toml with command-line option:"
msgstr ""

#: src/commands/cargo-rustc.md:443
msgid ""
"[cargo(1)](cargo.html), [cargo-build(1)](cargo-build.html), [rustc(1)]"
"(https://doc.rust-lang.org/rustc/index.html)"
msgstr ""

#: src/commands/cargo-rustdoc.md:1
msgid "cargo-rustdoc(1)"
msgstr ""

#: src/commands/cargo-rustdoc.md:4
msgid ""
"cargo-rustdoc --- Build a package's documentation, using specified custom "
"flags"
msgstr ""

#: src/commands/cargo-rustdoc.md:8
msgid "`cargo rustdoc` \\[_options_\\] \\[`--` _args_\\]"
msgstr ""

#: src/commands/cargo-rustdoc.md:12
msgid ""
"The specified target for the current package (or package specified by `-p` "
"if provided) will be documented with the specified _args_ being passed to "
"the final rustdoc invocation. Dependencies will not be documented as part of "
"this command. Note that rustdoc will still unconditionally receive arguments "
"such as `-L`, `--extern`, and `--crate-type`, and the specified _args_ will "
"simply be added to the rustdoc invocation."
msgstr ""

#: src/commands/cargo-rustdoc.md:19
msgid ""
"See <https://doc.rust-lang.org/rustdoc/index.html> for documentation on "
"rustdoc flags."
msgstr ""

#: src/commands/cargo-rustdoc.md:27
msgid ""
"To pass flags to all rustdoc processes spawned by Cargo, use the "
"`RUSTDOCFLAGS` [environment variable](../reference/environment-"
"variables.html) or the `build.rustdocflags` [config value](../reference/"
"config.html)."
msgstr ""

#: src/commands/cargo-rustdoc.md:63
msgid ""
"When no target selection options are given, `cargo rustdoc` will document "
"all binary and library targets of the selected package. The binary will be "
"skipped if its name is the same as the lib target. Binaries are skipped if "
"they have `required-features` that are missing."
msgstr ""

#: src/commands/cargo-rustdoc.md:68
msgid ""
"Passing target selection flags will document only the specified targets."
msgstr ""

#: src/commands/cargo-rustdoc.md:413
msgid "Build documentation with custom CSS included from a given file:"
msgstr ""

#: src/commands/cargo-rustdoc.md:418
msgid ""
"[cargo(1)](cargo.html), [cargo-doc(1)](cargo-doc.html), [rustdoc(1)](https://"
"doc.rust-lang.org/rustdoc/index.html)"
msgstr ""

#: src/commands/cargo-test.md:1
msgid "cargo-test(1)"
msgstr ""

#: src/commands/cargo-test.md:4
msgid "cargo-test --- Execute unit and integration tests of a package"
msgstr ""

#: src/commands/cargo-test.md:8
msgid "`cargo test` \\[_options_\\] \\[_testname_\\] \\[`--` _test-options_\\]"
msgstr ""

#: src/commands/cargo-test.md:12
msgid "Compile and execute unit, integration, and documentation tests."
msgstr ""

#: src/commands/cargo-test.md:14
msgid ""
"The test filtering argument `TESTNAME` and all the arguments following the "
"two dashes (`--`) are passed to the test binaries and thus to _libtest_ "
"(rustc's built in unit-test and micro-benchmarking framework).  If you're "
"passing arguments to both Cargo and the binary, the ones after `--` go to "
"the binary, the ones before go to Cargo.  For details about libtest's "
"arguments see the output of `cargo test -- --help` and check out the rustc "
"book's chapter on how tests work at <https://doc.rust-lang.org/rustc/tests/"
"index.html>."
msgstr ""

#: src/commands/cargo-test.md:22
msgid ""
"As an example, this will filter for tests with `foo` in their name and run "
"them on 3 threads in parallel:"
msgstr ""

#: src/commands/cargo-test.md:27
msgid ""
"Tests are built with the `--test` option to `rustc` which creates a special "
"executable by linking your code with libtest. The executable automatically "
"runs all functions annotated with the `#[test]` attribute in multiple "
"threads. `#[bench]` annotated functions will also be run with one iteration "
"to verify that they are functional."
msgstr ""

#: src/commands/cargo-test.md:33
msgid ""
"If the package contains multiple test targets, each target compiles to a "
"special executable as aforementioned, and then is run serially."
msgstr ""

#: src/commands/cargo-test.md:36
msgid ""
"The libtest harness may be disabled by setting `harness = false` in the "
"target manifest settings, in which case your code will need to provide its "
"own `main` function to handle running tests."
msgstr ""

#: src/commands/cargo-test.md:40
msgid "Documentation tests"
msgstr ""

#: src/commands/cargo-test.md:42
msgid ""
"Documentation tests are also run by default, which is handled by `rustdoc`. "
"It extracts code samples from documentation comments of the library target, "
"and then executes them."
msgstr ""

#: src/commands/cargo-test.md:46
msgid ""
"Different from normal test targets, each code block compiles to a doctest "
"executable on the fly with `rustc`. These executables run in parallel in "
"separate processes. The compilation of a code block is in fact a part of "
"test function controlled by libtest, so some options such as `--jobs` might "
"not take effect. Note that this execution model of doctests is not "
"guaranteed and may change in the future; beware of depending on it."
msgstr ""

#: src/commands/cargo-test.md:53
msgid ""
"See the [rustdoc book](https://doc.rust-lang.org/rustdoc/) for more "
"information on writing doc tests."
msgstr ""

#: src/commands/cargo-test.md:56
msgid "Working directory of tests"
msgstr ""

#: src/commands/cargo-test.md:58
msgid ""
"The working directory when running each unit and integration test is set to "
"the root directory of the package the test belongs to. Setting the working "
"directory of tests to the package's root directory makes it possible for "
"tests to reliably access the package's files using relative paths, "
"regardless from where `cargo test` was executed from."
msgstr ""

#: src/commands/cargo-test.md:64
msgid ""
"For documentation tests, the working directory when invoking `rustdoc` is "
"set to the workspace root directory, and is also the directory `rustdoc` "
"uses as the compilation directory of each documentation test. The working "
"directory when running each documentation test is set to the root directory "
"of the package the test belongs to, and is controlled via `rustdoc`'s `--"
"test-run-directory` option."
msgstr ""

#: src/commands/cargo-test.md:73
msgid "Test Options"
msgstr ""

#: src/commands/cargo-test.md:134
msgid ""
"When no target selection options are given, `cargo test` will build the "
"following targets of the selected packages:"
msgstr ""

#: src/commands/cargo-test.md:137
msgid ""
"lib --- used to link with binaries, examples, integration tests, and doc "
"tests"
msgstr ""

#: src/commands/cargo-test.md:138
msgid ""
"bins (only if integration tests are built and required features are "
"available)"
msgstr ""

#: src/commands/cargo-test.md:140
msgid "examples --- to ensure they compile"
msgstr ""

#: src/commands/cargo-test.md:141
msgid "lib as a unit test"
msgstr ""

#: src/commands/cargo-test.md:142
msgid "bins as unit tests"
msgstr ""

#: src/commands/cargo-test.md:143
msgid "integration tests"
msgstr ""

#: src/commands/cargo-test.md:144
msgid "doc tests for the lib target"
msgstr ""

#: src/commands/cargo-test.md:146
msgid ""
"The default behavior can be changed by setting the `test` flag for the "
"target in the manifest settings. Setting examples to `test = true` will "
"build and run the example as a test, replacing the example's `main` function "
"with the libtest harness. If you don't want the `main` function replaced, "
"also include `harness = false`, in which case the example will be built and "
"executed as-is."
msgstr ""

#: src/commands/cargo-test.md:152
msgid ""
"Setting targets to `test = false` will stop them from being tested by "
"default. Target selection options that take a target by name (such as `--"
"example foo`) ignore the `test` flag and will always test the given target."
msgstr ""

#: src/commands/cargo-test.md:156
msgid ""
"Doc tests for libraries may be disabled by setting `doctest = false` for the "
"library in the manifest."
msgstr ""

#: src/commands/cargo-test.md:162
msgid ""
"Binary targets are automatically built if there is an integration test or "
"benchmark being selected to test. This allows an integration test to execute "
"the binary to exercise and test its behavior. The `CARGO_BIN_EXE_<name>` "
"[environment variable](../reference/environment-variables.html#environment-"
"variables-cargo-sets-for-crates) is set when the integration test is built "
"so that it can use the [`env` macro](https://doc.rust-lang.org/std/"
"macro.env.html) to locate the executable."
msgstr ""

#: src/commands/cargo-test.md:171
msgid "Passing target selection flags will test only the specified targets."
msgstr ""

#: src/commands/cargo-test.md:335
msgid ""
"By default the Rust test harness hides output from test execution to keep "
"results readable. Test output can be recovered (e.g., for debugging) by "
"passing `--nocapture` to the test binaries:"
msgstr ""

#: src/commands/cargo-test.md:493
msgid ""
"The `--jobs` argument affects the building of the test executable but does "
"not affect how many threads are used when running the tests. The Rust test "
"harness includes an option to control the number of threads used:"
msgstr ""

#: src/commands/cargo-test.md:518
msgid ""
"While `cargo test` involves compilation, it does not provide a `--keep-"
"going` flag. Use `--no-fail-fast` to run as many tests as possible without "
"stopping at the first failure. To \"compile\" as many tests as possible, use "
"`--tests` to build test binaries separately. For example:"
msgstr ""

#: src/commands/cargo-test.md:538
msgid "Execute all the unit and integration tests of the current package:"
msgstr ""

#: src/commands/cargo-test.md:542
msgid "Run only tests whose names match against a filter string:"
msgstr ""

#: src/commands/cargo-test.md:546
msgid "Run only a specific test within a specific integration test:"
msgstr ""

#: src/commands/cargo-test.md:551
msgid ""
"[cargo(1)](cargo.html), [cargo-bench(1)](cargo-bench.html), [types of tests]"
"(../reference/cargo-targets.html#tests), [how to write tests](https://"
"doc.rust-lang.org/rustc/tests/index.html)"
msgstr ""

#: src/commands/manifest-commands.md:3
msgid "[cargo add](cargo-add.md)"
msgstr ""

#: src/commands/manifest-commands.md:4
msgid "[cargo_info](cargo-info.md)"
msgstr ""

#: src/commands/manifest-commands.md:5
msgid "[cargo generate-lockfile](cargo-generate-lockfile.md)"
msgstr ""

#: src/commands/manifest-commands.md:6
msgid "[cargo locate-project](cargo-locate-project.md)"
msgstr ""

#: src/commands/manifest-commands.md:7
msgid "[cargo metadata](cargo-metadata.md)"
msgstr ""

#: src/commands/manifest-commands.md:8
msgid "[cargo pkgid](cargo-pkgid.md)"
msgstr ""

#: src/commands/manifest-commands.md:9
msgid "[cargo remove](cargo-remove.md)"
msgstr ""

#: src/commands/manifest-commands.md:10
msgid "[cargo tree](cargo-tree.md)"
msgstr ""

#: src/commands/manifest-commands.md:11
msgid "[cargo update](cargo-update.md)"
msgstr ""

#: src/commands/manifest-commands.md:12
msgid "[cargo vendor](cargo-vendor.md)"
msgstr ""

#: src/commands/cargo-add.md:1
msgid "cargo-add(1)"
msgstr ""

#: src/commands/cargo-add.md:4
msgid "cargo-add --- Add dependencies to a Cargo.toml manifest file"
msgstr ""

#: src/commands/cargo-add.md:8
msgid ""
"`cargo add` \\[_options_\\] _crate_...  \n"
"`cargo add` \\[_options_\\] `--path` _path_  \n"
"`cargo add` \\[_options_\\] `--git` _url_ \\[_crate_...\\]"
msgstr ""

#: src/commands/cargo-add.md:15
msgid "This command can add or modify dependencies."
msgstr ""

#: src/commands/cargo-add.md:17
msgid "The source for the dependency can be specified with:"
msgstr ""

#: src/commands/cargo-add.md:19
msgid ""
"_crate_`@`_version_: Fetch from a registry with a version constraint of "
"\"_version_\""
msgstr ""

#: src/commands/cargo-add.md:20
msgid "`--path` _path_: Fetch from the specified _path_"
msgstr ""

#: src/commands/cargo-add.md:21
msgid "`--git` _url_: Pull from a git repo at _url_"
msgstr ""

#: src/commands/cargo-add.md:23
msgid ""
"If no source is specified, then a best effort will be made to select one, "
"including:"
msgstr ""

#: src/commands/cargo-add.md:25
msgid "Existing dependencies in other tables (like `dev-dependencies`)"
msgstr ""

#: src/commands/cargo-add.md:26
msgid "Workspace members"
msgstr ""

#: src/commands/cargo-add.md:27
msgid "Latest release in the registry"
msgstr ""

#: src/commands/cargo-add.md:29
msgid ""
"When you add a package that is already present, the existing entry will be "
"updated with the flags specified."
msgstr ""

#: src/commands/cargo-add.md:31
msgid ""
"Upon successful invocation, the enabled (`+`) and disabled (`-`) [features]"
"(../reference/features.html) of the specified dependency will be listed in "
"the command's output."
msgstr ""

#: src/commands/cargo-add.md:38
msgid "Source options"
msgstr ""

#: src/commands/cargo-add.md:76 src/commands/cargo-remove.md:16
msgid "Section options"
msgstr ""

#: src/commands/cargo-add.md:95
msgid "Dependency options"
msgstr ""

#: src/commands/cargo-add.md:289
msgid "Add `regex` as a dependency"
msgstr ""

#: src/commands/cargo-add.md:293
msgid "Add `trybuild` as a dev-dependency"
msgstr ""

#: src/commands/cargo-add.md:297
msgid "Add an older version of `nom` as a dependency"
msgstr ""

#: src/commands/cargo-add.md:301
msgid "Add support for serializing data structures to json with `derive`s"
msgstr ""

#: src/commands/cargo-add.md:305
msgid "Add `windows` as a platform specific dependency on `cfg(windows)`"
msgstr ""

#: src/commands/cargo-add.md:310
msgid "[cargo(1)](cargo.html), [cargo-remove(1)](cargo-remove.html)"
msgstr ""

#: src/commands/cargo-generate-lockfile.md:1
msgid "cargo-generate-lockfile(1)"
msgstr ""

#: src/commands/cargo-generate-lockfile.md:5
msgid "cargo-generate-lockfile --- Generate the lockfile for a package"
msgstr ""

#: src/commands/cargo-generate-lockfile.md:9
msgid "`cargo generate-lockfile` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-generate-lockfile.md:13
msgid ""
"This command will create the `Cargo.lock` lockfile for the current package "
"or workspace. If the lockfile already exists, it will be rebuilt with the "
"latest available version of every package."
msgstr ""

#: src/commands/cargo-generate-lockfile.md:17
msgid ""
"See also [cargo-update(1)](cargo-update.html) which is also capable of "
"creating a `Cargo.lock` lockfile and has more options for controlling update "
"behavior."
msgstr ""

#: src/commands/cargo-generate-lockfile.md:159
msgid "Create or update the lockfile for the current package or workspace:"
msgstr ""

#: src/commands/cargo-generate-lockfile.md:164
msgid "[cargo(1)](cargo.html), [cargo-update(1)](cargo-update.html)"
msgstr ""

#: src/commands/cargo-info.md:1
msgid "cargo-info(1)"
msgstr ""

#: src/commands/cargo-info.md:5
msgid "cargo-info --- Display information about a package."
msgstr ""

#: src/commands/cargo-info.md:9
msgid "`cargo info` \\[_options_\\] _spec_"
msgstr ""

#: src/commands/cargo-info.md:13
msgid ""
"This command displays information about a package. It fetches data from the "
"package's Cargo.toml file and presents it in a human-readable format."
msgstr ""

#: src/commands/cargo-info.md:18
msgid "Info Options"
msgstr ""

#: src/commands/cargo-info.md:156
msgid "Inspect the `serde` package from crates.io:"
msgstr ""

#: src/commands/cargo-info.md:159
msgid "Inspect the `serde` package with version `1.0.0`:"
msgstr ""

#: src/commands/cargo-info.md:162
msgid "Inspect the `serde` package form the local registry:"
msgstr ""

#: src/commands/cargo-info.md:168
msgid "[cargo(1)](cargo.html), [cargo-search(1)](cargo-search.html)"
msgstr ""

#: src/commands/cargo-locate-project.md:1
msgid "cargo-locate-project(1)"
msgstr ""

#: src/commands/cargo-locate-project.md:5
msgid ""
"cargo-locate-project --- Print a JSON representation of a Cargo.toml file's "
"location"
msgstr ""

#: src/commands/cargo-locate-project.md:9
msgid "`cargo locate-project` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-locate-project.md:13
msgid ""
"This command will print a JSON object to stdout with the full path to the "
"manifest. The manifest is found by searching upward for a file named "
"`Cargo.toml` starting from the current working directory."
msgstr ""

#: src/commands/cargo-locate-project.md:17
msgid ""
"If the project happens to be a part of a workspace, the manifest of the "
"project, rather than the workspace root, is output. This can be overridden "
"by the `--workspace` flag. The root workspace is found by traversing further "
"upward or by using the field `package.workspace` after locating the manifest "
"of a workspace member."
msgstr ""

#: src/commands/cargo-locate-project.md:134
msgid "Display the path to the manifest based on the current directory:"
msgstr ""

#: src/commands/cargo-locate-project.md:139 src/commands/cargo-tree.md:442
msgid "[cargo(1)](cargo.html), [cargo-metadata(1)](cargo-metadata.html)"
msgstr ""

#: src/commands/cargo-metadata.md:1
msgid "cargo-metadata(1)"
msgstr ""

#: src/commands/cargo-metadata.md:5
msgid "cargo-metadata --- Machine-readable metadata about the current package"
msgstr ""

#: src/commands/cargo-metadata.md:9
msgid "`cargo metadata` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-metadata.md:13
msgid ""
"Output JSON to stdout containing information about the workspace members and "
"resolved dependencies of the current package."
msgstr ""

#: src/commands/cargo-metadata.md:16
msgid ""
"The output format is subject to change in future versions of Cargo. It is "
"recommended to include the `--format-version` flag to future-proof your code "
"and ensure the output is in the format you are expecting. For more on the "
"expectations, see [\"Compatibility\"](#compatibility)."
msgstr ""

#: src/commands/cargo-metadata.md:21
msgid ""
"See the [cargo_metadata crate](https://crates.io/crates/cargo_metadata) for "
"a Rust API for reading the metadata."
msgstr ""

#: src/commands/cargo-metadata.md:24
msgid "OUTPUT FORMAT"
msgstr ""

#: src/commands/cargo-metadata.md:26
msgid "Compatibility"
msgstr ""

#: src/commands/cargo-metadata.md:28
msgid ""
"Within the same output format version, the compatibility is maintained, "
"except some scenarios. The following is a non-exhaustive list of changes "
"that are not considered as incompatible:"
msgstr ""

#: src/commands/cargo-metadata.md:32
msgid ""
"**Adding new fields** — New fields will be added when needed. Reserving this "
"helps Cargo evolve without bumping the format version too often."
msgstr ""

#: src/commands/cargo-metadata.md:34
msgid ""
"**Adding new values for enum-like fields** — Same as adding new fields. It "
"keeps metadata evolving without stagnation."
msgstr ""

#: src/commands/cargo-metadata.md:36
msgid ""
"**Changing opaque representations** — The inner representations of some "
"fields are implementation details. For example, fields related to \"Source "
"ID\" are treated as opaque identifiers to differentiate packages or sources. "
"Consumers shouldn't rely on those representations unless specified."
msgstr ""

#: src/commands/cargo-metadata.md:41
msgid "JSON format"
msgstr ""

#: src/commands/cargo-metadata.md:43
msgid "The JSON output has the following format:"
msgstr ""

#: src/commands/cargo-metadata.md:47
msgid ""
"/* Array of all packages in the workspace.\n"
"       It also includes all feature-enabled dependencies unless --no-deps is "
"used.\n"
"    */"
msgstr ""

#: src/commands/cargo-metadata.md:50
msgid "\"packages\""
msgstr ""

#: src/commands/cargo-metadata.md:52
msgid "/* The name of the package. */"
msgstr ""

#: src/commands/cargo-metadata.md:53 src/commands/cargo-metadata.md:162
msgid "\"my-package\""
msgstr ""

#: src/commands/cargo-metadata.md:54
msgid "/* The version of the package. */"
msgstr ""

#: src/commands/cargo-metadata.md:56
msgid ""
"/* The Package ID for referring to the\n"
"               package within the document and as the `--package` argument "
"to many commands\n"
"            */"
msgstr ""

#: src/commands/cargo-metadata.md:59 src/commands/cargo-metadata.md:276
msgid "\"id\""
msgstr ""

#: src/commands/cargo-metadata.md:60
msgid "/* The license value from the manifest, or null. */"
msgstr ""

#: src/commands/cargo-metadata.md:61
msgid "\"license\""
msgstr ""

#: src/commands/cargo-metadata.md:61
msgid "\"MIT/Apache-2.0\""
msgstr ""

#: src/commands/cargo-metadata.md:62
msgid "/* The license-file value from the manifest, or null. */"
msgstr ""

#: src/commands/cargo-metadata.md:63
msgid "\"license_file\""
msgstr ""

#: src/commands/cargo-metadata.md:63
msgid "\"LICENSE\""
msgstr ""

#: src/commands/cargo-metadata.md:64
msgid "/* The description value from the manifest, or null. */"
msgstr ""

#: src/commands/cargo-metadata.md:65
msgid "\"description\""
msgstr ""

#: src/commands/cargo-metadata.md:65
msgid "\"Package description.\""
msgstr ""

#: src/commands/cargo-metadata.md:66
msgid ""
"/* The source ID of the package, an \"opaque\" identifier representing\n"
"               where a package is retrieved from. See \"Compatibility\" "
"above for\n"
"               the stability guarantee.\n"
"\n"
"               This is null for path dependencies and workspace members.\n"
"\n"
"               For other dependencies, it is a string with the format:\n"
"               - \"registry+URL\" for registry-based dependencies.\n"
"                 Example: \"registry+https://github.com/rust-lang/crates.io-"
"index\"\n"
"               - \"git+URL\" for git-based dependencies.\n"
"                 Example: \"git+https://github.com/rust-lang/cargo?"
"rev=5e85ba14aaa20f8133863373404cb0af69eeef2c#5e85ba14aaa20f8133863373404cb0af69eeef2c\"\n"
"               - \"sparse+URL\" for dependencies from a sparse registry\n"
"                 Example: \"sparse+https://my-sparse-registry.org\"\n"
"\n"
"               The value after the `+` is not explicitly defined, and may "
"change\n"
"               between versions of Cargo and may not directly correlate to "
"other\n"
"               things, such as registry definitions in a config file. New "
"source\n"
"               kinds may be added in the future which will have different "
"`+`\n"
"               prefixed identifiers.\n"
"            */"
msgstr ""

#: src/commands/cargo-metadata.md:86 src/commands/cargo-metadata.md:95
msgid "\"source\""
msgstr ""

#: src/commands/cargo-metadata.md:87
msgid "/* Array of dependencies declared in the package's manifest. */"
msgstr ""

#: src/commands/cargo-metadata.md:90
msgid "/* The name of the dependency. */"
msgstr ""

#: src/commands/cargo-metadata.md:91 src/commands/cargo-metadata.md:291
msgid "\"bitflags\""
msgstr ""

#: src/commands/cargo-metadata.md:92
msgid ""
"/* The source ID of the dependency. May be null, see\n"
"                       description for the package source.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:95
msgid "\"registry+https://github.com/rust-lang/crates.io-index\""
msgstr ""

#: src/commands/cargo-metadata.md:96
msgid ""
"/* The version requirement for the dependency.\n"
"                       Dependencies without a version requirement have a "
"value of \"*\".\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:99
msgid "\"req\""
msgstr ""

#: src/commands/cargo-metadata.md:99
msgid "\"^1.0\""
msgstr ""

#: src/commands/cargo-metadata.md:100
msgid ""
"/* The dependency kind.\n"
"                       \"dev\", \"build\", or null for a normal dependency.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:104
msgid ""
"/* If the dependency is renamed, this is the new name for\n"
"                       the dependency as a string.  null if it is not "
"renamed.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:107
msgid "\"rename\""
msgstr ""

#: src/commands/cargo-metadata.md:108
msgid "/* Boolean of whether or not this is an optional dependency. */"
msgstr ""

#: src/commands/cargo-metadata.md:109
msgid "\"optional\""
msgstr ""

#: src/commands/cargo-metadata.md:110
msgid "/* Boolean of whether or not default features are enabled. */"
msgstr ""

#: src/commands/cargo-metadata.md:111
msgid "\"uses_default_features\""
msgstr ""

#: src/commands/cargo-metadata.md:114
msgid ""
"/* The target platform for the dependency.\n"
"                       null if not a target dependency.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:117 src/commands/cargo-metadata.md:304
msgid "\"cfg(windows)\""
msgstr ""

#: src/commands/cargo-metadata.md:118
msgid ""
"/* The file system path for a local path dependency.\n"
"                       not present if not a path dependency.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:121
msgid "\"path\""
msgstr ""

#: src/commands/cargo-metadata.md:121
msgid "\"/path/to/dep\""
msgstr ""

#: src/commands/cargo-metadata.md:122
msgid ""
"/* A string of the URL of the registry this dependency is from.\n"
"                       If not specified or null, the dependency is from the "
"default\n"
"                       registry (crates.io).\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:127
msgid ""
"/* (unstable) Boolean flag of whether or not this is a pulbic\n"
"                       dependency. This field is only present when\n"
"                       `-Zpublic-dependency` is enabled.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:134
msgid "/* Array of Cargo targets. */"
msgstr ""

#: src/commands/cargo-metadata.md:135
msgid "\"targets\""
msgstr ""

#: src/commands/cargo-metadata.md:137
msgid ""
"/* Array of target kinds.\n"
"                       - lib targets list the `crate-type` values from the\n"
"                         manifest such as \"lib\", \"rlib\", \"dylib\",\n"
"                         \"proc-macro\", etc. (default [\"lib\"])\n"
"                       - binary is [\"bin\"]\n"
"                       - example is [\"example\"]\n"
"                       - integration test is [\"test\"]\n"
"                       - benchmark is [\"bench\"]\n"
"                       - build script is [\"custom-build\"]\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:148 src/commands/cargo-metadata.md:157
msgid "\"bin\""
msgstr ""

#: src/commands/cargo-metadata.md:150
msgid ""
"/* Array of crate types.\n"
"                       - lib and example libraries list the `crate-type` "
"values\n"
"                         from the manifest such as \"lib\", \"rlib\", "
"\"dylib\",\n"
"                         \"proc-macro\", etc. (default [\"lib\"])\n"
"                       - all other target kinds are [\"bin\"]\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:159
msgid ""
"/* The name of the target.\n"
"                       For lib targets, dashes will be replaced with "
"underscores.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:164
msgid "\"/path/to/my-package/src/main.rs\""
msgstr ""

#: src/commands/cargo-metadata.md:165
msgid ""
"/* The Rust edition of the target.\n"
"                       Defaults to the package edition.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:169
msgid ""
"/* Array of required features.\n"
"                       This property is not included if no required features "
"are set.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:175
msgid ""
"/* Whether or not this target has doc tests enabled, and\n"
"                       the target is compatible with doc testing.\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:179
msgid ""
"/* Whether or not this target should be built and run with `--test`\n"
"                    */"
msgstr ""

#: src/commands/cargo-metadata.md:184
msgid ""
"/* Set of features defined for the package.\n"
"               Each feature maps to an array of features or dependencies it\n"
"               enables.\n"
"            */"
msgstr ""

#: src/commands/cargo-metadata.md:189 src/commands/cargo-metadata.md:311
msgid "\"default\""
msgstr ""

#: src/commands/cargo-metadata.md:195
msgid "/* Absolute path to this package's manifest. */"
msgstr ""

#: src/commands/cargo-metadata.md:197
msgid ""
"/* Package metadata.\n"
"               This is null if no metadata is specified.\n"
"            */"
msgstr ""

#: src/commands/cargo-metadata.md:200 src/commands/cargo-metadata.md:331
msgid "\"metadata\""
msgstr ""

#: src/commands/cargo-metadata.md:201 src/commands/cargo-metadata.md:332
msgid "\"docs\""
msgstr ""

#: src/commands/cargo-metadata.md:202 src/commands/cargo-metadata.md:333
msgid "\"rs\""
msgstr ""

#: src/commands/cargo-metadata.md:203 src/commands/cargo-metadata.md:334
msgid "\"all-features\""
msgstr ""

#: src/commands/cargo-metadata.md:207
msgid ""
"/* List of registries to which this package may be published.\n"
"               Publishing is unrestricted if null, and forbidden if an empty "
"array. */"
msgstr ""

#: src/commands/cargo-metadata.md:212
msgid ""
"/* Array of authors from the manifest.\n"
"               Empty array if no authors specified.\n"
"            */"
msgstr ""

#: src/commands/cargo-metadata.md:215
msgid "\"authors\""
msgstr ""

#: src/commands/cargo-metadata.md:216
msgid "\"Jane Doe <user@example.com>\""
msgstr ""

#: src/commands/cargo-metadata.md:218
msgid "/* Array of categories from the manifest. */"
msgstr ""

#: src/commands/cargo-metadata.md:219
msgid "\"categories\""
msgstr ""

#: src/commands/cargo-metadata.md:220
msgid "\"command-line-utilities\""
msgstr ""

#: src/commands/cargo-metadata.md:222
msgid "/* Optional string that is the default binary picked by cargo run. */"
msgstr ""

#: src/commands/cargo-metadata.md:223
msgid "\"default_run\""
msgstr ""

#: src/commands/cargo-metadata.md:224
msgid "/* Optional string that is the minimum supported rust version */"
msgstr ""

#: src/commands/cargo-metadata.md:225
msgid "\"rust_version\""
msgstr ""

#: src/commands/cargo-metadata.md:225
msgid "\"1.56\""
msgstr ""

#: src/commands/cargo-metadata.md:226
msgid "/* Array of keywords from the manifest. */"
msgstr ""

#: src/commands/cargo-metadata.md:227
msgid "\"keywords\""
msgstr ""

#: src/commands/cargo-metadata.md:228
msgid "\"cli\""
msgstr ""

#: src/commands/cargo-metadata.md:230
msgid "/* The readme value from the manifest or null if not specified. */"
msgstr ""

#: src/commands/cargo-metadata.md:231
msgid "\"readme\""
msgstr ""

#: src/commands/cargo-metadata.md:231
msgid "\"README.md\""
msgstr ""

#: src/commands/cargo-metadata.md:232
msgid "/* The repository value from the manifest or null if not specified. */"
msgstr ""

#: src/commands/cargo-metadata.md:233
msgid "\"https://github.com/rust-lang/cargo\""
msgstr ""

#: src/commands/cargo-metadata.md:234
msgid "/* The homepage value from the manifest or null if not specified. */"
msgstr ""

#: src/commands/cargo-metadata.md:235
msgid "\"homepage\""
msgstr ""

#: src/commands/cargo-metadata.md:235
msgid "\"https://rust-lang.org\""
msgstr ""

#: src/commands/cargo-metadata.md:236
msgid ""
"/* The documentation value from the manifest or null if not specified. */"
msgstr ""

#: src/commands/cargo-metadata.md:237
msgid "\"documentation\""
msgstr ""

#: src/commands/cargo-metadata.md:237
msgid "\"https://doc.rust-lang.org/stable/std\""
msgstr ""

#: src/commands/cargo-metadata.md:238
msgid ""
"/* The default edition of the package.\n"
"               Note that individual targets may have different editions.\n"
"            */"
msgstr ""

#: src/commands/cargo-metadata.md:242
msgid ""
"/* Optional string that is the name of a native library the package\n"
"               is linking to.\n"
"            */"
msgstr ""

#: src/commands/cargo-metadata.md:245
msgid "\"links\""
msgstr ""

#: src/commands/cargo-metadata.md:248
msgid ""
"/* Array of members of the workspace.\n"
"       Each entry is the Package ID for the package.\n"
"    */"
msgstr ""

#: src/commands/cargo-metadata.md:251
msgid "\"workspace_members\""
msgstr ""

#: src/commands/cargo-metadata.md:254
msgid ""
"/* Array of default members of the workspace.\n"
"       Each entry is the Package ID for the package.\n"
"    */"
msgstr ""

#: src/commands/cargo-metadata.md:257
msgid "\"workspace_default_members\""
msgstr ""

#: src/commands/cargo-metadata.md:260
msgid ""
"// The resolved dependency graph for the entire workspace. The enabled\n"
"    // features are based on the enabled features for the \"current\" "
"package.\n"
"    // Inactivated optional dependencies are not listed.\n"
"    //\n"
"    // This is null if --no-deps is specified.\n"
"    //\n"
"    // By default, this includes all dependencies for all target platforms.\n"
"    // The `--filter-platform` flag may be used to narrow to a specific\n"
"    // target triple.\n"
"    \"resolve\""
msgstr ""

#: src/commands/cargo-metadata.md:270
msgid ""
"/* Array of nodes within the dependency graph.\n"
"           Each node is a package.\n"
"        */"
msgstr ""

#: src/commands/cargo-metadata.md:273
msgid "\"nodes\""
msgstr ""

#: src/commands/cargo-metadata.md:275
msgid "/* The Package ID of this node. */"
msgstr ""

#: src/commands/cargo-metadata.md:277
msgid "/* The dependencies of this package, an array of Package IDs. */"
msgstr ""

#: src/commands/cargo-metadata.md:279 src/commands/cargo-metadata.md:293
msgid "\"https://github.com/rust-lang/crates.io-index#bitflags@1.0.4\""
msgstr ""

#: src/commands/cargo-metadata.md:281
msgid ""
"/* The dependencies of this package. This is an alternative to\n"
"                   \"dependencies\" which contains additional information. "
"In\n"
"                   particular, this handles renamed dependencies.\n"
"                */"
msgstr ""

#: src/commands/cargo-metadata.md:285
msgid "\"deps\""
msgstr ""

#: src/commands/cargo-metadata.md:287
msgid ""
"/* The name of the dependency's library target.\n"
"                           If this is a renamed dependency, this is the new\n"
"                           name.\n"
"                        */"
msgstr ""

#: src/commands/cargo-metadata.md:292
msgid "/* The Package ID of the dependency. */"
msgstr ""

#: src/commands/cargo-metadata.md:293
msgid "\"pkg\""
msgstr ""

#: src/commands/cargo-metadata.md:294
msgid "/* Array of dependency kinds. Added in Cargo 1.40. */"
msgstr ""

#: src/commands/cargo-metadata.md:295
msgid "\"dep_kinds\""
msgstr ""

#: src/commands/cargo-metadata.md:297
msgid ""
"/* The dependency kind.\n"
"                                   \"dev\", \"build\", or null for a normal "
"dependency.\n"
"                                */"
msgstr ""

#: src/commands/cargo-metadata.md:301
msgid ""
"/* The target platform for the dependency.\n"
"                                   null if not a target dependency.\n"
"                                */"
msgstr ""

#: src/commands/cargo-metadata.md:309
msgid "/* Array of features enabled on this package. */"
msgstr ""

#: src/commands/cargo-metadata.md:315
msgid ""
"/* The package in the current working directory (if --manifest-path is not "
"given).\n"
"           This is null if there is a virtual workspace. Otherwise it is\n"
"           the Package ID of the package.\n"
"        */"
msgstr ""

#: src/commands/cargo-metadata.md:319
msgid "\"root\""
msgstr ""

#: src/commands/cargo-metadata.md:321
msgid ""
"/* The absolute path to the build directory where Cargo places its output. */"
msgstr ""

#: src/commands/cargo-metadata.md:322
msgid "\"target_directory\""
msgstr ""

#: src/commands/cargo-metadata.md:322
msgid "\"/path/to/my-package/target\""
msgstr ""

#: src/commands/cargo-metadata.md:323
msgid ""
"/* The version of the schema for this metadata structure.\n"
"       This will be changed if incompatible changes are ever made.\n"
"    */"
msgstr ""

#: src/commands/cargo-metadata.md:327
msgid "/* The absolute path to the root of the workspace. */"
msgstr ""

#: src/commands/cargo-metadata.md:328
msgid "\"workspace_root\""
msgstr ""

#: src/commands/cargo-metadata.md:328
msgid "\"/path/to/my-package\""
msgstr ""

#: src/commands/cargo-metadata.md:329
msgid ""
"/* Workspace metadata.\n"
"       This is null if no metadata is specified. */"
msgstr ""

#: src/commands/cargo-metadata.md:342
msgid ""
"For `\"id\"` field syntax, see [Package ID Specifications](../reference/"
"pkgid-spec.html) in the reference."
msgstr ""

#: src/commands/cargo-metadata.md:532
msgid "Output JSON about the current package:"
msgstr ""

#: src/commands/cargo-metadata.md:538
msgid ""
"[cargo(1)](cargo.html), [cargo-pkgid(1)](cargo-pkgid.html), [Package ID "
"Specifications](../reference/pkgid-spec.html), [JSON messages](../reference/"
"external-tools.html#json-messages)"
msgstr ""

#: src/commands/cargo-pkgid.md:1
msgid "cargo-pkgid(1)"
msgstr ""

#: src/commands/cargo-pkgid.md:5
msgid "cargo-pkgid --- Print a fully qualified package specification"
msgstr ""

#: src/commands/cargo-pkgid.md:9
msgid "`cargo pkgid` \\[_options_\\] \\[_spec_\\]"
msgstr ""

#: src/commands/cargo-pkgid.md:13
msgid ""
"Given a _spec_ argument, print out the fully qualified package ID specifier "
"for a package or dependency in the current workspace. This command will "
"generate an error if _spec_ is ambiguous as to which package it refers to in "
"the dependency graph. If no _spec_ is given, then the specifier for the "
"local package is printed."
msgstr ""

#: src/commands/cargo-pkgid.md:19
msgid ""
"This command requires that a lockfile is available and dependencies have "
"been fetched."
msgstr ""

#: src/commands/cargo-pkgid.md:22
msgid ""
"A package specifier consists of a name, version, and source URL. You are "
"allowed to use partial specifiers to succinctly match a specific package as "
"long as it matches only one package. This specifier is also used by other "
"parts in Cargo, such as [cargo-metadata(1)](cargo-metadata.html) and [JSON "
"messages](../reference/external-tools.html#json-messages) emitted by Cargo."
msgstr ""

#: src/commands/cargo-pkgid.md:27
msgid "The format of a _spec_ can be one of the following:"
msgstr ""

#: src/commands/cargo-pkgid.md:29
msgid "SPEC Structure"
msgstr ""

#: src/commands/cargo-pkgid.md:29
msgid "Example SPEC"
msgstr ""

#: src/commands/cargo-pkgid.md:31
msgid "_name_"
msgstr ""

#: src/commands/cargo-pkgid.md:31
msgid "`bitflags`"
msgstr ""

#: src/commands/cargo-pkgid.md:32
msgid "_name_`@`_version_"
msgstr ""

#: src/commands/cargo-pkgid.md:32
msgid "`bitflags@1.0.4`"
msgstr ""

#: src/commands/cargo-pkgid.md:33
msgid "_url_"
msgstr ""

#: src/commands/cargo-pkgid.md:33
msgid "`https://github.com/rust-lang/cargo`"
msgstr ""

#: src/commands/cargo-pkgid.md:34
msgid "_url_`#`_version_"
msgstr ""

#: src/commands/cargo-pkgid.md:34
msgid "`https://github.com/rust-lang/cargo#0.33.0`"
msgstr ""

#: src/commands/cargo-pkgid.md:35
msgid "_url_`#`_name_"
msgstr ""

#: src/commands/cargo-pkgid.md:35
msgid "`https://github.com/rust-lang/crates.io-index#bitflags`"
msgstr ""

#: src/commands/cargo-pkgid.md:36
msgid "_url_`#`_name_`@`_version_"
msgstr ""

#: src/commands/cargo-pkgid.md:36
msgid "`https://github.com/rust-lang/cargo#crates-io@0.21.0`"
msgstr ""

#: src/commands/cargo-pkgid.md:38
msgid ""
"The specification grammar can be found in chapter [Package ID Specifications]"
"(../reference/pkgid-spec.html)."
msgstr ""

#: src/commands/cargo-pkgid.md:188
msgid "Retrieve package specification for `foo` package:"
msgstr ""

#: src/commands/cargo-pkgid.md:192
msgid "Retrieve package specification for version 1.0.0 of `foo`:"
msgstr ""

#: src/commands/cargo-pkgid.md:196
msgid "Retrieve package specification for `foo` from crates.io:"
msgstr ""

#: src/commands/cargo-pkgid.md:198
msgid ""
"    cargo pkgid https://github.com/rust-lang/crates.io-index#foo\n"
"    "
msgstr ""

#: src/commands/cargo-pkgid.md:200
msgid "Retrieve package specification for `foo` from a local package:"
msgstr ""

#: src/commands/cargo-pkgid.md:202
msgid ""
"    cargo pkgid file:///path/to/local/package#foo\n"
"    "
msgstr ""

#: src/commands/cargo-pkgid.md:206
msgid ""
"[cargo(1)](cargo.html), [cargo-generate-lockfile(1)](cargo-generate-"
"lockfile.html), [cargo-metadata(1)](cargo-metadata.html), [Package ID "
"Specifications](../reference/pkgid-spec.html), [JSON messages](../reference/"
"external-tools.html#json-messages)"
msgstr ""

#: src/commands/cargo-remove.md:1
msgid "cargo-remove(1)"
msgstr ""

#: src/commands/cargo-remove.md:4
msgid "cargo-remove --- Remove dependencies from a Cargo.toml manifest file"
msgstr ""

#: src/commands/cargo-remove.md:8
msgid "`cargo remove` \\[_options_\\] _dependency_..."
msgstr ""

#: src/commands/cargo-remove.md:12
msgid "Remove one or more dependencies from a `Cargo.toml` manifest."
msgstr ""

#: src/commands/cargo-remove.md:189
msgid "Remove `regex` as a dependency"
msgstr ""

#: src/commands/cargo-remove.md:193
msgid "Remove `trybuild` as a dev-dependency"
msgstr ""

#: src/commands/cargo-remove.md:197
msgid "Remove `nom` from the `x86_64-pc-windows-gnu` dependencies table"
msgstr ""

#: src/commands/cargo-remove.md:202
msgid "[cargo(1)](cargo.html), [cargo-add(1)](cargo-add.html)"
msgstr ""

#: src/commands/cargo-tree.md:1
msgid "cargo-tree(1)"
msgstr ""

#: src/commands/cargo-tree.md:4
msgid "cargo-tree --- Display a tree visualization of a dependency graph"
msgstr ""

#: src/commands/cargo-tree.md:8
msgid "`cargo tree` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-tree.md:12
msgid ""
"This command will display a tree of dependencies to the terminal. An example "
"of a simple project that depends on the \"rand\" package:"
msgstr ""

#: src/commands/cargo-tree.md:31
msgid ""
"Packages marked with `(*)` have been \"de-duplicated\". The dependencies for "
"the package have already been shown elsewhere in the graph, and so are not "
"repeated. Use the `--no-dedupe` option to repeat the duplicates."
msgstr ""

#: src/commands/cargo-tree.md:35
msgid ""
"The `-e` flag can be used to select the dependency kinds to display. The "
"\"features\" kind changes the output to display the features enabled by each "
"dependency. For example, `cargo tree -e features`:"
msgstr ""

#: src/commands/cargo-tree.md:39
msgid ""
"```\n"
"myproject v0.1.0 (/myproject)\n"
"└── log feature \"serde\"\n"
"    └── log v0.4.8\n"
"        ├── serde v1.0.106\n"
"        └── cfg-if feature \"default\"\n"
"            └── cfg-if v0.1.10\n"
"```"
msgstr ""

#: src/commands/cargo-tree.md:48
msgid ""
"In this tree, `myproject` depends on `log` with the `serde` feature. `log` "
"in turn depends on `cfg-if` with \"default\" features. When using `-e "
"features` it can be helpful to use `-i` flag to show how the features flow "
"into a package. See the examples below for more detail."
msgstr ""

#: src/commands/cargo-tree.md:53
msgid "Feature Unification"
msgstr ""

#: src/commands/cargo-tree.md:55
msgid ""
"This command shows a graph much closer to a feature-unified graph Cargo will "
"build, rather than what you list in `Cargo.toml`. For instance, if you "
"specify the same dependency in both `[dependencies]` and `[dev-"
"dependencies]` but with different features on. This command may merge all "
"features and show a `(*)` on one of the dependency to indicate the duplicate."
msgstr ""

#: src/commands/cargo-tree.md:61
msgid ""
"As a result, for a mostly equivalent overview of what `cargo build` does, "
"`cargo tree -e normal,build` is pretty close; for a mostly equivalent "
"overview of what `cargo test` does, `cargo tree` is pretty close. However, "
"it doesn't guarantee the exact equivalence to what Cargo is going to build, "
"since a compilation is complex and depends on lots of different factors."
msgstr ""

#: src/commands/cargo-tree.md:67
msgid ""
"To learn more about feature unification, check out this [dedicated section]"
"(../reference/features.html#feature-unification)."
msgstr ""

#: src/commands/cargo-tree.md:72
msgid "Tree Options"
msgstr ""

#: src/commands/cargo-tree.md:145
msgid "Tree Formatting Options"
msgstr ""

#: src/commands/cargo-tree.md:382
msgid "Display the tree for the package in the current directory:"
msgstr ""

#: src/commands/cargo-tree.md:386
msgid "Display all the packages that depend on the `syn` package:"
msgstr ""

#: src/commands/cargo-tree.md:390
msgid "Show the features enabled on each package:"
msgstr ""

#: src/commands/cargo-tree.md:392
msgid ""
"    cargo tree --format \"{p} {f}\"\n"
"    "
msgstr ""

#: src/commands/cargo-tree.md:394
msgid ""
"Show all packages that are built multiple times. This can happen if multiple "
"semver-incompatible versions appear in the tree (like 1.0.0 and 2.0.0)."
msgstr ""

#: src/commands/cargo-tree.md:399
msgid "Explain why features are enabled for the `syn` package:"
msgstr ""

#: src/commands/cargo-tree.md:403
msgid ""
"The `-e features` flag is used to show features. The `-i` flag is used to "
"invert the graph so that it displays the packages that depend on `syn`. An "
"example of what this would display:"
msgstr ""

#: src/commands/cargo-tree.md:407
msgid ""
"```\n"
"syn v1.0.17\n"
"├── syn feature \"clone-impls\"\n"
"│   └── syn feature \"default\"\n"
"│       └── rustversion v1.0.2\n"
"│           └── rustversion feature \"default\"\n"
"│               └── myproject v0.1.0 (/myproject)\n"
"│                   └── myproject feature \"default\" (command-line)\n"
"├── syn feature \"default\" (*)\n"
"├── syn feature \"derive\"\n"
"│   └── syn feature \"default\" (*)\n"
"├── syn feature \"full\"\n"
"│   └── rustversion v1.0.2 (*)\n"
"├── syn feature \"parsing\"\n"
"│   └── syn feature \"default\" (*)\n"
"├── syn feature \"printing\"\n"
"│   └── syn feature \"default\" (*)\n"
"├── syn feature \"proc-macro\"\n"
"│   └── syn feature \"default\" (*)\n"
"└── syn feature \"quote\"\n"
"    ├── syn feature \"printing\" (*)\n"
"    └── syn feature \"proc-macro\" (*)\n"
"```"
msgstr ""

#: src/commands/cargo-tree.md:431
msgid ""
"To read this graph, you can follow the chain for each feature from the root "
"to see why it is included. For example, the \"full\" feature is added by the "
"`rustversion` crate which is included from `myproject` (with the default "
"features), and `myproject` is the package selected on the command-line. All "
"of the other `syn` features are added by the \"default\" feature (\"quote\" "
"is added by \"printing\" and \"proc-macro\", both of which are default "
"features)."
msgstr ""

#: src/commands/cargo-tree.md:438
msgid ""
"If you're having difficulty cross-referencing the de-duplicated `(*)` "
"entries, try with the `--no-dedupe` flag to get the full output."
msgstr ""

#: src/commands/cargo-update.md:1
msgid "cargo-update(1)"
msgstr ""

#: src/commands/cargo-update.md:5
msgid "cargo-update --- Update dependencies as recorded in the local lock file"
msgstr ""

#: src/commands/cargo-update.md:9
msgid "`cargo update` \\[_options_\\] _spec_"
msgstr ""

#: src/commands/cargo-update.md:13
msgid ""
"This command will update dependencies in the `Cargo.lock` file to the latest "
"version. If the `Cargo.lock` file does not exist, it will be created with "
"the latest available versions."
msgstr ""

#: src/commands/cargo-update.md:19
msgid "Update Options"
msgstr ""

#: src/commands/cargo-update.md:219
msgid "Update all dependencies in the lockfile:"
msgstr ""

#: src/commands/cargo-update.md:223
msgid "Update only specific dependencies:"
msgstr ""

#: src/commands/cargo-update.md:227
msgid "Set a specific dependency to a specific version:"
msgstr ""

#: src/commands/cargo-update.md:232
msgid ""
"[cargo(1)](cargo.html), [cargo-generate-lockfile(1)](cargo-generate-"
"lockfile.html)"
msgstr ""

#: src/commands/cargo-vendor.md:1
msgid "cargo-vendor(1)"
msgstr ""

#: src/commands/cargo-vendor.md:5
msgid "cargo-vendor --- Vendor all dependencies locally"
msgstr ""

#: src/commands/cargo-vendor.md:9
msgid "`cargo vendor` \\[_options_\\] \\[_path_\\]"
msgstr ""

#: src/commands/cargo-vendor.md:13
msgid ""
"This cargo subcommand will vendor all crates.io and git dependencies for a "
"project into the specified directory at `<path>`. After this command "
"completes the vendor directory specified by `<path>` will contain all remote "
"sources from dependencies specified. Additional manifests beyond the default "
"one can be specified with the `-s` option."
msgstr ""

#: src/commands/cargo-vendor.md:19
msgid ""
"The configuration necessary to use the vendored sources would be printed to "
"stdout after `cargo vendor` completes the vendoring process. You will need "
"to add or redirect it to your Cargo configuration file, which is usually "
"`.cargo/config.toml` locally for the current package."
msgstr ""

#: src/commands/cargo-vendor.md:24
msgid ""
"Cargo treats vendored sources as read-only as it does to registry and git "
"sources. If you intend to modify a crate from a remote source, use `[patch]` "
"or a `path` dependency pointing to a local copy of that crate. Cargo will "
"then correctly handle the crate on incremental rebuilds, as it knows that it "
"is no longer a read-only dependency."
msgstr ""

#: src/commands/cargo-vendor.md:32
msgid "Vendor Options"
msgstr ""

#: src/commands/cargo-vendor.md:199
msgid "Vendor all dependencies into a local \"vendor\" folder"
msgstr ""

#: src/commands/cargo-vendor.md:203
msgid "Vendor all dependencies into a local \"third-party/vendor\" folder"
msgstr ""

#: src/commands/cargo-vendor.md:207
msgid "Vendor the current workspace as well as another to \"vendor\""
msgstr ""

#: src/commands/cargo-vendor.md:211
msgid "Vendor and redirect the necessary vendor configs to a config file."
msgstr ""

#: src/commands/package-commands.md:2
msgid "[cargo init](cargo-init.md)"
msgstr ""

#: src/commands/package-commands.md:3
msgid "[cargo install](cargo-install.md)"
msgstr ""

#: src/commands/package-commands.md:4
msgid "[cargo new](cargo-new.md)"
msgstr ""

#: src/commands/package-commands.md:5
msgid "[cargo search](cargo-search.md)"
msgstr ""

#: src/commands/package-commands.md:6
msgid "[cargo uninstall](cargo-uninstall.md)"
msgstr ""

#: src/commands/cargo-init.md:1
msgid "cargo-init(1)"
msgstr ""

#: src/commands/cargo-init.md:5
msgid "cargo-init --- Create a new Cargo package in an existing directory"
msgstr ""

#: src/commands/cargo-init.md:9
msgid "`cargo init` \\[_options_\\] \\[_path_\\]"
msgstr ""

#: src/commands/cargo-init.md:13
msgid ""
"This command will create a new Cargo manifest in the current directory. Give "
"a path as an argument to create in the given directory."
msgstr ""

#: src/commands/cargo-init.md:16
msgid ""
"If there are typically-named Rust source files already in the directory, "
"those will be used. If not, then a sample `src/main.rs` file will be "
"created, or `src/lib.rs` if `--lib` is passed."
msgstr ""

#: src/commands/cargo-init.md:20
msgid ""
"If the directory is not already in a VCS repository, then a new repository "
"is created (see `--vcs` below)."
msgstr ""

#: src/commands/cargo-init.md:23
msgid ""
"See [cargo-new(1)](cargo-new.html) for a similar command which will create a "
"new package in a new directory."
msgstr ""

#: src/commands/cargo-init.md:28
msgid "Init Options"
msgstr ""

#: src/commands/cargo-init.md:152
msgid "Create a binary Cargo package in the current directory:"
msgstr ""

#: src/commands/cargo-init.md:157
msgid "[cargo(1)](cargo.html), [cargo-new(1)](cargo-new.html)"
msgstr ""

#: src/commands/cargo-install.md:1
msgid "cargo-install(1)"
msgstr ""

#: src/commands/cargo-install.md:4
msgid "cargo-install --- Build and install a Rust binary"
msgstr ""

#: src/commands/cargo-install.md:8
msgid ""
"`cargo install` \\[_options_\\] _crate_\\[@_version_\\]...  \n"
"`cargo install` \\[_options_\\] `--path` _path_  \n"
"`cargo install` \\[_options_\\] `--git` _url_ \\[_crate_...\\]  \n"
"`cargo install` \\[_options_\\] `--list`"
msgstr ""

#: src/commands/cargo-install.md:15
msgid ""
"This command manages Cargo's local set of installed binary crates. Only "
"packages which have executable `[[bin]]` or `[[example]]` targets can be "
"installed, and all executables are installed into the installation root's "
"`bin` folder. By default only binaries, not examples, are installed."
msgstr ""

#: src/commands/cargo-install.md:20 src/commands/cargo-uninstall.md:20
msgid "The installation root is determined, in order of precedence:"
msgstr ""

#: src/commands/cargo-install.md:22 src/commands/cargo-uninstall.md:22
msgid "`--root` option"
msgstr ""

#: src/commands/cargo-install.md:23 src/commands/cargo-uninstall.md:23
msgid "`CARGO_INSTALL_ROOT` environment variable"
msgstr ""

#: src/commands/cargo-install.md:24 src/commands/cargo-uninstall.md:24
msgid "`install.root` Cargo [config value](../reference/config.html)"
msgstr ""

#: src/commands/cargo-install.md:25 src/commands/cargo-uninstall.md:25
msgid "`CARGO_HOME` environment variable"
msgstr ""

#: src/commands/cargo-install.md:26 src/commands/cargo-uninstall.md:26
msgid "`$HOME/.cargo`"
msgstr ""

#: src/commands/cargo-install.md:28
msgid ""
"There are multiple sources from which a crate can be installed. The default "
"source location is crates.io but the `--git`, `--path`, and `--registry` "
"flags can change this source. If the source contains more than one package "
"(such as crates.io or a git repository with multiple crates) the _crate_ "
"argument is required to indicate which crate should be installed."
msgstr ""

#: src/commands/cargo-install.md:34
msgid ""
"Crates from crates.io can optionally specify the version they wish to "
"install via the `--version` flags, and similarly packages from git "
"repositories can optionally specify the branch, tag, or revision that should "
"be installed. If a crate has multiple binaries, the `--bin` argument can "
"selectively install only one of them, and if you'd rather install examples "
"the `--example` argument can be used as well."
msgstr ""

#: src/commands/cargo-install.md:41
msgid ""
"If the package is already installed, Cargo will reinstall it if the "
"installed version does not appear to be up-to-date. If any of the following "
"values change, then Cargo will reinstall the package:"
msgstr ""

#: src/commands/cargo-install.md:45
msgid "The package version and source."
msgstr ""

#: src/commands/cargo-install.md:46
msgid "The set of binary names installed."
msgstr ""

#: src/commands/cargo-install.md:47
msgid "The chosen features."
msgstr ""

#: src/commands/cargo-install.md:48
msgid "The profile (`--profile`)."
msgstr ""

#: src/commands/cargo-install.md:49
msgid "The target (`--target`)."
msgstr ""

#: src/commands/cargo-install.md:51
msgid ""
"Installing with `--path` will always build and install, unless there are "
"conflicting binaries from another package. The `--force` flag may be used to "
"force Cargo to always reinstall the package."
msgstr ""

#: src/commands/cargo-install.md:55
msgid ""
"If the source is crates.io or `--git` then by default the crate will be "
"built in a temporary target directory. To avoid this, the target directory "
"can be specified by setting the `CARGO_TARGET_DIR` environment variable to a "
"relative path. In particular, this can be useful for caching build artifacts "
"on continuous integration systems."
msgstr ""

#: src/commands/cargo-install.md:61
msgid "Dealing with the Lockfile"
msgstr ""

#: src/commands/cargo-install.md:63
msgid ""
"By default, the `Cargo.lock` file that is included with the package will be "
"ignored. This means that Cargo will recompute which versions of dependencies "
"to use, possibly using newer versions that have been released since the "
"package was published. The `--locked` flag can be used to force Cargo to use "
"the packaged `Cargo.lock` file if it is available. This may be useful for "
"ensuring reproducible builds, to use the exact same set of dependencies that "
"were available when the package was published. It may also be useful if a "
"newer version of a dependency is published that no longer builds on your "
"system, or has other problems. The downside to using `--locked` is that you "
"will not receive any fixes or updates to any dependency. Note that Cargo did "
"not start publishing `Cargo.lock` files until version 1.37, which means "
"packages published with prior versions will not have a `Cargo.lock` file "
"available."
msgstr ""

#: src/commands/cargo-install.md:77
msgid "Configuration Discovery"
msgstr ""

#: src/commands/cargo-install.md:79
msgid ""
"This command operates on system or user level, not project level. This means "
"that the local [configuration discovery](../reference/"
"config.html#hierarchical-structure) is ignored. Instead, the configuration "
"discovery begins at `$CARGO_HOME/config.toml`. If the package is installed "
"with `--path $PATH`, the local configuration will be used, beginning "
"discovery at `$PATH/.cargo/config.toml`."
msgstr ""

#: src/commands/cargo-install.md:89
msgid "Install Options"
msgstr ""

#: src/commands/cargo-install.md:433
msgid "Install or upgrade a package from crates.io:"
msgstr ""

#: src/commands/cargo-install.md:437
msgid "Install or reinstall the package in the current directory:"
msgstr ""

#: src/commands/cargo-install.md:441
msgid "View the list of installed packages:"
msgstr ""

#: src/commands/cargo-install.md:446
msgid ""
"[cargo(1)](cargo.html), [cargo-uninstall(1)](cargo-uninstall.html), [cargo-"
"search(1)](cargo-search.html), [cargo-publish(1)](cargo-publish.html)"
msgstr ""

#: src/commands/cargo-new.md:1
msgid "cargo-new(1)"
msgstr ""

#: src/commands/cargo-new.md:5
msgid "cargo-new --- Create a new Cargo package"
msgstr ""

#: src/commands/cargo-new.md:9
msgid "`cargo new` \\[_options_\\] _path_"
msgstr ""

#: src/commands/cargo-new.md:13
msgid ""
"This command will create a new Cargo package in the given directory. This "
"includes a simple template with a `Cargo.toml` manifest, sample source file, "
"and a VCS ignore file. If the directory is not already in a VCS repository, "
"then a new repository is created (see `--vcs` below)."
msgstr ""

#: src/commands/cargo-new.md:18
msgid ""
"See [cargo-init(1)](cargo-init.html) for a similar command which will create "
"a new manifest in an existing directory."
msgstr ""

#: src/commands/cargo-new.md:23
msgid "New Options"
msgstr ""

#: src/commands/cargo-new.md:147
msgid "Create a binary Cargo package in the given directory:"
msgstr ""

#: src/commands/cargo-new.md:152
msgid "[cargo(1)](cargo.html), [cargo-init(1)](cargo-init.html)"
msgstr ""

#: src/commands/cargo-search.md:1
msgid "cargo-search(1)"
msgstr ""

#: src/commands/cargo-search.md:5
msgid ""
"cargo-search --- Search packages in the registry. Default registry is "
"crates.io"
msgstr ""

#: src/commands/cargo-search.md:9
msgid "`cargo search` \\[_options_\\] \\[_query_...\\]"
msgstr ""

#: src/commands/cargo-search.md:13
msgid ""
"This performs a textual search for crates on <https://crates.io>. The "
"matching crates will be displayed along with their description in TOML "
"format suitable for copying into a `Cargo.toml` manifest."
msgstr ""

#: src/commands/cargo-search.md:19
msgid "Search Options"
msgstr ""

#: src/commands/cargo-search.md:123
msgid "Search for a package from crates.io:"
msgstr ""

#: src/commands/cargo-search.md:129
msgid ""
"[cargo(1)](cargo.html), [cargo-install(1)](cargo-install.html), [cargo-"
"publish(1)](cargo-publish.html)"
msgstr ""

#: src/commands/cargo-uninstall.md:1
msgid "cargo-uninstall(1)"
msgstr ""

#: src/commands/cargo-uninstall.md:5
msgid "cargo-uninstall --- Remove a Rust binary"
msgstr ""

#: src/commands/cargo-uninstall.md:9
msgid "`cargo uninstall` \\[_options_\\] \\[_spec_...\\]"
msgstr ""

#: src/commands/cargo-uninstall.md:13
msgid ""
"This command removes a package installed with [cargo-install(1)](cargo-"
"install.html). The _spec_ argument is a package ID specification of the "
"package to remove (see [cargo-pkgid(1)](cargo-pkgid.html))."
msgstr ""

#: src/commands/cargo-uninstall.md:17
msgid ""
"By default all binaries are removed for a crate but the `--bin` and `--"
"example` flags can be used to only remove particular binaries."
msgstr ""

#: src/commands/cargo-uninstall.md:30
msgid "Uninstall Options"
msgstr ""

#: src/commands/cargo-uninstall.md:134
msgid "Uninstall a previously installed package."
msgstr ""

#: src/commands/cargo-uninstall.md:139
msgid "[cargo(1)](cargo.html), [cargo-install(1)](cargo-install.html)"
msgstr ""

#: src/commands/publishing-commands.md:2
msgid "[cargo login](cargo-login.md)"
msgstr ""

#: src/commands/publishing-commands.md:3
msgid "[cargo logout](cargo-logout.md)"
msgstr ""

#: src/commands/publishing-commands.md:4
msgid "[cargo owner](cargo-owner.md)"
msgstr ""

#: src/commands/publishing-commands.md:5
msgid "[cargo package](cargo-package.md)"
msgstr ""

#: src/commands/publishing-commands.md:6
msgid "[cargo publish](cargo-publish.md)"
msgstr ""

#: src/commands/publishing-commands.md:7
msgid "[cargo yank](cargo-yank.md)"
msgstr ""

#: src/commands/cargo-login.md:1
msgid "cargo-login(1)"
msgstr ""

#: src/commands/cargo-login.md:5
msgid "cargo-login --- Log in to a registry"
msgstr ""

#: src/commands/cargo-login.md:9
msgid "`cargo login` \\[_options_\\] \\[`--` _args_\\]"
msgstr ""

#: src/commands/cargo-login.md:13
msgid ""
"This command will run a credential provider to save a token so that commands "
"that require authentication, such as [cargo-publish(1)](cargo-publish.html), "
"will be automatically authenticated."
msgstr ""

#: src/commands/cargo-login.md:17
msgid ""
"All the arguments following the two dashes (`--`) are passed to the "
"credential provider."
msgstr ""

#: src/commands/cargo-login.md:19
msgid ""
"For the default `cargo:token` credential provider, the token is saved in "
"`$CARGO_HOME/credentials.toml`. `CARGO_HOME` defaults to `.cargo` in your "
"home directory."
msgstr ""

#: src/commands/cargo-login.md:23 src/commands/cargo-logout.md:19
msgid ""
"If a registry has a credential-provider specified, it will be used. "
"Otherwise, the providers from the config value `registry.global-credential-"
"providers` will be attempted, starting from the end of the list."
msgstr ""

#: src/commands/cargo-login.md:27
msgid "The _token_ will be read from stdin."
msgstr ""

#: src/commands/cargo-login.md:29
msgid ""
"The API token for crates.io may be retrieved from <https://crates.io/me>."
msgstr ""

#: src/commands/cargo-login.md:31
msgid ""
"Take care to keep the token secret, it should not be shared with anyone else."
msgstr ""

#: src/commands/cargo-login.md:35
msgid "Login Options"
msgstr ""

#: src/commands/cargo-login.md:129
msgid "Save the token for the default registry:"
msgstr ""

#: src/commands/cargo-login.md:133
msgid "Save the token for a specific registry:"
msgstr ""

#: src/commands/cargo-login.md:138
msgid ""
"[cargo(1)](cargo.html), [cargo-logout(1)](cargo-logout.html), [cargo-"
"publish(1)](cargo-publish.html)"
msgstr ""

#: src/commands/cargo-logout.md:1
msgid "cargo-logout(1)"
msgstr ""

#: src/commands/cargo-logout.md:5
msgid "cargo-logout --- Remove an API token from the registry locally"
msgstr ""

#: src/commands/cargo-logout.md:9
msgid "`cargo logout` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-logout.md:13
msgid "This command will run a credential provider to remove a saved token."
msgstr ""

#: src/commands/cargo-logout.md:15
msgid ""
"For the default `cargo:token` credential provider, credentials are stored in "
"`$CARGO_HOME/credentials.toml` where `$CARGO_HOME` defaults to `.cargo` in "
"your home directory."
msgstr ""

#: src/commands/cargo-logout.md:23
msgid ""
"If `--registry` is not specified, then the credentials for the default "
"registry will be removed (configured by [`registry.default`](../reference/"
"config.html#registrydefault), which defaults to <https://crates.io/>)."
msgstr ""

#: src/commands/cargo-logout.md:28
msgid ""
"This will not revoke the token on the server. If you need to revoke the "
"token, visit the registry website and follow its instructions (see <https://"
"crates.io/me> to revoke the token for <https://crates.io/>)."
msgstr ""

#: src/commands/cargo-logout.md:34
msgid "Logout Options"
msgstr ""

#: src/commands/cargo-logout.md:128
msgid "Remove the default registry token:"
msgstr ""

#: src/commands/cargo-logout.md:132
msgid "Remove the token for a specific registry:"
msgstr ""

#: src/commands/cargo-logout.md:137
msgid "[cargo(1)](cargo.html), [cargo-login(1)](cargo-login.html)"
msgstr ""

#: src/commands/cargo-owner.md:1
msgid "cargo-owner(1)"
msgstr ""

#: src/commands/cargo-owner.md:5
msgid "cargo-owner --- Manage the owners of a crate on the registry"
msgstr ""

#: src/commands/cargo-owner.md:9
msgid ""
"`cargo owner` \\[_options_\\] `--add` _login_ \\[_crate_\\]  \n"
"`cargo owner` \\[_options_\\] `--remove` _login_ \\[_crate_\\]  \n"
"`cargo owner` \\[_options_\\] `--list` \\[_crate_\\]"
msgstr ""

#: src/commands/cargo-owner.md:15
msgid ""
"This command will modify the owners for a crate on the registry. Owners of a "
"crate can upload new versions and yank old versions. Non-team owners can "
"also modify the set of owners, so take care!"
msgstr ""

#: src/commands/cargo-owner.md:19 src/commands/cargo-publish.md:27
#: src/commands/cargo-yank.md:22
msgid ""
"This command requires you to be authenticated with either the `--token` "
"option or using [cargo-login(1)](cargo-login.html)."
msgstr ""

#: src/commands/cargo-owner.md:22 src/commands/cargo-yank.md:25
msgid ""
"If the crate name is not specified, it will use the package name from the "
"current directory."
msgstr ""

#: src/commands/cargo-owner.md:25
msgid ""
"See [the reference](../reference/publishing.html#cargo-owner) for more "
"information about owners and publishing."
msgstr ""

#: src/commands/cargo-owner.md:30
msgid "Owner Options"
msgstr ""

#: src/commands/cargo-owner.md:156
msgid "List owners of a package:"
msgstr ""

#: src/commands/cargo-owner.md:160
msgid "Invite an owner to a package:"
msgstr ""

#: src/commands/cargo-owner.md:164
msgid "Remove an owner from a package:"
msgstr ""

#: src/commands/cargo-owner.md:169 src/commands/cargo-yank.md:207
msgid ""
"[cargo(1)](cargo.html), [cargo-login(1)](cargo-login.html), [cargo-"
"publish(1)](cargo-publish.html)"
msgstr ""

#: src/commands/cargo-package.md:1
msgid "cargo-package(1)"
msgstr ""

#: src/commands/cargo-package.md:4
msgid ""
"cargo-package --- Assemble the local package into a distributable tarball"
msgstr ""

#: src/commands/cargo-package.md:8
msgid "`cargo package` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-package.md:12
msgid ""
"This command will create a distributable, compressed `.crate` file with the "
"source code of the package in the current directory. The resulting file will "
"be stored in the `target/package` directory. This performs the following "
"steps:"
msgstr ""

#: src/commands/cargo-package.md:16
msgid "Load and check the current workspace, performing some basic checks."
msgstr ""

#: src/commands/cargo-package.md:17
msgid ""
"Path dependencies are not allowed unless they have a version key. Cargo will "
"ignore the path key for dependencies in published packages. `dev-"
"dependencies` do not have this restriction."
msgstr ""

#: src/commands/cargo-package.md:20
msgid "Create the compressed `.crate` file."
msgstr ""

#: src/commands/cargo-package.md:21
msgid "The original `Cargo.toml` file is rewritten and normalized."
msgstr ""

#: src/commands/cargo-package.md:22
msgid ""
"`[patch]`, `[replace]`, and `[workspace]` sections are removed from the "
"manifest."
msgstr ""

#: src/commands/cargo-package.md:24
msgid ""
"`Cargo.lock` is always included. When missing, a new lock file will be "
"generated. [cargo-install(1)](cargo-install.html) will use the packaged lock "
"file if the `--locked` flag is used."
msgstr ""

#: src/commands/cargo-package.md:27
msgid ""
"A `.cargo_vcs_info.json` file is included that contains information about "
"the current VCS checkout hash if available, as well as a flag if the "
"worktree is dirty."
msgstr ""

#: src/commands/cargo-package.md:30
msgid "Symlinks are flattened to their target files."
msgstr ""

#: src/commands/cargo-package.md:31
msgid ""
"Files and directories are included or excluded based on rules mentioned in "
"[the `[include]` and `[exclude]` fields](../reference/manifest.html#the-"
"exclude-and-include-fields)."
msgstr ""

#: src/commands/cargo-package.md:34
msgid "Extract the `.crate` file and build it to verify it can build."
msgstr ""

#: src/commands/cargo-package.md:35
msgid ""
"This will rebuild your package from scratch to ensure that it can be built "
"from a pristine state. The `--no-verify` flag can be used to skip this step."
msgstr ""

#: src/commands/cargo-package.md:38
msgid "Check that build scripts did not modify any source files."
msgstr ""

#: src/commands/cargo-package.md:40
msgid ""
"The list of files included can be controlled with the `include` and "
"`exclude` fields in the manifest."
msgstr ""

#: src/commands/cargo-package.md:43 src/commands/cargo-publish.md:30
msgid ""
"See [the reference](../reference/publishing.html) for more details about "
"packaging and publishing."
msgstr ""

#: src/commands/cargo-package.md:46
msgid ".cargo_vcs_info.json format"
msgstr ""

#: src/commands/cargo-package.md:48
msgid "Will generate a `.cargo_vcs_info.json` in the following format"
msgstr ""

#: src/commands/cargo-package.md:52
msgid "\"git\""
msgstr ""

#: src/commands/cargo-package.md:53
msgid "\"sha1\""
msgstr ""

#: src/commands/cargo-package.md:53
msgid "\"aac20b6e7e543e6dd4118b246c77225e3a3a1302\""
msgstr ""

#: src/commands/cargo-package.md:54
msgid "\"dirty\""
msgstr ""

#: src/commands/cargo-package.md:56
msgid "\"path_in_vcs\""
msgstr ""

#: src/commands/cargo-package.md:56
msgid "\"\""
msgstr ""

#: src/commands/cargo-package.md:60
msgid ""
"`dirty` indicates that the Git worktree was dirty when the package was built."
msgstr ""

#: src/commands/cargo-package.md:63
msgid ""
"`path_in_vcs` will be set to a repo-relative path for packages in "
"subdirectories of the version control repository."
msgstr ""

#: src/commands/cargo-package.md:66
msgid ""
"The compatibility of this file is maintained under the same policy as the "
"JSON output of [cargo-metadata(1)](cargo-metadata.html)."
msgstr ""

#: src/commands/cargo-package.md:69
msgid ""
"Note that this file provides a best-effort snapshot of the VCS information. "
"However, the provenance of the package is not verified. There is no "
"guarantee that the source code in the tarball matches the VCS information."
msgstr ""

#: src/commands/cargo-package.md:75
msgid "Package Options"
msgstr ""

#: src/commands/cargo-package.md:360
msgid "Create a compressed `.crate` file of the current package:"
msgstr ""

#: src/commands/cargo-package.md:365
msgid "[cargo(1)](cargo.html), [cargo-publish(1)](cargo-publish.html)"
msgstr ""

#: src/commands/cargo-publish.md:1
msgid "cargo-publish(1)"
msgstr ""

#: src/commands/cargo-publish.md:4
msgid "cargo-publish --- Upload a package to the registry"
msgstr ""

#: src/commands/cargo-publish.md:8
msgid "`cargo publish` \\[_options_\\]"
msgstr ""

#: src/commands/cargo-publish.md:12
msgid ""
"This command will create a distributable, compressed `.crate` file with the "
"source code of the package in the current directory and upload it to a "
"registry. The default registry is <https://crates.io>. This performs the "
"following steps:"
msgstr ""

#: src/commands/cargo-publish.md:17
msgid "Performs a few checks, including:"
msgstr ""

#: src/commands/cargo-publish.md:18
msgid ""
"Checks the `package.publish` key in the manifest for restrictions on which "
"registries you are allowed to publish to."
msgstr ""

#: src/commands/cargo-publish.md:20
msgid ""
"Create a `.crate` file by following the steps in [cargo-package(1)](cargo-"
"package.html)."
msgstr ""

#: src/commands/cargo-publish.md:21
msgid ""
"Upload the crate to the registry. The server will perform additional checks "
"on the crate."
msgstr ""

#: src/commands/cargo-publish.md:23
msgid ""
"The client will poll waiting for the package to appear in the index, and may "
"timeout. In that case, you will need to check for completion manually. This "
"timeout does not affect the upload."
msgstr ""

#: src/commands/cargo-publish.md:35
msgid "Publish Options"
msgstr ""

#: src/commands/cargo-publish.md:91
msgid ""
"Selecting more than one package is unstable and available only on the "
"[nightly channel](https://doc.rust-lang.org/book/appendix-07-nightly-"
"rust.html) and requires the `-Z package-workspace` flag to enable. See "
"<https://github.com/rust-lang/cargo/issues/10948> for more information."
msgstr ""

#: src/commands/cargo-publish.md:345
msgid "Publish the current package:"
msgstr ""

#: src/commands/cargo-publish.md:350
msgid ""
"[cargo(1)](cargo.html), [cargo-package(1)](cargo-package.html), [cargo-"
"login(1)](cargo-login.html)"
msgstr ""

#: src/commands/cargo-yank.md:1
msgid "cargo-yank(1)"
msgstr ""

#: src/commands/cargo-yank.md:5
msgid "cargo-yank --- Remove a pushed crate from the index"
msgstr ""

#: src/commands/cargo-yank.md:9
msgid ""
"`cargo yank` \\[_options_\\] _crate_@_version_  \n"
"`cargo yank` \\[_options_\\] `--version` _version_ \\[_crate_\\]"
msgstr ""

#: src/commands/cargo-yank.md:14
msgid ""
"The yank command removes a previously published crate's version from the "
"server's index. This command does not delete any data, and the crate will "
"still be available for download via the registry's download link."
msgstr ""

#: src/commands/cargo-yank.md:18
msgid ""
"Cargo will not use a yanked version for any new project or checkout without "
"a pre-existing lockfile, and will generate an error if there are no longer "
"any compatible versions for your crate."
msgstr ""

#: src/commands/cargo-yank.md:28
msgid "How yank works"
msgstr ""

#: src/commands/cargo-yank.md:30
msgid ""
"For example, the `foo` crate published version `1.5.0` and another crate "
"`bar` declared a dependency on version `foo = \"1.5\"`. Now `foo` releases a "
"new, but not semver compatible, version `2.0.0`, and finds a critical issue "
"with `1.5.0`. If `1.5.0` is yanked, no new project or checkout without an "
"existing lockfile will be able to use crate `bar` as it relies on `1.5`."
msgstr ""

#: src/commands/cargo-yank.md:36
msgid ""
"In this case, the maintainers of `foo` should first publish a semver "
"compatible version such as `1.5.1` prior to yanking `1.5.0` so that `bar` "
"and all projects that depend on `bar` will continue to work."
msgstr ""

#: src/commands/cargo-yank.md:40
msgid ""
"As another example, consider a crate `bar` with published versions `1.5.0`, "
"`1.5.1`, `1.5.2`, `2.0.0` and `3.0.0`. The following table identifies the "
"versions cargo could use in the absence of a lockfile for different SemVer "
"requirements, following a given release being yanked:"
msgstr ""

#: src/commands/cargo-yank.md:45
msgid "Yanked Version / SemVer requirement"
msgstr ""

#: src/commands/cargo-yank.md:45
msgid "`bar = \"1.5.0\"`"
msgstr ""

#: src/commands/cargo-yank.md:45
msgid "`bar = \"=1.5.0\"`"
msgstr ""

#: src/commands/cargo-yank.md:45
msgid "`bar = \"2.0.0\"`"
msgstr ""

#: src/commands/cargo-yank.md:47
msgid "`1.5.0`"
msgstr ""

#: src/commands/cargo-yank.md:47
msgid "Use either `1.5.1` or `1.5.2`"
msgstr ""

#: src/commands/cargo-yank.md:47 src/commands/cargo-yank.md:49
msgid "**Return Error**"
msgstr ""

#: src/commands/cargo-yank.md:47 src/commands/cargo-yank.md:48
msgid "Use `2.0.0`"
msgstr ""

#: src/commands/cargo-yank.md:48
msgid "`1.5.1`"
msgstr ""

#: src/commands/cargo-yank.md:48
msgid "Use either `1.5.0` or `1.5.2`"
msgstr ""

#: src/commands/cargo-yank.md:48 src/commands/cargo-yank.md:49
msgid "Use `1.5.0`"
msgstr ""

#: src/commands/cargo-yank.md:49
msgid "`2.0.0`"
msgstr ""

#: src/commands/cargo-yank.md:49
msgid "Use either `1.5.0`, `1.5.1` or `1.5.2`"
msgstr ""

#: src/commands/cargo-yank.md:51
msgid "When to yank"
msgstr ""

#: src/commands/cargo-yank.md:53
msgid ""
"Crates should only be yanked in exceptional circumstances, for example, an "
"accidental publish, an unintentional SemVer breakages, or a significantly "
"broken and unusable crate. In the case of security vulnerabilities, [RustSec]"
"(https://rustsec.org/) is typically a less disruptive mechanism to inform "
"users and encourage them to upgrade, and avoids the possibility of "
"significant downstream disruption irrespective of susceptibility to the "
"vulnerability in question."
msgstr ""

#: src/commands/cargo-yank.md:60
msgid ""
"A common workflow is to yank a crate having already published a semver "
"compatible version, to reduce the probability of preventing dependent crates "
"from compiling."
msgstr ""

#: src/commands/cargo-yank.md:64
msgid ""
"When addressing copyright, licensing, or personal data issues with a "
"published crate, simply yanking it may not suffice. In such cases, contact "
"the maintainers of the registry you used. For crates.io, refer to their "
"[policies](https://crates.io/policies) and contact them at <help@crates.io>."
msgstr ""

#: src/commands/cargo-yank.md:69
msgid ""
"If credentials have been leaked, the recommended course of action is to "
"revoke them immediately. Once a crate has been published, it is impossible "
"to determine if the leaked credentials have been copied. Yanking the crate "
"only prevents new users from downloading it, but cannot stop those who have "
"already downloaded it from keeping or even spreading the leaked credentials."
msgstr ""

#: src/commands/cargo-yank.md:80
msgid "Yank Options"
msgstr ""

#: src/commands/cargo-yank.md:202
msgid "Yank a crate from the index:"
msgstr ""

#: src/commands/deprecated-and-removed.md:1
msgid "Deprecated and Removed Commands"
msgstr ""

#: src/commands/deprecated-and-removed.md:3
msgid ""
"These commands have been deprecated or removed in early Rust releases. "
"Deprecated commands receive only critical bug fixes, and may be removed in "
"future versions. Removed commands are no longer functional and are "
"unsupported."
msgstr ""

#: src/commands/deprecated-and-removed.md:8
msgid "`read-manifest` --- deprecated since Rust 1.13"
msgstr ""

#: src/commands/deprecated-and-removed.md:9
msgid "`git-checkout` --- removed since Rust 1.44"
msgstr ""

#: src/commands/deprecated-and-removed.md:10
msgid "`verify-project` --- deprecated since Rust 1.84"
msgstr ""

#: src/faq.md:1
msgid "Frequently Asked Questions"
msgstr ""

#: src/faq.md:3
msgid "Is the plan to use GitHub as a package repository?"
msgstr ""

#: src/faq.md:5
msgid ""
"No. The plan for Cargo is to use [crates.io](https://crates.io/), like npm "
"or Rubygems do with [npmjs.com](https://www.npmjs.com) and [rubygems.org]"
"(https://rubygems.org)."
msgstr ""

#: src/faq.md:8
msgid ""
"We plan to support git repositories as a source of packages forever, because "
"they can be used for early development and temporary patches, even when "
"people use the registry as the primary source of packages."
msgstr ""

#: src/faq.md:12
msgid "Why build crates.io rather than use GitHub as a registry?"
msgstr ""

#: src/faq.md:14
msgid ""
"We think that it’s very important to support multiple ways to download "
"packages, including downloading from GitHub and copying packages into your "
"package itself."
msgstr ""

#: src/faq.md:18
msgid ""
"That said, we think that [crates.io](https://crates.io/) offers a number of "
"important benefits, and will likely become the primary way that people "
"download packages in Cargo."
msgstr ""

#: src/faq.md:21
msgid ""
"For precedent, both Node.js’s [npm](https://www.npmjs.com) and Ruby’s "
"[bundler](https://bundler.io) support both a central registry model as well "
"as a Git-based model, and most packages are downloaded through the registry "
"in those ecosystems, with an important minority of packages making use of "
"git-based packages."
msgstr ""

#: src/faq.md:30
msgid ""
"Some of the advantages that make a central registry popular in other "
"languages include:"
msgstr ""

#: src/faq.md:33
msgid ""
"**Discoverability**. A central registry provides an easy place to look for "
"existing packages. Combined with tagging, this also makes it possible for a "
"registry to provide ecosystem-wide information, such as a list of the most "
"popular or most-depended-on packages."
msgstr ""

#: src/faq.md:37
msgid ""
"**Speed**. A central registry makes it possible to easily fetch just the "
"metadata for packages quickly and efficiently, and then to efficiently "
"download just the published package, and not other bloat that happens to "
"exist in the repository. This adds up to a significant improvement in the "
"speed of dependency resolution and fetching. As dependency graphs scale up, "
"downloading all of the git repositories bogs down fast. Also remember that "
"not everybody has a high-speed, low-latency Internet connection."
msgstr ""

#: src/faq.md:46
msgid "Will Cargo work with C code (or other languages)?"
msgstr ""

#: src/faq.md:48 src/faq.md:97
msgid "Yes!"
msgstr ""

#: src/faq.md:50
msgid ""
"Cargo handles compiling Rust code, but we know that many Rust packages link "
"against C code. We also know that there are decades of tooling built up "
"around compiling languages other than Rust."
msgstr ""

#: src/faq.md:54
msgid ""
"Our solution: Cargo allows a package to [specify a script](reference/build-"
"scripts.md) (written in Rust) to run before invoking `rustc`. Rust is "
"leveraged to implement platform-specific configuration and refactor out "
"common build functionality among packages."
msgstr ""

#: src/faq.md:59
msgid "Can Cargo be used inside of `make` (or `ninja`, or ...)"
msgstr ""

#: src/faq.md:61
msgid ""
"Indeed. While we intend Cargo to be useful as a standalone way to compile "
"Rust packages at the top-level, we know that some people will want to invoke "
"Cargo from other build tools."
msgstr ""

#: src/faq.md:65
msgid ""
"We have designed Cargo to work well in those contexts, paying attention to "
"things like error codes and machine-readable output modes. We still have "
"some work to do on those fronts, but using Cargo in the context of "
"conventional scripts is something we designed for from the beginning and "
"will continue to prioritize."
msgstr ""

#: src/faq.md:71
msgid "Does Cargo handle multi-platform packages or cross-compilation?"
msgstr ""

#: src/faq.md:73
msgid ""
"Rust itself provides facilities for configuring sections of code based on "
"the platform. Cargo also supports [platform-specific dependencies](reference/"
"specifying-dependencies.md#platform-specific-dependencies), and we plan to "
"support more per-platform configuration in `Cargo.toml` in the future."
msgstr ""

#: src/faq.md:80
msgid ""
"In the longer-term, we’re looking at ways to conveniently cross-compile "
"packages using Cargo."
msgstr ""

#: src/faq.md:83
msgid "Does Cargo support environments, like `production` or `test`?"
msgstr ""

#: src/faq.md:85
msgid ""
"We support environments through the use of [profiles](reference/profiles.md) "
"to support:"
msgstr ""

#: src/faq.md:89
msgid ""
"environment-specific flags (like `-g --opt-level=0` for development and `--"
"opt-level=3` for production)."
msgstr ""

#: src/faq.md:91
msgid ""
"environment-specific dependencies (like `hamcrest` for test assertions)."
msgstr ""

#: src/faq.md:92
msgid "environment-specific `#[cfg]`"
msgstr ""

#: src/faq.md:93
msgid "a `cargo test` command"
msgstr ""

#: src/faq.md:95
msgid "Does Cargo work on Windows?"
msgstr ""

#: src/faq.md:99
msgid ""
"All commits to Cargo are required to pass the local test suite on Windows. "
"If you encounter an issue while running on Windows, we consider it a bug, so "
"[please file an issue](https://github.com/rust-lang/cargo/issues)."
msgstr ""

#: src/faq.md:105
msgid "Why have `Cargo.lock` in version control?"
msgstr ""

#: src/faq.md:107
msgid ""
"While [`cargo new`](commands/cargo-new.md) defaults to tracking `Cargo.lock` "
"in version control, whether you do is dependent on the needs of your package."
msgstr ""

#: src/faq.md:110
msgid ""
"The purpose of a `Cargo.lock` lockfile is to describe the state of the world "
"at the time of a successful build. Cargo uses the lockfile to provide "
"deterministic builds at different times and on different systems, by "
"ensuring that the exact same dependencies and versions are used as when the "
"`Cargo.lock` file was originally generated."
msgstr ""

#: src/faq.md:117
msgid "Deterministic builds help with"
msgstr ""

#: src/faq.md:118
msgid "Running `git bisect` to find the root cause of a bug"
msgstr ""

#: src/faq.md:119
msgid "Ensuring CI only fails due to new commits and not external factors"
msgstr ""

#: src/faq.md:120
msgid ""
"Reducing confusion when contributors see different behavior as compared to "
"other contributors or CI"
msgstr ""

#: src/faq.md:123
msgid ""
"Having this snapshot of dependencies can also help when projects need to be "
"verified against consistent versions of dependencies, like when"
msgstr ""

#: src/faq.md:125
msgid ""
"Verifying a minimum-supported Rust version (MSRV) that is less than the "
"latest version of a dependency supports"
msgstr ""

#: src/faq.md:127
msgid ""
"Verifying human readable output which won't have compatibility guarantees "
"(e.g. snapshot testing error messages to ensure they are \"understandable\", "
"a metric too fuzzy to automate)"
msgstr ""

#: src/faq.md:131
msgid ""
"However, this determinism can give a false sense of security because "
"`Cargo.lock` does not affect the consumers of your package, only "
"`Cargo.toml` does that. For example:"
msgstr ""

#: src/faq.md:134
msgid ""
"[`cargo install`](commands/cargo-install.md) will select the latest "
"dependencies unless [`--locked`](commands/cargo.html#option-cargo---locked) "
"is passed in."
msgstr ""

#: src/faq.md:136
msgid ""
"New dependencies, like those added with [`cargo add`](commands/cargo-"
"add.md), will be locked to the latest version"
msgstr ""

#: src/faq.md:138
msgid "The lockfile can also be a source of merge conflicts."
msgstr ""

#: src/faq.md:140
msgid ""
"For strategies to verify newer versions of dependencies via CI, see "
"[Verifying Latest Dependencies](guide/continuous-integration.md#verifying-"
"latest-dependencies)."
msgstr ""

#: src/faq.md:147
msgid "Can libraries use `*` as a version for their dependencies?"
msgstr ""

#: src/faq.md:149
msgid ""
"**As of January 22nd, 2016, [crates.io](https://crates.io/) rejects all "
"packages (not just libraries) with wildcard dependency constraints.**"
msgstr ""

#: src/faq.md:152
msgid ""
"While libraries _can_, strictly speaking, they should not. A version "
"requirement of `*` says “This will work with every version ever”, which is "
"never going to be true. Libraries should always specify the range that they "
"do work with, even if it’s something as general as “every 1.x.y version”."
msgstr ""

#: src/faq.md:157
msgid "Why `Cargo.toml`?"
msgstr ""

#: src/faq.md:159
msgid ""
"As one of the most frequent interactions with Cargo, the question of why the "
"configuration file is named `Cargo.toml` arises from time to time. The "
"leading capital-`C` was chosen to ensure that the manifest was grouped with "
"other similar configuration files in directory listings. Sorting files often "
"puts capital letters before lowercase letters, ensuring files like "
"`Makefile` and `Cargo.toml` are placed together. The trailing `.toml` was "
"chosen to emphasize the fact that the file is in the [TOML configuration "
"format](https://toml.io/)."
msgstr ""

#: src/faq.md:168
msgid ""
"Cargo does not allow other names such as `cargo.toml` or `Cargofile` to "
"emphasize the ease of how a Cargo repository can be identified. An option of "
"many possible names has historically led to confusion where one case was "
"handled but others were accidentally forgotten."
msgstr ""

#: src/faq.md:175
msgid "How can Cargo work offline?"
msgstr ""

#: src/faq.md:177
msgid ""
"The [`--offline`](commands/cargo.html#option-cargo---offline) or [`--frozen`]"
"(commands/cargo.html#option-cargo---frozen) flags tell Cargo to not touch "
"the network. It returns an error in case it would access the network. You "
"can use [`cargo fetch`](commands/cargo-fetch.md) in one project to download "
"dependencies before going offline, and then use those same dependencies in "
"another project. Refer to [configuration value](reference/"
"config.md#netoffline)) to set via Cargo configuration."
msgstr ""

#: src/faq.md:187
msgid ""
"Vendoring is also related, for more information see documentation on [source "
"replacement](reference/source-replacement.md)."
msgstr ""

#: src/faq.md:194
msgid "Why is Cargo rebuilding my code?"
msgstr ""

#: src/faq.md:196
msgid ""
"Cargo is responsible for incrementally compiling crates in your project. "
"This means that if you type `cargo build` twice the second one shouldn't "
"rebuild your crates.io dependencies, for example. Nevertheless bugs arise "
"and Cargo can sometimes rebuild code when you're not expecting it!"
msgstr ""

#: src/faq.md:201
msgid ""
"We've long [wanted to provide better diagnostics about this](https://"
"github.com/rust-lang/cargo/issues/2904) but unfortunately haven't been able "
"to make progress on that issue in quite some time. In the meantime, however, "
"you can debug a rebuild at least a little by setting the `CARGO_LOG` "
"environment variable:"
msgstr ""

#: src/faq.md:211
msgid ""
"This will cause Cargo to print out a lot of information about diagnostics "
"and rebuilding. This can often contain clues as to why your project is "
"getting rebuilt, although you'll often need to connect some dots yourself "
"since this output isn't super easy to read just yet. Note that the "
"`CARGO_LOG` needs to be set for the command that rebuilds when you think it "
"should not. Unfortunately Cargo has no way right now of after-the-fact "
"debugging \"why was that rebuilt?\""
msgstr ""

#: src/faq.md:218
msgid ""
"Some issues we've seen historically which can cause crates to get rebuilt "
"are:"
msgstr ""

#: src/faq.md:220
msgid ""
"A build script prints `cargo::rerun-if-changed=foo` where `foo` is a file "
"that doesn't exist and nothing generates it. In this case Cargo will keep "
"running the build script thinking it will generate the file but nothing ever "
"does. The fix is to avoid printing `rerun-if-changed` in this scenario."
msgstr ""

#: src/faq.md:225
msgid ""
"Two successive Cargo builds may differ in the set of features enabled for "
"some dependencies. For example if the first build command builds the whole "
"workspace and the second command builds only one crate, this may cause a "
"dependency on crates.io to have a different set of features enabled, causing "
"it and everything that depends on it to get rebuilt. There's unfortunately "
"not really a great fix for this, although if possible it's best to have the "
"set of features enabled on a crate constant regardless of what you're "
"building in your workspace."
msgstr ""

#: src/faq.md:234
msgid ""
"Some filesystems exhibit unusual behavior around timestamps. Cargo primarily "
"uses timestamps on files to govern whether rebuilding needs to happen, but "
"if you're using a nonstandard filesystem it may be affecting the timestamps "
"somehow (e.g. truncating them, causing them to drift, etc). In this "
"scenario, feel free to open an issue and we can see if we can accommodate "
"the filesystem somehow."
msgstr ""

#: src/faq.md:241
msgid ""
"A concurrent build process is either deleting artifacts or modifying files. "
"Sometimes you might have a background process that either tries to build or "
"check your project. These background processes might surprisingly delete "
"some build artifacts or touch files (or maybe just by accident), which can "
"cause rebuilds to look spurious! The best fix here would be to wrangle the "
"background process to avoid clashing with your work."
msgstr ""

#: src/faq.md:248
msgid ""
"If after trying to debug your issue, however, you're still running into "
"problems then feel free to [open an issue](https://github.com/rust-lang/"
"cargo/issues/new)!"
msgstr ""

#: src/faq.md:252
msgid "What does \"version conflict\" mean and how to resolve it?"
msgstr ""

#: src/faq.md:254
msgid "failed to select a version for `x` which could resolve this conflict"
msgstr ""

#: src/faq.md:256
msgid "Have you seen the error message above?"
msgstr ""

#: src/faq.md:258
msgid ""
"This is one of the most annoying error message for Cargo users. There are "
"several situations may lead us to a version conflict. Below we'll walk "
"through possible causes and provide diagnostic techniques to help you out "
"there:"
msgstr ""

#: src/faq.md:262
msgid ""
"The project and its dependencies use [links](https://doc.rust-lang.org/cargo/"
"reference/resolver.html#links) to repeatedly link the local library. Cargo "
"forbids linking two packages with the same native library, so even with "
"multiple layers of dependencies it is not allowed. In this case, the error "
"message will prompt: `Only one package in the dependency graph may specify "
"the same links value`, you may need to manually check and delete duplicate "
"link values. The community also have [conventions in place](https://doc.rust-"
"lang.org/cargo/reference/build-scripts.html#-sys-packages) to alleviate this."
msgstr ""

#: src/faq.md:269
msgid ""
"When depending on different crates in the project, if these crates use the "
"same dependent library, but the version used is restricted, making it "
"impossible to determine the correct version, it will also cause conflicts. "
"The error message will prompt: `all possible versions conflict with "
"previously selected packages`. You may need to modify the version "
"requirements to make them consistent."
msgstr ""

#: src/faq.md:275
msgid ""
"If there are multiple versions of dependencies in the project, when using "
"[`direct-minimal-versions`](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#direct-minimal-versions), the minimum version "
"requirements cannot be met, which will cause conflicts. You may need to "
"modify version requirements of your direct dependencies to meet the minimum "
"SemVer version accordingly."
msgstr ""

#: src/faq.md:280
msgid ""
"If the dependent crate does not have the features you choose, it will also "
"cause conflicts. At this time, you need to check the dependent version and "
"its features."
msgstr ""

#: src/faq.md:284
msgid ""
"Conflicts may occur when merging branches or PRs, if there are non-trivial "
"conflicts, you can reset all \"yours\" changes, fix all other conflicts in "
"the branch, and then run some cargo command (like `cargo tree` or `cargo "
"check`), which should re-update the lockfile with your own local changes. If "
"you previously ran some `cargo update` commands in your branch, you can re-"
"run them that this time. The community has been looking to resolve merge "
"conflicts with `Cargo.lock` and `Cargo.toml` using a [custom merge tool]"
"(https://github.com/rust-lang/cargo/issues/1818)."
msgstr ""

#: src/CHANGELOG.md:3
msgid "Cargo 1.87 (2025-05-15)"
msgstr ""

#: src/CHANGELOG.md:4
msgid ""
"[ce948f46...HEAD](https://github.com/rust-lang/cargo/compare/ce948f46...HEAD)"
msgstr ""

#: src/CHANGELOG.md:6 src/CHANGELOG.md:30 src/CHANGELOG.md:189
#: src/CHANGELOG.md:339 src/CHANGELOG.md:507 src/CHANGELOG.md:691
#: src/CHANGELOG.md:832 src/CHANGELOG.md:980 src/CHANGELOG.md:1153
#: src/CHANGELOG.md:1334 src/CHANGELOG.md:1552 src/CHANGELOG.md:1700
#: src/CHANGELOG.md:1914 src/CHANGELOG.md:2099 src/CHANGELOG.md:2305
#: src/CHANGELOG.md:2463 src/CHANGELOG.md:2619 src/CHANGELOG.md:2798
#: src/CHANGELOG.md:2945 src/CHANGELOG.md:3102 src/CHANGELOG.md:3203
#: src/CHANGELOG.md:3298 src/CHANGELOG.md:3399 src/CHANGELOG.md:3471
#: src/CHANGELOG.md:3543 src/CHANGELOG.md:3603 src/CHANGELOG.md:3697
#: src/CHANGELOG.md:3759 src/CHANGELOG.md:3842 src/CHANGELOG.md:3909
#: src/CHANGELOG.md:3952 src/CHANGELOG.md:4012 src/CHANGELOG.md:4115
#: src/CHANGELOG.md:4232 src/CHANGELOG.md:4310 src/CHANGELOG.md:4378
#: src/CHANGELOG.md:4458 src/CHANGELOG.md:4543 src/CHANGELOG.md:4610
#: src/CHANGELOG.md:4669 src/CHANGELOG.md:4713 src/CHANGELOG.md:4812
#: src/CHANGELOG.md:4915 src/CHANGELOG.md:5067 src/CHANGELOG.md:5173
#: src/CHANGELOG.md:5258 src/CHANGELOG.md:5337 src/CHANGELOG.md:5392
#: src/CHANGELOG.md:5475 src/CHANGELOG.md:5583 src/CHANGELOG.md:5674
#: src/CHANGELOG.md:5757 src/CHANGELOG.md:5849 src/CHANGELOG.md:5931
#: src/CHANGELOG.md:5986 src/CHANGELOG.md:6072 src/CHANGELOG.md:6156
#: src/CHANGELOG.md:6228
msgid "Added"
msgstr ""

#: src/CHANGELOG.md:8 src/CHANGELOG.md:32 src/CHANGELOG.md:203
#: src/CHANGELOG.md:358 src/CHANGELOG.md:518 src/CHANGELOG.md:699
#: src/CHANGELOG.md:834 src/CHANGELOG.md:1011 src/CHANGELOG.md:1169
#: src/CHANGELOG.md:1351 src/CHANGELOG.md:1569 src/CHANGELOG.md:1719
#: src/CHANGELOG.md:1929 src/CHANGELOG.md:2140 src/CHANGELOG.md:2312
#: src/CHANGELOG.md:2475 src/CHANGELOG.md:2629 src/CHANGELOG.md:2812
#: src/CHANGELOG.md:2955 src/CHANGELOG.md:3135 src/CHANGELOG.md:3215
#: src/CHANGELOG.md:3314 src/CHANGELOG.md:3407 src/CHANGELOG.md:3493
#: src/CHANGELOG.md:3552 src/CHANGELOG.md:3633 src/CHANGELOG.md:3699
#: src/CHANGELOG.md:3789 src/CHANGELOG.md:3864 src/CHANGELOG.md:3916
#: src/CHANGELOG.md:3968 src/CHANGELOG.md:4047 src/CHANGELOG.md:4134
#: src/CHANGELOG.md:4250 src/CHANGELOG.md:4312 src/CHANGELOG.md:4383
#: src/CHANGELOG.md:4476 src/CHANGELOG.md:4557 src/CHANGELOG.md:4621
#: src/CHANGELOG.md:4686 src/CHANGELOG.md:4730 src/CHANGELOG.md:4849
#: src/CHANGELOG.md:4917 src/CHANGELOG.md:5079 src/CHANGELOG.md:5184
#: src/CHANGELOG.md:5271 src/CHANGELOG.md:5364 src/CHANGELOG.md:5404
#: src/CHANGELOG.md:5484 src/CHANGELOG.md:5604 src/CHANGELOG.md:5701
#: src/CHANGELOG.md:5765 src/CHANGELOG.md:5854 src/CHANGELOG.md:5944
#: src/CHANGELOG.md:6012 src/CHANGELOG.md:6080 src/CHANGELOG.md:6173
#: src/CHANGELOG.md:6268
msgid "Changed"
msgstr ""

#: src/CHANGELOG.md:10
msgid ""
"cargo-add: collapse large feature lists [\\#15200](https://github.com/rust-"
"lang/cargo/pull/15200)"
msgstr ""

#: src/CHANGELOG.md:13 src/CHANGELOG.md:68 src/CHANGELOG.md:232
#: src/CHANGELOG.md:398 src/CHANGELOG.md:551 src/CHANGELOG.md:708
#: src/CHANGELOG.md:853 src/CHANGELOG.md:1036 src/CHANGELOG.md:1206
#: src/CHANGELOG.md:1395 src/CHANGELOG.md:1544 src/CHANGELOG.md:1585
#: src/CHANGELOG.md:1738 src/CHANGELOG.md:1968 src/CHANGELOG.md:2192
#: src/CHANGELOG.md:2332 src/CHANGELOG.md:2500 src/CHANGELOG.md:2610
#: src/CHANGELOG.md:2656 src/CHANGELOG.md:2834 src/CHANGELOG.md:2978
#: src/CHANGELOG.md:3151 src/CHANGELOG.md:3248 src/CHANGELOG.md:3290
#: src/CHANGELOG.md:3349 src/CHANGELOG.md:3451 src/CHANGELOG.md:3515
#: src/CHANGELOG.md:3572 src/CHANGELOG.md:3657 src/CHANGELOG.md:3721
#: src/CHANGELOG.md:3815 src/CHANGELOG.md:3882 src/CHANGELOG.md:3924
#: src/CHANGELOG.md:3996 src/CHANGELOG.md:4086 src/CHANGELOG.md:4185
#: src/CHANGELOG.md:4273 src/CHANGELOG.md:4335 src/CHANGELOG.md:4400
#: src/CHANGELOG.md:4487 src/CHANGELOG.md:4578 src/CHANGELOG.md:4641
#: src/CHANGELOG.md:4688 src/CHANGELOG.md:4782 src/CHANGELOG.md:4867
#: src/CHANGELOG.md:5016 src/CHANGELOG.md:5120 src/CHANGELOG.md:5212
#: src/CHANGELOG.md:5290 src/CHANGELOG.md:5378 src/CHANGELOG.md:5436
#: src/CHANGELOG.md:5533 src/CHANGELOG.md:5628 src/CHANGELOG.md:5728
#: src/CHANGELOG.md:5812 src/CHANGELOG.md:5894 src/CHANGELOG.md:5960
#: src/CHANGELOG.md:6032 src/CHANGELOG.md:6123 src/CHANGELOG.md:6189
#: src/CHANGELOG.md:6284
msgid "Fixed"
msgstr ""

#: src/CHANGELOG.md:15
msgid ""
"cargo-publish: Fix man page with malformed `{{#options}}` block [\\#15191]"
"(https://github.com/rust-lang/cargo/pull/15191)"
msgstr ""

#: src/CHANGELOG.md:18 src/CHANGELOG.md:79 src/CHANGELOG.md:253
#: src/CHANGELOG.md:410 src/CHANGELOG.md:573 src/CHANGELOG.md:724
#: src/CHANGELOG.md:870 src/CHANGELOG.md:1067 src/CHANGELOG.md:1240
#: src/CHANGELOG.md:1420 src/CHANGELOG.md:1607 src/CHANGELOG.md:1772
#: src/CHANGELOG.md:1986 src/CHANGELOG.md:2203 src/CHANGELOG.md:2347
#: src/CHANGELOG.md:2509 src/CHANGELOG.md:2686 src/CHANGELOG.md:2859
#: src/CHANGELOG.md:2998 src/CHANGELOG.md:3173 src/CHANGELOG.md:3262
#: src/CHANGELOG.md:3375 src/CHANGELOG.md:3535 src/CHANGELOG.md:3584
#: src/CHANGELOG.md:3668 src/CHANGELOG.md:3731 src/CHANGELOG.md:3829
#: src/CHANGELOG.md:3901 src/CHANGELOG.md:3937 src/CHANGELOG.md:4006
#: src/CHANGELOG.md:4097 src/CHANGELOG.md:4206 src/CHANGELOG.md:4290
#: src/CHANGELOG.md:4355 src/CHANGELOG.md:4424 src/CHANGELOG.md:4524
#: src/CHANGELOG.md:4591 src/CHANGELOG.md:4652 src/CHANGELOG.md:4701
#: src/CHANGELOG.md:4796 src/CHANGELOG.md:4899 src/CHANGELOG.md:5041
#: src/CHANGELOG.md:5141 src/CHANGELOG.md:5236 src/CHANGELOG.md:5322
#: src/CHANGELOG.md:5386 src/CHANGELOG.md:5448 src/CHANGELOG.md:5566
#: src/CHANGELOG.md:5656 src/CHANGELOG.md:5745 src/CHANGELOG.md:5827
#: src/CHANGELOG.md:5919 src/CHANGELOG.md:5973 src/CHANGELOG.md:6049
#: src/CHANGELOG.md:6144 src/CHANGELOG.md:6216 src/CHANGELOG.md:6297
msgid "Nightly only"
msgstr ""

#: src/CHANGELOG.md:20
msgid ""
"`-Zscript`: Handle more frontmatter parsing corner cases [\\#15187](https://"
"github.com/rust-lang/cargo/pull/15187)"
msgstr ""

#: src/CHANGELOG.md:23 src/CHANGELOG.md:109 src/CHANGELOG.md:284
#: src/CHANGELOG.md:448 src/CHANGELOG.md:635 src/CHANGELOG.md:770
#: src/CHANGELOG.md:902 src/CHANGELOG.md:1098 src/CHANGELOG.md:1286
#: src/CHANGELOG.md:1451 src/CHANGELOG.md:1636 src/CHANGELOG.md:1812
#: src/CHANGELOG.md:2005 src/CHANGELOG.md:2216 src/CHANGELOG.md:2386
#: src/CHANGELOG.md:2541 src/CHANGELOG.md:2706 src/CHANGELOG.md:2876
#: src/CHANGELOG.md:3010
msgid "Documentation"
msgstr ""

#: src/CHANGELOG.md:25 src/CHANGELOG.md:131 src/CHANGELOG.md:295
#: src/CHANGELOG.md:469 src/CHANGELOG.md:659 src/CHANGELOG.md:779
#: src/CHANGELOG.md:925 src/CHANGELOG.md:1117 src/CHANGELOG.md:1297
#: src/CHANGELOG.md:1470 src/CHANGELOG.md:1659 src/CHANGELOG.md:1835
#: src/CHANGELOG.md:2034 src/CHANGELOG.md:2244 src/CHANGELOG.md:2419
#: src/CHANGELOG.md:2564 src/CHANGELOG.md:2743 src/CHANGELOG.md:2914
#: src/CHANGELOG.md:3039
msgid "Internal"
msgstr ""

#: src/CHANGELOG.md:27
msgid "Cargo 1.86 (2025-04-03)"
msgstr ""

#: src/CHANGELOG.md:28
msgid ""
"[d73d2caf...rust-1.86.0](https://github.com/rust-lang/cargo/compare/"
"d73d2caf...rust-1.86.0)"
msgstr ""

#: src/CHANGELOG.md:34
msgid ""
"❗️ When merging, replace rather than combine configuration keys that refer "
"to a program path and its arguments. [\\#15066](https://github.com/rust-lang/"
"cargo/pull/15066)  \n"
"These keys include:"
msgstr ""

#: src/CHANGELOG.md:39
msgid "`registries.*.credential-provider`"
msgstr ""

#: src/CHANGELOG.md:40
msgid "`target.*.runner`"
msgstr ""

#: src/CHANGELOG.md:41
msgid "`host.runner`"
msgstr ""

#: src/CHANGELOG.md:42
msgid "`credential-alias.*`"
msgstr ""

#: src/CHANGELOG.md:44
msgid ""
"❗️ Error if both `--package` and `--workspace` are passed but the requested "
"package is missing. This was previously silently ignored, which was "
"considered a bug since missing packages should be reported. [\\#15071]"
"(https://github.com/rust-lang/cargo/pull/15071)"
msgstr ""

#: src/CHANGELOG.md:48
msgid ""
"Added warning when failing to update index cache. [\\#15014](https://"
"github.com/rust-lang/cargo/pull/15014)"
msgstr ""

#: src/CHANGELOG.md:50
msgid ""
"Don't use \"did you mean\" in errors. Be upfront about what the suggestion "
"is. [\\#15138](https://github.com/rust-lang/cargo/pull/15138)"
msgstr ""

#: src/CHANGELOG.md:52
msgid ""
"Provide a better error message for invalid SSH URLs in dependency sources. "
"[\\#15185](https://github.com/rust-lang/cargo/pull/15185)"
msgstr ""

#: src/CHANGELOG.md:54
msgid ""
"Suggest similar feature names when the package doesn't have given features. "
"[\\#15133](https://github.com/rust-lang/cargo/pull/15133)"
msgstr ""

#: src/CHANGELOG.md:56
msgid ""
"Print globs when workspace members can't be found. [\\#15093](https://"
"github.com/rust-lang/cargo/pull/15093)"
msgstr ""

#: src/CHANGELOG.md:58
msgid ""
"cargo-fix: Make `--allow-dirty` imply `--allow-staged` [\\#15013](https://"
"github.com/rust-lang/cargo/pull/15013)"
msgstr ""

#: src/CHANGELOG.md:60
msgid ""
"cargo-login: hide the `token` argument from CLI help for the preparation of "
"deprecation. [\\#15057](https://github.com/rust-lang/cargo/pull/15057)"
msgstr ""

#: src/CHANGELOG.md:62
msgid ""
"cargo-login: Don't suggest `cargo login` when using incompatible credential "
"providers. [\\#15124](https://github.com/rust-lang/cargo/pull/15124)"
msgstr ""

#: src/CHANGELOG.md:64
msgid ""
"cargo-package: improve the performance of VCS status check by matching "
"certain path prefixes with pathspec. [\\#14997](https://github.com/rust-lang/"
"cargo/pull/14997)"
msgstr ""

#: src/CHANGELOG.md:70
msgid ""
"The `rerun-if-env-changed` build script instruction can now correctly detect "
"changes in the `[env]` configuration table. [\\#14756](https://github.com/"
"rust-lang/cargo/pull/14756)"
msgstr ""

#: src/CHANGELOG.md:73
msgid ""
"Force emitting warnings as warnings when learning Rust target info for an "
"unsupported crate type. [\\#15036](https://github.com/rust-lang/cargo/pull/"
"15036)"
msgstr ""

#: src/CHANGELOG.md:75
msgid ""
"cargo-package: Verify the VCS status of symlinks when they point to paths "
"outside the current package root. [\\#14981](https://github.com/rust-lang/"
"cargo/pull/14981)"
msgstr ""

#: src/CHANGELOG.md:81
msgid ""
"🔥 `-Z feature-unification`: This new unstable flag enables the "
"`resolver.feature-unification` configuration option to control how features "
"are unified across a workspace. ([RFC 3529](https://github.com/rust-lang/"
"rfcs/blob/master/text/3692-feature-unification.md)) ([docs](https://doc.rust-"
"lang.org/nightly/cargo/reference/unstable.html#feature-unification)) "
"[\\#15157](https://github.com/rust-lang/cargo/pull/15157)"
msgstr ""

#: src/CHANGELOG.md:87
msgid ""
"cargo-util-schemas: Correct and update the JSON Schema [\\#15000](https://"
"github.com/rust-lang/cargo/pull/15000)"
msgstr ""

#: src/CHANGELOG.md:89
msgid ""
"cargo-util-schemas: Fix the `[lints]` JSON Schema [\\#15035](https://"
"github.com/rust-lang/cargo/pull/15035)"
msgstr ""

#: src/CHANGELOG.md:91
msgid ""
"cargo-util-schemas: Fix 'metadata' JSON Schema [\\#15033](https://github.com/"
"rust-lang/cargo/pull/15033)"
msgstr ""

#: src/CHANGELOG.md:93
msgid ""
"`cargo rustc --print`: Setup cargo environment for `cargo rustc --print`. "
"[\\#15026](https://github.com/rust-lang/cargo/pull/15026)"
msgstr ""

#: src/CHANGELOG.md:95
msgid ""
"`-Zbuild-std`: parse value as comma-separated list, also extends the "
"behavior to `build-std-features`. [\\#15065](https://github.com/rust-lang/"
"cargo/pull/15065)"
msgstr ""

#: src/CHANGELOG.md:98
msgid ""
"`-Zgc`: Make cache tracking resilient to unexpected files. [\\#15147]"
"(https://github.com/rust-lang/cargo/pull/15147)"
msgstr ""

#: src/CHANGELOG.md:100
msgid ""
"`-Zscript`: Consolidate creation of SourceId from manifest path [\\#15172]"
"(https://github.com/rust-lang/cargo/pull/15172)"
msgstr ""

#: src/CHANGELOG.md:102
msgid ""
"`-Zscript`: Integrate cargo-script logic into main parser [\\#15168](https://"
"github.com/rust-lang/cargo/pull/15168)"
msgstr ""

#: src/CHANGELOG.md:104
msgid ""
"`-Zscript`: add `cargo pkgid` support for cargo-script [\\#14961](https://"
"github.com/rust-lang/cargo/pull/14961)"
msgstr ""

#: src/CHANGELOG.md:106
msgid ""
"`-Zpackage-workspace`: Report all unpublishable packages [\\#15070](https://"
"github.com/rust-lang/cargo/pull/15070)"
msgstr ""

#: src/CHANGELOG.md:111
msgid ""
"Document that Cargo automatically registers variables used in the `env!` "
"macro to trigger rebuilds since 1.46. [\\#15062](https://github.com/rust-"
"lang/cargo/pull/15062)"
msgstr ""

#: src/CHANGELOG.md:114
msgid ""
"Move the changelog to The Cargo Book. [\\#15119](https://github.com/rust-"
"lang/cargo/pull/15119) [\\#15123](https://github.com/rust-lang/cargo/pull/"
"15123) [\\#15142](https://github.com/rust-lang/cargo/pull/15142)"
msgstr ""

#: src/CHANGELOG.md:118
msgid ""
"Note `package.authors` is deprecated. [\\#15068](https://github.com/rust-"
"lang/cargo/pull/15068)"
msgstr ""

#: src/CHANGELOG.md:120
msgid ""
"Fix the wrong grammar of a Package Id Specification. [\\#15049](https://"
"github.com/rust-lang/cargo/pull/15049)"
msgstr ""

#: src/CHANGELOG.md:122
msgid ""
"Fix the inverted logic about MSRV [\\#15044](https://github.com/rust-lang/"
"cargo/pull/15044)"
msgstr ""

#: src/CHANGELOG.md:124
msgid ""
"cargo-metadata: Fix description of the `\"root\"` field. [\\#15182](https://"
"github.com/rust-lang/cargo/pull/15182)"
msgstr ""

#: src/CHANGELOG.md:126
msgid ""
"cargo-package: note the lock file is always included. [\\#15067](https://"
"github.com/rust-lang/cargo/pull/15067)"
msgstr ""

#: src/CHANGELOG.md:128
msgid ""
"contrib: Start guidelines for schema design. [\\#15037](https://github.com/"
"rust-lang/cargo/pull/15037)"
msgstr ""

#: src/CHANGELOG.md:133
msgid ""
"Don't use `libc::LOCK_*` on Solaris. [\\#15143](https://github.com/rust-lang/"
"cargo/pull/15143)"
msgstr ""

#: src/CHANGELOG.md:135
msgid ""
"Clean up field -> env var handling. [\\#15008](https://github.com/rust-lang/"
"cargo/pull/15008)"
msgstr ""

#: src/CHANGELOG.md:137
msgid ""
"Simplify SourceID Ord/Eq. [\\#14980](https://github.com/rust-lang/cargo/pull/"
"14980) [\\#15103](https://github.com/rust-lang/cargo/pull/15103)"
msgstr ""

#: src/CHANGELOG.md:140
msgid ""
"Add manual Hash impl for SourceKind and document the reason. [\\#15029]"
"(https://github.com/rust-lang/cargo/pull/15029)"
msgstr ""

#: src/CHANGELOG.md:142
msgid ""
"ci: allow Windows reserved names in CI [\\#15135](https://github.com/rust-"
"lang/cargo/pull/15135)"
msgstr ""

#: src/CHANGELOG.md:144
msgid ""
"cargo-test-macro: Remove condition on `RUSTUP_WINDOWS_PATH_ADD_BIN` "
"[\\#15017](https://github.com/rust-lang/cargo/pull/15017)"
msgstr ""

#: src/CHANGELOG.md:146
msgid ""
"resolver: Simplify backtrack [\\#15150](https://github.com/rust-lang/cargo/"
"pull/15150)"
msgstr ""

#: src/CHANGELOG.md:148
msgid ""
"resolver: Small cleanups [\\#15040](https://github.com/rust-lang/cargo/pull/"
"15040)"
msgstr ""

#: src/CHANGELOG.md:150
msgid ""
"test: Clean up shallow fetch tests [\\#15002](https://github.com/rust-lang/"
"cargo/pull/15002)"
msgstr ""

#: src/CHANGELOG.md:152
msgid ""
"test: Fix `https::self_signed_should_fail` for macOS [\\#15016](https://"
"github.com/rust-lang/cargo/pull/15016)"
msgstr ""

#: src/CHANGELOG.md:154
msgid ""
"test: Fix benchsuite issue with newer versions of git [\\#15069](https://"
"github.com/rust-lang/cargo/pull/15069)"
msgstr ""

#: src/CHANGELOG.md:156
msgid ""
"test: Fix shared_std_dependency_rebuild running on Windows [\\#15111]"
"(https://github.com/rust-lang/cargo/pull/15111)"
msgstr ""

#: src/CHANGELOG.md:158
msgid ""
"test: Update tests to fix nightly errors [\\#15110](https://github.com/rust-"
"lang/cargo/pull/15110)"
msgstr ""

#: src/CHANGELOG.md:160
msgid ""
"test: Remove unused `-C link-arg=-fuse-ld=lld` [\\#15097](https://github.com/"
"rust-lang/cargo/pull/15097)"
msgstr ""

#: src/CHANGELOG.md:162
msgid ""
"test: Remove `unsafe` by using `LazyLock` [\\#15096](https://github.com/rust-"
"lang/cargo/pull/15096)"
msgstr ""

#: src/CHANGELOG.md:164
msgid ""
"test: Remove unnecessary into conversions [\\#15042](https://github.com/rust-"
"lang/cargo/pull/15042)"
msgstr ""

#: src/CHANGELOG.md:166
msgid ""
"test: Fix race condition in panic_abort_tests [\\#15169](https://github.com/"
"rust-lang/cargo/pull/15169)"
msgstr ""

#: src/CHANGELOG.md:168
msgid ""
"Update deny.toml [\\#15164](https://github.com/rust-lang/cargo/pull/15164)"
msgstr ""

#: src/CHANGELOG.md:170
msgid ""
"Update dependencies. [\\#14995](https://github.com/rust-lang/cargo/pull/"
"14995) [\\#14996](https://github.com/rust-lang/cargo/pull/14996) [\\#14998]"
"(https://github.com/rust-lang/cargo/pull/14998) [\\#15012](https://"
"github.com/rust-lang/cargo/pull/15012) [\\#15018](https://github.com/rust-"
"lang/cargo/pull/15018) [\\#15041](https://github.com/rust-lang/cargo/pull/"
"15041) [\\#15050](https://github.com/rust-lang/cargo/pull/15050) [\\#15121]"
"(https://github.com/rust-lang/cargo/pull/15121) [\\#15128](https://"
"github.com/rust-lang/cargo/pull/15128) [\\#15129](https://github.com/rust-"
"lang/cargo/pull/15129) [\\#15162](https://github.com/rust-lang/cargo/pull/"
"15162) [\\#15163](https://github.com/rust-lang/cargo/pull/15163) [\\#15165]"
"(https://github.com/rust-lang/cargo/pull/15165) [\\#15166](https://"
"github.com/rust-lang/cargo/pull/15166)"
msgstr ""

#: src/CHANGELOG.md:186
msgid "Cargo 1.85 (2025-02-20)"
msgstr ""

#: src/CHANGELOG.md:187
msgid ""
"[66221abd...rust-1.85.0](https://github.com/rust-lang/cargo/compare/"
"66221abd...rust-1.85.0)"
msgstr ""

#: src/CHANGELOG.md:191
msgid ""
"🎉 Cargo now supports the 2024 edition. More information is available in the "
"[edition guide](https://doc.rust-lang.org/nightly/edition-guide/rust-2024/"
"index.html). [\\#14828](https://github.com/rust-lang/cargo/pull/14828)"
msgstr ""

#: src/CHANGELOG.md:194
msgid ""
"cargo-tree: The `--depth` flag now accepts `workspace`, which shows only "
"dependencies that are members of the current workspace. [\\#14928](https://"
"github.com/rust-lang/cargo/pull/14928)"
msgstr ""

#: src/CHANGELOG.md:197
msgid ""
"Build scripts now receive a new environment variable, `CARGO_CFG_FEATURE`, "
"which contains each activated feature of the package being built. [\\#14902]"
"(https://github.com/rust-lang/cargo/pull/14902)"
msgstr ""

#: src/CHANGELOG.md:200
msgid ""
"perf: Dependency resolution is now faster due to a more efficient hash for "
"`ActivationsKey` [\\#14915](https://github.com/rust-lang/cargo/pull/14915)"
msgstr ""

#: src/CHANGELOG.md:205
msgid ""
"❗️ cargo-rustc: Trailing flags now have higher precedence. This behavior was "
"nightly-only since 1.83 and is now stabilized. [\\#14900](https://github.com/"
"rust-lang/cargo/pull/14900)"
msgstr ""

#: src/CHANGELOG.md:208
msgid ""
"❗️ Cargo now uses a cross-platform hash algorithm from `rustc-stable-hash`. "
"As a result, the hash part of paths to dependency caches (e.g., `$CARGO_HOME/"
"registry/index/index.crates.io-<hash>`) will change. This will trigger re-"
"downloads of registry indices and `.crate` tarballs, as well as re-cloning "
"of Git dependencies. [\\#14917](https://github.com/rust-lang/cargo/pull/"
"14917)"
msgstr ""

#: src/CHANGELOG.md:214
msgid ""
"Added a future-incompatibility warning for keywords in `cfg`s in Cargo.toml "
"and Cargo configuration. `cfg`s with keywords like `cfg(true)` and "
"`cfg(false)` were incorrectly accepted. For backward compatibility, support "
"for raw identifiers has been introduced; for example, use `cfg(r#true)` "
"instead. [\\#14671](https://github.com/rust-lang/cargo/pull/14671)"
msgstr ""

#: src/CHANGELOG.md:219
msgid ""
"Dependency resolution now provides richer error messages explaining why some "
"versions were rejected, unmatched, or invalid.  \n"
"[\\#14897](https://github.com/rust-lang/cargo/pull/14897) [\\#14921](https://"
"github.com/rust-lang/cargo/pull/14921) [\\#14923](https://github.com/rust-"
"lang/cargo/pull/14923) [\\#14927](https://github.com/rust-lang/cargo/pull/"
"14927)"
msgstr ""

#: src/CHANGELOG.md:224
msgid ""
"cargo-doc: improve the error message when `--open`ing a doc while no doc "
"generated. [\\#14969](https://github.com/rust-lang/cargo/pull/14969)"
msgstr ""

#: src/CHANGELOG.md:226
msgid ""
"cargo-package: warn if symlinks checked out as plain text files [\\#14994]"
"(https://github.com/rust-lang/cargo/pull/14994)"
msgstr ""

#: src/CHANGELOG.md:228
msgid ""
"cargo-package: Shows dirty file paths relative to the Git working directory. "
"[\\#14968](https://github.com/rust-lang/cargo/pull/14968) [\\#14970](https://"
"github.com/rust-lang/cargo/pull/14970)"
msgstr ""

#: src/CHANGELOG.md:234
msgid ""
"Set `GIT_DIR` to ensure compatibility with bare repositories for `net.git-"
"fetch-with-cli=true`. [\\#14860](https://github.com/rust-lang/cargo/pull/"
"14860)"
msgstr ""

#: src/CHANGELOG.md:237
msgid ""
"Fixed workspace Cargo.toml modification didn't invalidate build cache. "
"[\\#14973](https://github.com/rust-lang/cargo/pull/14973)"
msgstr ""

#: src/CHANGELOG.md:239
msgid ""
"Prevented build caches from being discarded after changes to `RUSTFLAGS`. "
"[\\#14830](https://github.com/rust-lang/cargo/pull/14830) [\\#14898](https://"
"github.com/rust-lang/cargo/pull/14898)"
msgstr ""

#: src/CHANGELOG.md:242
msgid ""
"cargo-add: Don't select yanked versions when normalizing names. [\\#14895]"
"(https://github.com/rust-lang/cargo/pull/14895)"
msgstr ""

#: src/CHANGELOG.md:244
msgid ""
"cargo-fix: Migrate workspace dependencies to the 2024 edition also for "
"virtual manifests. [\\#14890](https://github.com/rust-lang/cargo/pull/14890)"
msgstr ""

#: src/CHANGELOG.md:246
msgid ""
"cargo-package: Verify the VCS status of `package.readme` and "
"`package.license-file` when they point to paths outside the current package "
"root. [\\#14966](https://github.com/rust-lang/cargo/pull/14966)"
msgstr ""

#: src/CHANGELOG.md:249
msgid ""
"cargo-package: assure possibly blocking non-files (like FIFOs) won't be "
"picked up for publishing. [\\#14977](https://github.com/rust-lang/cargo/pull/"
"14977)"
msgstr ""

#: src/CHANGELOG.md:255
msgid ""
"`path-bases`: Support bases in `[patch]`es in virtual manifests [\\#14931]"
"(https://github.com/rust-lang/cargo/pull/14931)"
msgstr ""

#: src/CHANGELOG.md:257
msgid ""
"`unit-graph`: Use the configured shell to print output. [\\#14926](https://"
"github.com/rust-lang/cargo/pull/14926)"
msgstr ""

#: src/CHANGELOG.md:259
msgid ""
"`-Zbuild-std`: Check if the build target supports `std` by probing the "
"`metadata.std` field in the target spec JSON. [\\#14183](https://github.com/"
"rust-lang/cargo/pull/14183) [\\#14938](https://github.com/rust-lang/cargo/"
"pull/14938) [\\#14899](https://github.com/rust-lang/cargo/pull/14899)"
msgstr ""

#: src/CHANGELOG.md:264
msgid ""
"`-Zbuild-std`: always link to std when testing proc-macros. [\\#14850]"
"(https://github.com/rust-lang/cargo/pull/14850) [\\#14861](https://"
"github.com/rust-lang/cargo/pull/14861)"
msgstr ""

#: src/CHANGELOG.md:267
msgid ""
"`-Zbuild-std`: clean up build-std tests [\\#14943](https://github.com/rust-"
"lang/cargo/pull/14943) [\\#14933](https://github.com/rust-lang/cargo/pull/"
"14933) [\\#14896](https://github.com/rust-lang/cargo/pull/14896)"
msgstr ""

#: src/CHANGELOG.md:271
msgid ""
"`-Zbuild-std`: Hash relative paths to std workspace instead of absolute "
"paths. [\\#14951](https://github.com/rust-lang/cargo/pull/14951)"
msgstr ""

#: src/CHANGELOG.md:273
msgid ""
"`-Zpackage-workspace`: Allow dry-run of a non-bumped workspace. [\\#14847]"
"(https://github.com/rust-lang/cargo/pull/14847)"
msgstr ""

#: src/CHANGELOG.md:275
msgid ""
"`-Zscript`: Allow adding/removing dependencies from cargo scripts [\\#14857]"
"(https://github.com/rust-lang/cargo/pull/14857)"
msgstr ""

#: src/CHANGELOG.md:277
msgid ""
"`-Zscript`: Migrate cargo script manifests across editions [\\#14864]"
"(https://github.com/rust-lang/cargo/pull/14864)"
msgstr ""

#: src/CHANGELOG.md:279
msgid ""
"`-Zscript`: Don't override the release profile. [\\#14925](https://"
"github.com/rust-lang/cargo/pull/14925)"
msgstr ""

#: src/CHANGELOG.md:281
msgid ""
"`-Ztrim-paths`: Use `Path::push` to construct the `remap-path-prefix` flag. "
"[\\#14908](https://github.com/rust-lang/cargo/pull/14908)"
msgstr ""

#: src/CHANGELOG.md:286
msgid ""
"Clarify how `cargo::metadata` env var is selected. [\\#14842](https://"
"github.com/rust-lang/cargo/pull/14842)"
msgstr ""

#: src/CHANGELOG.md:288
msgid ""
"cargo-info: Remove references to the default registry in `cargo-info` docs "
"[\\#14880](https://github.com/rust-lang/cargo/pull/14880)"
msgstr ""

#: src/CHANGELOG.md:290
msgid ""
"contrib: add missing argument to Rustup Cargo workaround [\\#14954](https://"
"github.com/rust-lang/cargo/pull/14954)"
msgstr ""

#: src/CHANGELOG.md:292
msgid ""
"SemVer: Add section on RPIT capturing [\\#14849](https://github.com/rust-"
"lang/cargo/pull/14849)"
msgstr ""

#: src/CHANGELOG.md:297
msgid ""
"Add the `test` cfg as a well known cfg before of compiler change. [\\#14963]"
"(https://github.com/rust-lang/cargo/pull/14963)"
msgstr ""

#: src/CHANGELOG.md:299
msgid ""
"Enable triagebot merge conflict notifications [\\#14972](https://github.com/"
"rust-lang/cargo/pull/14972)"
msgstr ""

#: src/CHANGELOG.md:301
msgid ""
"Limit release trigger to `0.*` tags [\\#14940](https://github.com/rust-lang/"
"cargo/pull/14940)"
msgstr ""

#: src/CHANGELOG.md:303
msgid ""
"Simplify `SourceID` Hash. [\\#14800](https://github.com/rust-lang/cargo/pull/"
"14800)"
msgstr ""

#: src/CHANGELOG.md:305
msgid ""
"build-rs: Automatically emits `rerun-if-env-changed` when accessing "
"environment variables Cargo sets for build script executions. [\\#14911]"
"(https://github.com/rust-lang/cargo/pull/14911)"
msgstr ""

#: src/CHANGELOG.md:308
msgid ""
"build-rs: Correctly refer to the item in assert [\\#14913](https://"
"github.com/rust-lang/cargo/pull/14913)"
msgstr ""

#: src/CHANGELOG.md:310
msgid ""
"build-rs: Add the 'error' directive [\\#14910](https://github.com/rust-lang/"
"cargo/pull/14910)"
msgstr ""

#: src/CHANGELOG.md:312
msgid ""
"build-rs: Remove meaningless 'cargo_cfg_debug_assertions' [\\#14901](https://"
"github.com/rust-lang/cargo/pull/14901)"
msgstr ""

#: src/CHANGELOG.md:314
msgid ""
"cargo-package: split `cargo_package` to modules [\\#14959](https://"
"github.com/rust-lang/cargo/pull/14959) [\\#14982](https://github.com/rust-"
"lang/cargo/pull/14982)"
msgstr ""

#: src/CHANGELOG.md:317
msgid ""
"cargo-test-support: `requires` attribute accepts string literals for cmds "
"[\\#14875](https://github.com/rust-lang/cargo/pull/14875)"
msgstr ""

#: src/CHANGELOG.md:319
msgid ""
"cargo-test-support: Switch from 'exec_with_output' to 'run' [\\#14848]"
"(https://github.com/rust-lang/cargo/pull/14848)"
msgstr ""

#: src/CHANGELOG.md:321
msgid ""
"cargo-test-support: track caller for `.crate` file publish verification "
"[\\#14992](https://github.com/rust-lang/cargo/pull/14992)"
msgstr ""

#: src/CHANGELOG.md:323
msgid ""
"test: Verify `-Cmetadata` directly, not through `-Cextra-filename` [\\#14846]"
"(https://github.com/rust-lang/cargo/pull/14846)"
msgstr ""

#: src/CHANGELOG.md:325
msgid ""
"test: ensure PGO works [\\#14859](https://github.com/rust-lang/cargo/pull/"
"14859) [\\#14874](https://github.com/rust-lang/cargo/pull/14874) [\\#14887]"
"(https://github.com/rust-lang/cargo/pull/14887)"
msgstr ""

#: src/CHANGELOG.md:329
msgid ""
"Update dependencies. [\\#14867](https://github.com/rust-lang/cargo/pull/"
"14867) [\\#14871](https://github.com/rust-lang/cargo/pull/14871) [\\#14878]"
"(https://github.com/rust-lang/cargo/pull/14878) [\\#14879](https://"
"github.com/rust-lang/cargo/pull/14879) [\\#14975](https://github.com/rust-"
"lang/cargo/pull/14975)"
msgstr ""

#: src/CHANGELOG.md:336
msgid "Cargo 1.84 (2025-01-09)"
msgstr ""

#: src/CHANGELOG.md:337
msgid ""
"[15fbd2f6...rust-1.84.0](https://github.com/rust-lang/cargo/compare/"
"15fbd2f6...rust-1.84.0)"
msgstr ""

#: src/CHANGELOG.md:341
msgid ""
"🎉 Stabilize resolver v3, a.k.a the MSRV-aware dependency resolver. The "
"stabilization includes `package.resolver = \"3\"` in Cargo.toml, and the "
"`[resolver]` table in Cargo configuration. ([RFC 3537](https://github.com/"
"rust-lang/rfcs/blob/master/text/3537-msrv-resolver.md)) ([manifest docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/resolver.html#resolver-"
"versions)) ([config docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"config.html#resolver)) [\\#14639](https://github.com/rust-lang/cargo/pull/"
"14639) [\\#14662](https://github.com/rust-lang/cargo/pull/14662) [\\#14711]"
"(https://github.com/rust-lang/cargo/pull/14711) [\\#14725](https://"
"github.com/rust-lang/cargo/pull/14725) [\\#14748](https://github.com/rust-"
"lang/cargo/pull/14748) [\\#14753](https://github.com/rust-lang/cargo/pull/"
"14753) [\\#14754](https://github.com/rust-lang/cargo/pull/14754)"
msgstr ""

#: src/CHANGELOG.md:354
msgid ""
"Added a new build script invocation `cargo::error=MESSAGE` to report error "
"messages. ([docs](https://doc.rust-lang.org/nightly/cargo/reference/build-"
"scripts.html#cargo-error)) [\\#14743](https://github.com/rust-lang/cargo/"
"pull/14743)"
msgstr ""

#: src/CHANGELOG.md:360
msgid ""
"❗️ cargo-publish: Always include Cargo.lock in published crates. Originally "
"it was only included for packages that have executables or examples for use "
"with `cargo install`. [\\#14815](https://github.com/rust-lang/cargo/pull/"
"14815)"
msgstr ""

#: src/CHANGELOG.md:364
msgid ""
"Dependency resolver performance improvements, including shared caching, "
"reduced iteration overhead, and removing redundant fetches and clones. "
"[\\#14663](https://github.com/rust-lang/cargo/pull/14663) [\\#14690](https://"
"github.com/rust-lang/cargo/pull/14690) [\\#14692](https://github.com/rust-"
"lang/cargo/pull/14692) [\\#14694](https://github.com/rust-lang/cargo/pull/"
"14694)"
msgstr ""

#: src/CHANGELOG.md:370
msgid ""
"Deprecate `cargo verify-project`. [\\#14736](https://github.com/rust-lang/"
"cargo/pull/14736)"
msgstr ""

#: src/CHANGELOG.md:372
msgid ""
"Add source replacement info when no matching package found during dependency "
"resolving. [\\#14715](https://github.com/rust-lang/cargo/pull/14715)"
msgstr ""

#: src/CHANGELOG.md:374
msgid ""
"Hint for using `crates-io` when `[patch.crates.io]` found. [\\#14700]"
"(https://github.com/rust-lang/cargo/pull/14700)"
msgstr ""

#: src/CHANGELOG.md:376
msgid ""
"Normalize source paths of Cargo targets for better diagnostics. [\\#14497]"
"(https://github.com/rust-lang/cargo/pull/14497) [\\#14750](https://"
"github.com/rust-lang/cargo/pull/14750)"
msgstr ""

#: src/CHANGELOG.md:379
msgid ""
"Allow registries to omit empty/default fields in index metadata JSON. Due to "
"backward compatibility, crates.io continues to emit them. [\\#14838](https://"
"github.com/rust-lang/cargo/pull/14838) [\\#14839](https://github.com/rust-"
"lang/cargo/pull/14839)"
msgstr ""

#: src/CHANGELOG.md:383
msgid ""
"cargo-doc: display env vars in extra verbose mode. [\\#14812](https://"
"github.com/rust-lang/cargo/pull/14812)"
msgstr ""

#: src/CHANGELOG.md:385
msgid ""
"cargo-fix: replace special-case handling of duplicate insert-only "
"replacement. [\\#14765](https://github.com/rust-lang/cargo/pull/14765) "
"[\\#14782](https://github.com/rust-lang/cargo/pull/14782)"
msgstr ""

#: src/CHANGELOG.md:388
msgid ""
"cargo-remove: when a dependency is not found, try suggesting other "
"dependencies with similar names. [\\#14818](https://github.com/rust-lang/"
"cargo/pull/14818)"
msgstr ""

#: src/CHANGELOG.md:391
msgid ""
"git: skip unnecessary submodule validations for fresh checkouts on Git "
"dependencies. [\\#14605](https://github.com/rust-lang/cargo/pull/14605)"
msgstr ""

#: src/CHANGELOG.md:393
msgid ""
"git: Enhanced the error message for fetching Git dependencies when refspec "
"not found. [\\#14806](https://github.com/rust-lang/cargo/pull/14806)"
msgstr ""

#: src/CHANGELOG.md:395
msgid ""
"git: Pass `--no-tags` by default to git CLI when `net.git-fetch-with-cli = "
"true`. [\\#14688](https://github.com/rust-lang/cargo/pull/14688)"
msgstr ""

#: src/CHANGELOG.md:400
msgid ""
"Fixed old Cargos failing to read the newer format of dep-info in build "
"caches. [\\#14751](https://github.com/rust-lang/cargo/pull/14751) [\\#14745]"
"(https://github.com/rust-lang/cargo/pull/14745)"
msgstr ""

#: src/CHANGELOG.md:403
msgid ""
"Fixed rebuild detection not respecting changes in the `[env]` table. "
"[\\#14701](https://github.com/rust-lang/cargo/pull/14701) [\\#14730](https://"
"github.com/rust-lang/cargo/pull/14730)"
msgstr ""

#: src/CHANGELOG.md:406
msgid ""
"cargo-fix: Added transactional semantics to `rustfix` to keep code fix in a "
"valid state when multiple suggestions contain overlapping spans. [\\#14747]"
"(https://github.com/rust-lang/cargo/pull/14747)"
msgstr ""

#: src/CHANGELOG.md:412
msgid ""
"The unstable environment variable `CARGO_RUSTC_CURRENT_DIR` has been "
"removed. [\\#14799](https://github.com/rust-lang/cargo/pull/14799)"
msgstr ""

#: src/CHANGELOG.md:414
msgid ""
"🔥 Cargo now includes an experimental JSON Schema file for `Cargo.toml` in "
"the source code. It helps external tools validate or auto-complete the "
"schema of the manifest. ([manifest.schema.json](https://github.com/rust-lang/"
"cargo/blob/master/crates/cargo-util-schemas/manifest.schema.json)) [\\#14683]"
"(https://github.com/rust-lang/cargo/pull/14683)"
msgstr ""

#: src/CHANGELOG.md:418
msgid ""
"🔥 `Zroot-dir`: A new unstable `-Zroot-dir` flag to configure the path from "
"which rustc should be invoked. ([docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#root-dir)) [\\#14752](https://github.com/rust-"
"lang/cargo/pull/14752)"
msgstr ""

#: src/CHANGELOG.md:422
msgid ""
"🔥 `-Zwarnings`: A new unstable feature to control how Cargo handles "
"warnings via the `build.warnings` configuration field. ([docs](https://"
"doc.rust-lang.org/nightly/cargo/reference/unstable.html#warnings)) [\\#14388]"
"(https://github.com/rust-lang/cargo/pull/14388) [\\#14827](https://"
"github.com/rust-lang/cargo/pull/14827) [\\#14836](https://github.com/rust-"
"lang/cargo/pull/14836)"
msgstr ""

#: src/CHANGELOG.md:428
msgid ""
"`edition2024`: Verify 2024 edition / resolver=3 doesn't affect resolution "
"[\\#14724](https://github.com/rust-lang/cargo/pull/14724)"
msgstr ""

#: src/CHANGELOG.md:430
msgid ""
"`native-completions`: Include descriptions in zsh [\\#14726](https://"
"github.com/rust-lang/cargo/pull/14726)"
msgstr ""

#: src/CHANGELOG.md:432
msgid ""
"`-Zbindeps`: Fix panic when running cargo tree on a package with a cross "
"compiled bindep [\\#14593](https://github.com/rust-lang/cargo/pull/14593)"
msgstr ""

#: src/CHANGELOG.md:434
msgid ""
"`-Zbindeps`: download targeted transitive deps of with artifact deps' target "
"platform [\\#14723](https://github.com/rust-lang/cargo/pull/14723)"
msgstr ""

#: src/CHANGELOG.md:436
msgid ""
"`-Zbuild-std`: Remove the requirement for `--target`. [\\#14317](https://"
"github.com/rust-lang/cargo/pull/14317)"
msgstr ""

#: src/CHANGELOG.md:438
msgid ""
"`-Zpackage-workspace`: Support package selection options, such as `--"
"exclude`, in `cargo publish` [\\#14659](https://github.com/rust-lang/cargo/"
"pull/14659)"
msgstr ""

#: src/CHANGELOG.md:441
msgid ""
"`-Zscript`: Remove support for accepting `Cargo.toml`. [\\#14670](https://"
"github.com/rust-lang/cargo/pull/14670)"
msgstr ""

#: src/CHANGELOG.md:443
msgid ""
"`-Zscript`: Change config paths to only check `CARGO_HOME` [\\#14749]"
"(https://github.com/rust-lang/cargo/pull/14749)"
msgstr ""

#: src/CHANGELOG.md:445
msgid ""
"`-Zscript`: Update the frontmatter parser for RFC 3503. [\\#14792](https://"
"github.com/rust-lang/cargo/pull/14792)"
msgstr ""

#: src/CHANGELOG.md:450
msgid ""
"Clarify the meaning of `--tests` and `--benches` flags. [\\#14675](https://"
"github.com/rust-lang/cargo/pull/14675)"
msgstr ""

#: src/CHANGELOG.md:452
msgid ""
"Clarify tools should only interpret messages with a line starting with `{` "
"as JSON. [\\#14677](https://github.com/rust-lang/cargo/pull/14677)"
msgstr ""

#: src/CHANGELOG.md:454
msgid ""
"Clarify what is and isn't included by `cargo package` [\\#14684](https://"
"github.com/rust-lang/cargo/pull/14684)"
msgstr ""

#: src/CHANGELOG.md:456
msgid ""
"Document official external commands: `cargo-clippy`, `cargo-fmt`, and `cargo-"
"miri`. [\\#14669](https://github.com/rust-lang/cargo/pull/14669) [\\#14805]"
"(https://github.com/rust-lang/cargo/pull/14805)"
msgstr ""

#: src/CHANGELOG.md:459
msgid ""
"Enhance documentation on environment variables [\\#14676](https://github.com/"
"rust-lang/cargo/pull/14676)"
msgstr ""

#: src/CHANGELOG.md:461
msgid ""
"Simplify English used in documentations. [\\#14825](https://github.com/rust-"
"lang/cargo/pull/14825) [\\#14829](https://github.com/rust-lang/cargo/pull/"
"14829)"
msgstr ""

#: src/CHANGELOG.md:464
msgid ""
"A new doc page for deprecated and removed commands. [\\#14739](https://"
"github.com/rust-lang/cargo/pull/14739)"
msgstr ""

#: src/CHANGELOG.md:466
msgid ""
"cargo-test-support: Document `Execs` assertions based on port effort "
"[\\#14793](https://github.com/rust-lang/cargo/pull/14793)"
msgstr ""

#: src/CHANGELOG.md:471
msgid ""
"🎉 Migrate `build-rs` crate to the `rust-lang/cargo` repository as an "
"intentional artifact of the Cargo team. [\\#14786](https://github.com/rust-"
"lang/cargo/pull/14786) [\\#14817](https://github.com/rust-lang/cargo/pull/"
"14817)"
msgstr ""

#: src/CHANGELOG.md:475
msgid ""
"Enable transfer feature in triagebot [\\#14777](https://github.com/rust-lang/"
"cargo/pull/14777)"
msgstr ""

#: src/CHANGELOG.md:477
msgid ""
"clone-on-write when needed for InternedString [\\#14808](https://github.com/"
"rust-lang/cargo/pull/14808)"
msgstr ""

#: src/CHANGELOG.md:479
msgid ""
"ci: Switch CI from bors to merge queue [\\#14718](https://github.com/rust-"
"lang/cargo/pull/14718)"
msgstr ""

#: src/CHANGELOG.md:481
msgid ""
"ci: make the `lint-docs` job required [\\#14797](https://github.com/rust-"
"lang/cargo/pull/14797)"
msgstr ""

#: src/CHANGELOG.md:483
msgid ""
"ci: Check for clippy `correctness` [\\#14796](https://github.com/rust-lang/"
"cargo/pull/14796)"
msgstr ""

#: src/CHANGELOG.md:485
msgid ""
"ci: Switch matchPackageNames to matchDepNames for renovate [\\#14704]"
"(https://github.com/rust-lang/cargo/pull/14704)"
msgstr ""

#: src/CHANGELOG.md:487
msgid ""
"fingerprint: Track the intent for each use of `UnitHash` [\\#14826](https://"
"github.com/rust-lang/cargo/pull/14826)"
msgstr ""

#: src/CHANGELOG.md:489
msgid ""
"fingerprint: Add more metadata to `rustc_fingerprint`. [\\#14761](https://"
"github.com/rust-lang/cargo/pull/14761)"
msgstr ""

#: src/CHANGELOG.md:491
msgid ""
"test: Migrate remaining snapshotting to snapbox [\\#14642](https://"
"github.com/rust-lang/cargo/pull/14642) [\\#14760](https://github.com/rust-"
"lang/cargo/pull/14760) [\\#14781](https://github.com/rust-lang/cargo/pull/"
"14781) [\\#14785](https://github.com/rust-lang/cargo/pull/14785) [\\#14790]"
"(https://github.com/rust-lang/cargo/pull/14790)"
msgstr ""

#: src/CHANGELOG.md:497
msgid ""
"Update dependencies. [\\#14668](https://github.com/rust-lang/cargo/pull/"
"14668) [\\#14705](https://github.com/rust-lang/cargo/pull/14705) [\\#14762]"
"(https://github.com/rust-lang/cargo/pull/14762) [\\#14766](https://"
"github.com/rust-lang/cargo/pull/14766) [\\#14772](https://github.com/rust-"
"lang/cargo/pull/14772)"
msgstr ""

#: src/CHANGELOG.md:504
msgid "Cargo 1.83 (2024-11-28)"
msgstr ""

#: src/CHANGELOG.md:505
msgid ""
"[8f40fc59...rust-1.83.0](https://github.com/rust-lang/cargo/compare/"
"8f40fc59...rust-1.83.0)"
msgstr ""

#: src/CHANGELOG.md:509
msgid ""
"`--timings` HTML output can now auto-switch between light and dark color "
"schemes based on browser preference. [\\#14588](https://github.com/rust-lang/"
"cargo/pull/14588)"
msgstr ""

#: src/CHANGELOG.md:512
msgid ""
"Introduced a new `CARGO_MANIFEST_PATH` environment variable, similar to "
"`CARGO_MANIFEST_DIR` but pointing directly to the manifest file. [\\#14404]"
"(https://github.com/rust-lang/cargo/pull/14404)"
msgstr ""

#: src/CHANGELOG.md:515
msgid ""
"manifest: Added `package.autolib`, allowing `[lib]` auto-discovery to be "
"disabled. [\\#14591](https://github.com/rust-lang/cargo/pull/14591)"
msgstr ""

#: src/CHANGELOG.md:520
msgid ""
"❗️ Lockfile format v4 is now the default for creating/updating a lockfile. "
"Rust toolchains 1.78+ support lockfile v4. For compatibility with earlier "
"MSRV, consdier setting the `package.rust-version` to 1.82 or earlier. "
"[\\#14595](https://github.com/rust-lang/cargo/pull/14595)"
msgstr ""

#: src/CHANGELOG.md:525
msgid ""
"❗️ cargo-package: When using the `--package` flag, only the specified "
"packages are packaged. Previously, the package in the current working "
"directory was automatically selected for packaging. [\\#14488](https://"
"github.com/rust-lang/cargo/pull/14488)"
msgstr ""

#: src/CHANGELOG.md:529
msgid ""
"cargo-publish: Now fails fast if the package version is already published. "
"[\\#14448](https://github.com/rust-lang/cargo/pull/14448)"
msgstr ""

#: src/CHANGELOG.md:531
msgid ""
"Improved error messages for missing features. [\\#14436](https://github.com/"
"rust-lang/cargo/pull/14436)"
msgstr ""

#: src/CHANGELOG.md:533
msgid ""
"Log details of `rustc` invocation failure if no errors are seen [\\#14453]"
"(https://github.com/rust-lang/cargo/pull/14453)"
msgstr ""

#: src/CHANGELOG.md:535
msgid ""
"Uplifted `windows-gnullvm` import libraries, aligning them with `windows-"
"gnu`. [\\#14451](https://github.com/rust-lang/cargo/pull/14451)"
msgstr ""

#: src/CHANGELOG.md:537
msgid ""
"Suggest `cargo info` command in the `cargo search` result [\\#14537](https://"
"github.com/rust-lang/cargo/pull/14537)"
msgstr ""

#: src/CHANGELOG.md:539
msgid ""
"Enhanced dependency update status messages, now displaying updates "
"(compatible, incompatible, direct-dep) in different colors, along with "
"messages and MSRVs. [\\#14440](https://github.com/rust-lang/cargo/pull/"
"14440) [\\#14457](https://github.com/rust-lang/cargo/pull/14457) [\\#14459]"
"(https://github.com/rust-lang/cargo/pull/14459) [\\#14461](https://"
"github.com/rust-lang/cargo/pull/14461) [\\#14471](https://github.com/rust-"
"lang/cargo/pull/14471) [\\#14568](https://github.com/rust-lang/cargo/pull/"
"14568)"
msgstr ""

#: src/CHANGELOG.md:548
msgid ""
"The `Locking` status message no longer displays workspace members. [\\#14445]"
"(https://github.com/rust-lang/cargo/pull/14445)"
msgstr ""

#: src/CHANGELOG.md:553
msgid ""
"Prevented duplicate library search environment variables when calling "
"`cargo` recursively. [\\#14464](https://github.com/rust-lang/cargo/pull/"
"14464)"
msgstr ""

#: src/CHANGELOG.md:555
msgid ""
"Don't double-warn about `$CARGO_HOME/config` not having `.toml` extension. "
"[\\#14579](https://github.com/rust-lang/cargo/pull/14579)"
msgstr ""

#: src/CHANGELOG.md:557
msgid ""
"Correct diagnostic count message when using `--message-format json`. "
"[\\#14598](https://github.com/rust-lang/cargo/pull/14598)"
msgstr ""

#: src/CHANGELOG.md:559
msgid ""
"cargo-add: Perform fuzzy searches when translating package names [\\#13765]"
"(https://github.com/rust-lang/cargo/pull/13765)"
msgstr ""

#: src/CHANGELOG.md:561
msgid ""
"cargo-new: only auto-add new packages to the workspace relative to the "
"manifest, rather than the current directory. [\\#14505](https://github.com/"
"rust-lang/cargo/pull/14505)"
msgstr ""

#: src/CHANGELOG.md:564
msgid ""
"cargo-rustc: Fixed parsing of comma-separated values in the `--crate-type` "
"flag. [\\#14499](https://github.com/rust-lang/cargo/pull/14499)"
msgstr ""

#: src/CHANGELOG.md:566
msgid ""
"cargo-vendor: trusts the crate version only when it originates from "
"registries. This causes git dependencies to be re-vendored even if they "
"haven't changed. [\\#14530](https://github.com/rust-lang/cargo/pull/14530)"
msgstr ""

#: src/CHANGELOG.md:569
msgid ""
"cargo-publish: Downgrade version-exists error to warning on dry-run "
"[\\#14742](https://github.com/rust-lang/cargo/pull/14742) [\\#14744](https://"
"github.com/rust-lang/cargo/pull/14744)"
msgstr ""

#: src/CHANGELOG.md:575
msgid ""
"❗️ cargo-rustc: give trailing flags higher precedence on nightly. The "
"nightly gate will be removed after a few releases. Please give feedback if "
"it breaks any workflow. A temporary environment variable "
"`__CARGO_RUSTC_ORIG_ARGS_PRIO=1` is provided to opt-out of the behavior. "
"[\\#14587](https://github.com/rust-lang/cargo/pull/14587)"
msgstr ""

#: src/CHANGELOG.md:581
msgid ""
"🔥 cargo-install: a new `--dry-run` flag without actually installing "
"binaries. [\\#14280](https://github.com/rust-lang/cargo/pull/14280)"
msgstr ""

#: src/CHANGELOG.md:583
msgid ""
"🔥 `native-completions`: moves the handwritten shell completion scripts to "
"Rust native, making it easier for us to add, extend, and test new "
"completions. ([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#native-completions)) [\\#14493](https://github.com/rust-lang/"
"cargo/pull/14493) [\\#14531](https://github.com/rust-lang/cargo/pull/14531) "
"[\\#14532](https://github.com/rust-lang/cargo/pull/14532) [\\#14533](https://"
"github.com/rust-lang/cargo/pull/14533) [\\#14534](https://github.com/rust-"
"lang/cargo/pull/14534) [\\#14535](https://github.com/rust-lang/cargo/pull/"
"14535) [\\#14536](https://github.com/rust-lang/cargo/pull/14536) [\\#14546]"
"(https://github.com/rust-lang/cargo/pull/14546) [\\#14547](https://"
"github.com/rust-lang/cargo/pull/14547) [\\#14548](https://github.com/rust-"
"lang/cargo/pull/14548) [\\#14552](https://github.com/rust-lang/cargo/pull/"
"14552) [\\#14557](https://github.com/rust-lang/cargo/pull/14557) [\\#14558]"
"(https://github.com/rust-lang/cargo/pull/14558) [\\#14563](https://"
"github.com/rust-lang/cargo/pull/14563) [\\#14564](https://github.com/rust-"
"lang/cargo/pull/14564) [\\#14573](https://github.com/rust-lang/cargo/pull/"
"14573) [\\#14590](https://github.com/rust-lang/cargo/pull/14590) [\\#14592]"
"(https://github.com/rust-lang/cargo/pull/14592) [\\#14653](https://"
"github.com/rust-lang/cargo/pull/14653) [\\#14656](https://github.com/rust-"
"lang/cargo/pull/14656)"
msgstr ""

#: src/CHANGELOG.md:606
msgid ""
"🔥 `-Zchecksum-freshness`: replace the use of file mtimes in cargo’s rebuild "
"detection with a file checksum algorithm. This is most useful on systems "
"with a poor mtime implementation, or in CI/CD. ([docs](https://doc.rust-"
"lang.org/nightly/cargo/reference/unstable.html#checksum-freshness)) "
"[\\#14137](https://github.com/rust-lang/cargo/pull/14137)"
msgstr ""

#: src/CHANGELOG.md:611
msgid ""
"cargo-update: Add `matches_prerelease` semantic [\\#14305](https://"
"github.com/rust-lang/cargo/pull/14305)"
msgstr ""

#: src/CHANGELOG.md:613
msgid ""
"`build-plan`: document it as being deprecated. [\\#14657](https://github.com/"
"rust-lang/cargo/pull/14657)"
msgstr ""

#: src/CHANGELOG.md:615
msgid ""
"`edition2024`: Remove implicit feature removal from 2024 edition. [\\#14630]"
"(https://github.com/rust-lang/cargo/pull/14630)"
msgstr ""

#: src/CHANGELOG.md:617
msgid ""
"`lockfile-path`: implies `--locked` on `cargo install`. [\\#14556](https://"
"github.com/rust-lang/cargo/pull/14556)"
msgstr ""

#: src/CHANGELOG.md:619
msgid ""
"`open-namespaces`: Allow open namespaces in `PackageIdSpec`s [\\#14467]"
"(https://github.com/rust-lang/cargo/pull/14467)"
msgstr ""

#: src/CHANGELOG.md:621
msgid ""
"`path-bases`: `cargo [add|remove|update]` support [\\#14427](https://"
"github.com/rust-lang/cargo/pull/14427)"
msgstr ""

#: src/CHANGELOG.md:623
msgid ""
"`-Zmsrv-policy`: determine the workspace's MSRV by the most number of MSRVs "
"within it. [\\#14569](https://github.com/rust-lang/cargo/pull/14569)"
msgstr ""

#: src/CHANGELOG.md:625
msgid ""
"`-Zpackage-workspace`: allows to publish multiple crates in a workspace, "
"even if they have inter-dependencies. ([docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/unstable.html#package-workspace)) [\\#14433](https://"
"github.com/rust-lang/cargo/pull/14433) [\\#14496](https://github.com/rust-"
"lang/cargo/pull/14496)"
msgstr ""

#: src/CHANGELOG.md:630
msgid ""
"`-Zpublic-dependency`: Include public/private dependency status in `cargo "
"metadata` [\\#14504](https://github.com/rust-lang/cargo/pull/14504)"
msgstr ""

#: src/CHANGELOG.md:632
msgid ""
"`-Zpublic-dependency`: Don't require MSRV bump [\\#14507](https://github.com/"
"rust-lang/cargo/pull/14507)"
msgstr ""

#: src/CHANGELOG.md:637
msgid ""
"🎉 New chapter about the uses, support expectations, and management of "
"`package.rust-version` a.k.a MSRV. ([docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/rust-version.html)) [\\#14619](https://github.com/rust-lang/"
"cargo/pull/14619) [\\#14636](https://github.com/rust-lang/cargo/pull/14636)"
msgstr ""

#: src/CHANGELOG.md:642
msgid ""
"Clarify `target.'cfg(...)'` doesn't respect cfg from build script [\\#14312]"
"(https://github.com/rust-lang/cargo/pull/14312)"
msgstr ""

#: src/CHANGELOG.md:644
msgid ""
"Clarify `[[bin]]` target auto-discovery can be `src/main.rs` and/or in `src/"
"bin/` [\\#14515](https://github.com/rust-lang/cargo/pull/14515)"
msgstr ""

#: src/CHANGELOG.md:646
msgid ""
"Disambiguate the use of 'target' in the feature resolver v2 doc. [\\#14540]"
"(https://github.com/rust-lang/cargo/pull/14540)"
msgstr ""

#: src/CHANGELOG.md:648
msgid ""
"Make `--config <PATH>` more prominent [\\#14631](https://github.com/rust-"
"lang/cargo/pull/14631)"
msgstr ""

#: src/CHANGELOG.md:650
msgid ""
"Minor re-grouping of pages. [\\#14620](https://github.com/rust-lang/cargo/"
"pull/14620)"
msgstr ""

#: src/CHANGELOG.md:652
msgid ""
"contrib: Update docs for how cargo is published [\\#14539](https://"
"github.com/rust-lang/cargo/pull/14539)"
msgstr ""

#: src/CHANGELOG.md:654
msgid ""
"contrib: Declare support level for each crate in Cargo's Charter / crate "
"docs [\\#14600](https://github.com/rust-lang/cargo/pull/14600)"
msgstr ""

#: src/CHANGELOG.md:656
msgid ""
"contrib: Declare new Intentional Artifacts as 'small' changes [\\#14599]"
"(https://github.com/rust-lang/cargo/pull/14599)"
msgstr ""

#: src/CHANGELOG.md:661
msgid ""
"Cleanup duplicated check-cfg lint logic [\\#14567](https://github.com/rust-"
"lang/cargo/pull/14567)"
msgstr ""

#: src/CHANGELOG.md:663
msgid ""
"Fix elided lifetime due to nightly rustc changes [\\#14487](https://"
"github.com/rust-lang/cargo/pull/14487)"
msgstr ""

#: src/CHANGELOG.md:665
msgid ""
"Improved error reporting when a feature is not found in "
"`activated_features`. [\\#14647](https://github.com/rust-lang/cargo/pull/"
"14647)"
msgstr ""

#: src/CHANGELOG.md:667
msgid ""
"cargo-info: Use the `shell.note` to print the note [\\#14554](https://"
"github.com/rust-lang/cargo/pull/14554)"
msgstr ""

#: src/CHANGELOG.md:669
msgid ""
"ci: bump CI tools [\\#14503](https://github.com/rust-lang/cargo/pull/14503) "
"[\\#14628](https://github.com/rust-lang/cargo/pull/14628)"
msgstr ""

#: src/CHANGELOG.md:672
msgid ""
"perf: zero-copy deserialization for compiler messages when possible "
"[\\#14608](https://github.com/rust-lang/cargo/pull/14608)"
msgstr ""

#: src/CHANGELOG.md:674
msgid ""
"resolver: Add more SAT resolver tests [\\#14583](https://github.com/rust-"
"lang/cargo/pull/14583) [\\#14614](https://github.com/rust-lang/cargo/pull/"
"14614)"
msgstr ""

#: src/CHANGELOG.md:677
msgid ""
"test: Migrated more tests to snapbox [\\#14576](https://github.com/rust-lang/"
"cargo/pull/14576) [\\#14577](https://github.com/rust-lang/cargo/pull/14577)"
msgstr ""

#: src/CHANGELOG.md:680
msgid ""
"Update dependencies. [\\#14475](https://github.com/rust-lang/cargo/pull/"
"14475) [\\#14478](https://github.com/rust-lang/cargo/pull/14478) [\\#14489]"
"(https://github.com/rust-lang/cargo/pull/14489) [\\#14607](https://"
"github.com/rust-lang/cargo/pull/14607) [\\#14624](https://github.com/rust-"
"lang/cargo/pull/14624) [\\#14632](https://github.com/rust-lang/cargo/pull/"
"14632)"
msgstr ""

#: src/CHANGELOG.md:688
msgid "Cargo 1.82 (2024-10-17)"
msgstr ""

#: src/CHANGELOG.md:689
msgid ""
"[a2b58c3d...rust-1.82.0](https://github.com/rust-lang/cargo/compare/"
"a2b58c3d...rust-1.82.0)"
msgstr ""

#: src/CHANGELOG.md:693
msgid ""
"🎉 Added `cargo info` command for displaying information about a package. "
"[docs](https://doc.rust-lang.org/nightly/cargo/commands/cargo-info.html) "
"[\\#14141](https://github.com/rust-lang/cargo/pull/14141) [\\#14418](https://"
"github.com/rust-lang/cargo/pull/14418) [\\#14430](https://github.com/rust-"
"lang/cargo/pull/14430)"
msgstr ""

#: src/CHANGELOG.md:701
msgid ""
"❗️ Doctest respects Cargo's color options by passing `--color` to rustdoc "
"invocations. [\\#14425](https://github.com/rust-lang/cargo/pull/14425)"
msgstr ""

#: src/CHANGELOG.md:703
msgid ""
"Improved error message for missing both `[package]` and `[workspace]` in "
"Cargo.toml. [\\#14261](https://github.com/rust-lang/cargo/pull/14261)"
msgstr ""

#: src/CHANGELOG.md:705
msgid ""
"Enumerate all possible values of `profile.*.debug` for the error message. "
"[\\#14413](https://github.com/rust-lang/cargo/pull/14413)"
msgstr ""

#: src/CHANGELOG.md:710
msgid ""
"Use longhand gitoxide path-spec patterns. Previously the implementation used "
"shorthand pathspecs, which could produce invalid syntax, for example, if the "
"path to the manifest file contained a leading `_` underscore [\\#14380]"
"(https://github.com/rust-lang/cargo/pull/14380)"
msgstr ""

#: src/CHANGELOG.md:714
msgid ""
"cargo-package: fix failures on bare commit git repo. [\\#14359](https://"
"github.com/rust-lang/cargo/pull/14359)"
msgstr ""

#: src/CHANGELOG.md:716
msgid ""
"cargo-publish: Don't strip non-dev features for renamed dependencies from "
"the HTTP JSON body sent to the registry. The bug only affected third-party "
"registries. [\\#14325](https://github.com/rust-lang/cargo/pull/14325) "
"[\\#14327](https://github.com/rust-lang/cargo/pull/14327)"
msgstr ""

#: src/CHANGELOG.md:721
msgid ""
"cargo-vendor: don't copy source files of excluded Cargo targets when "
"vendoring. [\\#14367](https://github.com/rust-lang/cargo/pull/14367)"
msgstr ""

#: src/CHANGELOG.md:726
msgid ""
"🔥 `lockfile-path`: Added `--lockfile-path` flag that allows specifying a "
"path to the lockfile other than the default path `<workspace_root>/"
"Cargo.lock`. ([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#lockfile-path)) [\\#14326](https://github.com/rust-lang/cargo/"
"pull/14326) [\\#14417](https://github.com/rust-lang/cargo/pull/14417) "
"[\\#14423](https://github.com/rust-lang/cargo/pull/14423) [\\#14424](https://"
"github.com/rust-lang/cargo/pull/14424)"
msgstr ""

#: src/CHANGELOG.md:733
msgid ""
"🔥 `path-bases`: Introduced a table of path \"bases\" in Cargo configuration "
"files that can be used to prefix the paths of path dependencies and patch "
"entries. ([RFC 3529](https://github.com/rust-lang/rfcs/blob/master/text/3529-"
"cargo-path-bases.md)) ([docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#path-bases)) [\\#14360](https://github.com/rust-lang/"
"cargo/pull/14360)"
msgstr ""

#: src/CHANGELOG.md:738
msgid ""
"🔥 `-Zpackage-workspace`: Enhanced the experience of `cargo package --"
"workspace` when there are dependencies between crates in the workspace. "
"Crates in a workspace are no longer required to publish to actual "
"registries. This is a step toward supporting `cargo publish --workspace`. "
"[\\#13947](https://github.com/rust-lang/cargo/pull/13947) [\\#14408](https://"
"github.com/rust-lang/cargo/pull/14408) [\\#14340](https://github.com/rust-"
"lang/cargo/pull/14340)"
msgstr ""

#: src/CHANGELOG.md:745
msgid ""
"cargo-update: Limit pre-release match semantics to use only on "
"`OptVersionReq::Req` [\\#14412](https://github.com/rust-lang/cargo/pull/"
"14412)"
msgstr ""

#: src/CHANGELOG.md:747
msgid ""
"`edition2024`: Revert \"fix: Ensure dep/feature activates the dependency on "
"2024\". [\\#14295](https://github.com/rust-lang/cargo/pull/14295)"
msgstr ""

#: src/CHANGELOG.md:749
msgid ""
"`update-breaking`: Improved error message when `update --breaking` has an "
"invalid spec [\\#14279](https://github.com/rust-lang/cargo/pull/14279)"
msgstr ""

#: src/CHANGELOG.md:751
msgid ""
"`update-breaking`: Don’t downgrade on prerelease `VersionReq` when updating "
"with `--breaking` [\\#14250](https://github.com/rust-lang/cargo/pull/14250)"
msgstr ""

#: src/CHANGELOG.md:753
msgid ""
"`-Zbuild-std`: remove hack on creating virtual std workspace [\\#14358]"
"(https://github.com/rust-lang/cargo/pull/14358) [\\#14370](https://"
"github.com/rust-lang/cargo/pull/14370)"
msgstr ""

#: src/CHANGELOG.md:756
msgid ""
"`-Zmsrv-policy`: Adjust MSRV resolve config field name / values. The "
"previous placeholder `resolver.something-like-precedence` is now renamed to "
"`resolver.incompatible-rust-versions`. [\\#14296](https://github.com/rust-"
"lang/cargo/pull/14296)"
msgstr ""

#: src/CHANGELOG.md:760
msgid ""
"`-Zmsrv-policy`: : Report when incompatible-rust-version packages are "
"selected [\\#14401](https://github.com/rust-lang/cargo/pull/14401)"
msgstr ""

#: src/CHANGELOG.md:762
msgid ""
"`-Ztarget-applies-to-host`: Fixed passing of links-overrides with target-"
"applies-to-host and an implicit target [\\#14205](https://github.com/rust-"
"lang/cargo/pull/14205)"
msgstr ""

#: src/CHANGELOG.md:765
msgid ""
"`-Ztarget-applies-to-host`: `-Cmetadata` includes whether extra rustflags is "
"same as host [\\#14432](https://github.com/rust-lang/cargo/pull/14432)"
msgstr ""

#: src/CHANGELOG.md:767
msgid ""
"`-Ztrim-paths`: rustdoc supports trim-paths for diagnostics [\\#14389]"
"(https://github.com/rust-lang/cargo/pull/14389)"
msgstr ""

#: src/CHANGELOG.md:772
msgid ""
"Convert comments to doc comments for `Workspace`. [\\#14397](https://"
"github.com/rust-lang/cargo/pull/14397)"
msgstr ""

#: src/CHANGELOG.md:774
msgid ""
"Fix MSRV indicator for `workspace.package` and `workspace.dependencies`. "
"[\\#14400](https://github.com/rust-lang/cargo/pull/14400)"
msgstr ""

#: src/CHANGELOG.md:776
msgid ""
"FAQ: remove outdated Cargo offline usage section. [\\#14336](https://"
"github.com/rust-lang/cargo/pull/14336)"
msgstr ""

#: src/CHANGELOG.md:781
msgid ""
"Enhanced `cargo-test-support` usability and documentation. [\\#14266]"
"(https://github.com/rust-lang/cargo/pull/14266) [\\#14268](https://"
"github.com/rust-lang/cargo/pull/14268) [\\#14269](https://github.com/rust-"
"lang/cargo/pull/14269) [\\#14270](https://github.com/rust-lang/cargo/pull/"
"14270) [\\#14272](https://github.com/rust-lang/cargo/pull/14272)"
msgstr ""

#: src/CHANGELOG.md:787
msgid ""
"Made summary sync by using Arc instead of Rc [\\#14260](https://github.com/"
"rust-lang/cargo/pull/14260)"
msgstr ""

#: src/CHANGELOG.md:789
msgid ""
"Used `Rc` instead of `Arc` for storing rustflags [\\#14273](https://"
"github.com/rust-lang/cargo/pull/14273)"
msgstr ""

#: src/CHANGELOG.md:791
msgid ""
"Removed rustc probe for `--check-cfg` support [\\#14302](https://github.com/"
"rust-lang/cargo/pull/14302)"
msgstr ""

#: src/CHANGELOG.md:793
msgid ""
"Renamed 'resolved' to 'normalized' for all manifest normalization related "
"items. [\\#14342](https://github.com/rust-lang/cargo/pull/14342)"
msgstr ""

#: src/CHANGELOG.md:795
msgid ""
"cargo-util-schemas: Added `TomlPackage::new`, `Default` for `TomlWorkspace` "
"[\\#14271](https://github.com/rust-lang/cargo/pull/14271)"
msgstr ""

#: src/CHANGELOG.md:797
msgid ""
"ci: Switch macos aarch64 to nightly [\\#14382](https://github.com/rust-lang/"
"cargo/pull/14382)"
msgstr ""

#: src/CHANGELOG.md:799
msgid ""
"mdman: Normalize newlines when rendering options [\\#14428](https://"
"github.com/rust-lang/cargo/pull/14428)"
msgstr ""

#: src/CHANGELOG.md:801
msgid ""
"perf: dont call wrap in a no-op `source_id::with*` [\\#14318](https://"
"github.com/rust-lang/cargo/pull/14318)"
msgstr ""

#: src/CHANGELOG.md:803
msgid ""
"test: Migrated more tests to snapbox [\\#14242](https://github.com/rust-lang/"
"cargo/pull/14242) [\\#14244](https://github.com/rust-lang/cargo/pull/14244) "
"[\\#14293](https://github.com/rust-lang/cargo/pull/14293) [\\#14297](https://"
"github.com/rust-lang/cargo/pull/14297) [\\#14319](https://github.com/rust-"
"lang/cargo/pull/14319) [\\#14402](https://github.com/rust-lang/cargo/pull/"
"14402) [\\#14410](https://github.com/rust-lang/cargo/pull/14410)"
msgstr ""

#: src/CHANGELOG.md:811
msgid ""
"test: don't rely on absence of `RUST_BACKTRACE` [\\#14441](https://"
"github.com/rust-lang/cargo/pull/14441)"
msgstr ""

#: src/CHANGELOG.md:813
msgid ""
"test: Use gmake on AIX [\\#14323](https://github.com/rust-lang/cargo/pull/"
"14323)"
msgstr ""

#: src/CHANGELOG.md:815
msgid ""
"Updated to `gix` 0.64.0 [\\#14332](https://github.com/rust-lang/cargo/pull/"
"14332)"
msgstr ""

#: src/CHANGELOG.md:817
msgid ""
"Updated to `rusqlite` 0.32.0 [\\#14334](https://github.com/rust-lang/cargo/"
"pull/14334)"
msgstr ""

#: src/CHANGELOG.md:819
msgid ""
"Updated to `windows-sys` 0.59 [\\#14335](https://github.com/rust-lang/cargo/"
"pull/14335)"
msgstr ""

#: src/CHANGELOG.md:821
msgid ""
"Update dependencies. [\\#14299](https://github.com/rust-lang/cargo/pull/"
"14299) [\\#14303](https://github.com/rust-lang/cargo/pull/14303) [\\#14324]"
"(https://github.com/rust-lang/cargo/pull/14324) [\\#14329](https://"
"github.com/rust-lang/cargo/pull/14329) [\\#14331](https://github.com/rust-"
"lang/cargo/pull/14331) [\\#14391](https://github.com/rust-lang/cargo/pull/"
"14391)"
msgstr ""

#: src/CHANGELOG.md:829
msgid "Cargo 1.81 (2024-09-05)"
msgstr ""

#: src/CHANGELOG.md:830
msgid ""
"[34a6a87d...rust-1.81.0](https://github.com/rust-lang/cargo/compare/"
"34a6a87d...rust-1.81.0)"
msgstr ""

#: src/CHANGELOG.md:836
msgid ""
"❗️ cargo-package: Disallow `package.license-file` and `package.readme` "
"pointing to non-existent files during packaging. [\\#13921](https://"
"github.com/rust-lang/cargo/pull/13921)"
msgstr ""

#: src/CHANGELOG.md:839
msgid ""
"❗️ cargo-package: generated `.cargo_vcs_info.json` is always included, even "
"when `--allow-dirty` is passed. [\\#13960](https://github.com/rust-lang/"
"cargo/pull/13960)"
msgstr ""

#: src/CHANGELOG.md:842
msgid ""
"❗️ Disallow passing `--release`/`--debug` flag along with the `--profile` "
"flag. [\\#13971](https://github.com/rust-lang/cargo/pull/13971)"
msgstr ""

#: src/CHANGELOG.md:844
msgid ""
"❗️ Remove `lib.plugin` key support in Cargo.toml. Rust plugin support has "
"been deprecated for four years and was removed in 1.75.0. [\\#13902](https://"
"github.com/rust-lang/cargo/pull/13902) [\\#14038](https://github.com/rust-"
"lang/cargo/pull/14038)"
msgstr ""

#: src/CHANGELOG.md:848
msgid ""
"Make the calculation of `-Cmetadata` for rustc consistent across platforms. "
"[\\#14107](https://github.com/rust-lang/cargo/pull/14107)"
msgstr ""

#: src/CHANGELOG.md:850
msgid ""
"Emit a warning when `edition` is unset, even when MSRV is unset. [\\#14110]"
"(https://github.com/rust-lang/cargo/pull/14110)"
msgstr ""

#: src/CHANGELOG.md:855
msgid ""
"Fix a proc-macro example from a dependency affecting feature resolution. "
"[\\#13892](https://github.com/rust-lang/cargo/pull/13892)"
msgstr ""

#: src/CHANGELOG.md:857
msgid ""
"Don't warn on duplicate packages from using '..'. [\\#14234](https://"
"github.com/rust-lang/cargo/pull/14234)"
msgstr ""

#: src/CHANGELOG.md:859
msgid ""
"Don't `du` on every git source load. [\\#14252](https://github.com/rust-lang/"
"cargo/pull/14252)"
msgstr ""

#: src/CHANGELOG.md:861
msgid ""
"Don't warn about unreferenced duplicate packages [\\#14239](https://"
"github.com/rust-lang/cargo/pull/14239)"
msgstr ""

#: src/CHANGELOG.md:863
msgid ""
"cargo-publish: Don't strip non-dev features for renamed dependencies from "
"the HTTP JSON body sent to the registry. The bug only affected third-party "
"registries. [\\#14328](https://github.com/rust-lang/cargo/pull/14328)"
msgstr ""

#: src/CHANGELOG.md:867
msgid ""
"cargo-vendor: don't copy source files of excluded Cargo targets when "
"vendoring. [\\#14368](https://github.com/rust-lang/cargo/pull/14368)"
msgstr ""

#: src/CHANGELOG.md:872
msgid ""
"🔥 `update-breaking`: Add `--breaking` to `cargo update`, allowing upgrading "
"dependencies to breaking versions. [docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#update-breaking) [\\#13979](https://github.com/"
"rust-lang/cargo/pull/13979) [\\#14047](https://github.com/rust-lang/cargo/"
"pull/14047) [\\#14049](https://github.com/rust-lang/cargo/pull/14049)"
msgstr ""

#: src/CHANGELOG.md:878
msgid ""
"`--artifact-dir`: Rename `--out-dir` to `--artifact-dir`. The `--out-dir` "
"flag is kept for compatibility and may be removed when the feature gets "
"stabilized. [\\#13809](https://github.com/rust-lang/cargo/pull/13809)"
msgstr ""

#: src/CHANGELOG.md:882
msgid ""
"`edition2024`: Ensure unused optional dependencies fire for shadowed "
"dependencies. [\\#14028](https://github.com/rust-lang/cargo/pull/14028)"
msgstr ""

#: src/CHANGELOG.md:884
msgid ""
"`edition2024`: Address problems with implicit -> explicit feature migration "
"[\\#14018](https://github.com/rust-lang/cargo/pull/14018)"
msgstr ""

#: src/CHANGELOG.md:886
msgid ""
"`-Zcargo-lints`: Add `unknown_lints` to lints list. [\\#14024](https://"
"github.com/rust-lang/cargo/pull/14024)"
msgstr ""

#: src/CHANGELOG.md:888
msgid ""
"`-Zcargo-lints`: Add tooling to document lints. [\\#14025](https://"
"github.com/rust-lang/cargo/pull/14025)"
msgstr ""

#: src/CHANGELOG.md:890
msgid ""
"`-Zcargo-lints`: Keep lints updated and sorted. [\\#14030](https://"
"github.com/rust-lang/cargo/pull/14030)"
msgstr ""

#: src/CHANGELOG.md:892
msgid ""
"`-Zconfig-include`: Allow enabling `config-include` feature in config. "
"[\\#14196](https://github.com/rust-lang/cargo/pull/14196)"
msgstr ""

#: src/CHANGELOG.md:894
msgid ""
"`-Zpublic-dependency`: remove some legacy public dependency code from the "
"resolver [\\#14090](https://github.com/rust-lang/cargo/pull/14090)"
msgstr ""

#: src/CHANGELOG.md:896
msgid ""
"`-Ztarget-applies-to-host`: Pass rustflags to artifacts built with implicit "
"targets when using target-applies-to-host [\\#13900](https://github.com/rust-"
"lang/cargo/pull/13900) [\\#14201](https://github.com/rust-lang/cargo/pull/"
"14201)"
msgstr ""

#: src/CHANGELOG.md:899
msgid ""
"cargo-update: Track the behavior of `--precise <prerelease>`. [\\#14013]"
"(https://github.com/rust-lang/cargo/pull/14013)"
msgstr ""

#: src/CHANGELOG.md:904
msgid ""
"Clarify `CARGO_CFG_TARGET_FAMILY` is multi-valued. [\\#14165](https://"
"github.com/rust-lang/cargo/pull/14165)"
msgstr ""

#: src/CHANGELOG.md:906
msgid ""
"Document `CARGO_CFG_TARGET_ABI` [\\#14164](https://github.com/rust-lang/"
"cargo/pull/14164)"
msgstr ""

#: src/CHANGELOG.md:908
msgid ""
"Document MSRV for each manifest field and build script invocations. "
"[\\#14224](https://github.com/rust-lang/cargo/pull/14224)"
msgstr ""

#: src/CHANGELOG.md:910
msgid ""
"Remove duplicate `strip` section. [\\#14146](https://github.com/rust-lang/"
"cargo/pull/14146)"
msgstr ""

#: src/CHANGELOG.md:912
msgid ""
"Update summary of Cargo configuration to include missing keys. [\\#14145]"
"(https://github.com/rust-lang/cargo/pull/14145)"
msgstr ""

#: src/CHANGELOG.md:914
msgid ""
"Update index of Cargo documentation. [\\#14228](https://github.com/rust-lang/"
"cargo/pull/14228)"
msgstr ""

#: src/CHANGELOG.md:916
msgid ""
"Don't mention non-existent `workspace.badges` field. [\\#14042](https://"
"github.com/rust-lang/cargo/pull/14042)"
msgstr ""

#: src/CHANGELOG.md:918
msgid ""
"contrib: Suggest atomic commits with separate test commits. [\\#14014]"
"(https://github.com/rust-lang/cargo/pull/14014)"
msgstr ""

#: src/CHANGELOG.md:920
msgid ""
"contrib: Document how to write an RFC for Cargo. [\\#14222](https://"
"github.com/rust-lang/cargo/pull/14222)"
msgstr ""

#: src/CHANGELOG.md:922
msgid ""
"contrib: Improve triage instructions [\\#14052](https://github.com/rust-lang/"
"cargo/pull/14052)"
msgstr ""

#: src/CHANGELOG.md:927
msgid ""
"cargo-package: Change verification order during packaging. [\\#14074]"
"(https://github.com/rust-lang/cargo/pull/14074)"
msgstr ""

#: src/CHANGELOG.md:929
msgid ""
"ci: Add workflow to publish Cargo automatically [\\#14202](https://"
"github.com/rust-lang/cargo/pull/14202)"
msgstr ""

#: src/CHANGELOG.md:931
msgid ""
"ci: bump CI tools [\\#14062](https://github.com/rust-lang/cargo/pull/14062) "
"[\\#14257](https://github.com/rust-lang/cargo/pull/14257)"
msgstr ""

#: src/CHANGELOG.md:934
msgid ""
"registry: Add local registry overlays. [\\#13926](https://github.com/rust-"
"lang/cargo/pull/13926)"
msgstr ""

#: src/CHANGELOG.md:936
msgid ""
"registry: move `get_source_id` out of registry [\\#14218](https://github.com/"
"rust-lang/cargo/pull/14218)"
msgstr ""

#: src/CHANGELOG.md:938
msgid ""
"resolver: Simplify checking for dependency cycles [\\#14089](https://"
"github.com/rust-lang/cargo/pull/14089)"
msgstr ""

#: src/CHANGELOG.md:940
msgid ""
"rustfix: Add `CodeFix::apply_solution` and impl `Clone` [\\#14092](https://"
"github.com/rust-lang/cargo/pull/14092)"
msgstr ""

#: src/CHANGELOG.md:942
msgid ""
"source: Clean up after `PathSource`/`RecursivePathSource` split [\\#14169]"
"(https://github.com/rust-lang/cargo/pull/14169) [\\#14231](https://"
"github.com/rust-lang/cargo/pull/14231)"
msgstr ""

#: src/CHANGELOG.md:945
msgid ""
"Remove the temporary `__CARGO_GITOXIDE_DISABLE_LIST_FILES` environment "
"variable. [\\#14036](https://github.com/rust-lang/cargo/pull/14036)"
msgstr ""

#: src/CHANGELOG.md:947
msgid ""
"Simplify checking feature syntax [\\#14106](https://github.com/rust-lang/"
"cargo/pull/14106)"
msgstr ""

#: src/CHANGELOG.md:949
msgid ""
"Dont make new constant `InternedString` in hot path [\\#14211](https://"
"github.com/rust-lang/cargo/pull/14211)"
msgstr ""

#: src/CHANGELOG.md:951
msgid ""
"Use `std::fs::absolute` instead of reimplementing it [\\#14075](https://"
"github.com/rust-lang/cargo/pull/14075)"
msgstr ""

#: src/CHANGELOG.md:953
msgid ""
"Remove unecessary feature activations from cargo. [\\#14122](https://"
"github.com/rust-lang/cargo/pull/14122) [\\#14160](https://github.com/rust-"
"lang/cargo/pull/14160)"
msgstr ""

#: src/CHANGELOG.md:956
msgid ""
"Revert #13630 as rustc ignores `-C strip` on MSVC. [\\#14061](https://"
"github.com/rust-lang/cargo/pull/14061)"
msgstr ""

#: src/CHANGELOG.md:958
msgid ""
"test: Allow `unexpected_builtin_cfgs` lint in `user_specific_cfgs` test "
"[\\#14153](https://github.com/rust-lang/cargo/pull/14153)"
msgstr ""

#: src/CHANGELOG.md:960
msgid ""
"test: Add cargo_test to test-support prelude [\\#14243](https://github.com/"
"rust-lang/cargo/pull/14243)"
msgstr ""

#: src/CHANGELOG.md:962
msgid ""
"test: migrate Cargo testsuite to `snapbox`. For the complete list of "
"migration pull requests, see [\\#14039](https://github.com/rust-lang/cargo/"
"issues/14039#issuecomment-2158974033)"
msgstr ""

#: src/CHANGELOG.md:965
msgid ""
"Updated to `gix` 0.64.0 [\\#14431](https://github.com/rust-lang/cargo/pull/"
"14431)"
msgstr ""

#: src/CHANGELOG.md:967
msgid ""
"Update dependencies. [\\#13995](https://github.com/rust-lang/cargo/pull/"
"13995) [\\#13998](https://github.com/rust-lang/cargo/pull/13998) [\\#14037]"
"(https://github.com/rust-lang/cargo/pull/14037) [\\#14063](https://"
"github.com/rust-lang/cargo/pull/14063) [\\#14067](https://github.com/rust-"
"lang/cargo/pull/14067) [\\#14174](https://github.com/rust-lang/cargo/pull/"
"14174) [\\#14186](https://github.com/rust-lang/cargo/pull/14186) [\\#14254]"
"(https://github.com/rust-lang/cargo/pull/14254)"
msgstr ""

#: src/CHANGELOG.md:977
msgid "Cargo 1.80 (2024-07-25)"
msgstr ""

#: src/CHANGELOG.md:978
msgid ""
"[b60a1555...rust-1.80.0](https://github.com/rust-lang/cargo/compare/"
"b60a1555...rust-1.80.0)"
msgstr ""

#: src/CHANGELOG.md:982
msgid ""
"🎉 Stabilize `-Zcheck-cfg`! This by default enables rustc's checking of "
"conditional compilation at compile time, which verifies that the crate is "
"correctly handling conditional compilation for different target platforms or "
"features. Internally, cargo will be passing a new command line option `--"
"check-cfg` to all rustc and rustdoc invocations."
msgstr ""

#: src/CHANGELOG.md:988
msgid ""
"A new build script invocation [`cargo::rustc-check-cfg=CHECK_CFG`](https://"
"doc.rust-lang.org/nightly/cargo/reference/build-scripts.html#rustc-check-"
"cfg) is added along with this stabilization, as a way to add custom cfgs to "
"the list of expected cfg names and values."
msgstr ""

#: src/CHANGELOG.md:993
msgid ""
"If a build script is not an option for your package, Cargo provides a config "
"[`[lints.rust.unexpected_cfgs.check-cfg]`](https://doc.rust-lang.org/nightly/"
"rustc/check-cfg/cargo-specifics.html#check-cfg-in-lintsrust-table) to add "
"known custom cfgs statically."
msgstr ""

#: src/CHANGELOG.md:997
msgid ""
"([RFC 3013](https://github.com/rust-lang/rfcs/blob/master/text/3013-"
"conditional-compilation-checking.md)) ([docs](https://doc.rust-lang.org/"
"nightly/rustc/check-cfg/cargo-specifics.html)) [\\#13571](https://github.com/"
"rust-lang/cargo/pull/13571) [\\#13865](https://github.com/rust-lang/cargo/"
"pull/13865) [\\#13869](https://github.com/rust-lang/cargo/pull/13869) "
"[\\#13884](https://github.com/rust-lang/cargo/pull/13884) [\\#13913](https://"
"github.com/rust-lang/cargo/pull/13913) [\\#13937](https://github.com/rust-"
"lang/cargo/pull/13937) [\\#13958](https://github.com/rust-lang/cargo/pull/"
"13958)"
msgstr ""

#: src/CHANGELOG.md:1007
msgid ""
"🎉 cargo-update: Allows `--precise` to specify a yanked version of a "
"package, and will update the lockfile accordingly. [\\#13974](https://"
"github.com/rust-lang/cargo/pull/13974)"
msgstr ""

#: src/CHANGELOG.md:1013
msgid ""
"❗️ manifest: Disallow `[badges]` to inherit from "
"`[workspace.package.badges]`. This was considered a bug. Keep in mind that "
"`[badges]` is effectively deprecated. [\\#13788](https://github.com/rust-"
"lang/cargo/pull/13788)"
msgstr ""

#: src/CHANGELOG.md:1017
msgid ""
"build-script: Suggest old syntax based on MSRV. [\\#13874](https://"
"github.com/rust-lang/cargo/pull/13874)"
msgstr ""

#: src/CHANGELOG.md:1019
msgid ""
"cargo-add: Avoid escaping double quotes by using string literals. [\\#14006]"
"(https://github.com/rust-lang/cargo/pull/14006)"
msgstr ""

#: src/CHANGELOG.md:1021
msgid ""
"cargo-clean: Performance improvements for cleaning specific packages via `-"
"p` flag. [\\#13818](https://github.com/rust-lang/cargo/pull/13818)"
msgstr ""

#: src/CHANGELOG.md:1023
msgid ""
"cargo-new: Use `i32` rather than `usize` as the \"default integer\" in "
"library template. [\\#13939](https://github.com/rust-lang/cargo/pull/13939)"
msgstr ""

#: src/CHANGELOG.md:1025
msgid ""
"cargo-package: Warn, rather than fail, if a Cargo target is excluded during "
"packaging. [\\#13713](https://github.com/rust-lang/cargo/pull/13713)"
msgstr ""

#: src/CHANGELOG.md:1027
msgid ""
"manifest: Warn, not error, on unsupported lint tool in the `[lints]` table. "
"[\\#13833](https://github.com/rust-lang/cargo/pull/13833)"
msgstr ""

#: src/CHANGELOG.md:1029
msgid ""
"perf: Avoid inferring when Cargo targets are known. [\\#13849](https://"
"github.com/rust-lang/cargo/pull/13849)"
msgstr ""

#: src/CHANGELOG.md:1031
msgid ""
"Populate git information when building Cargo from Rust's source tarball. "
"[\\#13832](https://github.com/rust-lang/cargo/pull/13832)"
msgstr ""

#: src/CHANGELOG.md:1033
msgid ""
"Improve the error message when deserializing Cargo configuration from "
"partial environment variables. [\\#13956](https://github.com/rust-lang/cargo/"
"pull/13956)"
msgstr ""

#: src/CHANGELOG.md:1038
msgid ""
"resolver: Make path dependencies with the same name stay locked. [\\#13572]"
"(https://github.com/rust-lang/cargo/pull/13572)"
msgstr ""

#: src/CHANGELOG.md:1040
msgid ""
"cargo-add: Preserve file permissions on Unix during `write_atomic`. "
"[\\#13898](https://github.com/rust-lang/cargo/pull/13898)"
msgstr ""

#: src/CHANGELOG.md:1042
msgid ""
"cargo-clean: Remove symlink directory on Windows. [\\#13910](https://"
"github.com/rust-lang/cargo/pull/13910)"
msgstr ""

#: src/CHANGELOG.md:1044
msgid ""
"cargo-fix: Don't fix into the standard library. [\\#13792](https://"
"github.com/rust-lang/cargo/pull/13792)"
msgstr ""

#: src/CHANGELOG.md:1046
msgid ""
"cargo-fix: Support IPv6-only networks. [\\#13907](https://github.com/rust-"
"lang/cargo/pull/13907)"
msgstr ""

#: src/CHANGELOG.md:1048
msgid ""
"cargo-new: Don't say we're adding to a workspace when a regular package is "
"in the root. [\\#13987](https://github.com/rust-lang/cargo/pull/13987)"
msgstr ""

#: src/CHANGELOG.md:1050
msgid ""
"cargo-vendor: Silence the warning about forgetting the vendoring. [\\#13886]"
"(https://github.com/rust-lang/cargo/pull/13886)"
msgstr ""

#: src/CHANGELOG.md:1052
msgid ""
"cargo-publish/cargo-vendor: Ensure targets in generated Cargo.toml are in a "
"deterministic order. [\\#13989](https://github.com/rust-lang/cargo/pull/"
"13989) [\\#14004](https://github.com/rust-lang/cargo/pull/14004)"
msgstr ""

#: src/CHANGELOG.md:1055
msgid ""
"cargo-credential-libsecret: Load `libsecret` by its `SONAME`, "
"`libsecret-1.so.0`. [\\#13927](https://github.com/rust-lang/cargo/pull/13927)"
msgstr ""

#: src/CHANGELOG.md:1057
msgid ""
"Don't panic when an alias doesn't include a subcommand. [\\#13819](https://"
"github.com/rust-lang/cargo/pull/13819)"
msgstr ""

#: src/CHANGELOG.md:1059
msgid ""
"Workaround copying file returning EAGAIN on ZFS on macOS. [\\#13845](https://"
"github.com/rust-lang/cargo/pull/13845)"
msgstr ""

#: src/CHANGELOG.md:1061
msgid ""
"Fetch specific commits even if the GitHub fast path fails. [\\#13946]"
"(https://github.com/rust-lang/cargo/pull/13946) [\\#13969](https://"
"github.com/rust-lang/cargo/pull/13969)"
msgstr ""

#: src/CHANGELOG.md:1064
msgid ""
"Distinguish Cargo config from different environment variables that share the "
"same prefix. [\\#14000](https://github.com/rust-lang/cargo/pull/14000)"
msgstr ""

#: src/CHANGELOG.md:1069
msgid ""
"`-Zcargo-lints`: Don't always inherit workspace lints. [\\#13812](https://"
"github.com/rust-lang/cargo/pull/13812)"
msgstr ""

#: src/CHANGELOG.md:1071
msgid ""
"`-Zcargo-lints`: Add a test to ensure cap-lints works. [\\#13829](https://"
"github.com/rust-lang/cargo/pull/13829)"
msgstr ""

#: src/CHANGELOG.md:1073
msgid ""
"`-Zcargo-lints`: Error when unstable lints are specified but not enabled. "
"[\\#13805](https://github.com/rust-lang/cargo/pull/13805)"
msgstr ""

#: src/CHANGELOG.md:1075
msgid ""
"`-Zcargo-lints`: Add cargo-lints to unstable docs. [\\#13881](https://"
"github.com/rust-lang/cargo/pull/13881)"
msgstr ""

#: src/CHANGELOG.md:1077
msgid ""
"`-Zcargo-lints`: Refactor cargo lint tests. [\\#13880](https://github.com/"
"rust-lang/cargo/pull/13880)"
msgstr ""

#: src/CHANGELOG.md:1079
msgid ""
"`-Zcargo-lints`: Remove ability to specify `-` in lint name. [\\#13837]"
"(https://github.com/rust-lang/cargo/pull/13837)"
msgstr ""

#: src/CHANGELOG.md:1081
msgid ""
"`-Zscript`: Remove unstable rejected frontmatter syntax for cargo script. "
"The only allowed frontmatter syntax now is `---`. [\\#13861](https://"
"github.com/rust-lang/cargo/pull/13861) [\\#13893](https://github.com/rust-"
"lang/cargo/pull/13893)"
msgstr ""

#: src/CHANGELOG.md:1085
msgid ""
"`-Zbindeps`: Build only the specified artifact library when multiple types "
"are available. [\\#13842](https://github.com/rust-lang/cargo/pull/13842)"
msgstr ""

#: src/CHANGELOG.md:1087
msgid ""
"`-Zmsrv-policy`: Treat unset MSRV as compatible. [\\#13791](https://"
"github.com/rust-lang/cargo/pull/13791)"
msgstr ""

#: src/CHANGELOG.md:1089
msgid ""
"`-Zgit`/`-Zgitoxide`: Default configuration to be obtained from both "
"environment variables and Cargo configuration. [\\#13687](https://github.com/"
"rust-lang/cargo/pull/13687)"
msgstr ""

#: src/CHANGELOG.md:1091
msgid ""
"`-Zpublic-dependency`: Don't lose 'public' when inheriting a dependency. "
"[\\#13836](https://github.com/rust-lang/cargo/pull/13836)"
msgstr ""

#: src/CHANGELOG.md:1093
msgid ""
"`edition2024`: Disallow ignored `default-features` when inheriting. "
"[\\#13839](https://github.com/rust-lang/cargo/pull/13839)"
msgstr ""

#: src/CHANGELOG.md:1095
msgid ""
"`edition2024`: Validate crate-types/proc-macro for bin like other Cargo "
"targets. [\\#13841](https://github.com/rust-lang/cargo/pull/13841)"
msgstr ""

#: src/CHANGELOG.md:1100
msgid ""
"cargo-package: Clarify no guarantee of VCS provenance. [\\#13984](https://"
"github.com/rust-lang/cargo/pull/13984)"
msgstr ""

#: src/CHANGELOG.md:1102
msgid ""
"cargo-metadata: Clarify dash replacement rule in Cargo target names. "
"[\\#13887](https://github.com/rust-lang/cargo/pull/13887)"
msgstr ""

#: src/CHANGELOG.md:1104
msgid ""
"config: Fix wrong type of `rustc-flags` in build script overrides. [\\#13957]"
"(https://github.com/rust-lang/cargo/pull/13957)"
msgstr ""

#: src/CHANGELOG.md:1106
msgid ""
"resolver: Add README for `resolver-tests`. [\\#13977](https://github.com/"
"rust-lang/cargo/pull/13977)"
msgstr ""

#: src/CHANGELOG.md:1108
msgid ""
"contrib: Update UI example code in contributor guide. [\\#13864](https://"
"github.com/rust-lang/cargo/pull/13864)"
msgstr ""

#: src/CHANGELOG.md:1110
msgid ""
"Fix libcurl proxy documentation link. [\\#13990](https://github.com/rust-"
"lang/cargo/pull/13990)"
msgstr ""

#: src/CHANGELOG.md:1112
msgid ""
"Add missing `CARGO_MAKEFLAGS` env for plugins. [\\#13872](https://github.com/"
"rust-lang/cargo/pull/13872)"
msgstr ""

#: src/CHANGELOG.md:1114
msgid ""
"Include CircleCI reference in the Continuous Integration chapter. [\\#13850]"
"(https://github.com/rust-lang/cargo/pull/13850)"
msgstr ""

#: src/CHANGELOG.md:1119
msgid ""
"ci: Don't check `cargo` against beta channel. [\\#13827](https://github.com/"
"rust-lang/cargo/pull/13827)"
msgstr ""

#: src/CHANGELOG.md:1121
msgid ""
"test: Set safe.directory for git repo in apache container. [\\#13920]"
"(https://github.com/rust-lang/cargo/pull/13920)"
msgstr ""

#: src/CHANGELOG.md:1123
msgid ""
"test: Silence warnings running embedded unittests. [\\#13929](https://"
"github.com/rust-lang/cargo/pull/13929)"
msgstr ""

#: src/CHANGELOG.md:1125
msgid ""
"test: Update test formatting due to nightly rustc changes. [\\#13890]"
"(https://github.com/rust-lang/cargo/pull/13890) [\\#13901](https://"
"github.com/rust-lang/cargo/pull/13901) [\\#13964](https://github.com/rust-"
"lang/cargo/pull/13964)"
msgstr ""

#: src/CHANGELOG.md:1129
msgid ""
"test: Make `git::use_the_cli` test truly locale independent. [\\#13935]"
"(https://github.com/rust-lang/cargo/pull/13935)"
msgstr ""

#: src/CHANGELOG.md:1131
msgid ""
"cargo-test-support: Transition direct assertions from cargo-test-support to "
"snapbox. [\\#13980](https://github.com/rust-lang/cargo/pull/13980)"
msgstr ""

#: src/CHANGELOG.md:1133
msgid ""
"cargo-test-support: Auto-redact elapsed time. [\\#13973](https://github.com/"
"rust-lang/cargo/pull/13973)"
msgstr ""

#: src/CHANGELOG.md:1135
msgid ""
"cargo-test-support: Clean up unnecessary uses of `match_exact`. [\\#13879]"
"(https://github.com/rust-lang/cargo/pull/13879)"
msgstr ""

#: src/CHANGELOG.md:1137
msgid ""
"Split `RecursivePathSource` out of `PathSource`. [\\#13993](https://"
"github.com/rust-lang/cargo/pull/13993)"
msgstr ""

#: src/CHANGELOG.md:1139
msgid ""
"Adjust custom errors from cert-check due to libgit2 1.8 change. [\\#13970]"
"(https://github.com/rust-lang/cargo/pull/13970)"
msgstr ""

#: src/CHANGELOG.md:1141
msgid ""
"Move diagnostic printing to Shell. [\\#13813](https://github.com/rust-lang/"
"cargo/pull/13813)"
msgstr ""

#: src/CHANGELOG.md:1143
msgid ""
"Update dependencies. [\\#13834](https://github.com/rust-lang/cargo/pull/"
"13834) [\\#13840](https://github.com/rust-lang/cargo/pull/13840) [\\#13948]"
"(https://github.com/rust-lang/cargo/pull/13948) [\\#13963](https://"
"github.com/rust-lang/cargo/pull/13963) [\\#13976](https://github.com/rust-"
"lang/cargo/pull/13976)"
msgstr ""

#: src/CHANGELOG.md:1150
msgid "Cargo 1.79 (2024-06-13)"
msgstr ""

#: src/CHANGELOG.md:1151
msgid ""
"[2fe739fc...rust-1.79.0](https://github.com/rust-lang/cargo/compare/"
"2fe739fc...rust-1.79.0)"
msgstr ""

#: src/CHANGELOG.md:1155
msgid ""
"🎉 `cargo add` respects `package.rust-version` a.k.a. MSRV when adding new "
"dependencies. The behavior can be overridden by specifying a version "
"requirement, or passing the `--ignore-rust-version` flag. ([RFC 3537]"
"(https://github.com/rust-lang/rfcs/blob/master/text/3537-msrv-resolver.md)) "
"[\\#13608](https://github.com/rust-lang/cargo/pull/13608)"
msgstr ""

#: src/CHANGELOG.md:1160
msgid ""
"A new `Locking` status message shows dependency changes on any command. For "
"`cargo update`, it also tells you if any dependency version is outdated. "
"[\\#13561](https://github.com/rust-lang/cargo/pull/13561) [\\#13647](https://"
"github.com/rust-lang/cargo/pull/13647) [\\#13651](https://github.com/rust-"
"lang/cargo/pull/13651) [\\#13657](https://github.com/rust-lang/cargo/pull/"
"13657) [\\#13759](https://github.com/rust-lang/cargo/pull/13759) [\\#13764]"
"(https://github.com/rust-lang/cargo/pull/13764)"
msgstr ""

#: src/CHANGELOG.md:1171
msgid ""
"❗️ `RUSTC_WRAPPER`, `RUSTC_WORKSPACE_WRAPPER`, and variables from the "
"`[env]` table now also apply to the initial `rustc -vV` invocation Cargo "
"uses for probing rustc information. [\\#13659](https://github.com/rust-lang/"
"cargo/pull/13659)"
msgstr ""

#: src/CHANGELOG.md:1175
msgid ""
"❗️ Turns dependencies like `foo = { optional = true }` from `version=\"*\"` "
"dependencies with a warning into errors. This behavior has been considered a "
"bug from the beginning. [\\#13775](https://github.com/rust-lang/cargo/pull/"
"13775)"
msgstr ""

#: src/CHANGELOG.md:1179
msgid ""
"❗️ Replace dashes with underscores also if `lib.name` is inferred from "
"`package.name`. This change aligns to the documented behavior. One caveat is "
"that JSON messages emitted by Cargo, like via `cargo metadata` or `--message-"
"format=json`, will start reporting underscore lib names. [\\#12783](https://"
"github.com/rust-lang/cargo/pull/12783)"
msgstr ""

#: src/CHANGELOG.md:1184
msgid ""
"Switch to `gitoxide` for listing files. This improves the performance of "
"build script and `cargo doc` for computing cache freshness, as well as fixes "
"some subtle bugs for `cargo publish`. [\\#13592](https://github.com/rust-"
"lang/cargo/pull/13592) [\\#13696](https://github.com/rust-lang/cargo/pull/"
"13696) [\\#13704](https://github.com/rust-lang/cargo/pull/13704) [\\#13777]"
"(https://github.com/rust-lang/cargo/pull/13777)"
msgstr ""

#: src/CHANGELOG.md:1191
msgid ""
"Warn on `-Zlints` being passed and no longer necessary. [\\#13632](https://"
"github.com/rust-lang/cargo/pull/13632)"
msgstr ""

#: src/CHANGELOG.md:1193
msgid ""
"Warn on unused `workspace.dependencies` keys on virtual workspaces. "
"[\\#13664](https://github.com/rust-lang/cargo/pull/13664)"
msgstr ""

#: src/CHANGELOG.md:1195
msgid ""
"Emit 1.77 build script syntax error only when msrv is incompatible. "
"[\\#13808](https://github.com/rust-lang/cargo/pull/13808)"
msgstr ""

#: src/CHANGELOG.md:1197
msgid ""
"Don't warn on `lints.rust.unexpected_cfgs.check-cfg`. [\\#13925](https://"
"github.com/rust-lang/cargo/pull/13925)"
msgstr ""

#: src/CHANGELOG.md:1199
msgid ""
"cargo-init: don't assign `target.name` in Cargo.toml if the value can be "
"inferred. [\\#13606](https://github.com/rust-lang/cargo/pull/13606)"
msgstr ""

#: src/CHANGELOG.md:1201
msgid ""
"cargo-package: normalize paths in `Cargo.toml`, including replacing `\\` "
"with `/`. [\\#13729](https://github.com/rust-lang/cargo/pull/13729)"
msgstr ""

#: src/CHANGELOG.md:1203
msgid ""
"cargo-test: recategorize cargo test's `--doc` flag under “Target Selection”. "
"[\\#13756](https://github.com/rust-lang/cargo/pull/13756)"
msgstr ""

#: src/CHANGELOG.md:1208
msgid ""
"Ensure `--config net.git-fetch-with-cli=true` is respected. [\\#13992]"
"(https://github.com/rust-lang/cargo/pull/13992) [\\#13997](https://"
"github.com/rust-lang/cargo/pull/13997)"
msgstr ""

#: src/CHANGELOG.md:1211
msgid ""
"Dont panic when resolving an empty alias. [\\#13613](https://github.com/rust-"
"lang/cargo/pull/13613)"
msgstr ""

#: src/CHANGELOG.md:1213
msgid ""
"When using `--target`, the default debuginfo strip rule also applies. Note "
"that on Windows MSVC Cargo no longer strips by default. [\\#13618](https://"
"github.com/rust-lang/cargo/pull/13618)"
msgstr ""

#: src/CHANGELOG.md:1216
msgid ""
"Don't crash on Cargo.toml parse errors that point to multi-byte character "
"[\\#13780](https://github.com/rust-lang/cargo/pull/13780)"
msgstr ""

#: src/CHANGELOG.md:1218
msgid ""
"Don't emit deprecation warning if one of `.cargo/{config,config.toml}` is a "
"symlink to the other. [\\#13793](https://github.com/rust-lang/cargo/pull/"
"13793)"
msgstr ""

#: src/CHANGELOG.md:1221
msgid ""
"Follow HTTP redirections when checking if a repo on GitHub is up-to-date. "
"[\\#13718](https://github.com/rust-lang/cargo/pull/13718)"
msgstr ""

#: src/CHANGELOG.md:1223
msgid ""
"Bash completion fallback in `nounset` mode. [\\#13686](https://github.com/"
"rust-lang/cargo/pull/13686)"
msgstr ""

#: src/CHANGELOG.md:1225
msgid ""
"Rerun build script when rustflags changed and `--target` was passed. "
"[\\#13560](https://github.com/rust-lang/cargo/pull/13560)"
msgstr ""

#: src/CHANGELOG.md:1227
msgid ""
"Fix doc collision for lib/bin with a dash in the inferred name. [\\#13640]"
"(https://github.com/rust-lang/cargo/pull/13640)"
msgstr ""

#: src/CHANGELOG.md:1229
msgid ""
"cargo-add: Maintain sorting of dependency features. [\\#13682](https://"
"github.com/rust-lang/cargo/pull/13682)"
msgstr ""

#: src/CHANGELOG.md:1231
msgid ""
"cargo-add: Preserve comments when updating simple deps [\\#13655](https://"
"github.com/rust-lang/cargo/pull/13655)"
msgstr ""

#: src/CHANGELOG.md:1233
msgid ""
"cargo-fix: dont apply same suggestion twice. [\\#13728](https://github.com/"
"rust-lang/cargo/pull/13728)"
msgstr ""

#: src/CHANGELOG.md:1235
msgid ""
"cargo-package: error when the package specified via `--package` cannot be "
"found [\\#13735](https://github.com/rust-lang/cargo/pull/13735)"
msgstr ""

#: src/CHANGELOG.md:1237
msgid ""
"credential-provider: trim newlines in tokens from stdin. [\\#13770](https://"
"github.com/rust-lang/cargo/pull/13770)"
msgstr ""

#: src/CHANGELOG.md:1242
msgid ""
"🔥 cargo-update: allows `--precise` to specify a pre-release version of a "
"package ([RFC 3493](https://github.com/rust-lang/rfcs/blob/master/text/3493-"
"precise-pre-release-cargo-update.md)) ([docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/unstable.html#precise-pre-release)) [\\#13626]"
"(https://github.com/rust-lang/cargo/pull/13626)"
msgstr ""

#: src/CHANGELOG.md:1246
msgid ""
"RFC 3491: Unused dependencies cleanup [\\#13778](https://github.com/rust-"
"lang/cargo/pull/13778)"
msgstr ""

#: src/CHANGELOG.md:1248
msgid ""
"`-Zcargo-lints`: Add a basic linting system for Cargo. This is still under "
"development and not available for general use. [\\#13621](https://github.com/"
"rust-lang/cargo/pull/13621) [\\#13635](https://github.com/rust-lang/cargo/"
"pull/13635) [\\#13797](https://github.com/rust-lang/cargo/pull/13797) "
"[\\#13740](https://github.com/rust-lang/cargo/pull/13740) [\\#13801](https://"
"github.com/rust-lang/cargo/pull/13801) [\\#13852](https://github.com/rust-"
"lang/cargo/pull/13852) [\\#13853](https://github.com/rust-lang/cargo/pull/"
"13853)"
msgstr ""

#: src/CHANGELOG.md:1257
msgid ""
"🔥 `edition2024`: Add default Edition2024 to resolver v3 (MSRV-aware "
"resolver). [\\#13785](https://github.com/rust-lang/cargo/pull/13785)"
msgstr ""

#: src/CHANGELOG.md:1259
msgid ""
"`edition2024`: Remove underscore field support in 2024. [\\#13783](https://"
"github.com/rust-lang/cargo/pull/13783) [\\#13798](https://github.com/rust-"
"lang/cargo/pull/13798) [\\#13800](https://github.com/rust-lang/cargo/pull/"
"13800) [\\#13804](https://github.com/rust-lang/cargo/pull/13804)"
msgstr ""

#: src/CHANGELOG.md:1264
msgid ""
"`edition2024`: Error on `[project]` in Edition 2024 [\\#13747](https://"
"github.com/rust-lang/cargo/pull/13747)"
msgstr ""

#: src/CHANGELOG.md:1266
msgid ""
"`-Zmsrv-policy`: Respect '--ignore-rust-version' [\\#13738](https://"
"github.com/rust-lang/cargo/pull/13738)"
msgstr ""

#: src/CHANGELOG.md:1268
msgid ""
"`-Zmsrv-policy`: Add `--ignore-rust-version` to update/generate-lockfile "
"[\\#13741](https://github.com/rust-lang/cargo/pull/13741) [\\#13742](https://"
"github.com/rust-lang/cargo/pull/13742)"
msgstr ""

#: src/CHANGELOG.md:1271
msgid ""
"`-Zmsrv-policy`: Put MSRV-aware resolver behind a config [\\#13769](https://"
"github.com/rust-lang/cargo/pull/13769)"
msgstr ""

#: src/CHANGELOG.md:1273
msgid ""
"`-Zmsrv-policy`: Error, rather than panic, on rust-version 'x' [\\#13771]"
"(https://github.com/rust-lang/cargo/pull/13771)"
msgstr ""

#: src/CHANGELOG.md:1275
msgid ""
"`-Zmsrv-policy`: Fallback to 'rustc -V' for MSRV resolving. [\\#13743]"
"(https://github.com/rust-lang/cargo/pull/13743)"
msgstr ""

#: src/CHANGELOG.md:1277
msgid ""
"`-Zmsrv-policy`: Add v3 resolver for MSRV-aware resolving [\\#13776](https://"
"github.com/rust-lang/cargo/pull/13776)"
msgstr ""

#: src/CHANGELOG.md:1279
msgid ""
"`-Zmsrv-policy`: Don't respect MSRV for non-local installs [\\#13790]"
"(https://github.com/rust-lang/cargo/pull/13790)"
msgstr ""

#: src/CHANGELOG.md:1281
msgid ""
"`-Zmsrv-policy`: Track when MSRV is explicitly set, either way [\\#13732]"
"(https://github.com/rust-lang/cargo/pull/13732)"
msgstr ""

#: src/CHANGELOG.md:1283
msgid ""
"test: don't compress test registry crates. [\\#13744](https://github.com/"
"rust-lang/cargo/pull/13744)"
msgstr ""

#: src/CHANGELOG.md:1288
msgid ""
"Clarify `--locked` ensuring that Cargo uses dependency versions in lockfile "
"[\\#13665](https://github.com/rust-lang/cargo/pull/13665)"
msgstr ""

#: src/CHANGELOG.md:1290
msgid ""
"Clarify the precedence of  `RUSTC_WORKSPACE_WRAPPER` and `RUSTC_WRAPPER`. "
"[\\#13648](https://github.com/rust-lang/cargo/pull/13648)"
msgstr ""

#: src/CHANGELOG.md:1292
msgid ""
"Clarify only in the root Cargo.toml the `[workspace]` section is allowed. "
"[\\#13753](https://github.com/rust-lang/cargo/pull/13753)"
msgstr ""

#: src/CHANGELOG.md:1294
msgid ""
"Clarify the differences between virtual and real manifests. [\\#13794]"
"(https://github.com/rust-lang/cargo/pull/13794)"
msgstr ""

#: src/CHANGELOG.md:1299
msgid ""
"🎉 New member crates [`cargo-test-support`](https://crates.io/crates/cargo-"
"test-support) and [`cargo-test-macro`](https://crates.io/crates/cargo-test-"
"macro)! They are designed for testing Cargo itself, so no guarantee on any "
"stability across versions. The crates.io publish of this crate is the same "
"as other members crates. They follow Rust's [6-week release process](https://"
"doc.crates.io/contrib/process/release.html#cratesio-publishing). [\\#13418]"
"(https://github.com/rust-lang/cargo/pull/13418)"
msgstr ""

#: src/CHANGELOG.md:1306
msgid ""
"Fix publish script due to crates.io CDN change [\\#13614](https://github.com/"
"rust-lang/cargo/pull/13614)"
msgstr ""

#: src/CHANGELOG.md:1308
msgid ""
"Push diagnostic complexity on annotate-snippets [\\#13619](https://"
"github.com/rust-lang/cargo/pull/13619)"
msgstr ""

#: src/CHANGELOG.md:1310
msgid ""
"cargo-package: Simplify getting of published Manifest [\\#13666](https://"
"github.com/rust-lang/cargo/pull/13666)"
msgstr ""

#: src/CHANGELOG.md:1312
msgid ""
"ci: update macos images to macos-13 [\\#13685](https://github.com/rust-lang/"
"cargo/pull/13685)"
msgstr ""

#: src/CHANGELOG.md:1314
msgid ""
"manifest: Split out an explicit step to resolve `Cargo.toml` [\\#13693]"
"(https://github.com/rust-lang/cargo/pull/13693)"
msgstr ""

#: src/CHANGELOG.md:1316
msgid ""
"manifest: Decouple target discovery from Target creation [\\#13701](https://"
"github.com/rust-lang/cargo/pull/13701)"
msgstr ""

#: src/CHANGELOG.md:1318
msgid ""
"manifest: Expose surce/spans for VirtualManifests [\\#13603](https://"
"github.com/rust-lang/cargo/pull/13603)"
msgstr ""

#: src/CHANGELOG.md:1320
msgid ""
"Update dependencies [\\#13609](https://github.com/rust-lang/cargo/pull/"
"13609) [\\#13674](https://github.com/rust-lang/cargo/pull/13674) [\\#13675]"
"(https://github.com/rust-lang/cargo/pull/13675) [\\#13679](https://"
"github.com/rust-lang/cargo/pull/13679) [\\#13680](https://github.com/rust-"
"lang/cargo/pull/13680) [\\#13692](https://github.com/rust-lang/cargo/pull/"
"13692) [\\#13731](https://github.com/rust-lang/cargo/pull/13731) [\\#13760]"
"(https://github.com/rust-lang/cargo/pull/13760) [\\#13950](https://"
"github.com/rust-lang/cargo/pull/13950)"
msgstr ""

#: src/CHANGELOG.md:1331
msgid "Cargo 1.78 (2024-05-02)"
msgstr ""

#: src/CHANGELOG.md:1332
msgid ""
"[7bb7b539...rust-1.78.0](https://github.com/rust-lang/cargo/compare/"
"7bb7b539...rust-1.78.0)"
msgstr ""

#: src/CHANGELOG.md:1336
msgid ""
"Stabilize global cache data tracking. The `-Zgc` flag is still unstable. "
"This is only for Cargo to start data collection, so that when automatic gc "
"is stabilized, it's less likely to see cache misses. [\\#13492](https://"
"github.com/rust-lang/cargo/pull/13492) [\\#13467](https://github.com/rust-"
"lang/cargo/pull/13467)"
msgstr ""

#: src/CHANGELOG.md:1341
msgid ""
"Stabilize lockfile format v4. Lockfile v3 is still the default version. "
"[\\#12852](https://github.com/rust-lang/cargo/pull/12852)"
msgstr ""

#: src/CHANGELOG.md:1343
msgid ""
"Auto-detecting whether output can be rendered using non-ASCII Unicode "
"characters. A configuration value `term.unicode` is added to control the "
"behavior manually. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"config.html#termunicode) [\\#13337](https://github.com/rust-lang/cargo/pull/"
"13337)"
msgstr ""

#: src/CHANGELOG.md:1347
msgid ""
"Support `target.<triple>.rustdocflags` in Cargo configuration. [docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/"
"config.html#targettriplerustdocflags) [\\#13197](https://github.com/rust-"
"lang/cargo/pull/13197)"
msgstr ""

#: src/CHANGELOG.md:1353
msgid ""
"cargo-add: Print a status when a dep feature is being created [\\#13434]"
"(https://github.com/rust-lang/cargo/pull/13434)"
msgstr ""

#: src/CHANGELOG.md:1355
msgid ""
"cargo-add: improve the error message when adding a package from a replaced "
"source. [\\#13281](https://github.com/rust-lang/cargo/pull/13281)"
msgstr ""

#: src/CHANGELOG.md:1357
msgid ""
"cargo-doc: Collapse down `Generated` statuses without `--verbose`. [\\#13557]"
"(https://github.com/rust-lang/cargo/pull/13557)"
msgstr ""

#: src/CHANGELOG.md:1359
msgid ""
"cargo-new: Print a 'Creating', rather than 'Created' status [\\#13367]"
"(https://github.com/rust-lang/cargo/pull/13367)"
msgstr ""

#: src/CHANGELOG.md:1361
msgid ""
"cargo-new: Print a note, rather than a comment, for more information "
"[\\#13371](https://github.com/rust-lang/cargo/pull/13371)"
msgstr ""

#: src/CHANGELOG.md:1363
msgid ""
"cargo-new: Print a hint when adding members to workspace [\\#13411](https://"
"github.com/rust-lang/cargo/pull/13411)"
msgstr ""

#: src/CHANGELOG.md:1365
msgid ""
"cargo-test: Suggest `--` for libtest arguments [\\#13448](https://github.com/"
"rust-lang/cargo/pull/13448)"
msgstr ""

#: src/CHANGELOG.md:1367
msgid ""
"cargo-update: Tell users when some dependencies are still behind latest. "
"[\\#13372](https://github.com/rust-lang/cargo/pull/13372)"
msgstr ""

#: src/CHANGELOG.md:1369
msgid ""
"Deprecate non-extension `.cargo/config` files. [\\#13349](https://github.com/"
"rust-lang/cargo/pull/13349)"
msgstr ""

#: src/CHANGELOG.md:1371
msgid ""
"Don't print rustdoc command lines on failure by default [\\#13387](https://"
"github.com/rust-lang/cargo/pull/13387)"
msgstr ""

#: src/CHANGELOG.md:1373
msgid ""
"Respect `package.rust-version` when generating new lockfiles. [\\#12861]"
"(https://github.com/rust-lang/cargo/pull/12861)"
msgstr ""

#: src/CHANGELOG.md:1375
msgid ""
"Send `User-Agent: cargo/1.2.3` header when communicating with remote "
"registries. Previously it was `cargo 1.2.3`, which didn't follow the HTTP "
"specifications. [\\#13548](https://github.com/rust-lang/cargo/pull/13548)"
msgstr ""

#: src/CHANGELOG.md:1378
msgid ""
"Emit a warning when `package.edition` field is missing in Cargo.toml. "
"[\\#13499](https://github.com/rust-lang/cargo/pull/13499) [\\#13504](https://"
"github.com/rust-lang/cargo/pull/13504) [\\#13505](https://github.com/rust-"
"lang/cargo/pull/13505) [\\#13533](https://github.com/rust-lang/cargo/pull/"
"13533)"
msgstr ""

#: src/CHANGELOG.md:1383
msgid ""
"Emit warnings from parsing virtual manifests. [\\#13589](https://github.com/"
"rust-lang/cargo/pull/13589)"
msgstr ""

#: src/CHANGELOG.md:1385
msgid ""
"Mention the workspace root location in the error message when collecting "
"workspace members. [\\#13480](https://github.com/rust-lang/cargo/pull/13480)"
msgstr ""

#: src/CHANGELOG.md:1388
msgid ""
"Clarify the profile in use in `Finished` status message. [\\#13422](https://"
"github.com/rust-lang/cargo/pull/13422)"
msgstr ""

#: src/CHANGELOG.md:1390
msgid ""
"Switched more notes/warnings to lowercase. [\\#13410](https://github.com/"
"rust-lang/cargo/pull/13410)"
msgstr ""

#: src/CHANGELOG.md:1392
msgid ""
"Report all packages incompatible with `package.rust-version.`, not just a "
"random one. [\\#13514](https://github.com/rust-lang/cargo/pull/13514)"
msgstr ""

#: src/CHANGELOG.md:1397
msgid ""
"cargo-add: don't add the new package to `workspace.members` if there is no "
"existing workspace in Cargo.toml. [\\#13391](https://github.com/rust-lang/"
"cargo/pull/13391)"
msgstr ""

#: src/CHANGELOG.md:1400
msgid ""
"cargo-add: Fix markdown line break in cargo-add [\\#13400](https://"
"github.com/rust-lang/cargo/pull/13400)"
msgstr ""

#: src/CHANGELOG.md:1402
msgid ""
"cargo-run: use Package ID Spec match packages [\\#13335](https://github.com/"
"rust-lang/cargo/pull/13335)"
msgstr ""

#: src/CHANGELOG.md:1404
msgid ""
"cargo-doc: doctest searches native libs in build script outputs. [\\#13490]"
"(https://github.com/rust-lang/cargo/pull/13490)"
msgstr ""

#: src/CHANGELOG.md:1406
msgid ""
"cargo-publish: strip also features from dev-dependencies from Cargo.toml to "
"publish. [\\#13518](https://github.com/rust-lang/cargo/pull/13518)"
msgstr ""

#: src/CHANGELOG.md:1408
msgid ""
"Don't duplicate comments when editing TOML via `cargo add/rm/init/new`. "
"[\\#13402](https://github.com/rust-lang/cargo/pull/13402)"
msgstr ""

#: src/CHANGELOG.md:1410
msgid ""
"Fix confusing error messages for sparse index replaced source. [\\#13433]"
"(https://github.com/rust-lang/cargo/pull/13433)"
msgstr ""

#: src/CHANGELOG.md:1412
msgid ""
"Respect `CARGO_TERM_COLOR` in '--list' and '-Zhelp'. [\\#13479](https://"
"github.com/rust-lang/cargo/pull/13479)"
msgstr ""

#: src/CHANGELOG.md:1414
msgid ""
"Control colors of errors and help texts from clap through "
"`CARGO_TERM_COLOR`. [\\#13463](https://github.com/rust-lang/cargo/pull/13463)"
msgstr ""

#: src/CHANGELOG.md:1416
msgid ""
"Don't panic on empty spans in Cargo.toml. [\\#13375](https://github.com/rust-"
"lang/cargo/pull/13375) [\\#13376](https://github.com/rust-lang/cargo/pull/"
"13376)"
msgstr ""

#: src/CHANGELOG.md:1422
msgid ""
"🔥 cargo-update: allows `--precise` to specify a yanked version of a package "
"[\\#13333](https://github.com/rust-lang/cargo/pull/13333)"
msgstr ""

#: src/CHANGELOG.md:1424
msgid ""
"`-Zcheck-cfg`: Add `docsrs` cfg as a well known `--check-cfg` [\\#13383]"
"(https://github.com/rust-lang/cargo/pull/13383)"
msgstr ""

#: src/CHANGELOG.md:1426
msgid ""
"`-Zcheck-cfg`: Silently ignore `cargo::rustc-check-cfg` to avoid MSRV "
"annoyance when stabilizing `-Zcheck-cfg`. [\\#13438](https://github.com/rust-"
"lang/cargo/pull/13438)"
msgstr ""

#: src/CHANGELOG.md:1429
msgid ""
"`-Zmsrv-policy`: Fallback to `rustc -v` when no MSRV is set [\\#13516]"
"(https://github.com/rust-lang/cargo/pull/13516)"
msgstr ""

#: src/CHANGELOG.md:1431
msgid ""
"`-Zscript`: Improve errors related to cargo script [\\#13346](https://"
"github.com/rust-lang/cargo/pull/13346)"
msgstr ""

#: src/CHANGELOG.md:1433
msgid ""
"`-Zpanic-abort-tests`: applies to doctests too [\\#13388](https://github.com/"
"rust-lang/cargo/pull/13388)"
msgstr ""

#: src/CHANGELOG.md:1435
msgid ""
"`-Zpublic-dependency`: supports enabling via the `-Zpublic-dependency` flag. "
"[\\#13340](https://github.com/rust-lang/cargo/pull/13340) [\\#13556](https://"
"github.com/rust-lang/cargo/pull/13556) [\\#13547](https://github.com/rust-"
"lang/cargo/pull/13547)"
msgstr ""

#: src/CHANGELOG.md:1439
msgid ""
"`-Zpublic-dependency`: test for packaging a public dependency [\\#13536]"
"(https://github.com/rust-lang/cargo/pull/13536)"
msgstr ""

#: src/CHANGELOG.md:1441
msgid ""
"`-Zrustdoc-map`: Add all unit's children recursively for `doc.extern-map` "
"option [\\#13481](https://github.com/rust-lang/cargo/pull/13481) [\\#13544]"
"(https://github.com/rust-lang/cargo/pull/13544)"
msgstr ""

#: src/CHANGELOG.md:1444
msgid ""
"`edition2024`: Enable edition migration for 2024. [\\#13429](https://"
"github.com/rust-lang/cargo/pull/13429)"
msgstr ""

#: src/CHANGELOG.md:1446
msgid ""
"`open-namespaces`: basic support for open namespaces ([RFC 3243](https://"
"github.com/rust-lang/rfcs/blob/master/text/3243-packages-as-optional-"
"namespaces.md)) ([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#open-namespaces)) [\\#13591](https://github.com/rust-lang/"
"cargo/pull/13591)"
msgstr ""

#: src/CHANGELOG.md:1453
msgid ""
"cargo-fetch: hide `cargo-fetch` recursive link in `--offline` man page. "
"[\\#13364](https://github.com/rust-lang/cargo/pull/13364)"
msgstr ""

#: src/CHANGELOG.md:1455
msgid ""
"cargo-install: `--list` option description starting with uppercase [\\#13344]"
"(https://github.com/rust-lang/cargo/pull/13344)"
msgstr ""

#: src/CHANGELOG.md:1457
msgid ""
"cargo-vendor: clarify vendored sources as read-only and ways to modify them "
"[\\#13512](https://github.com/rust-lang/cargo/pull/13512)"
msgstr ""

#: src/CHANGELOG.md:1459
msgid ""
"build-script: clarification of build script metadata set via "
"`cargo::metadata=KEY=VALUE`. [\\#13436](https://github.com/rust-lang/cargo/"
"pull/13436)"
msgstr ""

#: src/CHANGELOG.md:1461
msgid ""
"Clarify the `version` field in `[package]` is optional in Cargo.toml "
"[\\#13390](https://github.com/rust-lang/cargo/pull/13390)"
msgstr ""

#: src/CHANGELOG.md:1463
msgid ""
"Improve \"Registry Authentication\" docs [\\#13351](https://github.com/rust-"
"lang/cargo/pull/13351)"
msgstr ""

#: src/CHANGELOG.md:1465
msgid ""
"Improve \"Specifying Dependencies\" docs [\\#13341](https://github.com/rust-"
"lang/cargo/pull/13341)"
msgstr ""

#: src/CHANGELOG.md:1467
msgid ""
"Remove `package.documentation` from the “before publishing” list. [\\#13398]"
"(https://github.com/rust-lang/cargo/pull/13398)"
msgstr ""

#: src/CHANGELOG.md:1472
msgid ""
"🎉 Integrated tracing-chrome as a basic profiler for Cargo itself. [docs]"
"(https://doc.crates.io/contrib/tests/profiling.html) [\\#13399](https://"
"github.com/rust-lang/cargo/pull/13399) [\\#13551](https://github.com/rust-"
"lang/cargo/pull/13551)"
msgstr ""

#: src/CHANGELOG.md:1476
msgid ""
"Updated to `gix` 0.58.0 [\\#13380](https://github.com/rust-lang/cargo/pull/"
"13380)"
msgstr ""

#: src/CHANGELOG.md:1478
msgid ""
"Updated to `git2` 0.18.2 [\\#13412](https://github.com/rust-lang/cargo/pull/"
"13412)"
msgstr ""

#: src/CHANGELOG.md:1480
msgid ""
"Updated to `jobserver` 0.1.28 [\\#13419](https://github.com/rust-lang/cargo/"
"pull/13419)"
msgstr ""

#: src/CHANGELOG.md:1482
msgid ""
"Updated to `supports-hyperlinks` 3.0.0 [\\#13511](https://github.com/rust-"
"lang/cargo/pull/13511)"
msgstr ""

#: src/CHANGELOG.md:1484
msgid ""
"Updated to `rusqlite` 0.31.0 [\\#13510](https://github.com/rust-lang/cargo/"
"pull/13510)"
msgstr ""

#: src/CHANGELOG.md:1486
msgid ""
"bump-check: use symmetric difference when comparing source code [\\#13581]"
"(https://github.com/rust-lang/cargo/pull/13581)"
msgstr ""

#: src/CHANGELOG.md:1488
msgid ""
"bump-check: include rustfix and cargo-util-schemas [\\#13421](https://"
"github.com/rust-lang/cargo/pull/13421)"
msgstr ""

#: src/CHANGELOG.md:1490
msgid ""
"ci: enable m1 runner [\\#13377](https://github.com/rust-lang/cargo/pull/"
"13377)"
msgstr ""

#: src/CHANGELOG.md:1492
msgid ""
"ci: Ensure lockfile is respected during MSRV testing via `cargo-hack`. "
"[\\#13523](https://github.com/rust-lang/cargo/pull/13523)"
msgstr ""

#: src/CHANGELOG.md:1494
msgid ""
"cargo-util-schemas: Consistently compare MSRVs via "
"`RustVersion::is_compatible_with`. [\\#13537](https://github.com/rust-lang/"
"cargo/pull/13537)"
msgstr ""

#: src/CHANGELOG.md:1496
msgid ""
"console: Use new fancy `anstyle` API [\\#13368](https://github.com/rust-lang/"
"cargo/pull/13368) [\\#13562](https://github.com/rust-lang/cargo/pull/13562)"
msgstr ""

#: src/CHANGELOG.md:1499
msgid ""
"fingerprint: remove unnecessary Option in `Freshness::Dirty` [\\#13361]"
"(https://github.com/rust-lang/cargo/pull/13361)"
msgstr ""

#: src/CHANGELOG.md:1501
msgid ""
"fingerprint: abstract `std::fs` away from on-disk index cache [\\#13515]"
"(https://github.com/rust-lang/cargo/pull/13515)"
msgstr ""

#: src/CHANGELOG.md:1503
msgid ""
"mdman: Updated to `pulldown-cmark` 0.10.0 [\\#13517](https://github.com/rust-"
"lang/cargo/pull/13517)"
msgstr ""

#: src/CHANGELOG.md:1505
msgid ""
"refactor: Renamed `Config` to `GlobalContext` [\\#13409](https://github.com/"
"rust-lang/cargo/pull/13409) [\\#13486](https://github.com/rust-lang/cargo/"
"pull/13486) [\\#13506](https://github.com/rust-lang/cargo/pull/13506)"
msgstr ""

#: src/CHANGELOG.md:1509
msgid ""
"refactor: Removed unused `sysroot_host_libdir`. [\\#13468](https://"
"github.com/rust-lang/cargo/pull/13468)"
msgstr ""

#: src/CHANGELOG.md:1511
msgid ""
"refactor: Expose source/spans to Manifest for emitting lints [\\#13593]"
"(https://github.com/rust-lang/cargo/pull/13593)"
msgstr ""

#: src/CHANGELOG.md:1513
msgid ""
"refactor: Flatten manifest parsing [\\#13589](https://github.com/rust-lang/"
"cargo/pull/13589)"
msgstr ""

#: src/CHANGELOG.md:1515
msgid ""
"refactor: Make lockfile diffing/printing more reusable [\\#13564](https://"
"github.com/rust-lang/cargo/pull/13564)"
msgstr ""

#: src/CHANGELOG.md:1517
msgid ""
"test: Updated to `snapbox` 0.5.0 [\\#13441](https://github.com/rust-lang/"
"cargo/pull/13441)"
msgstr ""

#: src/CHANGELOG.md:1519
msgid ""
"test: Verify terminal styling via snapbox's `term-svg` feature. [\\#13461]"
"(https://github.com/rust-lang/cargo/pull/13461) [\\#13465](https://"
"github.com/rust-lang/cargo/pull/13465) [\\#13520](https://github.com/rust-"
"lang/cargo/pull/13520)"
msgstr ""

#: src/CHANGELOG.md:1523
msgid ""
"test: Ensure `nonzero_exit_code` test isn't affected by developers "
"`RUST_BACKTRACE` setting [\\#13385](https://github.com/rust-lang/cargo/pull/"
"13385)"
msgstr ""

#: src/CHANGELOG.md:1525
msgid ""
"test: Add tests for using worktrees. [\\#13567](https://github.com/rust-lang/"
"cargo/pull/13567)"
msgstr ""

#: src/CHANGELOG.md:1527
msgid ""
"test: Fix old_cargos tests [\\#13435](https://github.com/rust-lang/cargo/"
"pull/13435)"
msgstr ""

#: src/CHANGELOG.md:1529
msgid ""
"test: Fixed tests due to changes in rust-lang/rust. [\\#13362](https://"
"github.com/rust-lang/cargo/pull/13362) [\\#13382](https://github.com/rust-"
"lang/cargo/pull/13382) [\\#13415](https://github.com/rust-lang/cargo/pull/"
"13415) [\\#13424](https://github.com/rust-lang/cargo/pull/13424) [\\#13444]"
"(https://github.com/rust-lang/cargo/pull/13444) [\\#13455](https://"
"github.com/rust-lang/cargo/pull/13455) [\\#13464](https://github.com/rust-"
"lang/cargo/pull/13464) [\\#13466](https://github.com/rust-lang/cargo/pull/"
"13466) [\\#13469](https://github.com/rust-lang/cargo/pull/13469)"
msgstr ""

#: src/CHANGELOG.md:1539
msgid ""
"test: disable lldb test as it requires privileges to run on macOS [\\#13416]"
"(https://github.com/rust-lang/cargo/pull/13416)"
msgstr ""

#: src/CHANGELOG.md:1542
msgid "Cargo 1.77.1 (2024-03-28)"
msgstr ""

#: src/CHANGELOG.md:1546
msgid ""
"Debuginfo is no longer stripped by default for Windows MSVC targets. This "
"caused an unexpected regression in 1.77.0 that broke backtraces. [\\#13654]"
"(https://github.com/rust-lang/cargo/pull/13654)"
msgstr ""

#: src/CHANGELOG.md:1549
msgid "Cargo 1.77 (2024-03-21)"
msgstr ""

#: src/CHANGELOG.md:1550
msgid ""
"[1a2666dd...rust-1.77.0](https://github.com/rust-lang/cargo/compare/"
"1a2666dd...rust-1.77.0)"
msgstr ""

#: src/CHANGELOG.md:1554
msgid ""
"🎉 Stabilize the package identifier format as [Package ID Spec](https://"
"doc.rust-lang.org/nightly/cargo/reference/pkgid-spec.html). This format can "
"be used across most of the commands in Cargo, including the `--package`/`-p` "
"flag, `cargo pkgid`, `cargo metadata`, and JSON messages from `--message-"
"format=json`. [\\#12914](https://github.com/rust-lang/cargo/pull/12914) "
"[\\#13202](https://github.com/rust-lang/cargo/pull/13202) [\\#13311](https://"
"github.com/rust-lang/cargo/pull/13311) [\\#13298](https://github.com/rust-"
"lang/cargo/pull/13298) [\\#13322](https://github.com/rust-lang/cargo/pull/"
"13322)"
msgstr ""

#: src/CHANGELOG.md:1563
msgid ""
"Add colors to `-Zhelp` console output [\\#13269](https://github.com/rust-"
"lang/cargo/pull/13269)"
msgstr ""

#: src/CHANGELOG.md:1565
msgid ""
"build script: Extend the build directive syntax with `cargo::`. [\\#12201]"
"(https://github.com/rust-lang/cargo/pull/12201) [\\#13212](https://"
"github.com/rust-lang/cargo/pull/13212)"
msgstr ""

#: src/CHANGELOG.md:1571
msgid ""
"🎉 Disabling debuginfo now implies `strip = \"debuginfo\"` (when `strip` is "
"not set) to strip pre-existing debuginfo coming from the standard library, "
"reducing the default size of release binaries considerably (from ~4.5 MiB "
"down to ~450 KiB for helloworld on Linux x64). [\\#13257](https://github.com/"
"rust-lang/cargo/pull/13257)"
msgstr ""

#: src/CHANGELOG.md:1576
msgid ""
"Add `rustc` style errors for manifest parsing. [\\#13172](https://github.com/"
"rust-lang/cargo/pull/13172)"
msgstr ""

#: src/CHANGELOG.md:1578
msgid ""
"Deprecate rustc plugin support in cargo [\\#13248](https://github.com/rust-"
"lang/cargo/pull/13248)"
msgstr ""

#: src/CHANGELOG.md:1580
msgid ""
"cargo-vendor: Hold the mutate exclusive lock when vendoring. [\\#12509]"
"(https://github.com/rust-lang/cargo/pull/12509)"
msgstr ""

#: src/CHANGELOG.md:1582
msgid ""
"crates-io: Set `Content-Type: application/json` only for requests with a "
"body payload [\\#13264](https://github.com/rust-lang/cargo/pull/13264)"
msgstr ""

#: src/CHANGELOG.md:1587
msgid ""
"jobserver: inherit jobserver from env for all kinds of runner [\\#12776]"
"(https://github.com/rust-lang/cargo/pull/12776)"
msgstr ""

#: src/CHANGELOG.md:1589
msgid ""
"build script: Set `OUT_DIR` for all units with build scripts [\\#13204]"
"(https://github.com/rust-lang/cargo/pull/13204)"
msgstr ""

#: src/CHANGELOG.md:1591
msgid ""
"cargo-add: find the correct package with given features from Git "
"repositories with multiple packages. [\\#13213](https://github.com/rust-lang/"
"cargo/pull/13213)"
msgstr ""

#: src/CHANGELOG.md:1594
msgid ""
"cargo-fix: always inherit the jobserver [\\#13225](https://github.com/rust-"
"lang/cargo/pull/13225)"
msgstr ""

#: src/CHANGELOG.md:1596
msgid ""
"cargo-fix: Call rustc fewer times to improve the performance. [\\#13243]"
"(https://github.com/rust-lang/cargo/pull/13243)"
msgstr ""

#: src/CHANGELOG.md:1598
msgid ""
"cargo-new: only inherit workspace package table if the new package is a "
"member [\\#13261](https://github.com/rust-lang/cargo/pull/13261)"
msgstr ""

#: src/CHANGELOG.md:1600
msgid ""
"cargo-update: `--precise` accepts arbitrary git revisions [\\#13250](https://"
"github.com/rust-lang/cargo/pull/13250)"
msgstr ""

#: src/CHANGELOG.md:1602
msgid ""
"manifest: Provide unused key warnings for lints table [\\#13262](https://"
"github.com/rust-lang/cargo/pull/13262)"
msgstr ""

#: src/CHANGELOG.md:1604
msgid ""
"rustfix: Support inserting new lines. [\\#13226](https://github.com/rust-"
"lang/cargo/pull/13226)"
msgstr ""

#: src/CHANGELOG.md:1609
msgid ""
"🔥 `-Zgit`: Implementation of shallow libgit2 fetches behind an unstable "
"flag [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#git) [\\#13252](https://github.com/rust-lang/cargo/pull/13252)"
msgstr ""

#: src/CHANGELOG.md:1612
msgid ""
"🔥 Add unstable `--output-format` option to  `cargo rustdoc`, providing "
"tools with a way to lean on rustdoc’s experimental JSON format. [docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#output-"
"format-for-rustdoc) [\\#12252](https://github.com/rust-lang/cargo/pull/"
"12252) [\\#13284](https://github.com/rust-lang/cargo/pull/13284) [\\#13325]"
"(https://github.com/rust-lang/cargo/pull/13325)"
msgstr ""

#: src/CHANGELOG.md:1618
msgid ""
"`-Zcheck-cfg`: Rework `--check-cfg` generation comment [\\#13195](https://"
"github.com/rust-lang/cargo/pull/13195)"
msgstr ""

#: src/CHANGELOG.md:1620
msgid ""
"`-Zcheck-cfg`: Go back to passing an empty `values()` when no features are "
"declared [\\#13316](https://github.com/rust-lang/cargo/pull/13316)"
msgstr ""

#: src/CHANGELOG.md:1622
msgid ""
"`-Zprecise-pre-release`: the flag is added but not implemented yet. "
"[\\#13296](https://github.com/rust-lang/cargo/pull/13296) [\\#13320](https://"
"github.com/rust-lang/cargo/pull/13320)"
msgstr ""

#: src/CHANGELOG.md:1625
msgid ""
"`-Zpublic-dependency`: support publish package with a `public` field. "
"[\\#13245](https://github.com/rust-lang/cargo/pull/13245)"
msgstr ""

#: src/CHANGELOG.md:1627
msgid ""
"`-Zpublic-dependency`: help text of `--public`/`--no-public` flags for "
"`cargo add` [\\#13272](https://github.com/rust-lang/cargo/pull/13272)"
msgstr ""

#: src/CHANGELOG.md:1629
msgid ""
"`-Zscript`: Add prefix-char frontmatter syntax support [\\#13247](https://"
"github.com/rust-lang/cargo/pull/13247)"
msgstr ""

#: src/CHANGELOG.md:1631
msgid ""
"`-Zscript`: Add multiple experimental manifest syntaxes [\\#13241](https://"
"github.com/rust-lang/cargo/pull/13241)"
msgstr ""

#: src/CHANGELOG.md:1633
msgid ""
"`-Ztrim-paths`: remap common prefix only [\\#13210](https://github.com/rust-"
"lang/cargo/pull/13210)"
msgstr ""

#: src/CHANGELOG.md:1638
msgid ""
"Added guidance on setting homepage in manifest [\\#13293](https://github.com/"
"rust-lang/cargo/pull/13293)"
msgstr ""

#: src/CHANGELOG.md:1640
msgid ""
"Clarified how custom subcommands are looked up. [\\#13203](https://"
"github.com/rust-lang/cargo/pull/13203)"
msgstr ""

#: src/CHANGELOG.md:1642
msgid ""
"Clarified why `du` function uses mutex [\\#13273](https://github.com/rust-"
"lang/cargo/pull/13273)"
msgstr ""

#: src/CHANGELOG.md:1644
msgid ""
"Highlighted \"How to find features enabled on dependencies\" [\\#13305]"
"(https://github.com/rust-lang/cargo/pull/13305)"
msgstr ""

#: src/CHANGELOG.md:1646
msgid ""
"Delete sentence about parentheses being unsupported in license [\\#13292]"
"(https://github.com/rust-lang/cargo/pull/13292)"
msgstr ""

#: src/CHANGELOG.md:1648
msgid ""
"resolver: clarify how pre-release version is handled in dependency "
"resolution. [\\#13286](https://github.com/rust-lang/cargo/pull/13286)"
msgstr ""

#: src/CHANGELOG.md:1650
msgid ""
"cargo-test: clarify the target selection of the test options. [\\#13236]"
"(https://github.com/rust-lang/cargo/pull/13236)"
msgstr ""

#: src/CHANGELOG.md:1652
msgid ""
"cargo-install: clarify `--path` is the installation source not destination "
"[\\#13205](https://github.com/rust-lang/cargo/pull/13205)"
msgstr ""

#: src/CHANGELOG.md:1654
msgid ""
"contrib: Fix team HackMD links [\\#13237](https://github.com/rust-lang/cargo/"
"pull/13237)"
msgstr ""

#: src/CHANGELOG.md:1656
msgid ""
"contrib: Highlight the non-blocking feature gating technique [\\#13307]"
"(https://github.com/rust-lang/cargo/pull/13307)"
msgstr ""

#: src/CHANGELOG.md:1661
msgid ""
"🎉 New member crate [`cargo-util-schemas`](https://crates.io/crates/cargo-"
"util-schemas)! This contains low-level Cargo schema types, focusing on "
"`serde` and `FromStr` for use in reading files and parsing command-lines. "
"Any logic for getting final semantics from these will likely need other "
"tools to process, like `cargo metadata`. The crates.io publish of this crate "
"is the same as other members crates. It follows Rust's [6-week release "
"process](https://doc.crates.io/contrib/process/release.html#cratesio-"
"publishing). [\\#13178](https://github.com/rust-lang/cargo/pull/13178) "
"[\\#13185](https://github.com/rust-lang/cargo/pull/13185) [\\#13186](https://"
"github.com/rust-lang/cargo/pull/13186) [\\#13209](https://github.com/rust-"
"lang/cargo/pull/13209) [\\#13267](https://github.com/rust-lang/cargo/pull/"
"13267)"
msgstr ""

#: src/CHANGELOG.md:1673
msgid ""
"Updated to `gix` 0.57.1. [\\#13230](https://github.com/rust-lang/cargo/pull/"
"13230)"
msgstr ""

#: src/CHANGELOG.md:1675
msgid ""
"cargo-fix: Remove error-format special-case in `cargo fix` [\\#13224]"
"(https://github.com/rust-lang/cargo/pull/13224)"
msgstr ""

#: src/CHANGELOG.md:1677
msgid ""
"cargo-credential: bump to 0.4.3 [\\#13221](https://github.com/rust-lang/"
"cargo/pull/13221)"
msgstr ""

#: src/CHANGELOG.md:1679
msgid ""
"mdman: updated to `handlebars` 5.0.0. [\\#13168](https://github.com/rust-"
"lang/cargo/pull/13168) [\\#13249](https://github.com/rust-lang/cargo/pull/"
"13249)"
msgstr ""

#: src/CHANGELOG.md:1682
msgid ""
"rustfix: remove useless clippy rules and fix a typo [\\#13182](https://"
"github.com/rust-lang/cargo/pull/13182)"
msgstr ""

#: src/CHANGELOG.md:1684
msgid ""
"ci: fix Dependabot's MSRV auto-update [\\#13265](https://github.com/rust-"
"lang/cargo/pull/13265) [\\#13324](https://github.com/rust-lang/cargo/pull/"
"13324) [\\#13268](https://github.com/rust-lang/cargo/pull/13268)"
msgstr ""

#: src/CHANGELOG.md:1688
msgid ""
"ci: Add [dependency dashboard](https://github.com/rust-lang/cargo/issues/"
"13256). [\\#13255](https://github.com/rust-lang/cargo/pull/13255)"
msgstr ""

#: src/CHANGELOG.md:1690
msgid ""
"ci: update alpine docker tag to v3.19 [\\#13228](https://github.com/rust-"
"lang/cargo/pull/13228)"
msgstr ""

#: src/CHANGELOG.md:1692
msgid ""
"ci: Improve GitHub Actions CI config [\\#13317](https://github.com/rust-lang/"
"cargo/pull/13317)"
msgstr ""

#: src/CHANGELOG.md:1694
msgid ""
"resolver: do not panic when sorting empty summaries [\\#13287](https://"
"github.com/rust-lang/cargo/pull/13287)"
msgstr ""

#: src/CHANGELOG.md:1697
msgid "Cargo 1.76 (2024-02-08)"
msgstr ""

#: src/CHANGELOG.md:1698
msgid ""
"[6790a512...rust-1.76.0](https://github.com/rust-lang/cargo/compare/"
"6790a512...rust-1.76.0)"
msgstr ""

#: src/CHANGELOG.md:1702
msgid ""
"Added a Windows application manifest file to the built `cargo.exe` for "
"windows msvc. [\\#13131](https://github.com/rust-lang/cargo/pull/13131)  \n"
"Notable changes:"
msgstr ""

#: src/CHANGELOG.md:1705
msgid "States the compatibility with Windows versions 7, 8, 8.1, 10 and 11."
msgstr ""

#: src/CHANGELOG.md:1706
msgid "Sets the code page to UTF-8."
msgstr ""

#: src/CHANGELOG.md:1707
msgid "Enables long path awareness."
msgstr ""

#: src/CHANGELOG.md:1708
msgid ""
"Added color output for `cargo --list`. [\\#12992](https://github.com/rust-"
"lang/cargo/pull/12992)"
msgstr ""

#: src/CHANGELOG.md:1710
msgid ""
"cargo-add: `--optional <dep>` would create a `<dep> = \"dep:<dep>\"` "
"feature. [\\#13071](https://github.com/rust-lang/cargo/pull/13071)"
msgstr ""

#: src/CHANGELOG.md:1712
msgid ""
"Extends Package ID spec for unambiguous specs. [docs](https://doc.rust-"
"lang.org/nightly/cargo/reference/pkgid-spec.html) [\\#12933](https://"
"github.com/rust-lang/cargo/pull/12933)  \n"
"Specifically,"
msgstr ""

#: src/CHANGELOG.md:1716
msgid "Supports `git+` and `path+` schemes."
msgstr ""

#: src/CHANGELOG.md:1717
msgid "Supports Git ref query strings, such as `?branch=dev` or `?tag=1.69.0`."
msgstr ""

#: src/CHANGELOG.md:1721
msgid ""
"❗️ Disallow `[lints]` in virtual workspaces as they are ignored  and users "
"likely meant `[workspace.lints]`. This was an oversight in the initial "
"implementation (e.g. a `[dependencies]` produces the same error). [\\#13155]"
"(https://github.com/rust-lang/cargo/pull/13155)"
msgstr ""

#: src/CHANGELOG.md:1724
msgid ""
"Disallow empty name in several places like package ID spec and `cargo new`. "
"[\\#13152](https://github.com/rust-lang/cargo/pull/13152)"
msgstr ""

#: src/CHANGELOG.md:1726
msgid ""
"Respect `rust-lang/rust`'s `omit-git-hash` option. [\\#12968](https://"
"github.com/rust-lang/cargo/pull/12968)"
msgstr ""

#: src/CHANGELOG.md:1728
msgid ""
"Displays error count with a number, even when there is only one error. "
"[\\#12484](https://github.com/rust-lang/cargo/pull/12484)"
msgstr ""

#: src/CHANGELOG.md:1730
msgid ""
"`all-static` feature now includes `vendored-libgit2`. [\\#13134](https://"
"github.com/rust-lang/cargo/pull/13134)"
msgstr ""

#: src/CHANGELOG.md:1732
msgid ""
"crates-io: Add support for other 2xx HTTP status codes when interacting with "
"registries. [\\#13158](https://github.com/rust-lang/cargo/pull/13158) "
"[\\#13160](https://github.com/rust-lang/cargo/pull/13160)"
msgstr ""

#: src/CHANGELOG.md:1735
msgid ""
"home: Replace SHGetFolderPathW with SHGetKnownFolderPath. [\\#13173](https://"
"github.com/rust-lang/cargo/pull/13173)"
msgstr ""

#: src/CHANGELOG.md:1740
msgid ""
"Print rustc messages colored on wincon. [\\#13140](https://github.com/rust-"
"lang/cargo/pull/13140)"
msgstr ""

#: src/CHANGELOG.md:1742
msgid ""
"Fixed bash completion in directory with spaces. [\\#13126](https://"
"github.com/rust-lang/cargo/pull/13126)"
msgstr ""

#: src/CHANGELOG.md:1744
msgid ""
"Fixed uninstall a running binary failed on Windows. [\\#13053](https://"
"github.com/rust-lang/cargo/pull/13053) [\\#13099](https://github.com/rust-"
"lang/cargo/pull/13099)"
msgstr ""

#: src/CHANGELOG.md:1747
msgid ""
"Fixed the error message for duplicate links. [\\#12973](https://github.com/"
"rust-lang/cargo/pull/12973)"
msgstr ""

#: src/CHANGELOG.md:1749
msgid ""
"Fixed `--quiet` being used with nested subcommands. [\\#12959](https://"
"github.com/rust-lang/cargo/pull/12959)"
msgstr ""

#: src/CHANGELOG.md:1751
msgid ""
"Fixed panic when there is a cycle in dev-dependencies. [\\#12977](https://"
"github.com/rust-lang/cargo/pull/12977)"
msgstr ""

#: src/CHANGELOG.md:1753
msgid ""
"Don't panic when failed to parse rustc commit-hash. [\\#12963](https://"
"github.com/rust-lang/cargo/pull/12963) [\\#12965](https://github.com/rust-"
"lang/cargo/pull/12965)"
msgstr ""

#: src/CHANGELOG.md:1756
msgid ""
"Don't do git fetches when updating workspace members. [\\#12975](https://"
"github.com/rust-lang/cargo/pull/12975)"
msgstr ""

#: src/CHANGELOG.md:1758
msgid ""
"Avoid writing CACHEDIR.TAG if it already exists. [\\#13132](https://"
"github.com/rust-lang/cargo/pull/13132)"
msgstr ""

#: src/CHANGELOG.md:1760
msgid ""
"Accept `?` in the `--package` flag if it's a valid pkgid spec. [\\#13315]"
"(https://github.com/rust-lang/cargo/pull/13315) [\\#13318](https://"
"github.com/rust-lang/cargo/pull/13318)"
msgstr ""

#: src/CHANGELOG.md:1763
msgid ""
"cargo-package: Only filter out `target` directory if it's in the package "
"root. [\\#12944](https://github.com/rust-lang/cargo/pull/12944)"
msgstr ""

#: src/CHANGELOG.md:1765
msgid ""
"cargo-package: errors out when a build script doesn't exist or is outside "
"the package root. [\\#12995](https://github.com/rust-lang/cargo/pull/12995)"
msgstr ""

#: src/CHANGELOG.md:1767
msgid ""
"cargo-credential-1password: Add missing `--account` argument to `op signin` "
"command. [\\#12985](https://github.com/rust-lang/cargo/pull/12985) [\\#12986]"
"(https://github.com/rust-lang/cargo/pull/12986)"
msgstr ""

#: src/CHANGELOG.md:1774
msgid ""
"🔥 The `-Zgc` flag enables garbage collection for deleting old, unused files "
"in cargo's cache. That is, downloaded source files and registry index under "
"the `CARGO_HOME` directory. [docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#gc) [\\#12634](https://github.com/rust-lang/cargo/"
"pull/12634) [\\#12958](https://github.com/rust-lang/cargo/pull/12958) "
"[\\#12981](https://github.com/rust-lang/cargo/pull/12981) [\\#13055](https://"
"github.com/rust-lang/cargo/pull/13055)"
msgstr ""

#: src/CHANGELOG.md:1782
msgid ""
"🔥 Added a new environment variable `CARGO_RUSTC_CURRENT_DIR`. This is a "
"path that rustc is invoked from. [docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/environment-variables.html?"
"highlight=CARGO_RUSTC_CURRENT_DIR#environment-variables-cargo-sets-for-"
"crates) [\\#12996](https://github.com/rust-lang/cargo/pull/12996)"
msgstr ""

#: src/CHANGELOG.md:1786
msgid ""
"`-Zcheck-cfg`: Include declared list of features in fingerprint for `-Zcheck-"
"cfg`. [\\#13012](https://github.com/rust-lang/cargo/pull/13012)"
msgstr ""

#: src/CHANGELOG.md:1788
msgid ""
"`-Zcheck-cfg`: Fix `--check-cfg` invocations with zero features. [\\#13011]"
"(https://github.com/rust-lang/cargo/pull/13011)"
msgstr ""

#: src/CHANGELOG.md:1790
msgid ""
"`-Ztrim-paths`: reorder `--remap-path-prefix` flags for `-Zbuild-std`. "
"[\\#13065](https://github.com/rust-lang/cargo/pull/13065)"
msgstr ""

#: src/CHANGELOG.md:1792
msgid ""
"`-Ztrim-paths`: explicitly remap current dir by using `.`. [\\#13114]"
"(https://github.com/rust-lang/cargo/pull/13114)"
msgstr ""

#: src/CHANGELOG.md:1794
msgid ""
"`-Ztrim-paths`: exercise with real world debugger. [\\#13091](https://"
"github.com/rust-lang/cargo/pull/13091) [\\#13118](https://github.com/rust-"
"lang/cargo/pull/13118)"
msgstr ""

#: src/CHANGELOG.md:1797
msgid ""
"`-Zpublic-dependency`: Limit `exported-private-dependencies` lints to "
"libraries. [\\#13135](https://github.com/rust-lang/cargo/pull/13135)"
msgstr ""

#: src/CHANGELOG.md:1799
msgid ""
"`-Zpublic-dependency`: Disallow workspace-inheriting of dependency public "
"status. [\\#13125](https://github.com/rust-lang/cargo/pull/13125)"
msgstr ""

#: src/CHANGELOG.md:1801
msgid ""
"`-Zpublic-dependency`: Add `--public` for `cargo add`. [\\#13046](https://"
"github.com/rust-lang/cargo/pull/13046)"
msgstr ""

#: src/CHANGELOG.md:1803
msgid ""
"`-Zpublic-dependency`: Remove unused public-deps error handling [\\#13036]"
"(https://github.com/rust-lang/cargo/pull/13036)"
msgstr ""

#: src/CHANGELOG.md:1805
msgid ""
"`-Zmsrv-policy`: Prefer MSRV, rather than ignore incompatible. [\\#12950]"
"(https://github.com/rust-lang/cargo/pull/12950)"
msgstr ""

#: src/CHANGELOG.md:1807
msgid ""
"`-Zmsrv-policy`: De-prioritize no-rust-version in MSRV resolver. [\\#13066]"
"(https://github.com/rust-lang/cargo/pull/13066)"
msgstr ""

#: src/CHANGELOG.md:1809
msgid ""
"`-Zrustdoc-scrape-examples`: Don't filter on workspace members when scraping "
"doc examples. [\\#13077](https://github.com/rust-lang/cargo/pull/13077)"
msgstr ""

#: src/CHANGELOG.md:1814
msgid ""
"Recommends a wider selection of libsecret-compatible password managers. "
"[\\#12993](https://github.com/rust-lang/cargo/pull/12993)"
msgstr ""

#: src/CHANGELOG.md:1816
msgid ""
"Clarified different targets has different sets of `CARGO_CFG_*` values. "
"[\\#13069](https://github.com/rust-lang/cargo/pull/13069)"
msgstr ""

#: src/CHANGELOG.md:1818
msgid ""
"Clarified `[lints]` table only affects local development of the current "
"package. [\\#12976](https://github.com/rust-lang/cargo/pull/12976)"
msgstr ""

#: src/CHANGELOG.md:1820
msgid ""
"Clarified `cargo search` can search in alternative registries. [\\#12962]"
"(https://github.com/rust-lang/cargo/pull/12962)"
msgstr ""

#: src/CHANGELOG.md:1822
msgid ""
"Added common CI practices for verifying `rust-version` (MSRV) field. "
"[\\#13056](https://github.com/rust-lang/cargo/pull/13056)"
msgstr ""

#: src/CHANGELOG.md:1824
msgid ""
"Added a link to rustc lint levels doc. [\\#12990](https://github.com/rust-"
"lang/cargo/pull/12990)"
msgstr ""

#: src/CHANGELOG.md:1826
msgid ""
"Added a link to the packages lint table from the related workspace table "
"[\\#13057](https://github.com/rust-lang/cargo/pull/13057)"
msgstr ""

#: src/CHANGELOG.md:1828
msgid ""
"contrib: Add more resources to the contrib docs. [\\#13008](https://"
"github.com/rust-lang/cargo/pull/13008)"
msgstr ""

#: src/CHANGELOG.md:1830
msgid ""
"contrib: Update how that credential crates are published. [\\#13006](https://"
"github.com/rust-lang/cargo/pull/13006)"
msgstr ""

#: src/CHANGELOG.md:1832
msgid ""
"contrib: remove review capacity notice. [\\#13070](https://github.com/rust-"
"lang/cargo/pull/13070)"
msgstr ""

#: src/CHANGELOG.md:1837
msgid ""
"🎉 Migrate `rustfix` crate to the `rust-lang/cargo` repository. [\\#13005]"
"(https://github.com/rust-lang/cargo/pull/13005) [\\#13042](https://"
"github.com/rust-lang/cargo/pull/13042) [\\#13047](https://github.com/rust-"
"lang/cargo/pull/13047) [\\#13048](https://github.com/rust-lang/cargo/pull/"
"13048) [\\#13050](https://github.com/rust-lang/cargo/pull/13050)"
msgstr ""

#: src/CHANGELOG.md:1843
msgid ""
"Updated to `curl-sys` 0.4.70, which corresponds to curl 8.4.0. [\\#13147]"
"(https://github.com/rust-lang/cargo/pull/13147)"
msgstr ""

#: src/CHANGELOG.md:1845
msgid ""
"Updated to `gix-index` 0.27.1. [\\#13148](https://github.com/rust-lang/cargo/"
"pull/13148)"
msgstr ""

#: src/CHANGELOG.md:1847
msgid ""
"Updated to `itertools` 0.12.0. [\\#13086](https://github.com/rust-lang/cargo/"
"pull/13086)"
msgstr ""

#: src/CHANGELOG.md:1849
msgid ""
"Updated to `rusqlite` 0.30.0. [\\#13087](https://github.com/rust-lang/cargo/"
"pull/13087)"
msgstr ""

#: src/CHANGELOG.md:1851
msgid ""
"Updated to `toml_edit` 0.21.0. [\\#13088](https://github.com/rust-lang/cargo/"
"pull/13088)"
msgstr ""

#: src/CHANGELOG.md:1853
msgid ""
"Updated to `windows-sys` 0.52.0. [\\#13089](https://github.com/rust-lang/"
"cargo/pull/13089)"
msgstr ""

#: src/CHANGELOG.md:1855
msgid ""
"Updated to `tracing` 0.1.37 for being be compatible with rustc_log. "
"[\\#13239](https://github.com/rust-lang/cargo/pull/13239) [\\#13242](https://"
"github.com/rust-lang/cargo/pull/13242)"
msgstr ""

#: src/CHANGELOG.md:1858
msgid ""
"Re-enable flaky gitoxide auth tests thanks to update to `gix-config`. "
"[\\#13117](https://github.com/rust-lang/cargo/pull/13117) [\\#13129](https://"
"github.com/rust-lang/cargo/pull/13129) [\\#13130](https://github.com/rust-"
"lang/cargo/pull/13130)"
msgstr ""

#: src/CHANGELOG.md:1862
msgid ""
"Dogfood Cargo `-Zlints` table feature. [\\#12178](https://github.com/rust-"
"lang/cargo/pull/12178)"
msgstr ""

#: src/CHANGELOG.md:1864
msgid ""
"Refactored `Cargo.toml` parsing code in preparation of extracting an "
"official schema API. [\\#12954](https://github.com/rust-lang/cargo/pull/"
"12954) [\\#12960](https://github.com/rust-lang/cargo/pull/12960) [\\#12961]"
"(https://github.com/rust-lang/cargo/pull/12961) [\\#12971](https://"
"github.com/rust-lang/cargo/pull/12971) [\\#13000](https://github.com/rust-"
"lang/cargo/pull/13000) [\\#13021](https://github.com/rust-lang/cargo/pull/"
"13021) [\\#13080](https://github.com/rust-lang/cargo/pull/13080) [\\#13097]"
"(https://github.com/rust-lang/cargo/pull/13097) [\\#13123](https://"
"github.com/rust-lang/cargo/pull/13123) [\\#13128](https://github.com/rust-"
"lang/cargo/pull/13128) [\\#13154](https://github.com/rust-lang/cargo/pull/"
"13154) [\\#13166](https://github.com/rust-lang/cargo/pull/13166)"
msgstr ""

#: src/CHANGELOG.md:1878
msgid ""
"Use `IndexSummary` in `query{_vec}` functions. [\\#12970](https://github.com/"
"rust-lang/cargo/pull/12970)"
msgstr ""

#: src/CHANGELOG.md:1880
msgid ""
"ci: migrate renovate config [\\#13106](https://github.com/rust-lang/cargo/"
"pull/13106)"
msgstr ""

#: src/CHANGELOG.md:1882
msgid ""
"ci: Always update gix packages together [\\#13093](https://github.com/rust-"
"lang/cargo/pull/13093)"
msgstr ""

#: src/CHANGELOG.md:1884
msgid ""
"ci: Catch naive use of AtomicU64 early [\\#12988](https://github.com/rust-"
"lang/cargo/pull/12988)"
msgstr ""

#: src/CHANGELOG.md:1886
msgid ""
"xtask-bump-check: dont check `home` against beta/stable branches [\\#13167]"
"(https://github.com/rust-lang/cargo/pull/13167)"
msgstr ""

#: src/CHANGELOG.md:1888
msgid ""
"cargo-test-support: Handle $message_type in JSON diagnostics [\\#13016]"
"(https://github.com/rust-lang/cargo/pull/13016)"
msgstr ""

#: src/CHANGELOG.md:1890
msgid ""
"cargo-test-support: Add more options to registry test support. [\\#13085]"
"(https://github.com/rust-lang/cargo/pull/13085)"
msgstr ""

#: src/CHANGELOG.md:1892
msgid ""
"cargo-test-support: Add features to the default Cargo.toml file [\\#12997]"
"(https://github.com/rust-lang/cargo/pull/12997)"
msgstr ""

#: src/CHANGELOG.md:1894
msgid ""
"cargo-test-support: Fix clippy-wrapper test race condition. [\\#12999]"
"(https://github.com/rust-lang/cargo/pull/12999)"
msgstr ""

#: src/CHANGELOG.md:1896
msgid ""
"test: Don't rely on mtime to test changes [\\#13143](https://github.com/rust-"
"lang/cargo/pull/13143)"
msgstr ""

#: src/CHANGELOG.md:1898
msgid ""
"test: remove unnecessary packages and versions for `optionals` tests "
"[\\#13108](https://github.com/rust-lang/cargo/pull/13108)"
msgstr ""

#: src/CHANGELOG.md:1900
msgid ""
"test: Remove the deleted feature `test_2018_feature` from the test. "
"[\\#13156](https://github.com/rust-lang/cargo/pull/13156)"
msgstr ""

#: src/CHANGELOG.md:1902
msgid ""
"test: remove jobserver env var in some tests. [\\#13072](https://github.com/"
"rust-lang/cargo/pull/13072)"
msgstr ""

#: src/CHANGELOG.md:1904
msgid ""
"test: Fix a rustflags test using a wrong buildfile name [\\#12987](https://"
"github.com/rust-lang/cargo/pull/12987)"
msgstr ""

#: src/CHANGELOG.md:1906
msgid ""
"test: Fix some test output validation. [\\#12982](https://github.com/rust-"
"lang/cargo/pull/12982)"
msgstr ""

#: src/CHANGELOG.md:1908
msgid ""
"test: Ignore changing_spec_relearns_crate_types on windows-gnu [\\#12972]"
"(https://github.com/rust-lang/cargo/pull/12972)"
msgstr ""

#: src/CHANGELOG.md:1911
msgid "Cargo 1.75 (2023-12-28)"
msgstr ""

#: src/CHANGELOG.md:1912
msgid ""
"[59596f0f...rust-1.75.0](https://github.com/rust-lang/cargo/compare/"
"59596f0f...rust-1.75.0)"
msgstr ""

#: src/CHANGELOG.md:1916
msgid ""
"`package.version` field in `Cargo.toml` is now optional and defaults to "
"`0.0.0`. Packages without the `package.version` field cannot be published. "
"[\\#12786](https://github.com/rust-lang/cargo/pull/12786)"
msgstr ""

#: src/CHANGELOG.md:1919
msgid ""
"Links in `--timings` and `cargo doc` outputs are clickable on supported "
"terminals, controllable through `term.hyperlinks` config value. [\\#12889]"
"(https://github.com/rust-lang/cargo/pull/12889)"
msgstr ""

#: src/CHANGELOG.md:1922
msgid ""
"Print environment variables for build script executions with `-vv`. "
"[\\#12829](https://github.com/rust-lang/cargo/pull/12829)"
msgstr ""

#: src/CHANGELOG.md:1924
msgid ""
"cargo-new: add new packages to \\[workspace.members\\] automatically. "
"[\\#12779](https://github.com/rust-lang/cargo/pull/12779)"
msgstr ""

#: src/CHANGELOG.md:1926
msgid ""
"cargo-doc: print a new `Generated` status displaying the full path. "
"[\\#12859](https://github.com/rust-lang/cargo/pull/12859)"
msgstr ""

#: src/CHANGELOG.md:1931
msgid ""
"cargo-new: warn if crate name doesn't follow snake_case or kebab-case. "
"[\\#12766](https://github.com/rust-lang/cargo/pull/12766)"
msgstr ""

#: src/CHANGELOG.md:1933
msgid ""
"cargo-install: clarify the arg `<crate>` to install is positional. [\\#12841]"
"(https://github.com/rust-lang/cargo/pull/12841)"
msgstr ""

#: src/CHANGELOG.md:1935
msgid ""
"cargo-install: Suggest an alternative version on MSRV failure. [\\#12798]"
"(https://github.com/rust-lang/cargo/pull/12798)"
msgstr ""

#: src/CHANGELOG.md:1937
msgid ""
"cargo-install: reports more detailed SemVer errors. [\\#12924](https://"
"github.com/rust-lang/cargo/pull/12924)"
msgstr ""

#: src/CHANGELOG.md:1939
msgid ""
"cargo-install: install only once if there are crates duplicated. [\\#12868]"
"(https://github.com/rust-lang/cargo/pull/12868)"
msgstr ""

#: src/CHANGELOG.md:1941
msgid ""
"cargo-remove: Clarify flag behavior of different dependency kinds. [\\#12823]"
"(https://github.com/rust-lang/cargo/pull/12823)"
msgstr ""

#: src/CHANGELOG.md:1943
msgid ""
"cargo-remove: suggest the dependency to remove exists only in the other "
"section. [\\#12865](https://github.com/rust-lang/cargo/pull/12865)"
msgstr ""

#: src/CHANGELOG.md:1945
msgid ""
"cargo-update: Do not call it \"Downgrading\" when difference is only build "
"metadata. [\\#12796](https://github.com/rust-lang/cargo/pull/12796)"
msgstr ""

#: src/CHANGELOG.md:1947
msgid ""
"Enhanced help text to clarify `--test` flag is for Cargo targets, not test "
"functions. [\\#12915](https://github.com/rust-lang/cargo/pull/12915)"
msgstr ""

#: src/CHANGELOG.md:1949
msgid ""
"Included package name/version in build script warnings. [\\#12799](https://"
"github.com/rust-lang/cargo/pull/12799)"
msgstr ""

#: src/CHANGELOG.md:1951
msgid ""
"Provide next steps for bad -Z flag. [\\#12857](https://github.com/rust-lang/"
"cargo/pull/12857)"
msgstr ""

#: src/CHANGELOG.md:1953
msgid ""
"Suggest `cargo search` when `cargo-<command>` cannot be found. [\\#12840]"
"(https://github.com/rust-lang/cargo/pull/12840)"
msgstr ""

#: src/CHANGELOG.md:1955
msgid ""
"Do not allow empty feature name. [\\#12928](https://github.com/rust-lang/"
"cargo/pull/12928)"
msgstr ""

#: src/CHANGELOG.md:1957
msgid ""
"Added unsupported short flag suggestion for `--target` and `--exclude` "
"flags. [\\#12805](https://github.com/rust-lang/cargo/pull/12805)"
msgstr ""

#: src/CHANGELOG.md:1959
msgid ""
"Added unsupported short flag suggestion for `--out-dir` flag. [\\#12755]"
"(https://github.com/rust-lang/cargo/pull/12755)"
msgstr ""

#: src/CHANGELOG.md:1961
msgid ""
"Added unsupported lowercase `-z` flag suggestion for `-Z` flag. [\\#12788]"
"(https://github.com/rust-lang/cargo/pull/12788)"
msgstr ""

#: src/CHANGELOG.md:1963
msgid ""
"Added better suggestion for unsupported `--path` flag. [\\#12811](https://"
"github.com/rust-lang/cargo/pull/12811)"
msgstr ""

#: src/CHANGELOG.md:1965
msgid ""
"Added detailed message when target directory path is invalid. [\\#12820]"
"(https://github.com/rust-lang/cargo/pull/12820)"
msgstr ""

#: src/CHANGELOG.md:1970
msgid ""
"Fixed corruption when cargo was killed while writing to files. [\\#12744]"
"(https://github.com/rust-lang/cargo/pull/12744)"
msgstr ""

#: src/CHANGELOG.md:1972
msgid ""
"cargo-add: Preserve more comments [\\#12838](https://github.com/rust-lang/"
"cargo/pull/12838)"
msgstr ""

#: src/CHANGELOG.md:1974
msgid ""
"cargo-fix: preserve jobserver file descriptors on rustc invocation. "
"[\\#12951](https://github.com/rust-lang/cargo/pull/12951)"
msgstr ""

#: src/CHANGELOG.md:1976
msgid ""
"cargo-remove: Preserve feature comments [\\#12837](https://github.com/rust-"
"lang/cargo/pull/12837)"
msgstr ""

#: src/CHANGELOG.md:1978
msgid ""
"Removed unnecessary backslash in timings HTML report when error happens. "
"[\\#12934](https://github.com/rust-lang/cargo/pull/12934)"
msgstr ""

#: src/CHANGELOG.md:1980
msgid ""
"Fixed error message that invalid a feature name can contain `-`. [\\#12939]"
"(https://github.com/rust-lang/cargo/pull/12939)"
msgstr ""

#: src/CHANGELOG.md:1982
msgid ""
"When there's a version of a dependency in the lockfile, Cargo would use that "
"\"exact\" version, including the build metadata. [\\#12772](https://"
"github.com/rust-lang/cargo/pull/12772)"
msgstr ""

#: src/CHANGELOG.md:1988
msgid ""
"Added `Edition2024` unstable feature. [docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/unstable.html#edition-2024) [\\#12771](https://"
"github.com/rust-lang/cargo/pull/12771)"
msgstr ""

#: src/CHANGELOG.md:1991
msgid ""
"🔥 The `-Ztrim-paths` feature adds a new profile setting to control how "
"paths are sanitized in the resulting binary. ([RFC 3127](https://github.com/"
"rust-lang/rfcs/blob/master/text/3127-trim-paths.md)) ([docs](https://"
"doc.rust-lang.org/nightly/cargo/reference/unstable.html#profile-trim-paths-"
"option)) [\\#12625](https://github.com/rust-lang/cargo/pull/12625) [\\#12900]"
"(https://github.com/rust-lang/cargo/pull/12900) [\\#12908](https://"
"github.com/rust-lang/cargo/pull/12908)"
msgstr ""

#: src/CHANGELOG.md:1998
msgid ""
"`-Zcheck-cfg`: Adjusted for new rustc syntax and behavior. [\\#12845]"
"(https://github.com/rust-lang/cargo/pull/12845)"
msgstr ""

#: src/CHANGELOG.md:2000
msgid ""
"`-Zcheck-cfg`: Remove outdated option to `-Zcheck-cfg` warnings. [\\#12884]"
"(https://github.com/rust-lang/cargo/pull/12884)"
msgstr ""

#: src/CHANGELOG.md:2002
msgid ""
"`public-dependency`: Support `public` dependency configuration with "
"workspace deps. [\\#12817](https://github.com/rust-lang/cargo/pull/12817)"
msgstr ""

#: src/CHANGELOG.md:2007
msgid ""
"profile: add missing `strip` info. [\\#12754](https://github.com/rust-lang/"
"cargo/pull/12754)"
msgstr ""

#: src/CHANGELOG.md:2009
msgid ""
"features: a note about the new limit on number of features. [\\#12913]"
"(https://github.com/rust-lang/cargo/pull/12913)"
msgstr ""

#: src/CHANGELOG.md:2011
msgid ""
"crates-io: Add doc comment for `NewCrate` struct. [\\#12782](https://"
"github.com/rust-lang/cargo/pull/12782)"
msgstr ""

#: src/CHANGELOG.md:2013
msgid ""
"resolver: Highlight commands to answer dep resolution questions. [\\#12903]"
"(https://github.com/rust-lang/cargo/pull/12903)"
msgstr ""

#: src/CHANGELOG.md:2015
msgid ""
"cargo-bench: `--bench` is passed in unconditionally to bench harnesses. "
"[\\#12850](https://github.com/rust-lang/cargo/pull/12850)"
msgstr ""

#: src/CHANGELOG.md:2017
msgid ""
"cargo-login: mention args after `--` in manpage. [\\#12832](https://"
"github.com/rust-lang/cargo/pull/12832)"
msgstr ""

#: src/CHANGELOG.md:2019
msgid ""
"cargo-vendor: clarify config to use vendored source is printed to stdout "
"[\\#12893](https://github.com/rust-lang/cargo/pull/12893)"
msgstr ""

#: src/CHANGELOG.md:2021
msgid ""
"manifest: update to SPDX 2.3 license expression and 3.20 license list. "
"[\\#12827](https://github.com/rust-lang/cargo/pull/12827)"
msgstr ""

#: src/CHANGELOG.md:2023
msgid ""
"contrib: Policy on manifest editing [\\#12836](https://github.com/rust-lang/"
"cargo/pull/12836)"
msgstr ""

#: src/CHANGELOG.md:2025
msgid ""
"contrib: use `AND` search terms in mdbook search and fixed broken links. "
"[\\#12812](https://github.com/rust-lang/cargo/pull/12812) [\\#12813](https://"
"github.com/rust-lang/cargo/pull/12813) [\\#12814](https://github.com/rust-"
"lang/cargo/pull/12814)"
msgstr ""

#: src/CHANGELOG.md:2029
msgid ""
"contrib: Describe how to add a new package [\\#12878](https://github.com/"
"rust-lang/cargo/pull/12878)"
msgstr ""

#: src/CHANGELOG.md:2031
msgid ""
"contrib: Removed review capacity notice. [\\#12842](https://github.com/rust-"
"lang/cargo/pull/12842)"
msgstr ""

#: src/CHANGELOG.md:2036
msgid ""
"Updated to `itertools` 0.11.0. [\\#12759](https://github.com/rust-lang/cargo/"
"pull/12759)"
msgstr ""

#: src/CHANGELOG.md:2038
msgid ""
"Updated to `cargo_metadata` 0.18.0. [\\#12758](https://github.com/rust-lang/"
"cargo/pull/12758)"
msgstr ""

#: src/CHANGELOG.md:2040
msgid ""
"Updated to `curl-sys` 0.4.68, which corresponds to curl 8.4.0. [\\#12808]"
"(https://github.com/rust-lang/cargo/pull/12808)"
msgstr ""

#: src/CHANGELOG.md:2042
msgid ""
"Updated to `toml` 0.8.2. [\\#12760](https://github.com/rust-lang/cargo/pull/"
"12760)"
msgstr ""

#: src/CHANGELOG.md:2044
msgid ""
"Updated to `toml_edit` 0.20.2. [\\#12761](https://github.com/rust-lang/cargo/"
"pull/12761)"
msgstr ""

#: src/CHANGELOG.md:2046
msgid ""
"Updated to `gix` to 0.55.2 [\\#12906](https://github.com/rust-lang/cargo/"
"pull/12906)"
msgstr ""

#: src/CHANGELOG.md:2048
msgid ""
"Disabled the `custom_target::custom_bin_target` test on windows-gnu. "
"[\\#12763](https://github.com/rust-lang/cargo/pull/12763)"
msgstr ""

#: src/CHANGELOG.md:2050
msgid ""
"Refactored `Cargo.toml` parsing code in preparation of extracting an "
"official schema API. [\\#12768](https://github.com/rust-lang/cargo/pull/"
"12768) [\\#12881](https://github.com/rust-lang/cargo/pull/12881) [\\#12902]"
"(https://github.com/rust-lang/cargo/pull/12902) [\\#12911](https://"
"github.com/rust-lang/cargo/pull/12911) [\\#12948](https://github.com/rust-"
"lang/cargo/pull/12948)"
msgstr ""

#: src/CHANGELOG.md:2057
msgid ""
"Split out SemVer logic to its own module. [\\#12926](https://github.com/rust-"
"lang/cargo/pull/12926) [\\#12940](https://github.com/rust-lang/cargo/pull/"
"12940)"
msgstr ""

#: src/CHANGELOG.md:2060
msgid ""
"source: Prepare for new `PackageIDSpec` syntax [\\#12938](https://github.com/"
"rust-lang/cargo/pull/12938)"
msgstr ""

#: src/CHANGELOG.md:2062
msgid ""
"resolver: Consolidate logic in `VersionPreferences` [\\#12930](https://"
"github.com/rust-lang/cargo/pull/12930)"
msgstr ""

#: src/CHANGELOG.md:2064
msgid ""
"Make the `SourceId::precise` field an Enum. [\\#12849](https://github.com/"
"rust-lang/cargo/pull/12849)"
msgstr ""

#: src/CHANGELOG.md:2066
msgid ""
"shell: Write at once rather than in fragments. [\\#12880](https://github.com/"
"rust-lang/cargo/pull/12880)"
msgstr ""

#: src/CHANGELOG.md:2068
msgid ""
"Move up looking at index summary enum [\\#12749](https://github.com/rust-"
"lang/cargo/pull/12749) [\\#12923](https://github.com/rust-lang/cargo/pull/"
"12923)"
msgstr ""

#: src/CHANGELOG.md:2071
msgid ""
"Generate redirection HTML pages in CI for Cargo Contributor Guide. [\\#12846]"
"(https://github.com/rust-lang/cargo/pull/12846)"
msgstr ""

#: src/CHANGELOG.md:2073
msgid ""
"Add new package cache lock modes. [\\#12706](https://github.com/rust-lang/"
"cargo/pull/12706)"
msgstr ""

#: src/CHANGELOG.md:2075
msgid ""
"Add regression test for issue 6915: features and transitive dev deps. "
"[\\#12907](https://github.com/rust-lang/cargo/pull/12907)"
msgstr ""

#: src/CHANGELOG.md:2077
msgid ""
"Auto-labeling when PR review state changes. [\\#12856](https://github.com/"
"rust-lang/cargo/pull/12856)"
msgstr ""

#: src/CHANGELOG.md:2079
msgid ""
"credential: include license files in all published crates. [\\#12953]"
"(https://github.com/rust-lang/cargo/pull/12953)"
msgstr ""

#: src/CHANGELOG.md:2081
msgid ""
"credential: Filter `cargo-credential-*` dependencies by OS. [\\#12949]"
"(https://github.com/rust-lang/cargo/pull/12949)"
msgstr ""

#: src/CHANGELOG.md:2083
msgid ""
"ci: bump cargo-semver-checks to 0.24.0 [\\#12795](https://github.com/rust-"
"lang/cargo/pull/12795)"
msgstr ""

#: src/CHANGELOG.md:2085
msgid ""
"ci: set and verify all MSRVs for Cargo's crates automatically. [\\#12767]"
"(https://github.com/rust-lang/cargo/pull/12767) [\\#12654](https://"
"github.com/rust-lang/cargo/pull/12654)"
msgstr ""

#: src/CHANGELOG.md:2088
msgid ""
"ci: use separate concurrency group for publishing Cargo Contributor Book. "
"[\\#12834](https://github.com/rust-lang/cargo/pull/12834) [\\#12835](https://"
"github.com/rust-lang/cargo/pull/12835)"
msgstr ""

#: src/CHANGELOG.md:2091
msgid ""
"ci: update `actions/checkout` action to v4 [\\#12762](https://github.com/"
"rust-lang/cargo/pull/12762)"
msgstr ""

#: src/CHANGELOG.md:2093
msgid ""
"cargo-search: improved the margin calculation for the output. [\\#12890]"
"(https://github.com/rust-lang/cargo/pull/12890)"
msgstr ""

#: src/CHANGELOG.md:2096
msgid "Cargo 1.74 (2023-11-16)"
msgstr ""

#: src/CHANGELOG.md:2097
msgid ""
"[80eca0e5...rust-1.74.0](https://github.com/rust-lang/cargo/compare/"
"80eca0e5...rust-1.74.0)"
msgstr ""

#: src/CHANGELOG.md:2101
msgid ""
"🎉 The `[lints]` table has been stabilized, allowing you to configure "
"reporting levels for rustc and other tool lints in `Cargo.toml`. ([RFC 3389]"
"(https://github.com/rust-lang/rfcs/blob/master/text/3389-manifest-lint.md)) "
"([docs](https://doc.rust-lang.org/nightly/cargo/reference/manifest.html#the-"
"lints-section)) [\\#12584](https://github.com/rust-lang/cargo/pull/12584) "
"[\\#12648](https://github.com/rust-lang/cargo/pull/12648)"
msgstr ""

#: src/CHANGELOG.md:2106
msgid ""
"🎉 The unstable features `credential-process` and `registry-auth` have been "
"stabilized. These features consolidate the way to authenticate with private "
"registries. ([RFC 2730](https://github.com/rust-lang/rfcs/blob/master/text/"
"2730-cargo-token-from-process.md)) ([RFC 3139](https://github.com/rust-lang/"
"rfcs/blob/master/text/3139-cargo-alternative-registry-auth.md)) ([docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/registry-"
"authentication.html)) [\\#12590](https://github.com/rust-lang/cargo/pull/"
"12590) [\\#12622](https://github.com/rust-lang/cargo/pull/12622) [\\#12623]"
"(https://github.com/rust-lang/cargo/pull/12623) [\\#12626](https://"
"github.com/rust-lang/cargo/pull/12626) [\\#12641](https://github.com/rust-"
"lang/cargo/pull/12641) [\\#12644](https://github.com/rust-lang/cargo/pull/"
"12644) [\\#12649](https://github.com/rust-lang/cargo/pull/12649) [\\#12671]"
"(https://github.com/rust-lang/cargo/pull/12671) [\\#12709](https://"
"github.com/rust-lang/cargo/pull/12709)  \n"
"Notable changes:"
msgstr ""

#: src/CHANGELOG.md:2121
msgid ""
"Introducing a new protocol for both external and built-in providers to store "
"and retrieve credentials for registry authentication."
msgstr ""

#: src/CHANGELOG.md:2122
msgid ""
"Adding the `auth-required` field in the registry index's `config.json`, "
"enabling authenticated sparse index, crate downloads, and search API."
msgstr ""

#: src/CHANGELOG.md:2123
msgid ""
"For using alternative registries with authentication, a credential provider "
"must be configured to avoid unknowingly storing unencrypted credentials on "
"disk."
msgstr ""

#: src/CHANGELOG.md:2124
msgid ""
"These settings can be configured in `[registry]` and `[registries]` tables."
msgstr ""

#: src/CHANGELOG.md:2125
msgid ""
"🎉 `--keep-going` flag has been stabilized and is now available in each "
"build command (except `bench` and `test`, which have `--no-fail-fast` "
"instead). ([docs](https://doc.rust-lang.org/cargo/commands/cargo-"
"build.html#option-cargo-build---keep-going)) [\\#12568](https://github.com/"
"rust-lang/cargo/pull/12568)"
msgstr ""

#: src/CHANGELOG.md:2129
msgid ""
"Added `--dry-run` flag and summary line at the end for `cargo clean`. "
"[\\#12638](https://github.com/rust-lang/cargo/pull/12638)"
msgstr ""

#: src/CHANGELOG.md:2131
msgid ""
"Added a short alias `-n` for cli option `--dry-run`. [\\#12660](https://"
"github.com/rust-lang/cargo/pull/12660)"
msgstr ""

#: src/CHANGELOG.md:2133
msgid ""
"Added support for `target.'cfg(..)'.linker`. [\\#12535](https://github.com/"
"rust-lang/cargo/pull/12535)"
msgstr ""

#: src/CHANGELOG.md:2135
msgid ""
"Allowed incomplete versions when they are unambiguous for flags like `--"
"package`. [\\#12591](https://github.com/rust-lang/cargo/pull/12591) "
"[\\#12614](https://github.com/rust-lang/cargo/pull/12614) [\\#12806](https://"
"github.com/rust-lang/cargo/pull/12806)"
msgstr ""

#: src/CHANGELOG.md:2142
msgid ""
"❗️ Changed how arrays in configuration are merged. The order was unspecified "
"and now follows how other configuration types work for consistency. [summary]"
"(https://blog.rust-lang.org/inside-rust/2023/08/24/cargo-config-"
"merging.html) [\\#12515](https://github.com/rust-lang/cargo/pull/12515)"
msgstr ""

#: src/CHANGELOG.md:2146
msgid ""
"❗️ cargo-clean: error out if `--doc` is mixed with `-p`. [\\#12637](https://"
"github.com/rust-lang/cargo/pull/12637)"
msgstr ""

#: src/CHANGELOG.md:2148
msgid ""
"❗ cargo-new / cargo-init no longer exclude `Cargo.lock` in VCS ignore files "
"for libraries. [\\#12382](https://github.com/rust-lang/cargo/pull/12382)"
msgstr ""

#: src/CHANGELOG.md:2150
msgid ""
"cargo-update: silently deprecate `--aggressive` in favor of the new `--"
"recursive`. [\\#12544](https://github.com/rust-lang/cargo/pull/12544)"
msgstr ""

#: src/CHANGELOG.md:2152
msgid ""
"cargo-update: `-p/--package` can be used as a positional argument. [\\#12545]"
"(https://github.com/rust-lang/cargo/pull/12545) [\\#12586](https://"
"github.com/rust-lang/cargo/pull/12586)"
msgstr ""

#: src/CHANGELOG.md:2155
msgid ""
"cargo-install: suggest `--git` when the package name looks like a URL. "
"[\\#12575](https://github.com/rust-lang/cargo/pull/12575)"
msgstr ""

#: src/CHANGELOG.md:2157
msgid ""
"cargo-add: summarize the feature list when it's too long. [\\#12662](https://"
"github.com/rust-lang/cargo/pull/12662) [\\#12702](https://github.com/rust-"
"lang/cargo/pull/12702)"
msgstr ""

#: src/CHANGELOG.md:2160
msgid ""
"Shell completion for `--target` uses rustup but falls back to rustc. "
"[\\#12606](https://github.com/rust-lang/cargo/pull/12606)"
msgstr ""

#: src/CHANGELOG.md:2162
msgid ""
"Help users know possible `--target` values. [\\#12607](https://github.com/"
"rust-lang/cargo/pull/12607)"
msgstr ""

#: src/CHANGELOG.md:2164
msgid ""
"Enhanced \"registry index not found\" error message. [\\#12732](https://"
"github.com/rust-lang/cargo/pull/12732)"
msgstr ""

#: src/CHANGELOG.md:2166
msgid ""
"Enhanced CLI help message of `--explain`. [\\#12592](https://github.com/rust-"
"lang/cargo/pull/12592)"
msgstr ""

#: src/CHANGELOG.md:2168
msgid ""
"Enhanced deserialization errors of untagged enums with `serde-untagged`. "
"[\\#12574](https://github.com/rust-lang/cargo/pull/12574) [\\#12581](https://"
"github.com/rust-lang/cargo/pull/12581)"
msgstr ""

#: src/CHANGELOG.md:2171
msgid ""
"Enhanced the error when mismatching prerelease version candidates. [\\#12659]"
"(https://github.com/rust-lang/cargo/pull/12659)"
msgstr ""

#: src/CHANGELOG.md:2173
msgid ""
"Enhanced the suggestion on ambiguous Package ID spec. [\\#12685](https://"
"github.com/rust-lang/cargo/pull/12685)"
msgstr ""

#: src/CHANGELOG.md:2175
msgid ""
"Enhanced TOML parse errors to show the context. [\\#12556](https://"
"github.com/rust-lang/cargo/pull/12556)"
msgstr ""

#: src/CHANGELOG.md:2177
msgid ""
"Enhanced filesystem error by adding wrappers around `std::fs::metadata`. "
"[\\#12636](https://github.com/rust-lang/cargo/pull/12636)"
msgstr ""

#: src/CHANGELOG.md:2179
msgid ""
"Enhanced resolver version mismatch warning. [\\#12573](https://github.com/"
"rust-lang/cargo/pull/12573)"
msgstr ""

#: src/CHANGELOG.md:2181
msgid ""
"Use clap to suggest alternative argument for unsupported arguments. "
"[\\#12529](https://github.com/rust-lang/cargo/pull/12529) [\\#12693](https://"
"github.com/rust-lang/cargo/pull/12693) [\\#12723](https://github.com/rust-"
"lang/cargo/pull/12723)"
msgstr ""

#: src/CHANGELOG.md:2185
msgid ""
"Removed redundant information from cargo new/init `--help` output. [\\#12594]"
"(https://github.com/rust-lang/cargo/pull/12594)"
msgstr ""

#: src/CHANGELOG.md:2187
msgid ""
"Console output and styling tweaks. [\\#12578](https://github.com/rust-lang/"
"cargo/pull/12578) [\\#12655](https://github.com/rust-lang/cargo/pull/12655) "
"[\\#12593](https://github.com/rust-lang/cargo/pull/12593)"
msgstr ""

#: src/CHANGELOG.md:2194
msgid ""
"Use full target spec for `cargo rustc --print --target`. [\\#12743](https://"
"github.com/rust-lang/cargo/pull/12743)"
msgstr ""

#: src/CHANGELOG.md:2196
msgid ""
"Copy PDBs also for EFI targets. [\\#12688](https://github.com/rust-lang/"
"cargo/pull/12688)"
msgstr ""

#: src/CHANGELOG.md:2198
msgid ""
"Fixed resolver behavior being independent of package order. [\\#12602]"
"(https://github.com/rust-lang/cargo/pull/12602)"
msgstr ""

#: src/CHANGELOG.md:2200
msgid ""
"Fixed unnecessary clean up of `profile.release.package.\"*\"` for `cargo "
"remove`. [\\#12624](https://github.com/rust-lang/cargo/pull/12624)"
msgstr ""

#: src/CHANGELOG.md:2205
msgid ""
"`-Zasymmetric-token`: Created dedicated unstable flag for asymmetric-token "
"support. [\\#12551](https://github.com/rust-lang/cargo/pull/12551)"
msgstr ""

#: src/CHANGELOG.md:2207
msgid ""
"`-Zasymmetric-token`: Improved logout message for asymmetric tokens. "
"[\\#12587](https://github.com/rust-lang/cargo/pull/12587)"
msgstr ""

#: src/CHANGELOG.md:2209
msgid ""
"`-Zmsrv-policy`: **Very** preliminary MSRV resolver support. [\\#12560]"
"(https://github.com/rust-lang/cargo/pull/12560)"
msgstr ""

#: src/CHANGELOG.md:2211
msgid ""
"`-Zscript`: Hack in code fence support. [\\#12681](https://github.com/rust-"
"lang/cargo/pull/12681)"
msgstr ""

#: src/CHANGELOG.md:2213
msgid ""
"`-Zbindeps`: Support dependencies from registries. [\\#12421](https://"
"github.com/rust-lang/cargo/pull/12421)"
msgstr ""

#: src/CHANGELOG.md:2218
msgid ""
"❗ Policy change: Checking `Cargo.lock` into version control is now the "
"default choice, even for libraries. Lockfile and CI integration "
"documentations are also expanded. [Policy docs](https://doc.rust-lang.org/"
"nightly/cargo/faq.html#why-have-cargolock-in-version-control), [Lockfile "
"docs](https://doc.rust-lang.org/nightly/cargo/guide/cargo-toml-vs-cargo-"
"lock.html), [CI docs](https://doc.rust-lang.org/nightly/cargo/guide/"
"continuous-integration.html), [\\#12382](https://github.com/rust-lang/cargo/"
"pull/12382) [\\#12630](https://github.com/rust-lang/cargo/pull/12630)"
msgstr ""

#: src/CHANGELOG.md:2225
msgid ""
"SemVer: Update documentation about removing optional dependencies. [\\#12687]"
"(https://github.com/rust-lang/cargo/pull/12687)"
msgstr ""

#: src/CHANGELOG.md:2227
msgid ""
"Contrib: Add process for security responses. [\\#12487](https://github.com/"
"rust-lang/cargo/pull/12487)"
msgstr ""

#: src/CHANGELOG.md:2229
msgid ""
"cargo-publish: warn about upload timeout. [\\#12733](https://github.com/rust-"
"lang/cargo/pull/12733)"
msgstr ""

#: src/CHANGELOG.md:2231
msgid ""
"mdbook: use _AND_ search when having multiple terms. [\\#12548](https://"
"github.com/rust-lang/cargo/pull/12548)"
msgstr ""

#: src/CHANGELOG.md:2233
msgid ""
"Established publish best practices [\\#12745](https://github.com/rust-lang/"
"cargo/pull/12745)"
msgstr ""

#: src/CHANGELOG.md:2235
msgid ""
"Clarify caret requirements. [\\#12679](https://github.com/rust-lang/cargo/"
"pull/12679)"
msgstr ""

#: src/CHANGELOG.md:2237
msgid ""
"Clarify how `version` works for `git` dependencies. [\\#12270](https://"
"github.com/rust-lang/cargo/pull/12270)"
msgstr ""

#: src/CHANGELOG.md:2239
msgid ""
"Clarify and differentiate defaults for split-debuginfo. [\\#12680](https://"
"github.com/rust-lang/cargo/pull/12680)"
msgstr ""

#: src/CHANGELOG.md:2241
msgid ""
"Added missing `strip` entries in `dev` and `release` profiles. [\\#12748]"
"(https://github.com/rust-lang/cargo/pull/12748)"
msgstr ""

#: src/CHANGELOG.md:2246
msgid ""
"Updated to `curl-sys` 0.4.66, which corresponds to curl 8.3.0. [\\#12718]"
"(https://github.com/rust-lang/cargo/pull/12718)"
msgstr ""

#: src/CHANGELOG.md:2248
msgid ""
"Updated to `gitoxide` 0.54.1. [\\#12731](https://github.com/rust-lang/cargo/"
"pull/12731)"
msgstr ""

#: src/CHANGELOG.md:2250
msgid ""
"Updated to `git2` 0.18.0, which corresponds to libgit2 1.7.1. [\\#12580]"
"(https://github.com/rust-lang/cargo/pull/12580)"
msgstr ""

#: src/CHANGELOG.md:2252
msgid ""
"Updated to `cargo_metadata` 0.17.0. [\\#12758](https://github.com/rust-lang/"
"cargo/pull/12610)"
msgstr ""

#: src/CHANGELOG.md:2254
msgid ""
"Updated target-arch-aware crates to support mips r6 targets [\\#12720]"
"(https://github.com/rust-lang/cargo/pull/12720)"
msgstr ""

#: src/CHANGELOG.md:2256
msgid ""
"publish.py: Remove obsolete `sleep()` calls. [\\#12686](https://github.com/"
"rust-lang/cargo/pull/12686)"
msgstr ""

#: src/CHANGELOG.md:2258
msgid ""
"Define `{{command}}` for use in src/doc/man/includes [\\#12570](https://"
"github.com/rust-lang/cargo/pull/12570)"
msgstr ""

#: src/CHANGELOG.md:2260
msgid ""
"Set tracing target `network` for networking messages. [\\#12582](https://"
"github.com/rust-lang/cargo/pull/12582)"
msgstr ""

#: src/CHANGELOG.md:2262
msgid ""
"cargo-test-support: Add `with_stdout_unordered`. [\\#12635](https://"
"github.com/rust-lang/cargo/pull/12635)"
msgstr ""

#: src/CHANGELOG.md:2264
msgid ""
"dep: Switch from `termcolor` to `anstream`. [\\#12751](https://github.com/"
"rust-lang/cargo/pull/12751)"
msgstr ""

#: src/CHANGELOG.md:2266
msgid ""
"Put `Source` trait under `cargo::sources`. [\\#12527](https://github.com/"
"rust-lang/cargo/pull/12527)"
msgstr ""

#: src/CHANGELOG.md:2268
msgid ""
"SourceId: merge `name` and `alt_registry_key` into one enum. [\\#12675]"
"(https://github.com/rust-lang/cargo/pull/12675)"
msgstr ""

#: src/CHANGELOG.md:2270
msgid ""
"TomlManifest: fail when package_root is not a directory. [\\#12722](https://"
"github.com/rust-lang/cargo/pull/12722)"
msgstr ""

#: src/CHANGELOG.md:2272
msgid ""
"util: enhanced doc of `network::retry` doc. [\\#12583](https://github.com/"
"rust-lang/cargo/pull/12583)"
msgstr ""

#: src/CHANGELOG.md:2274
msgid ""
"refactor: Pull out cargo-add MSRV code for reuse [\\#12553](https://"
"github.com/rust-lang/cargo/pull/12553)"
msgstr ""

#: src/CHANGELOG.md:2276
msgid ""
"refactor(install): Move value parsing to clap [\\#12547](https://github.com/"
"rust-lang/cargo/pull/12547)"
msgstr ""

#: src/CHANGELOG.md:2278
msgid ""
"Fixed spurious errors with networking tests. [\\#12726](https://github.com/"
"rust-lang/cargo/pull/12726)"
msgstr ""

#: src/CHANGELOG.md:2280
msgid ""
"Use a more compact relative-time format for `CARGO_LOG` internal logging. "
"[\\#12542](https://github.com/rust-lang/cargo/pull/12542)"
msgstr ""

#: src/CHANGELOG.md:2282
msgid ""
"Use newer std API for cleaner code. [\\#12559](https://github.com/rust-lang/"
"cargo/pull/12559) [\\#12604](https://github.com/rust-lang/cargo/pull/12604) "
"[\\#12615](https://github.com/rust-lang/cargo/pull/12615) [\\#12631](https://"
"github.com/rust-lang/cargo/pull/12631)"
msgstr ""

#: src/CHANGELOG.md:2287
msgid ""
"Buffer console status messages. [\\#12727](https://github.com/rust-lang/"
"cargo/pull/12727)"
msgstr ""

#: src/CHANGELOG.md:2289
msgid ""
"Use enum to describe index summaries to provide a richer information when "
"summaries are not available for resolution. [\\#12643](https://github.com/"
"rust-lang/cargo/pull/12643)"
msgstr ""

#: src/CHANGELOG.md:2291
msgid ""
"Use shortest path for resolving the path from the given dependency up to the "
"root. [\\#12678](https://github.com/rust-lang/cargo/pull/12678)"
msgstr ""

#: src/CHANGELOG.md:2293
msgid ""
"Read/write the encoded `cargo update --precise` in the same place [\\#12629]"
"(https://github.com/rust-lang/cargo/pull/12629)"
msgstr ""

#: src/CHANGELOG.md:2295
msgid ""
"Set MSRV for internal packages. [\\#12381](https://github.com/rust-lang/"
"cargo/pull/12381)"
msgstr ""

#: src/CHANGELOG.md:2297
msgid ""
"ci: Update Renovate schema [\\#12741](https://github.com/rust-lang/cargo/"
"pull/12741)"
msgstr ""

#: src/CHANGELOG.md:2299
msgid ""
"ci: Ignore patch version in MSRV [\\#12716](https://github.com/rust-lang/"
"cargo/pull/12716)"
msgstr ""

#: src/CHANGELOG.md:2302
msgid "Cargo 1.73 (2023-10-05)"
msgstr ""

#: src/CHANGELOG.md:2303
msgid ""
"[45782b6b...rust-1.73.0](https://github.com/rust-lang/cargo/compare/"
"45782b6b...rust-1.73.0)"
msgstr ""

#: src/CHANGELOG.md:2307
msgid ""
"Print environment variables for `cargo run/bench/test` in extra verbose mode "
"`-vv`. [\\#12498](https://github.com/rust-lang/cargo/pull/12498)"
msgstr ""

#: src/CHANGELOG.md:2309
msgid ""
"Display package versions on Cargo timings graph. [\\#12420](https://"
"github.com/rust-lang/cargo/pull/12420)"
msgstr ""

#: src/CHANGELOG.md:2314
msgid ""
"❗️ Cargo now bails out when using `cargo::` in custom build scripts. This is "
"a preparation for an upcoming change in build script invocations. [\\#12332]"
"(https://github.com/rust-lang/cargo/pull/12332)"
msgstr ""

#: src/CHANGELOG.md:2317
msgid ""
"❗️ `cargo login` no longer accept any token after the `--` syntax. Arguments "
"after `--` are now reserved in the preparation of the new credential "
"provider feature. This introduces a regression that overlooks the `cargo "
"login -- <token>` support in previous versions. [\\#12499](https://"
"github.com/rust-lang/cargo/pull/12499)"
msgstr ""

#: src/CHANGELOG.md:2321
msgid ""
"Make Cargo `--help` easier to browse. [\\#11905](https://github.com/rust-"
"lang/cargo/pull/11905)"
msgstr ""

#: src/CHANGELOG.md:2323
msgid ""
"Prompt the use of `--nocapture` flag if `cargo test` process is terminated "
"via a signal. [\\#12463](https://github.com/rust-lang/cargo/pull/12463)"
msgstr ""

#: src/CHANGELOG.md:2325
msgid ""
"Preserve jobserver file descriptors on the rustc invocation for getting "
"target information. [\\#12447](https://github.com/rust-lang/cargo/pull/12447)"
msgstr ""

#: src/CHANGELOG.md:2327
msgid ""
"Clarify in `--help` that `cargo test --all-targets` excludes doctests. "
"[\\#12422](https://github.com/rust-lang/cargo/pull/12422)"
msgstr ""

#: src/CHANGELOG.md:2329
msgid ""
"Normalize `cargo.toml` to `Cargo.toml` on publish, and warn on other cases "
"of `Cargo.toml`. [\\#12399](https://github.com/rust-lang/cargo/pull/12399)"
msgstr ""

#: src/CHANGELOG.md:2334
msgid ""
"Only skip mtime check on `~/.cargo/{git,registry}`. [\\#12369](https://"
"github.com/rust-lang/cargo/pull/12369)"
msgstr ""

#: src/CHANGELOG.md:2336
msgid ""
"Fixed `cargo doc --open` crash on WSL2. [\\#12373](https://github.com/rust-"
"lang/cargo/pull/12373)"
msgstr ""

#: src/CHANGELOG.md:2338
msgid ""
"Fixed panic when enabling `http.debug` for certain strings. [\\#12468]"
"(https://github.com/rust-lang/cargo/pull/12468)"
msgstr ""

#: src/CHANGELOG.md:2340
msgid ""
"Fixed `cargo remove` incorrectly removing used patches. [\\#12454](https://"
"github.com/rust-lang/cargo/pull/12454)"
msgstr ""

#: src/CHANGELOG.md:2342
msgid ""
"Fixed crate checksum lookup query should match on semver build metadata. "
"[\\#11447](https://github.com/rust-lang/cargo/pull/11447)"
msgstr ""

#: src/CHANGELOG.md:2344
msgid ""
"Fixed printing multiple warning messages for unused fields in `[registries]` "
"table. [\\#12439](https://github.com/rust-lang/cargo/pull/12439)"
msgstr ""

#: src/CHANGELOG.md:2349
msgid ""
"🔥 The `-Zcredential-process` has been reimplemented with a clearer way to "
"communicate  with different credential providers. Several built-in providers "
"are also added to Cargo. [docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#credential-process) [\\#12334](https://github.com/"
"rust-lang/cargo/pull/12334) [\\#12396](https://github.com/rust-lang/cargo/"
"pull/12396) [\\#12424](https://github.com/rust-lang/cargo/pull/12424) "
"[\\#12440](https://github.com/rust-lang/cargo/pull/12440) [\\#12461](https://"
"github.com/rust-lang/cargo/pull/12461) [\\#12469](https://github.com/rust-"
"lang/cargo/pull/12469) [\\#12483](https://github.com/rust-lang/cargo/pull/"
"12483) [\\#12499](https://github.com/rust-lang/cargo/pull/12499) [\\#12507]"
"(https://github.com/rust-lang/cargo/pull/12507) [\\#12512](https://"
"github.com/rust-lang/cargo/pull/12512) [\\#12518](https://github.com/rust-"
"lang/cargo/pull/12518) [\\#12521](https://github.com/rust-lang/cargo/pull/"
"12521) [\\#12526](https://github.com/rust-lang/cargo/pull/12526)  \n"
"Some notable changes:"
msgstr ""

#: src/CHANGELOG.md:2367
msgid ""
"Renamed `credential-process` to `credential-provider` in Cargo "
"configurations."
msgstr ""

#: src/CHANGELOG.md:2368
msgid ""
"New JSON protocol for communicating with external credential providers via "
"stdin/stdout."
msgstr ""

#: src/CHANGELOG.md:2369
msgid "The GNOME Secert provider now dynamically loads `libsecert`."
msgstr ""

#: src/CHANGELOG.md:2370
msgid "The 1password provider is no longer built-in."
msgstr ""

#: src/CHANGELOG.md:2371
msgid ""
"Changed the unstable key for asymmetric tokens from `registry-auth` to "
"`credential-process`."
msgstr ""

#: src/CHANGELOG.md:2372
msgid ""
"❗️ Removed `--keep-going` flag support from `cargo test` and `cargo bench`. "
"[\\#12478](https://github.com/rust-lang/cargo/pull/12478) [\\#12492](https://"
"github.com/rust-lang/cargo/pull/12492)"
msgstr ""

#: src/CHANGELOG.md:2375
msgid ""
"Fixed invalid package names generated by `-Zscript`. [\\#12349](https://"
"github.com/rust-lang/cargo/pull/12349)"
msgstr ""

#: src/CHANGELOG.md:2377
msgid ""
"`-Zscript` now errors out on unsupported commands — `publish` and `package`. "
"[\\#12350](https://github.com/rust-lang/cargo/pull/12350)"
msgstr ""

#: src/CHANGELOG.md:2379
msgid ""
"Encode URL params correctly for source ID in Cargo.lock. [\\#12280](https://"
"github.com/rust-lang/cargo/pull/12280)"
msgstr ""

#: src/CHANGELOG.md:2381
msgid ""
"Replaced invalid `panic_unwind` std feature with `panic-unwind`. [\\#12364]"
"(https://github.com/rust-lang/cargo/pull/12364)"
msgstr ""

#: src/CHANGELOG.md:2383
msgid ""
"`-Zlints`: doctest extraction should respect `[lints]`. [\\#12501](https://"
"github.com/rust-lang/cargo/pull/12501)"
msgstr ""

#: src/CHANGELOG.md:2388
msgid ""
"SemVer: Adding a section for changing the alignment, layout, or size of a "
"well-defined type. [\\#12169](https://github.com/rust-lang/cargo/pull/12169)"
msgstr ""

#: src/CHANGELOG.md:2391
msgid ""
"Use heading attributes to control the fragment. [\\#12339](https://"
"github.com/rust-lang/cargo/pull/12339)"
msgstr ""

#: src/CHANGELOG.md:2393
msgid ""
"Use \"number\" instead of \"digit\" when explaining Cargo's use of semver. "
"[\\#12340](https://github.com/rust-lang/cargo/pull/12340)"
msgstr ""

#: src/CHANGELOG.md:2395
msgid ""
"contrib: Add some more detail about how publishing works. [\\#12344](https://"
"github.com/rust-lang/cargo/pull/12344)"
msgstr ""

#: src/CHANGELOG.md:2397
msgid ""
"Clarify \"Package ID\" and \"Source ID\" in `cargo metadata` are opaque "
"strings. [\\#12313](https://github.com/rust-lang/cargo/pull/12313)"
msgstr ""

#: src/CHANGELOG.md:2399
msgid ""
"Clarify that `rerun-if-env-changed` doesn't monitor the environment "
"variables it set for crates and build script. [\\#12482](https://github.com/"
"rust-lang/cargo/pull/12482)"
msgstr ""

#: src/CHANGELOG.md:2402
msgid ""
"Clarify that multiple versions that differ only in the metadata tag are "
"disallowed on crates.io. [\\#12335](https://github.com/rust-lang/cargo/pull/"
"12335)"
msgstr ""

#: src/CHANGELOG.md:2405
msgid ""
"Clarify `lto` setting passing `-Clinker-plugin-lto`. [\\#12407](https://"
"github.com/rust-lang/cargo/pull/12407)"
msgstr ""

#: src/CHANGELOG.md:2407
msgid ""
"Added `profile.strip` to configuration and environment variable docs. "
"[\\#12337](https://github.com/rust-lang/cargo/pull/12337) [\\#12408](https://"
"github.com/rust-lang/cargo/pull/12408)"
msgstr ""

#: src/CHANGELOG.md:2410
msgid ""
"Added docs for artifact JSON debuginfo levels. [\\#12376](https://github.com/"
"rust-lang/cargo/pull/12376)"
msgstr ""

#: src/CHANGELOG.md:2412
msgid ""
"Added a notice for the backward compatible `.cargo/credential` file "
"existence. [\\#12479](https://github.com/rust-lang/cargo/pull/12479)"
msgstr ""

#: src/CHANGELOG.md:2414
msgid ""
"Raised the awareness of `resolver = 2` used inside workspaces. [\\#12388]"
"(https://github.com/rust-lang/cargo/pull/12388)"
msgstr ""

#: src/CHANGELOG.md:2416
msgid ""
"Replaced `master` branch by default branch in documentation. [\\#12435]"
"(https://github.com/rust-lang/cargo/pull/12435)"
msgstr ""

#: src/CHANGELOG.md:2421
msgid ""
"Updated to `criterion` 0.5.1. [\\#12338](https://github.com/rust-lang/cargo/"
"pull/12338)"
msgstr ""

#: src/CHANGELOG.md:2423
msgid ""
"Updated to `curl-sys` 0.4.65, which corresponds to curl 8.2.1. [\\#12406]"
"(https://github.com/rust-lang/cargo/pull/12406)"
msgstr ""

#: src/CHANGELOG.md:2425
msgid ""
"Updated to `indexmap` v2. [\\#12368](https://github.com/rust-lang/cargo/pull/"
"12368)"
msgstr ""

#: src/CHANGELOG.md:2427
msgid ""
"Updated to `miow` 0.6.0, which drops old versions of `windows-sys`. "
"[\\#12453](https://github.com/rust-lang/cargo/pull/12453)"
msgstr ""

#: src/CHANGELOG.md:2429
msgid ""
"ci: automatically test new packages by using `--workspace`. [\\#12342]"
"(https://github.com/rust-lang/cargo/pull/12342)"
msgstr ""

#: src/CHANGELOG.md:2431
msgid ""
"ci: automatically update dependencies monthly with Renovate. [\\#12341]"
"(https://github.com/rust-lang/cargo/pull/12341) [\\#12466](https://"
"github.com/rust-lang/cargo/pull/12466)"
msgstr ""

#: src/CHANGELOG.md:2434
msgid ""
"ci: rewrote `xtask-bump-check` for respecting semver by adopting `cargo-"
"semver-checks`. [\\#12395](https://github.com/rust-lang/cargo/pull/12395) "
"[\\#12513](https://github.com/rust-lang/cargo/pull/12513) [\\#12508](https://"
"github.com/rust-lang/cargo/pull/12508)"
msgstr ""

#: src/CHANGELOG.md:2438
msgid ""
"Rearranged and renamed test directories [\\#12397](https://github.com/rust-"
"lang/cargo/pull/12397) [\\#12398](https://github.com/rust-lang/cargo/pull/"
"12398)"
msgstr ""

#: src/CHANGELOG.md:2441
msgid ""
"Migrated from `log` to `tracing`. [\\#12458](https://github.com/rust-lang/"
"cargo/pull/12458) [\\#12488](https://github.com/rust-lang/cargo/pull/12488)"
msgstr ""

#: src/CHANGELOG.md:2444
msgid ""
"Track `--help` output in tests. [\\#11912](https://github.com/rust-lang/"
"cargo/pull/11912)"
msgstr ""

#: src/CHANGELOG.md:2446
msgid ""
"Cleaned up and shared package metadata within workspace. [\\#12352](https://"
"github.com/rust-lang/cargo/pull/12352)"
msgstr ""

#: src/CHANGELOG.md:2448
msgid ""
"`crates-io`: expose HTTP headers and `Error` type. [\\#12310](https://"
"github.com/rust-lang/cargo/pull/12310)"
msgstr ""

#: src/CHANGELOG.md:2450
msgid ""
"For `cargo update`, caught CLI flags conflict between `--aggressive` and `--"
"precise` in clap. [\\#12428](https://github.com/rust-lang/cargo/pull/12428)"
msgstr ""

#: src/CHANGELOG.md:2452
msgid ""
"Several fixes for either making Cargo testsuite pass on nightly or in `rust-"
"lang/rust`. [\\#12413](https://github.com/rust-lang/cargo/pull/12413) "
"[\\#12416](https://github.com/rust-lang/cargo/pull/12416) [\\#12429](https://"
"github.com/rust-lang/cargo/pull/12429) [\\#12450](https://github.com/rust-"
"lang/cargo/pull/12450) [\\#12491](https://github.com/rust-lang/cargo/pull/"
"12491) [\\#12500](https://github.com/rust-lang/cargo/pull/12500)"
msgstr ""

#: src/CHANGELOG.md:2460
msgid "Cargo 1.72 (2023-08-24)"
msgstr ""

#: src/CHANGELOG.md:2461
msgid ""
"[64fb38c9...rust-1.72.0](https://github.com/rust-lang/cargo/compare/"
"64fb38c9...rust-1.72.0)"
msgstr ""

#: src/CHANGELOG.md:2465
msgid ""
"❗ Enable `-Zdoctest-in-workspace` by default. When running each "
"documentation test, the working directory is set to the root directory of "
"the package the test belongs to. [docs](https://doc.rust-lang.org/nightly/"
"cargo/commands/cargo-test.html#working-directory-of-tests) [\\#12221]"
"(https://github.com/rust-lang/cargo/pull/12221) [\\#12288](https://"
"github.com/rust-lang/cargo/pull/12288)"
msgstr ""

#: src/CHANGELOG.md:2471
msgid ""
"Add support of the \"default\" keyword to reset previously set `build.jobs` "
"parallelism back to the default. [\\#12222](https://github.com/rust-lang/"
"cargo/pull/12222)"
msgstr ""

#: src/CHANGELOG.md:2477
msgid ""
"🚨 [CVE-2023-40030](https://github.com/rust-lang/cargo/security/advisories/"
"GHSA-wrrj-h57r-vx9p): Malicious dependencies can inject arbitrary JavaScript "
"into cargo-generated timing reports. To mitigate this, feature name "
"validation check is now turned into a hard error. The warning was added in "
"Rust 1.49. These extended characters aren't allowed on crates.io, so this "
"should only impact users of other registries, or people who don't publish to "
"a registry. [\\#12291](https://github.com/rust-lang/cargo/pull/12291)"
msgstr ""

#: src/CHANGELOG.md:2483
msgid ""
"Cargo now warns when an edition 2021 package is in a virtual workspace and "
"`workspace.resolver` is not set. It is recommended to set the resolver "
"version for workspaces explicitly. [\\#10910](https://github.com/rust-lang/"
"cargo/pull/10910)"
msgstr ""

#: src/CHANGELOG.md:2487
msgid ""
"Set IBM AIX shared libraries search path to `LIBPATH`. [\\#11968](https://"
"github.com/rust-lang/cargo/pull/11968)"
msgstr ""

#: src/CHANGELOG.md:2489
msgid ""
"Don't pass `-C debuginfo=0` to rustc as it is the default value. [\\#12022]"
"(https://github.com/rust-lang/cargo/pull/12022) [\\#12205](https://"
"github.com/rust-lang/cargo/pull/12205)"
msgstr ""

#: src/CHANGELOG.md:2492
msgid ""
"Added a message on reusing previous temporary path on `cargo install` "
"failures. [\\#12231](https://github.com/rust-lang/cargo/pull/12231)"
msgstr ""

#: src/CHANGELOG.md:2494
msgid ""
"Added a message when `rustup` override shorthand is put in a wrong position. "
"[\\#12226](https://github.com/rust-lang/cargo/pull/12226)"
msgstr ""

#: src/CHANGELOG.md:2496
msgid ""
"Respect scp-like URL as much as possible when fetching nested submodules. "
"[\\#12359](https://github.com/rust-lang/cargo/pull/12359) [\\#12411](https://"
"github.com/rust-lang/cargo/pull/12411)"
msgstr ""

#: src/CHANGELOG.md:2502
msgid ""
"`cargo clean` uses `remove_dir_all` as a fallback to resolve race "
"conditions. [\\#11442](https://github.com/rust-lang/cargo/pull/11442)"
msgstr ""

#: src/CHANGELOG.md:2504
msgid ""
"Reduced the chance Cargo re-formats the user's `[features]` table. [\\#12191]"
"(https://github.com/rust-lang/cargo/pull/12191)"
msgstr ""

#: src/CHANGELOG.md:2506
msgid ""
"Fixed nested Git submodules not able to fetch. [\\#12244](https://github.com/"
"rust-lang/cargo/pull/12244)"
msgstr ""

#: src/CHANGELOG.md:2511
msgid ""
"🔥 The `-Zscript` is an experimental feature to add unstable support for "
"single-file packages in Cargo, so we can explore the design and resolve "
"questions with an implementation to collect feedback on. ([eRFC 3424]"
"(https://github.com/rust-lang/rfcs/blob/master/text/3424-cargo-script.md)) "
"[docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#script) [\\#12245](https://github.com/rust-lang/cargo/pull/"
"12245) [\\#12255](https://github.com/rust-lang/cargo/pull/12255) [\\#12258]"
"(https://github.com/rust-lang/cargo/pull/12258) [\\#12262](https://"
"github.com/rust-lang/cargo/pull/12262) [\\#12268](https://github.com/rust-"
"lang/cargo/pull/12268) [\\#12269](https://github.com/rust-lang/cargo/pull/"
"12269) [\\#12281](https://github.com/rust-lang/cargo/pull/12281) [\\#12282]"
"(https://github.com/rust-lang/cargo/pull/12282) [\\#12283](https://"
"github.com/rust-lang/cargo/pull/12283) [\\#12284](https://github.com/rust-"
"lang/cargo/pull/12284) [\\#12287](https://github.com/rust-lang/cargo/pull/"
"12287) [\\#12289](https://github.com/rust-lang/cargo/pull/12289) [\\#12303]"
"(https://github.com/rust-lang/cargo/pull/12303) [\\#12305](https://"
"github.com/rust-lang/cargo/pull/12305) [\\#12308](https://github.com/rust-"
"lang/cargo/pull/12308)"
msgstr ""

#: src/CHANGELOG.md:2531
msgid ""
"Automatically inherit workspace lints when running `cargo new`/`cargo init`. "
"[\\#12174](https://github.com/rust-lang/cargo/pull/12174)"
msgstr ""

#: src/CHANGELOG.md:2533
msgid ""
"Removed `-Zjobserver-per-rustc` again. [\\#12285](https://github.com/rust-"
"lang/cargo/pull/12285)"
msgstr ""

#: src/CHANGELOG.md:2535
msgid ""
"Added `.toml` file extension restriction for `-Zconfig-include`. [\\#12298]"
"(https://github.com/rust-lang/cargo/pull/12298)"
msgstr ""

#: src/CHANGELOG.md:2537
msgid ""
"Added `-Znext-lockfile-bump` to prepare for the next lockfile bump. "
"[\\#12279](https://github.com/rust-lang/cargo/pull/12279) [\\#12302](https://"
"github.com/rust-lang/cargo/pull/12302)"
msgstr ""

#: src/CHANGELOG.md:2543
msgid ""
"Added a description of `Cargo.lock` conflicts in the Cargo FAQ. [\\#12185]"
"(https://github.com/rust-lang/cargo/pull/12185)"
msgstr ""

#: src/CHANGELOG.md:2545
msgid ""
"Added a small note about indexes ignoring SemVer build metadata. [\\#12206]"
"(https://github.com/rust-lang/cargo/pull/12206)"
msgstr ""

#: src/CHANGELOG.md:2547
msgid ""
"Added doc comments for types and friends in `cargo::sources` module. "
"[\\#12192](https://github.com/rust-lang/cargo/pull/12192) [\\#12239](https://"
"github.com/rust-lang/cargo/pull/12239) [\\#12247](https://github.com/rust-"
"lang/cargo/pull/12247)"
msgstr ""

#: src/CHANGELOG.md:2551
msgid ""
"Added more documentation for `Source` download functions. [\\#12319](https://"
"github.com/rust-lang/cargo/pull/12319)"
msgstr ""

#: src/CHANGELOG.md:2553
msgid ""
"Added READMEs for the credential helpers. [\\#12322](https://github.com/rust-"
"lang/cargo/pull/12322)"
msgstr ""

#: src/CHANGELOG.md:2555
msgid ""
"Fixed version requirement example in Dependency Resolution. [\\#12267]"
"(https://github.com/rust-lang/cargo/pull/12267)"
msgstr ""

#: src/CHANGELOG.md:2557
msgid ""
"Clarify the default behavior of cargo-install. [\\#12276](https://github.com/"
"rust-lang/cargo/pull/12276)"
msgstr ""

#: src/CHANGELOG.md:2559
msgid ""
"Clarify the use of \"default\" branch instead of `main` by default. "
"[\\#12251](https://github.com/rust-lang/cargo/pull/12251)"
msgstr ""

#: src/CHANGELOG.md:2561
msgid ""
"Provide guidance on version requirements. [\\#12323](https://github.com/rust-"
"lang/cargo/pull/12323)"
msgstr ""

#: src/CHANGELOG.md:2566
msgid ""
"Updated to `gix` 0.45 for multi-round pack negotiations. [\\#12236](https://"
"github.com/rust-lang/cargo/pull/12236)"
msgstr ""

#: src/CHANGELOG.md:2568
msgid ""
"Updated to `curl-sys` 0.4.63, which corresponds to curl 8.1.2. [\\#12218]"
"(https://github.com/rust-lang/cargo/pull/12218)"
msgstr ""

#: src/CHANGELOG.md:2570
msgid ""
"Updated to `openssl` 0.10.55. [\\#12300](https://github.com/rust-lang/cargo/"
"pull/12300)"
msgstr ""

#: src/CHANGELOG.md:2572
msgid ""
"Updated several dependencies. [\\#12261](https://github.com/rust-lang/cargo/"
"pull/12261)"
msgstr ""

#: src/CHANGELOG.md:2574
msgid ""
"Removed unused features from `windows-sys` dependency. [\\#12176](https://"
"github.com/rust-lang/cargo/pull/12176)"
msgstr ""

#: src/CHANGELOG.md:2576
msgid ""
"Refactored compiler invocations. [\\#12211](https://github.com/rust-lang/"
"cargo/pull/12211)"
msgstr ""

#: src/CHANGELOG.md:2578
msgid ""
"Refactored git and registry sources, and registry data. [\\#12203](https://"
"github.com/rust-lang/cargo/pull/12203) [\\#12197](https://github.com/rust-"
"lang/cargo/pull/12197) [\\#12240](https://github.com/rust-lang/cargo/pull/"
"12240) [\\#12248](https://github.com/rust-lang/cargo/pull/12248)"
msgstr ""

#: src/CHANGELOG.md:2583
msgid ""
"Lexicographically order `-Z` flags. [\\#12182](https://github.com/rust-lang/"
"cargo/pull/12182) [\\#12223](https://github.com/rust-lang/cargo/pull/12223) "
"[\\#12224](https://github.com/rust-lang/cargo/pull/12224)"
msgstr ""

#: src/CHANGELOG.md:2587
msgid ""
"Several Cargo's own test infra improvements and speed-ups. [\\#12184]"
"(https://github.com/rust-lang/cargo/pull/12184) [\\#12188](https://"
"github.com/rust-lang/cargo/pull/12188) [\\#12189](https://github.com/rust-"
"lang/cargo/pull/12189) [\\#12194](https://github.com/rust-lang/cargo/pull/"
"12194) [\\#12199](https://github.com/rust-lang/cargo/pull/12199)"
msgstr ""

#: src/CHANGELOG.md:2593
msgid ""
"Migrated print-ban from test to clippy [\\#12246](https://github.com/rust-"
"lang/cargo/pull/12246)"
msgstr ""

#: src/CHANGELOG.md:2595
msgid ""
"Switched to `OnceLock` for interning uses. [\\#12217](https://github.com/"
"rust-lang/cargo/pull/12217)"
msgstr ""

#: src/CHANGELOG.md:2597
msgid ""
"Removed a unnecessary `.clone`. [\\#12213](https://github.com/rust-lang/"
"cargo/pull/12213)"
msgstr ""

#: src/CHANGELOG.md:2599
msgid ""
"Don't try to compile `cargo-credential-gnome-secret` on non-Linux platforms. "
"[\\#12321](https://github.com/rust-lang/cargo/pull/12321)"
msgstr ""

#: src/CHANGELOG.md:2601
msgid ""
"Use macro to remove duplication of workspace inheritable fields getters. "
"[\\#12317](https://github.com/rust-lang/cargo/pull/12317)"
msgstr ""

#: src/CHANGELOG.md:2603
msgid ""
"Extracted and rearranged registry API items to their own modules. [\\#12290]"
"(https://github.com/rust-lang/cargo/pull/12290)"
msgstr ""

#: src/CHANGELOG.md:2605
msgid ""
"Show a better error when container tests fail. [\\#12264](https://github.com/"
"rust-lang/cargo/pull/12264)"
msgstr ""

#: src/CHANGELOG.md:2608
msgid "Cargo 1.71.1 (2023-08-03)"
msgstr ""

#: src/CHANGELOG.md:2612
msgid ""
"🚨 [CVE-2023-38497](https://github.com/rust-lang/cargo/security/advisories/"
"GHSA-j3xp-wfr4-hx87): Cargo 1.71.1 or later respects umask when extracting "
"crate archives. It also purges the caches it tries to access if they were "
"generated by older Cargo versions."
msgstr ""

#: src/CHANGELOG.md:2616
msgid "Cargo 1.71 (2023-07-13)"
msgstr ""

#: src/CHANGELOG.md:2617
msgid ""
"[84b7041f...rust-1.71.0](https://github.com/rust-lang/cargo/compare/"
"84b7041f...rust-1.71.0)"
msgstr ""

#: src/CHANGELOG.md:2621
msgid ""
"Allowed named debuginfo options in Cargo.toml. [docs](https://doc.rust-"
"lang.org/nightly/cargo/reference/profiles.html#debug) [\\#11958](https://"
"github.com/rust-lang/cargo/pull/11958)"
msgstr ""

#: src/CHANGELOG.md:2624
msgid ""
"Added `workspace_default_members` to the output of `cargo metadata`. "
"[\\#11978](https://github.com/rust-lang/cargo/pull/11978)"
msgstr ""

#: src/CHANGELOG.md:2626
msgid ""
"Automatically inherit workspace fields when running `cargo new`/`cargo "
"init`. [\\#12069](https://github.com/rust-lang/cargo/pull/12069)"
msgstr ""

#: src/CHANGELOG.md:2631
msgid ""
"❗ Optimized the usage under `rustup`. When Cargo detects it will run "
"`rustc` pointing a rustup proxy, it'll try bypassing the proxy and use the "
"underlying binary directly. There are assumptions around the interaction "
"with rustup and `RUSTUP_TOOLCHAIN`. However, it's not expected to affect "
"normal users. [\\#11917](https://github.com/rust-lang/cargo/pull/11917)"
msgstr ""

#: src/CHANGELOG.md:2636
msgid ""
"❗ When querying a package, Cargo tries only the original name, all hyphens, "
"and all underscores to handle misspellings. Previously, Cargo tried each "
"combination of hyphens and underscores, causing excessive requests to "
"crates.io. [\\#12083](https://github.com/rust-lang/cargo/pull/12083)"
msgstr ""

#: src/CHANGELOG.md:2640
msgid ""
"❗ Disallow `RUSTUP_HOME` and `RUSTUP_TOOLCHAIN` in the `[env]` "
"configuration table. This is considered to be not a use case Cargo would "
"like to support, since it will likely cause problems or lead to confusion. "
"[\\#12101](https://github.com/rust-lang/cargo/pull/12101) [\\#12107](https://"
"github.com/rust-lang/cargo/pull/12107)"
msgstr ""

#: src/CHANGELOG.md:2645
msgid ""
"Better error message when getting an empty dependency table in Cargo.toml. "
"[\\#11997](https://github.com/rust-lang/cargo/pull/11997)"
msgstr ""

#: src/CHANGELOG.md:2647
msgid ""
"Better error message when empty dependency was specified in Cargo.toml. "
"[\\#12001](https://github.com/rust-lang/cargo/pull/12001)"
msgstr ""

#: src/CHANGELOG.md:2649
msgid ""
"`--help` text is now wrapping for readability on narrow screens. [\\#12013]"
"(https://github.com/rust-lang/cargo/pull/12013)"
msgstr ""

#: src/CHANGELOG.md:2651
msgid ""
"Tweaked the order of arguments in `--help` text to clarify role of `--bin`. "
"[\\#12157](https://github.com/rust-lang/cargo/pull/12157)"
msgstr ""

#: src/CHANGELOG.md:2653
msgid ""
"`rust-version` is included in `cargo publish` requests to registries. "
"[\\#12041](https://github.com/rust-lang/cargo/pull/12041)"
msgstr ""

#: src/CHANGELOG.md:2658
msgid ""
"Corrected the bug report URL for `cargo clippy --fix`. [\\#11882](https://"
"github.com/rust-lang/cargo/pull/11882)"
msgstr ""

#: src/CHANGELOG.md:2660
msgid ""
"Cargo now applies `[env]` to rust invocations for target info discovery. "
"[\\#12029](https://github.com/rust-lang/cargo/pull/12029)"
msgstr ""

#: src/CHANGELOG.md:2662
msgid ""
"Fixed tokens not redacted in http debug when using HTTP/2. [\\#12095]"
"(https://github.com/rust-lang/cargo/pull/12095)"
msgstr ""

#: src/CHANGELOG.md:2664
msgid ""
"Fixed `-C debuginfo` not passed in some situation, leading to build cache "
"miss. [\\#12165](https://github.com/rust-lang/cargo/pull/12165)"
msgstr ""

#: src/CHANGELOG.md:2666
msgid ""
"Fixed the ambiguity when `cargo install` found packages with the same name. "
"The ambiguity happened in a situation like a package depending on old "
"versions of itself. [\\#12015](https://github.com/rust-lang/cargo/pull/12015)"
msgstr ""

#: src/CHANGELOG.md:2670
msgid ""
"Fixed a false positive that `cargo package` checks for conflict files. "
"[\\#12135](https://github.com/rust-lang/cargo/pull/12135)"
msgstr ""

#: src/CHANGELOG.md:2672
msgid ""
"Fixed `dep/feat` syntax not working when co-exist with `dep:` syntax, and "
"trying to enable features of an optional dependency. [\\#12130](https://"
"github.com/rust-lang/cargo/pull/12130)"
msgstr ""

#: src/CHANGELOG.md:2675
msgid ""
"Fixed `cargo tree` not handling the output with `-e no-proc-macro` "
"correctly. [\\#12044](https://github.com/rust-lang/cargo/pull/12044)"
msgstr ""

#: src/CHANGELOG.md:2677
msgid ""
"Warn instead of error in `cargo package` on empty `readme` or `license-file` "
"in Cargo.toml. [\\#12036](https://github.com/rust-lang/cargo/pull/12036)"
msgstr ""

#: src/CHANGELOG.md:2680
msgid ""
"Fixed when an HTTP proxy is in use and the Cargo executable links to a "
"certain version of system libcurl, CURL connections might fail. Affected "
"libcurl versions: 7.87.0, 7.88.0, 7.88.1. [\\#12234](https://github.com/rust-"
"lang/cargo/pull/12234) [\\#12242](https://github.com/rust-lang/cargo/pull/"
"12242)"
msgstr ""

#: src/CHANGELOG.md:2688
msgid ""
"🔥 The `-Zgitoxide` feature now supports shallow clones and fetches for "
"dependencies and registry indexes. [docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#gitoxide) [\\#11840](https://github.com/rust-"
"lang/cargo/pull/11840)"
msgstr ""

#: src/CHANGELOG.md:2692
msgid ""
"🔥 The `-Zlints` feature enables configuring lints rules in Cargo.toml [docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#lints) "
"[\\#12148](https://github.com/rust-lang/cargo/pull/12148) [\\#12168](https://"
"github.com/rust-lang/cargo/pull/12168)"
msgstr ""

#: src/CHANGELOG.md:2696
msgid ""
"The `-Zbuild-std` breakage of missing features in `nightly-2023-05-04` has "
"been fixed in `nightly-2023-05-05`. [\\#12088](https://github.com/rust-lang/"
"cargo/pull/12088)"
msgstr ""

#: src/CHANGELOG.md:2699
msgid ""
"Recompile on profile rustflags changes. [\\#11981](https://github.com/rust-"
"lang/cargo/pull/11981)"
msgstr ""

#: src/CHANGELOG.md:2701
msgid ""
"Added `-Zmsrv-policy` feature flag placeholder. [\\#12043](https://"
"github.com/rust-lang/cargo/pull/12043)"
msgstr ""

#: src/CHANGELOG.md:2703
msgid ""
"`cargo add` now considers `rust-version` when selecting packages with `-"
"Zmsrv-policy`. [\\#12078](https://github.com/rust-lang/cargo/pull/12078)"
msgstr ""

#: src/CHANGELOG.md:2708
msgid ""
"Added Cargo team charter. [docs](https://doc.crates.io/contrib/team.html) "
"[\\#12010](https://github.com/rust-lang/cargo/pull/12010)"
msgstr ""

#: src/CHANGELOG.md:2711
msgid ""
"SemVer: Adding `#[non_exhaustive]` on existing items is a breaking change. "
"[\\#10877](https://github.com/rust-lang/cargo/pull/10877)"
msgstr ""

#: src/CHANGELOG.md:2713
msgid ""
"SemVer: It is not a breaking change to make an unsafe function safe. "
"[\\#12116](https://github.com/rust-lang/cargo/pull/12116)"
msgstr ""

#: src/CHANGELOG.md:2715
msgid ""
"SemVer: changing MSRV is generally a minor change. [\\#12122](https://"
"github.com/rust-lang/cargo/pull/12122)"
msgstr ""

#: src/CHANGELOG.md:2717
msgid ""
"Clarify when and how to `cargo yank`. [\\#11862](https://github.com/rust-"
"lang/cargo/pull/11862)"
msgstr ""

#: src/CHANGELOG.md:2719
msgid ""
"Clarify that crates.io doesn't link to docs.rs right away. [\\#12146]"
"(https://github.com/rust-lang/cargo/pull/12146)"
msgstr ""

#: src/CHANGELOG.md:2721
msgid ""
"Clarify documentation around test target setting. [\\#12032](https://"
"github.com/rust-lang/cargo/pull/12032)"
msgstr ""

#: src/CHANGELOG.md:2723
msgid ""
"Specify `rust_version` in Index format. [\\#12040](https://github.com/rust-"
"lang/cargo/pull/12040)"
msgstr ""

#: src/CHANGELOG.md:2725
msgid ""
"Specify `msg` in owner-remove registry API response. [\\#12068](https://"
"github.com/rust-lang/cargo/pull/12068)"
msgstr ""

#: src/CHANGELOG.md:2727
msgid ""
"Added more documentation for artifact-dependencies. [\\#12110](https://"
"github.com/rust-lang/cargo/pull/12110)"
msgstr ""

#: src/CHANGELOG.md:2729
msgid ""
"Added doc comments for `Source` and build script for cargo-the-library. "
"[\\#12133](https://github.com/rust-lang/cargo/pull/12133) [\\#12153](https://"
"github.com/rust-lang/cargo/pull/12153) [\\#12159](https://github.com/rust-"
"lang/cargo/pull/12159)"
msgstr ""

#: src/CHANGELOG.md:2733
msgid ""
"Several typo and broken link fixes. [\\#12018](https://github.com/rust-lang/"
"cargo/pull/12018) [\\#12020](https://github.com/rust-lang/cargo/pull/12020) "
"[\\#12049](https://github.com/rust-lang/cargo/pull/12049) [\\#12067](https://"
"github.com/rust-lang/cargo/pull/12067) [\\#12073](https://github.com/rust-"
"lang/cargo/pull/12073) [\\#12143](https://github.com/rust-lang/cargo/pull/"
"12143)"
msgstr ""

#: src/CHANGELOG.md:2740
msgid ""
"home: clarify the behavior on each platform [\\#12047](https://github.com/"
"rust-lang/cargo/pull/12047)"
msgstr ""

#: src/CHANGELOG.md:2745
msgid ""
"Updated to `linux-raw-sys` 0.3.2 [\\#11998](https://github.com/rust-lang/"
"cargo/pull/11998)"
msgstr ""

#: src/CHANGELOG.md:2747
msgid ""
"Updated to `git2` 0.17.1, which corresponds to libgit2 1.6.4. [\\#12096]"
"(https://github.com/rust-lang/cargo/pull/12096)"
msgstr ""

#: src/CHANGELOG.md:2749
msgid ""
"Updated to `windows-sys` 0.48.0 [\\#12021](https://github.com/rust-lang/"
"cargo/pull/12021)"
msgstr ""

#: src/CHANGELOG.md:2751
msgid ""
"Updated to `libc` 0.2.144 [\\#12014](https://github.com/rust-lang/cargo/pull/"
"12014) [\\#12098](https://github.com/rust-lang/cargo/pull/12098)"
msgstr ""

#: src/CHANGELOG.md:2754
msgid ""
"Updated to `openssl-src` 111.25.3+1.1.1t [\\#12005](https://github.com/rust-"
"lang/cargo/pull/12005)"
msgstr ""

#: src/CHANGELOG.md:2756
msgid ""
"Updated to `home` 0.5.5 [\\#12037](https://github.com/rust-lang/cargo/pull/"
"12037)"
msgstr ""

#: src/CHANGELOG.md:2758
msgid ""
"Enabled feature `Win32_System_Console` feature since it is used. [\\#12016]"
"(https://github.com/rust-lang/cargo/pull/12016)"
msgstr ""

#: src/CHANGELOG.md:2760
msgid ""
"Cargo is now a Cargo workspace. We dogfood ourselves finally! [\\#11851]"
"(https://github.com/rust-lang/cargo/pull/11851) [\\#11994](https://"
"github.com/rust-lang/cargo/pull/11994) [\\#11996](https://github.com/rust-"
"lang/cargo/pull/11996) [\\#12024](https://github.com/rust-lang/cargo/pull/"
"12024) [\\#12025](https://github.com/rust-lang/cargo/pull/12025) [\\#12057]"
"(https://github.com/rust-lang/cargo/pull/12057)"
msgstr ""

#: src/CHANGELOG.md:2767
msgid ""
"🔥 A new, straightforward issue labels system for Cargo contributors. [docs]"
"(https://doc.crates.io/contrib/issues.html) [\\#11995](https://github.com/"
"rust-lang/cargo/pull/11995) [\\#12002](https://github.com/rust-lang/cargo/"
"pull/12002) [\\#12003](https://github.com/rust-lang/cargo/pull/12003)"
msgstr ""

#: src/CHANGELOG.md:2772
msgid ""
"Allow win/mac credential managers to build on all platforms. [\\#11993]"
"(https://github.com/rust-lang/cargo/pull/11993) [\\#12027](https://"
"github.com/rust-lang/cargo/pull/12027)"
msgstr ""

#: src/CHANGELOG.md:2775
msgid ""
"Use `openssl` only on non-Windows platforms. [\\#11979](https://github.com/"
"rust-lang/cargo/pull/11979)"
msgstr ""

#: src/CHANGELOG.md:2777
msgid ""
"Use restricted Damerau-Levenshtein algorithm to provide typo suggestions. "
"[\\#11963](https://github.com/rust-lang/cargo/pull/11963)"
msgstr ""

#: src/CHANGELOG.md:2779
msgid ""
"Added a new xtask `cargo build-man`. [\\#12048](https://github.com/rust-lang/"
"cargo/pull/12048)"
msgstr ""

#: src/CHANGELOG.md:2781
msgid ""
"Added a new xtask `cargo stale-label`. [\\#12051](https://github.com/rust-"
"lang/cargo/pull/12051)"
msgstr ""

#: src/CHANGELOG.md:2783
msgid ""
"Added a new xtask `cargo unpublished`. [\\#12039](https://github.com/rust-"
"lang/cargo/pull/12039) [\\#12045](https://github.com/rust-lang/cargo/pull/"
"12045) [\\#12085](https://github.com/rust-lang/cargo/pull/12085)"
msgstr ""

#: src/CHANGELOG.md:2787
msgid ""
"CI: check if any version bump needed for member crates. [\\#12126](https://"
"github.com/rust-lang/cargo/pull/12126)"
msgstr ""

#: src/CHANGELOG.md:2789
msgid ""
"Fixed some test infra issues. [\\#11976](https://github.com/rust-lang/cargo/"
"pull/11976) [\\#12026](https://github.com/rust-lang/cargo/pull/12026) "
"[\\#12055](https://github.com/rust-lang/cargo/pull/12055) [\\#12117](https://"
"github.com/rust-lang/cargo/pull/12117)"
msgstr ""

#: src/CHANGELOG.md:2795
msgid "Cargo 1.70 (2023-06-01)"
msgstr ""

#: src/CHANGELOG.md:2796
msgid ""
"[9880b408...rust-1.70.0](https://github.com/rust-lang/cargo/compare/"
"9880b408...rust-1.70.0)"
msgstr ""

#: src/CHANGELOG.md:2800
msgid ""
"🎉 Added `cargo logout` command for removing an API token from the registry "
"locally. [docs](https://doc.rust-lang.org/nightly/cargo/commands/cargo-"
"logout.html) [\\#11919](https://github.com/rust-lang/cargo/pull/11919) "
"[\\#11950](https://github.com/rust-lang/cargo/pull/11950)"
msgstr ""

#: src/CHANGELOG.md:2804
msgid ""
"Added `--ignore-rust-version` flag to `cargo install`. [\\#11859](https://"
"github.com/rust-lang/cargo/pull/11859)"
msgstr ""

#: src/CHANGELOG.md:2806
msgid ""
"The `CARGO_PKG_README` environment variable is now set to the path to the "
"README file when compiling a crate. [\\#11645](https://github.com/rust-lang/"
"cargo/pull/11645)"
msgstr ""

#: src/CHANGELOG.md:2809
msgid ""
"Cargo now displays richer information of Cargo target failed to compile. "
"[\\#11636](https://github.com/rust-lang/cargo/pull/11636)"
msgstr ""

#: src/CHANGELOG.md:2814
msgid ""
"🎉 The `sparse` protocol is now the default protocol for crates.io! ([RFC "
"2789](https://github.com/rust-lang/rfcs/blob/master/text/2789-sparse-"
"index.md)) ([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"registries.html#registry-protocols)) [\\#11791](https://github.com/rust-lang/"
"cargo/pull/11791) [\\#11783](https://github.com/rust-lang/cargo/pull/11783)"
msgstr ""

#: src/CHANGELOG.md:2819
msgid ""
"❗ `cargo login` and `cargo logout` now uses the registry specified in "
"`registry.default`. This was an unintentional regression. [\\#11949](https://"
"github.com/rust-lang/cargo/pull/11949)"
msgstr ""

#: src/CHANGELOG.md:2822
msgid ""
"`cargo update` accurately shows `Downgrading` status when downgrading "
"dependencies. [\\#11839](https://github.com/rust-lang/cargo/pull/11839)"
msgstr ""

#: src/CHANGELOG.md:2824
msgid ""
"Added more information to HTTP errors to help with debugging. [\\#11878]"
"(https://github.com/rust-lang/cargo/pull/11878)"
msgstr ""

#: src/CHANGELOG.md:2826
msgid ""
"Added delays to network retries in Cargo. [\\#11881](https://github.com/rust-"
"lang/cargo/pull/11881)"
msgstr ""

#: src/CHANGELOG.md:2828
msgid ""
"Refined `cargo publish` message when waiting for a publish complete. "
"[\\#11713](https://github.com/rust-lang/cargo/pull/11713)"
msgstr ""

#: src/CHANGELOG.md:2830
msgid ""
"Better error message when `cargo install` from a git repository but found "
"multiple packages. [\\#11835](https://github.com/rust-lang/cargo/pull/11835)"
msgstr ""

#: src/CHANGELOG.md:2836
msgid ""
"Removed duplicates of possible values in `--charset` option of `cargo tree`. "
"[\\#11785](https://github.com/rust-lang/cargo/pull/11785)"
msgstr ""

#: src/CHANGELOG.md:2838
msgid ""
"Fixed `CARGO_CFG_` vars for configs defined both with and without value. "
"[\\#11790](https://github.com/rust-lang/cargo/pull/11790)"
msgstr ""

#: src/CHANGELOG.md:2840
msgid ""
"Broke endless loop on cyclic features in added dependency in `cargo add`. "
"[\\#11805](https://github.com/rust-lang/cargo/pull/11805)"
msgstr ""

#: src/CHANGELOG.md:2842
msgid ""
"Don't panic when `[patch]` involved in dependency resolution results in a "
"conflict. [\\#11770](https://github.com/rust-lang/cargo/pull/11770)"
msgstr ""

#: src/CHANGELOG.md:2844
msgid ""
"Fixed credential token format validation. [\\#11951](https://github.com/rust-"
"lang/cargo/pull/11951)"
msgstr ""

#: src/CHANGELOG.md:2846
msgid ""
"Added the missing token format validation on publish. [\\#11952](https://"
"github.com/rust-lang/cargo/pull/11952)"
msgstr ""

#: src/CHANGELOG.md:2848
msgid ""
"Fixed case mismatches when looking up env vars in the Config snapshot. "
"[\\#11824](https://github.com/rust-lang/cargo/pull/11824)"
msgstr ""

#: src/CHANGELOG.md:2850
msgid ""
"`cargo new` generates the correct `.hgignore` aligning semantics with other "
"VCS ignore files. [\\#11855](https://github.com/rust-lang/cargo/pull/11855)"
msgstr ""

#: src/CHANGELOG.md:2853
msgid ""
"Stopped doing unnecessary fuzzy registry index queries. This significantly "
"reduces the amount of HTTP requests to remote registries for crates "
"containing `-` or `_` in their names. [\\#11936](https://github.com/rust-"
"lang/cargo/pull/11936) [\\#11937](https://github.com/rust-lang/cargo/pull/"
"11937)"
msgstr ""

#: src/CHANGELOG.md:2861
msgid ""
"Added `-Zdirect-minimal-versions`. This behaves like `-Zminimal-versions` "
"but only for direct dependencies. ([docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#direct-minimal-versions)) [\\#11688](https://"
"github.com/rust-lang/cargo/pull/11688)"
msgstr ""

#: src/CHANGELOG.md:2865
msgid ""
"Added `-Zgitoxide` which switches all `git fetch` operation in Cargo to use "
"`gitoxide` crate. This is still an MVP but could improve the performance up "
"to 2 times. ([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html##gitoxide)) [\\#11448](https://github.com/rust-lang/cargo/pull/"
"11448) [\\#11800](https://github.com/rust-lang/cargo/pull/11800) [\\#11822]"
"(https://github.com/rust-lang/cargo/pull/11822) [\\#11830](https://"
"github.com/rust-lang/cargo/pull/11830)"
msgstr ""

#: src/CHANGELOG.md:2873
msgid ""
"Removed `-Zjobserver-per-rustc`. Its rustc counterpart never got landed. "
"[\\#11764](https://github.com/rust-lang/cargo/pull/11764)"
msgstr ""

#: src/CHANGELOG.md:2878
msgid ""
"Cleaned-up unstable documentation. [\\#11793](https://github.com/rust-lang/"
"cargo/pull/11793)"
msgstr ""

#: src/CHANGELOG.md:2880
msgid ""
"Enhanced the documentation of timing report with graphs. [\\#11798](https://"
"github.com/rust-lang/cargo/pull/11798)"
msgstr ""

#: src/CHANGELOG.md:2882
msgid ""
"Clarified requirements about the state of the registry index after publish. "
"[\\#11926](https://github.com/rust-lang/cargo/pull/11926)"
msgstr ""

#: src/CHANGELOG.md:2884
msgid ""
"Clarified docs on `-C` that it appears before the command. [\\#11947]"
"(https://github.com/rust-lang/cargo/pull/11947)"
msgstr ""

#: src/CHANGELOG.md:2886
msgid ""
"Clarified working directory behaviour for `cargo test`, `cargo bench` and "
"`cargo run`. [\\#11901](https://github.com/rust-lang/cargo/pull/11901)"
msgstr ""

#: src/CHANGELOG.md:2889
msgid ""
"Fixed the doc of `registries.name.index` configuration. [\\#11880](https://"
"github.com/rust-lang/cargo/pull/11880)"
msgstr ""

#: src/CHANGELOG.md:2891
msgid ""
"Notice for potential unexpected shell expansions in help text of `cargo-"
"add`. [\\#11826](https://github.com/rust-lang/cargo/pull/11826)"
msgstr ""

#: src/CHANGELOG.md:2893
msgid ""
"Updated external-tools JSON docs. [\\#11918](https://github.com/rust-lang/"
"cargo/pull/11918)"
msgstr ""

#: src/CHANGELOG.md:2895
msgid ""
"Call out the differences between the index JSON and the API or metadata. "
"[\\#11927](https://github.com/rust-lang/cargo/pull/11927)"
msgstr ""

#: src/CHANGELOG.md:2897
msgid ""
"Consistently use `@` when mentioning pkgid format. [\\#11956](https://"
"github.com/rust-lang/cargo/pull/11956)"
msgstr ""

#: src/CHANGELOG.md:2899
msgid ""
"Enhanced Cargo Contributor Guide. [\\#11825](https://github.com/rust-lang/"
"cargo/pull/11825) [\\#11842](https://github.com/rust-lang/cargo/pull/11842) "
"[\\#11869](https://github.com/rust-lang/cargo/pull/11869) [\\#11876](https://"
"github.com/rust-lang/cargo/pull/11876)"
msgstr ""

#: src/CHANGELOG.md:2904
msgid ""
"Moved a part of Cargo Contributor Guide to Cargo API documentation. [docs]"
"(https://doc.rust-lang.org/nightly/nightly-rustc/cargo) [\\#11809](https://"
"github.com/rust-lang/cargo/pull/11809) [\\#11841](https://github.com/rust-"
"lang/cargo/pull/11841) [\\#11850](https://github.com/rust-lang/cargo/pull/"
"11850) [\\#11870](https://github.com/rust-lang/cargo/pull/11870)"
msgstr ""

#: src/CHANGELOG.md:2910
msgid ""
"Cargo team now arranges [office hours](https://github.com/rust-lang/cargo/"
"wiki/Office-Hours)! [\\#11903](https://github.com/rust-lang/cargo/pull/11903)"
msgstr ""

#: src/CHANGELOG.md:2916
msgid ""
"Switched to `sha2` crate for SHA256 calculation. [\\#11795](https://"
"github.com/rust-lang/cargo/pull/11795) [\\#11807](https://github.com/rust-"
"lang/cargo/pull/11807)"
msgstr ""

#: src/CHANGELOG.md:2919
msgid ""
"Switched benchsuite to the index archive. [\\#11933](https://github.com/rust-"
"lang/cargo/pull/11933)"
msgstr ""

#: src/CHANGELOG.md:2921
msgid ""
"Updated to `base64` 0.21.0. [\\#11796](https://github.com/rust-lang/cargo/"
"pull/11796)"
msgstr ""

#: src/CHANGELOG.md:2923
msgid ""
"Updated to `curl-sys` 0.4.61, which corresponds to curl 8.0.1. [\\#11871]"
"(https://github.com/rust-lang/cargo/pull/11871)"
msgstr ""

#: src/CHANGELOG.md:2925
msgid ""
"Updated to `proptest` 1.1.0. [\\#11886](https://github.com/rust-lang/cargo/"
"pull/11886)"
msgstr ""

#: src/CHANGELOG.md:2927
msgid ""
"Updated to `git2` 0.17.0, which corresponds to libgit2 1.6.3. [\\#11928]"
"(https://github.com/rust-lang/cargo/pull/11928)"
msgstr ""

#: src/CHANGELOG.md:2929
msgid ""
"Updated to `clap` 4.2. [\\#11904](https://github.com/rust-lang/cargo/pull/"
"11904)"
msgstr ""

#: src/CHANGELOG.md:2931
msgid ""
"Integrated `cargo-deny` in Cargo its own CI pipeline. [\\#11761](https://"
"github.com/rust-lang/cargo/pull/11761)"
msgstr ""

#: src/CHANGELOG.md:2933
msgid ""
"Made non-blocking IO calls more robust. [\\#11624](https://github.com/rust-"
"lang/cargo/pull/11624)"
msgstr ""

#: src/CHANGELOG.md:2935
msgid ""
"Dropped `derive` feature from `serde` in `cargo-platform`. [\\#11915]"
"(https://github.com/rust-lang/cargo/pull/11915)"
msgstr ""

#: src/CHANGELOG.md:2937
msgid ""
"Replaced `std::fs::canonicalize` with a more robust `try_canonicalize`. "
"[\\#11866](https://github.com/rust-lang/cargo/pull/11866)"
msgstr ""

#: src/CHANGELOG.md:2939
msgid ""
"Enabled clippy warning on `disallowed_methods` for `std::env::var` and "
"friends. [\\#11828](https://github.com/rust-lang/cargo/pull/11828)"
msgstr ""

#: src/CHANGELOG.md:2942
msgid "Cargo 1.69 (2023-04-20)"
msgstr ""

#: src/CHANGELOG.md:2943
msgid ""
"[985d561f...rust-1.69.0](https://github.com/rust-lang/cargo/compare/"
"985d561f...rust-1.69.0)"
msgstr ""

#: src/CHANGELOG.md:2947
msgid ""
"Cargo now suggests `cargo fix` or `cargo clippy --fix` when compilation "
"warnings are auto-fixable. [\\#11558](https://github.com/rust-lang/cargo/"
"pull/11558)"
msgstr ""

#: src/CHANGELOG.md:2950
msgid ""
"Cargo now suggests `cargo add` if you try to install a library crate. "
"[\\#11410](https://github.com/rust-lang/cargo/pull/11410)"
msgstr ""

#: src/CHANGELOG.md:2952
msgid ""
"Cargo now sets the `CARGO_BIN_NAME` environment variable also for binary "
"examples. [\\#11705](https://github.com/rust-lang/cargo/pull/11705)"
msgstr ""

#: src/CHANGELOG.md:2957
msgid ""
"❗ When `default-features` is set to false of a workspace dependency, and an "
"inherited dependency of a member has `default-features = true`, Cargo will "
"enable default features of that dependency. [\\#11409](https://github.com/"
"rust-lang/cargo/pull/11409)"
msgstr ""

#: src/CHANGELOG.md:2961
msgid ""
"❗ Deny `CARGO_HOME` in `[env]` configuration table. Cargo itself doesn't "
"pick up this value, but recursive calls to cargo would, which was not "
"intended. [\\#11644](https://github.com/rust-lang/cargo/pull/11644)"
msgstr ""

#: src/CHANGELOG.md:2964
msgid ""
"❗ Debuginfo for build dependencies is now off if not explicitly set. This "
"is expected to improve the overall build time. [\\#11252](https://github.com/"
"rust-lang/cargo/pull/11252)"
msgstr ""

#: src/CHANGELOG.md:2967
msgid ""
"Cargo now emits errors on invalid alphanumeric characters in a registry "
"token. [\\#11600](https://github.com/rust-lang/cargo/pull/11600)"
msgstr ""

#: src/CHANGELOG.md:2969
msgid ""
"`cargo add` now checks only the order of `[dependencies]` without "
"considering `[dependencies.*]`. [\\#11612](https://github.com/rust-lang/"
"cargo/pull/11612)"
msgstr ""

#: src/CHANGELOG.md:2972
msgid ""
"Cargo now respects the new jobserver IPC style in GNU Make 4.4, by updating "
"its dependency `jobserver`. [\\#11767](https://github.com/rust-lang/cargo/"
"pull/11767)"
msgstr ""

#: src/CHANGELOG.md:2975
msgid ""
"`cargo install` now reports required features when no binary meets its "
"requirements. [\\#11647](https://github.com/rust-lang/cargo/pull/11647)"
msgstr ""

#: src/CHANGELOG.md:2980
msgid ""
"Uplifted `.dwp` DWARF package file next to the executable for debuggers to "
"locate them. [\\#11572](https://github.com/rust-lang/cargo/pull/11572)"
msgstr ""

#: src/CHANGELOG.md:2983
msgid ""
"Fixed build scripts triggering recompiles when a `rerun-if-changed` points "
"to a directory whose mtime is not preserved by the filesystem. [\\#11613]"
"(https://github.com/rust-lang/cargo/pull/11613)"
msgstr ""

#: src/CHANGELOG.md:2986
msgid ""
"Fixed panics when using dependencies from `[workspace.dependencies]` for "
"`[patch]`. This usage is not supposed to be supported. [\\#11565](https://"
"github.com/rust-lang/cargo/pull/11565) [\\#11630](https://github.com/rust-"
"lang/cargo/pull/11630)"
msgstr ""

#: src/CHANGELOG.md:2990
msgid ""
"Fixed `cargo report` saving the same future-incompat reports multiple times. "
"[\\#11648](https://github.com/rust-lang/cargo/pull/11648)"
msgstr ""

#: src/CHANGELOG.md:2992
msgid ""
"Fixed the incorrect inference of a directory ending with `.rs` as a file. "
"[\\#11678](https://github.com/rust-lang/cargo/pull/11678)"
msgstr ""

#: src/CHANGELOG.md:2994
msgid ""
"Fixed `.cargo-ok` file being truncated wrongly, preventing from using a "
"dependency. [\\#11665](https://github.com/rust-lang/cargo/pull/11665) "
"[\\#11724](https://github.com/rust-lang/cargo/pull/11724)"
msgstr ""

#: src/CHANGELOG.md:3000
msgid ""
"`-Zrustdoc-scrape-example` must fail with bad build script. [\\#11694]"
"(https://github.com/rust-lang/cargo/pull/11694)"
msgstr ""

#: src/CHANGELOG.md:3002
msgid ""
"Updated 1password credential manager integration to the version 2 CLI. "
"[\\#11692](https://github.com/rust-lang/cargo/pull/11692)"
msgstr ""

#: src/CHANGELOG.md:3004
msgid ""
"Emit an error message for transitive artifact dependencies with targets the "
"package doesn't directly interact with. [\\#11643](https://github.com/rust-"
"lang/cargo/pull/11643)"
msgstr ""

#: src/CHANGELOG.md:3007
msgid ""
"Added `-C` flag for changing current dir before build starts. [\\#10952]"
"(https://github.com/rust-lang/cargo/pull/10952)"
msgstr ""

#: src/CHANGELOG.md:3012
msgid ""
"Clarified the difference between `CARGO_CRATE_NAME` and `CARGO_PKG_NAME`. "
"[\\#11576](https://github.com/rust-lang/cargo/pull/11576)"
msgstr ""

#: src/CHANGELOG.md:3014
msgid ""
"Added links to the Target section of the glossary for occurrences of target "
"triple. [\\#11603](https://github.com/rust-lang/cargo/pull/11603)"
msgstr ""

#: src/CHANGELOG.md:3016
msgid ""
"Described how the current resolver sometimes duplicates dependencies. "
"[\\#11604](https://github.com/rust-lang/cargo/pull/11604)"
msgstr ""

#: src/CHANGELOG.md:3018
msgid ""
"Added a note about verifying your email address on crates.io. [\\#11620]"
"(https://github.com/rust-lang/cargo/pull/11620)"
msgstr ""

#: src/CHANGELOG.md:3020
msgid ""
"Mention current default value in `publish.timeout` docs. [\\#11652](https://"
"github.com/rust-lang/cargo/pull/11652)"
msgstr ""

#: src/CHANGELOG.md:3022
msgid ""
"More doc comments for `cargo::core::compiler` modules. [\\#11669](https://"
"github.com/rust-lang/cargo/pull/11669) [\\#11703](https://github.com/rust-"
"lang/cargo/pull/11703) [\\#11711](https://github.com/rust-lang/cargo/pull/"
"11711) [\\#11758](https://github.com/rust-lang/cargo/pull/11758)"
msgstr ""

#: src/CHANGELOG.md:3027
msgid ""
"Added more guidance on how to implement unstable features. [\\#11675]"
"(https://github.com/rust-lang/cargo/pull/11675)"
msgstr ""

#: src/CHANGELOG.md:3029
msgid ""
"Fixed unstable chapter layout for `codegen-backend`. [\\#11676](https://"
"github.com/rust-lang/cargo/pull/11676)"
msgstr ""

#: src/CHANGELOG.md:3031
msgid ""
"Add a link to LTO doc. [\\#11701](https://github.com/rust-lang/cargo/pull/"
"11701)"
msgstr ""

#: src/CHANGELOG.md:3033
msgid ""
"Added documentation for the configuration discovery of `cargo install` to "
"the man pages [\\#11763](https://github.com/rust-lang/cargo/pull/11763)"
msgstr ""

#: src/CHANGELOG.md:3036
msgid ""
"Documented `-F` flag as an alias for `--features` in `cargo add`. [\\#11774]"
"(https://github.com/rust-lang/cargo/pull/11774)"
msgstr ""

#: src/CHANGELOG.md:3041
msgid ""
"Disable network SSH tests on Windows. [\\#11610](https://github.com/rust-"
"lang/cargo/pull/11610)"
msgstr ""

#: src/CHANGELOG.md:3043
msgid ""
"Made some blocking tests non-blocking. [\\#11650](https://github.com/rust-"
"lang/cargo/pull/11650)"
msgstr ""

#: src/CHANGELOG.md:3045
msgid ""
"Deny warnings in CI, not locally. [\\#11699](https://github.com/rust-lang/"
"cargo/pull/11699)"
msgstr ""

#: src/CHANGELOG.md:3047
msgid ""
"Re-export `cargo_new::NewProjectKind` as public. [\\#11700](https://"
"github.com/rust-lang/cargo/pull/11700)"
msgstr ""

#: src/CHANGELOG.md:3049
msgid ""
"Made dependencies in alphabetical order. [\\#11719](https://github.com/rust-"
"lang/cargo/pull/11719)"
msgstr ""

#: src/CHANGELOG.md:3051
msgid ""
"Switched some tests from `build` to `check`. [\\#11725](https://github.com/"
"rust-lang/cargo/pull/11725)"
msgstr ""

#: src/CHANGELOG.md:3053
msgid ""
"Consolidated how Cargo reads environments variables internally. [\\#11727]"
"(https://github.com/rust-lang/cargo/pull/11727) [\\#11754](https://"
"github.com/rust-lang/cargo/pull/11754)"
msgstr ""

#: src/CHANGELOG.md:3056
msgid ""
"Fixed tests with nondeterministic ordering [\\#11766](https://github.com/"
"rust-lang/cargo/pull/11766)"
msgstr ""

#: src/CHANGELOG.md:3058
msgid ""
"Added a test to verify the intermediate artifacts persist in the temp "
"directory. [\\#11771](https://github.com/rust-lang/cargo/pull/11771)"
msgstr ""

#: src/CHANGELOG.md:3060
msgid ""
"Updated cross test instructions for aarch64-apple-darwin. [\\#11663](https://"
"github.com/rust-lang/cargo/pull/11663)"
msgstr ""

#: src/CHANGELOG.md:3062
msgid ""
"Updated to `toml` v0.6 and `toml_edit` v0.18 for TOML manipulations. "
"[\\#11618](https://github.com/rust-lang/cargo/pull/11618)"
msgstr ""

#: src/CHANGELOG.md:3064
msgid ""
"Updated to `clap` v4.1.3. [\\#11619](https://github.com/rust-lang/cargo/pull/"
"11619)"
msgstr ""

#: src/CHANGELOG.md:3066
msgid ""
"Replaced `winapi` with `windows-sys` crate for Windows bindings. [\\#11656]"
"(https://github.com/rust-lang/cargo/pull/11656)"
msgstr ""

#: src/CHANGELOG.md:3068
msgid ""
"Reused `url` crate for percent encoding instead of `percent-encoding`. "
"[\\#11750](https://github.com/rust-lang/cargo/pull/11750)"
msgstr ""

#: src/CHANGELOG.md:3070
msgid ""
"Cargo contributors can benefit from smart punctuations when writing "
"documentations, e.g., `---` is auto-converted into an em dash. ([docs]"
"(https://rust-lang.github.io/mdBook/format/markdown.html#smart-punctuation)) "
"[\\#11646](https://github.com/rust-lang/cargo/pull/11646) [\\#11715](https://"
"github.com/rust-lang/cargo/pull/11715)"
msgstr ""

#: src/CHANGELOG.md:3075
msgid ""
"Cargo's CI pipeline now covers macOS on nightly. [\\#11712](https://"
"github.com/rust-lang/cargo/pull/11712)"
msgstr ""

#: src/CHANGELOG.md:3077
msgid ""
"Re-enabled some clippy lints in Cargo itself. [\\#11722](https://github.com/"
"rust-lang/cargo/pull/11722)"
msgstr ""

#: src/CHANGELOG.md:3079
msgid ""
"Enabled sparse protocol in Cargo's CI. [\\#11632](https://github.com/rust-"
"lang/cargo/pull/11632)"
msgstr ""

#: src/CHANGELOG.md:3081
msgid ""
"Pull requests in Cargo now get autolabelled for label `A-*` and `Command-*`. "
"[\\#11664](https://github.com/rust-lang/cargo/pull/11664) [\\#11679](https://"
"github.com/rust-lang/cargo/pull/11679)"
msgstr ""

#: src/CHANGELOG.md:3085
msgid "Cargo 1.68.2 (2023-03-28)"
msgstr ""

#: src/CHANGELOG.md:3086
msgid ""
"[115f3455...rust-1.68.0](https://github.com/rust-lang/cargo/compare/"
"115f3455...rust-1.68.0)"
msgstr ""

#: src/CHANGELOG.md:3088
msgid ""
"Updated the GitHub RSA SSH host key bundled within cargo. The key was "
"[rotated by GitHub](https://github.blog/2023-03-23-we-updated-our-rsa-ssh-"
"host-key/) on 2023-03-24 after the old one leaked. [\\#11883](https://"
"github.com/rust-lang/cargo/pull/11883)"
msgstr ""

#: src/CHANGELOG.md:3093
msgid ""
"Added support for SSH known hosts marker `@revoked`. [\\#11635](https://"
"github.com/rust-lang/cargo/pull/11635)"
msgstr ""

#: src/CHANGELOG.md:3095
msgid ""
"Marked the old GitHub RSA host key as revoked. This will prevent Cargo from "
"accepting the leaked key even when trusted by the system. [\\#11889](https://"
"github.com/rust-lang/cargo/pull/11889)"
msgstr ""

#: src/CHANGELOG.md:3099
msgid "Cargo 1.68 (2023-03-09)"
msgstr ""

#: src/CHANGELOG.md:3100
msgid ""
"[f6e737b1...rust-1.68.0](https://github.com/rust-lang/cargo/compare/"
"f6e737b1...rust-1.68.0)"
msgstr ""

#: src/CHANGELOG.md:3104
msgid ""
"🎉 The new \"sparse\" protocol has been stabilized. It should provide a "
"significant performance improvement when accessing crates.io. ([RFC 2789]"
"(https://github.com/rust-lang/rfcs/blob/master/text/2789-sparse-index.md)) "
"([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"registries.html#registry-protocols)) [\\#11224](https://github.com/rust-lang/"
"cargo/pull/11224) [\\#11480](https://github.com/rust-lang/cargo/pull/11480) "
"[\\#11733](https://github.com/rust-lang/cargo/pull/11733) [\\#11756](https://"
"github.com/rust-lang/cargo/pull/11756)"
msgstr ""

#: src/CHANGELOG.md:3112
msgid ""
"🎉 `home` crate is now a subcrate in `rust-lang/cargo` repository. Welcome! "
"[\\#11359](https://github.com/rust-lang/cargo/pull/11359) [\\#11481](https://"
"github.com/rust-lang/cargo/pull/11481)"
msgstr ""

#: src/CHANGELOG.md:3115
msgid ""
"Long diagnostic messages now can be truncated to be more readable. [\\#11494]"
"(https://github.com/rust-lang/cargo/pull/11494)"
msgstr ""

#: src/CHANGELOG.md:3117
msgid ""
"Shows the progress of crates.io index update even when `net.git-fetch-with-"
"cli` enabled. [\\#11579](https://github.com/rust-lang/cargo/pull/11579)"
msgstr ""

#: src/CHANGELOG.md:3119
msgid ""
"`cargo build --verbose` tells you more about why it recompiles. [\\#11407]"
"(https://github.com/rust-lang/cargo/pull/11407)"
msgstr ""

#: src/CHANGELOG.md:3121
msgid ""
"Cargo's file locking mechanism now supports Solaris by using `fcntl`. "
"[\\#11439](https://github.com/rust-lang/cargo/pull/11439) [\\#11474](https://"
"github.com/rust-lang/cargo/pull/11474)"
msgstr ""

#: src/CHANGELOG.md:3124
msgid ""
"Added a new SemVer compatibility rule explaining the expectations around "
"diagnostic lints [\\#11596](https://github.com/rust-lang/cargo/pull/11596)"
msgstr ""

#: src/CHANGELOG.md:3126
msgid ""
"`cargo vendor` generates a different source replacement entry for each "
"revision from the same git repository. [\\#10690](https://github.com/rust-"
"lang/cargo/pull/1090)"
msgstr ""

#: src/CHANGELOG.md:3129
msgid ""
"Cargo contributors can relabel issues via triagebot. [doc](https://"
"forge.rust-lang.org/triagebot/labeling.html) [\\#11498](https://github.com/"
"rust-lang/cargo/pull/11498)"
msgstr ""

#: src/CHANGELOG.md:3132
msgid ""
"Cargo contributors can write tests in containers. [\\#11583](https://"
"github.com/rust-lang/cargo/pull/11583)"
msgstr ""

#: src/CHANGELOG.md:3137
msgid ""
"Cargo now by default saves credentials to `.cargo/credentials.toml`. If "
"`.cargo/credentials` exists, writes to it for backward compatibility "
"reasons. [\\#11533](https://github.com/rust-lang/cargo/pull/11533)"
msgstr ""

#: src/CHANGELOG.md:3140
msgid ""
"To prevent sensitive data from being logged, Cargo introduces a new wrapper "
"type internally. [\\#11545](https://github.com/rust-lang/cargo/pull/11545)"
msgstr ""

#: src/CHANGELOG.md:3142
msgid ""
"Several documentation improvements. [\\#11475](https://github.com/rust-lang/"
"cargo/pull/11475) [\\#11504](https://github.com/rust-lang/cargo/pull/11504) "
"[\\#11516](https://github.com/rust-lang/cargo/pull/11516) [\\#11517](https://"
"github.com/rust-lang/cargo/pull/11517) [\\#11568](https://github.com/rust-"
"lang/cargo/pull/11568) [\\#11586](https://github.com/rust-lang/cargo/pull/"
"11586) [\\#11592](https://github.com/rust-lang/cargo/pull/11592)"
msgstr ""

#: src/CHANGELOG.md:3153
msgid ""
"❗ `cargo package` and `cargo publish` now respects workspace's "
"`Cargo.lock`. This is an expected behavior but previously got overlooked. "
"[\\#11477](https://github.com/rust-lang/cargo/pull/11477)"
msgstr ""

#: src/CHANGELOG.md:3156
msgid ""
"Fixed `cargo vendor` failing on resolving git dependencies inherited from a "
"workspace. [\\#11414](https://github.com/rust-lang/cargo/pull/11414)"
msgstr ""

#: src/CHANGELOG.md:3158
msgid ""
"`cargo install` can now correctly install root package when "
"`workspace.default-members` is specified. [\\#11067](https://github.com/rust-"
"lang/cargo/pull/11067)"
msgstr ""

#: src/CHANGELOG.md:3160
msgid ""
"Fixed panic on target specific dependency errors. [\\#11541](https://"
"github.com/rust-lang/cargo/pull/11541)"
msgstr ""

#: src/CHANGELOG.md:3162
msgid ""
"Shows `--help` if there is no man page for a subcommand. [\\#11473](https://"
"github.com/rust-lang/cargo/pull/11473)"
msgstr ""

#: src/CHANGELOG.md:3164
msgid ""
"Setting `target.cfg(…).rustflags` shouldn't erase `build.rustdocflags`. "
"[\\#11323](https://github.com/rust-lang/cargo/pull/11323)"
msgstr ""

#: src/CHANGELOG.md:3166
msgid ""
"Unsupported `profile.split-debuginfo` options are now ignored, which "
"previously made Cargo fail to compile on certain platforms. [\\#11347]"
"(https://github.com/rust-lang/cargo/pull/11347) [\\#11633](https://"
"github.com/rust-lang/cargo/pull/11633)"
msgstr ""

#: src/CHANGELOG.md:3170
msgid ""
"Don't panic in Windows headless session with really long file names. "
"[\\#11759](https://github.com/rust-lang/cargo/pull/11759)"
msgstr ""

#: src/CHANGELOG.md:3175
msgid ""
"Implemented a initial support of asymmetric token authentication for "
"registries. ([RFC 3231](https://github.com/rust-lang/rfcs/blob/master/text/"
"3231-cargo-asymmetric-tokens.md)) ([docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#registry-auth)) [\\#10771](https://github.com/"
"rust-lang/cargo/pull/10771)"
msgstr ""

#: src/CHANGELOG.md:3179
msgid ""
"Do not error for `auth-required: true` without `-Z sparse-registry` "
"[\\#11661](https://github.com/rust-lang/cargo/pull/11661)"
msgstr ""

#: src/CHANGELOG.md:3181
msgid ""
"Supports `codegen-backend` and `rustflags` in profiles in config file. "
"[\\#11562](https://github.com/rust-lang/cargo/pull/11562)"
msgstr ""

#: src/CHANGELOG.md:3183
msgid ""
"Suggests `cargo clippy --fix` when warnings/errors could be fixed with "
"clippy. [\\#11399](https://github.com/rust-lang/cargo/pull/11399)"
msgstr ""

#: src/CHANGELOG.md:3185
msgid ""
"Fixed artifact deps not working when target field specified coexists with "
"`optional = true`. [\\#11434](https://github.com/rust-lang/cargo/pull/11434)"
msgstr ""

#: src/CHANGELOG.md:3187
msgid ""
"Make Cargo distinguish `Unit`s with and without artifact targets. [\\#11478]"
"(https://github.com/rust-lang/cargo/pull/11478)"
msgstr ""

#: src/CHANGELOG.md:3189
msgid ""
"`cargo metadata` supports artifact dependencies. [\\#11550](https://"
"github.com/rust-lang/cargo/pull/11550)"
msgstr ""

#: src/CHANGELOG.md:3191
msgid ""
"Allows builds of some crate to fail during optional doc-scraping. [\\#11450]"
"(https://github.com/rust-lang/cargo/pull/11450)"
msgstr ""

#: src/CHANGELOG.md:3193
msgid ""
"Add warning if potentially-scrapable examples are skipped due to dev-"
"dependencies. [\\#11503](https://github.com/rust-lang/cargo/pull/11503)"
msgstr ""

#: src/CHANGELOG.md:3195
msgid ""
"Don't scrape examples from library targets by default. [\\#11499](https://"
"github.com/rust-lang/cargo/pull/11499)"
msgstr ""

#: src/CHANGELOG.md:3197
msgid ""
"Fixed examples of proc-macro crates being scraped for examples. [\\#11497]"
"(https://github.com/rust-lang/cargo/pull/11497)"
msgstr ""

#: src/CHANGELOG.md:3200
msgid "Cargo 1.67 (2023-01-26)"
msgstr ""

#: src/CHANGELOG.md:3201
msgid ""
"[7e484fc1...rust-1.67.0](https://github.com/rust-lang/cargo/compare/"
"7e484fc1...rust-1.67.0)"
msgstr ""

#: src/CHANGELOG.md:3205
msgid ""
"`cargo remove` now cleans up the referenced dependency of the root workspace "
"manifest, `profile`, `patch`, and `replace` sections after a successful "
"removal of a dependency. [\\#11194](https://github.com/rust-lang/cargo/pull/"
"11194) [\\#11242](https://github.com/rust-lang/cargo/pull/11242) [\\#11351]"
"(https://github.com/rust-lang/cargo/pull/11351)"
msgstr ""

#: src/CHANGELOG.md:3211
msgid ""
"`cargo package` and `cargo publish` now report total and compressed crate "
"size after packaging. [\\#11270](https://github.com/rust-lang/cargo/pull/"
"11270)"
msgstr ""

#: src/CHANGELOG.md:3217
msgid ""
"❗ Cargo now reuses the value of `$CARGO` if it's already set in the "
"environment, and forwards the value when executing external subcommands and "
"build scripts. [\\#11285](https://github.com/rust-lang/cargo/pull/11285)"
msgstr ""

#: src/CHANGELOG.md:3220
msgid ""
"❗ Cargo now emits an error when running `cargo update --precise` without a "
"`-p` flag. [\\#11349](https://github.com/rust-lang/cargo/pull/11349)"
msgstr ""

#: src/CHANGELOG.md:3222
msgid ""
"❗ Cargo now emits an error if there are multiple registries in the "
"configuration with the same index URL. [\\#10592](https://github.com/rust-"
"lang/cargo/pull/10592)"
msgstr ""

#: src/CHANGELOG.md:3224
msgid ""
"Cargo now is aware of compression ratio when extracting crate files. This "
"relaxes the hard size limit introduced in 1.64.0 to mitigate zip bomb "
"attack. [\\#11337](https://github.com/rust-lang/cargo/pull/11337)"
msgstr ""

#: src/CHANGELOG.md:3227
msgid ""
"Cargo now errors out when `cargo fix` on a git repo with uncommitted "
"changes. [\\#11400](https://github.com/rust-lang/cargo/pull/11400)"
msgstr ""

#: src/CHANGELOG.md:3229
msgid ""
"Cargo now warns when `cargo tree -i <spec>` cannot find any package. "
"[\\#11377](https://github.com/rust-lang/cargo/pull/11377)"
msgstr ""

#: src/CHANGELOG.md:3231
msgid ""
"Cargo now warns when running `cargo new/init` and `PATH` env separator is in "
"the project path. [\\#11318](https://github.com/rust-lang/cargo/pull/11318)"
msgstr ""

#: src/CHANGELOG.md:3234
msgid ""
"Better error messages when multiple packages were found and `cargo add/"
"remove` gets confused. [\\#11186](https://github.com/rust-lang/cargo/pull/"
"11186) [\\#11375](https://github.com/rust-lang/cargo/pull/11375)"
msgstr ""

#: src/CHANGELOG.md:3238
msgid ""
"A better error message when `cargo init` but existing ignore files aren't "
"UTF-8. [\\#11321](https://github.com/rust-lang/cargo/pull/11321)"
msgstr ""

#: src/CHANGELOG.md:3240
msgid ""
"A better error message for `cargo install .`. [\\#11401](https://github.com/"
"rust-lang/cargo/pull/11401)"
msgstr ""

#: src/CHANGELOG.md:3242
msgid ""
"A better warning when the same file path found in multiple build targets. "
"[\\#11299](https://github.com/rust-lang/cargo/pull/11299)"
msgstr ""

#: src/CHANGELOG.md:3244
msgid ""
"Updated the internal HTTP library libcurl with various fixes and updates. "
"[\\#11307](https://github.com/rust-lang/cargo/pull/11307) [\\#11326](https://"
"github.com/rust-lang/cargo/pull/11326)"
msgstr ""

#: src/CHANGELOG.md:3250
msgid ""
"Fixed `cargo clean` for removing fingerprints and build script artifacts of "
"only the requested package [\\#10621](https://github.com/rust-lang/cargo/"
"pull/10621)"
msgstr ""

#: src/CHANGELOG.md:3253
msgid ""
"Fixed `cargo install --index` not working when config `registry.default` is "
"set. [\\#11302](https://github.com/rust-lang/cargo/pull/11302)"
msgstr ""

#: src/CHANGELOG.md:3255
msgid ""
"Fixed git2 safe-directory accidentally disabled when no network "
"configuration was found. [\\#11366](https://github.com/rust-lang/cargo/pull/"
"11366)"
msgstr ""

#: src/CHANGELOG.md:3257
msgid ""
"Migrate from crate `atty` to resolve potential soundness issue. [\\#11420]"
"(https://github.com/rust-lang/cargo/pull/11420)"
msgstr ""

#: src/CHANGELOG.md:3259
msgid ""
"Cleans stale git temp files left when libgit2 indexing is interrupted. "
"[\\#11308](https://github.com/rust-lang/cargo/pull/11308)"
msgstr ""

#: src/CHANGELOG.md:3264
msgid ""
"Suggests `cargo fix` when some compilation warnings/errors can be auto-"
"fixed. [\\#10989](https://github.com/rust-lang/cargo/pull/10989) [\\#11368]"
"(https://github.com/rust-lang/cargo/pull/11368)"
msgstr ""

#: src/CHANGELOG.md:3267
msgid ""
"Changed `rustdoc-scrape-examples` to be a target-level configuration. "
"[\\#10343](https://github.com/rust-lang/cargo/pull/10343) [\\#11425](https://"
"github.com/rust-lang/cargo/pull/11425) [\\#11430](https://github.com/rust-"
"lang/cargo/pull/11430) [\\#11445](https://github.com/rust-lang/cargo/pull/"
"11445)"
msgstr ""

#: src/CHANGELOG.md:3272
msgid ""
"Propagates change of artifact bin dependency to its parent fingerprint. "
"[\\#11353](https://github.com/rust-lang/cargo/pull/11353)"
msgstr ""

#: src/CHANGELOG.md:3274
msgid ""
"Fixed `wait-for-publish` to work with sparse registry. [\\#11356](https://"
"github.com/rust-lang/cargo/pull/11356) [\\#11327](https://github.com/rust-"
"lang/cargo/pull/11327) [\\#11388](https://github.com/rust-lang/cargo/pull/"
"11388)"
msgstr ""

#: src/CHANGELOG.md:3278
msgid ""
"Stores the `sparse+` prefix in the `SourceId` for sparse registries "
"[\\#11387](https://github.com/rust-lang/cargo/pull/11387) [\\#11403](https://"
"github.com/rust-lang/cargo/pull/11403)"
msgstr ""

#: src/CHANGELOG.md:3281
msgid ""
"Implemented alternative registry authentication support. ([RFC 3139](https://"
"github.com/rust-lang/rfcs/blob/master/text/3139-cargo-alternative-registry-"
"auth.md)) ([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#registry-auth)) [\\#10592](https://github.com/rust-lang/cargo/"
"pull/10592)"
msgstr ""

#: src/CHANGELOG.md:3285
msgid ""
"Added documentation of config option `registries.crates-io.protocol`. "
"[\\#11350](https://github.com/rust-lang/cargo/pull/11350)"
msgstr ""

#: src/CHANGELOG.md:3288
msgid "Cargo 1.66.1 (2023-01-10)"
msgstr ""

#: src/CHANGELOG.md:3291
msgid ""
"🚨 [CVE-2022-46176](https://github.com/rust-lang/cargo/security/advisories/"
"GHSA-r5w3-xm58-jv6j): Added validation of SSH host keys for git URLs. See "
"[the docs](https://doc.rust-lang.org/cargo/appendix/git-"
"authentication.html#ssh-known-hosts) for more information on how to "
"configure the known host keys."
msgstr ""

#: src/CHANGELOG.md:3295
msgid "Cargo 1.66 (2022-12-15)"
msgstr ""

#: src/CHANGELOG.md:3296
msgid ""
"[08250398...rust-1.66.0](https://github.com/rust-lang/cargo/compare/"
"08250398...rust-1.66.0)"
msgstr ""

#: src/CHANGELOG.md:3300
msgid ""
"🎉 Added `cargo remove` command for removing dependencies from `Cargo.toml`. "
"[docs](https://doc.rust-lang.org/nightly/cargo/commands/cargo-remove.html) "
"[\\#11059](https://github.com/rust-lang/cargo/pull/11059) [\\#11099](https://"
"github.com/rust-lang/cargo/pull/11099) [\\#11193](https://github.com/rust-"
"lang/cargo/pull/11193) [\\#11204](https://github.com/rust-lang/cargo/pull/"
"11204) [\\#11227](https://github.com/rust-lang/cargo/pull/11227)"
msgstr ""

#: src/CHANGELOG.md:3307
msgid ""
"Added support for git dependencies having git submodules with relative "
"paths. [\\#11106](https://github.com/rust-lang/cargo/pull/11106)"
msgstr ""

#: src/CHANGELOG.md:3309
msgid ""
"Cargo now sends requests with a `Accept-Encoding` header to registries. "
"[\\#11292](https://github.com/rust-lang/cargo/pull/11292)"
msgstr ""

#: src/CHANGELOG.md:3311
msgid ""
"Cargo now forwards non-UTF8 arguments to external subcommands. [\\#11118]"
"(https://github.com/rust-lang/cargo/pull/11118)"
msgstr ""

#: src/CHANGELOG.md:3316
msgid ""
"❗ Disambiguate source replacements from various angles. [RFC-3289](https://"
"github.com/rust-lang/rfcs/blob/master/text/3289-"
"source_replacement_ambiguity.md) [\\#10907](https://github.com/rust-lang/"
"cargo/pull/10907)"
msgstr ""

#: src/CHANGELOG.md:3319
msgid ""
"When the crates-io source is replaced, the user is required to specify which "
"registry to use with `--registry <NAME>` when performing an API operation."
msgstr ""

#: src/CHANGELOG.md:3320
msgid ""
"Publishing to source-replaced crates.io is no longer permitted using the "
"crates.io token (`registry.token`)."
msgstr ""

#: src/CHANGELOG.md:3321
msgid ""
"In source replacement, the `replace-with` key can reference the name of an "
"alternative registry in the `[registries]` table."
msgstr ""

#: src/CHANGELOG.md:3322
msgid ""
"❗ `cargo publish` now blocks until it sees the published package in the "
"index. [\\#11062](https://github.com/rust-lang/cargo/pull/11062) [\\#11210]"
"(https://github.com/rust-lang/cargo/pull/11210) [\\#11216](https://"
"github.com/rust-lang/cargo/pull/11216) [\\#11255](https://github.com/rust-"
"lang/cargo/pull/11255)"
msgstr ""

#: src/CHANGELOG.md:3327
msgid ""
"Cargo now uses the clap v4 library for command-line argument parsing. "
"[\\#11116](https://github.com/rust-lang/cargo/pull/11116) [\\#11119](https://"
"github.com/rust-lang/cargo/pull/11119) [\\#11159](https://github.com/rust-"
"lang/cargo/pull/11159) [\\#11190](https://github.com/rust-lang/cargo/pull/"
"11190) [\\#11239](https://github.com/rust-lang/cargo/pull/11239) [\\#11280]"
"(https://github.com/rust-lang/cargo/pull/11280)"
msgstr ""

#: src/CHANGELOG.md:3334
msgid ""
"Cargo now only warns on a user-defined alias shadowing an external command. "
"[\\#11170](https://github.com/rust-lang/cargo/pull/11170)"
msgstr ""

#: src/CHANGELOG.md:3336
msgid ""
"Several documentation improvements. [\\#10770](https://github.com/rust-lang/"
"cargo/pull/10770) [\\#10938](https://github.com/rust-lang/cargo/pull/10938) "
"[\\#11082](https://github.com/rust-lang/cargo/pull/11082) [\\#11093](https://"
"github.com/rust-lang/cargo/pull/11093) [\\#11157](https://github.com/rust-"
"lang/cargo/pull/11157) [\\#11185](https://github.com/rust-lang/cargo/pull/"
"11185) [\\#11207](https://github.com/rust-lang/cargo/pull/11207) [\\#11219]"
"(https://github.com/rust-lang/cargo/pull/11219) [\\#11240](https://"
"github.com/rust-lang/cargo/pull/11240) [\\#11241](https://github.com/rust-"
"lang/cargo/pull/11241) [\\#11282](https://github.com/rust-lang/cargo/pull/"
"11282)"
msgstr ""

#: src/CHANGELOG.md:3351
msgid ""
"❗ Config file loaded via `cargo --config <file>` now takes priority over "
"environment variables. This is a documented behaviour but the old "
"implementation accidentally got it wrong. [\\#11077](https://github.com/rust-"
"lang/cargo/pull/11077)"
msgstr ""

#: src/CHANGELOG.md:3355
msgid ""
"❗ Cargo collects rustflags in `target.cfg(…).rustflags` more correctly and "
"warns if that's not enough for convergence. [\\#11114](https://github.com/"
"rust-lang/cargo/pull/11114)"
msgstr ""

#: src/CHANGELOG.md:3358
msgid ""
"Final artifacts not removed by linker should be removed before a compilation "
"gets started. [\\#11122](https://github.com/rust-lang/cargo/pull/11122)"
msgstr ""

#: src/CHANGELOG.md:3360
msgid ""
"`cargo add` now reports unknown features in a more discoverable manner. "
"[\\#11098](https://github.com/rust-lang/cargo/pull/11098)"
msgstr ""

#: src/CHANGELOG.md:3362
msgid ""
"Cargo now reports command aliasing failure with more error contexts. "
"[\\#11087](https://github.com/rust-lang/cargo/pull/11087)"
msgstr ""

#: src/CHANGELOG.md:3364
msgid ""
"A better error message when `cargo login` prompt receives empty input. "
"[\\#11145](https://github.com/rust-lang/cargo/pull/11145)"
msgstr ""

#: src/CHANGELOG.md:3366
msgid ""
"A better error message for fields with wrong types where workspace "
"inheritance is supported. [\\#11113](https://github.com/rust-lang/cargo/pull/"
"11113)"
msgstr ""

#: src/CHANGELOG.md:3369
msgid ""
"A better error message when mixing feature syntax `dep:` with `/`. [\\#11172]"
"(https://github.com/rust-lang/cargo/pull/11172)"
msgstr ""

#: src/CHANGELOG.md:3371
msgid ""
"A better error message when publishing but `package.publish` is `false` in "
"the manifest. [\\#11280](https://github.com/rust-lang/cargo/pull/11280)"
msgstr ""

#: src/CHANGELOG.md:3377
msgid ""
"Added new config option `publish.timeout` behind `-Zpublish-timeout`. [docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#publish-"
"timeout) [\\#11230](https://github.com/rust-lang/cargo/pull/11230)"
msgstr ""

#: src/CHANGELOG.md:3380
msgid ""
"Added retry support to sparse registries. [\\#11069](https://github.com/rust-"
"lang/cargo/pull/11069)"
msgstr ""

#: src/CHANGELOG.md:3382
msgid ""
"Fixed sparse registry lockfile urls containing `registry+sparse+`. [\\#11177]"
"(https://github.com/rust-lang/cargo/pull/11177)"
msgstr ""

#: src/CHANGELOG.md:3384
msgid ""
"Add new config option `registries.crates-io.protocol` for controlling "
"crates.io protocol. [\\#11215](https://github.com/rust-lang/cargo/pull/11215)"
msgstr ""

#: src/CHANGELOG.md:3387
msgid ""
"Removed `sparse+` prefix for index.crates.io. [\\#11247](https://github.com/"
"rust-lang/cargo/pull/11247)"
msgstr ""

#: src/CHANGELOG.md:3389
msgid ""
"Fixed publishing with a dependency on a sparse registry. [\\#11268](https://"
"github.com/rust-lang/cargo/pull/11268)"
msgstr ""

#: src/CHANGELOG.md:3391
msgid ""
"Fixed confusing error messages when using `-Zsparse-registry`. [\\#11283]"
"(https://github.com/rust-lang/cargo/pull/11283)"
msgstr ""

#: src/CHANGELOG.md:3393
msgid ""
"Fixed 410 gone response handling for sparse registries. [\\#11286](https://"
"github.com/rust-lang/cargo/pull/11286)"
msgstr ""

#: src/CHANGELOG.md:3396
msgid "Cargo 1.65 (2022-11-03)"
msgstr ""

#: src/CHANGELOG.md:3397
msgid ""
"[4fd148c4...rust-1.65.0](https://github.com/rust-lang/cargo/compare/"
"4fd148c4...rust-1.65.0)"
msgstr ""

#: src/CHANGELOG.md:3401
msgid ""
"External subcommands can now inherit jobserver file descriptors from Cargo. "
"[\\#10511](https://github.com/rust-lang/cargo/pull/10511)"
msgstr ""

#: src/CHANGELOG.md:3403
msgid ""
"Added an API documentation for private items in cargo-the-library. See "
"<https://doc.rust-lang.org/nightly/nightly-rustc/cargo>. [\\#11019](https://"
"github.com/rust-lang/cargo/pull/11019)"
msgstr ""

#: src/CHANGELOG.md:3409
msgid ""
"Cargo now stops adding its bin path to `PATH` if it's already there. "
"[\\#11023](https://github.com/rust-lang/cargo/pull/11023)"
msgstr ""

#: src/CHANGELOG.md:3411
msgid ""
"Improved the performance of Cargo build scheduling by sorting the queue of "
"pending jobs. [\\#11032](https://github.com/rust-lang/cargo/pull/11032)"
msgstr ""

#: src/CHANGELOG.md:3414
msgid ""
"Improved the performance fetching git dependencies from GitHub even when "
"using a partial hash in the `rev` field. [\\#10807](https://github.com/rust-"
"lang/cargo/pull/10807)"
msgstr ""

#: src/CHANGELOG.md:3417
msgid ""
"Cargo now uses git2 v0.15 and libgit2-sys v0.14, which bring several "
"compatibility fixes with git's new behaviors. [\\#11004](https://github.com/"
"rust-lang/cargo/pull/11004)"
msgstr ""

#: src/CHANGELOG.md:3420
msgid ""
"Registry index files are cached in a more granular way based on content "
"hash. [\\#11044](https://github.com/rust-lang/cargo/pull/11044)"
msgstr ""

#: src/CHANGELOG.md:3422
msgid ""
"Cargo now uses the standard library's `std::thread::scope` instead of the "
"`crossbeam` crate for spawning scoped threads. [\\#10977](https://github.com/"
"rust-lang/cargo/pull/10977)"
msgstr ""

#: src/CHANGELOG.md:3425
msgid ""
"Cargo now uses the standard library's `available_parallelism` instead of the "
"`num_cpus` crate for determining the default parallelism. [\\#10969](https://"
"github.com/rust-lang/cargo/pull/10969)"
msgstr ""

#: src/CHANGELOG.md:3428
msgid ""
"Cargo now guides you how to solve it when seeing an error message of `rust-"
"version` requirement not satisfied. [\\#10891](https://github.com/rust-lang/"
"cargo/pull/10891)"
msgstr ""

#: src/CHANGELOG.md:3431
msgid ""
"Cargo now tells you more about possible causes and how to fix it when a "
"subcommand cannot be found. [\\#10924](https://github.com/rust-lang/cargo/"
"pull/10924)"
msgstr ""

#: src/CHANGELOG.md:3434
msgid ""
"Cargo now lists available target names when a given Cargo target cannot be "
"found. [\\#10999](https://github.com/rust-lang/cargo/pull/10999)"
msgstr ""

#: src/CHANGELOG.md:3436
msgid ""
"`cargo update` now warns if `--precise` is given without `--package` flag. "
"This will become a hard error after a transition period. [\\#10988](https://"
"github.com/rust-lang/cargo/pull/10988) [\\#11011](https://github.com/rust-"
"lang/cargo/pull/11011)"
msgstr ""

#: src/CHANGELOG.md:3440
msgid ""
"`cargo bench` and `cargo test` now report a more precise test execution "
"error right after a test fails. [\\#11028](https://github.com/rust-lang/"
"cargo/pull/11028)"
msgstr ""

#: src/CHANGELOG.md:3443
msgid ""
"`cargo add` now tells you for which version the features are added. "
"[\\#11075](https://github.com/rust-lang/cargo/pull/11075)"
msgstr ""

#: src/CHANGELOG.md:3445
msgid ""
"Call out that non-ASCII crate names are not supported by Rust anymore. "
"[\\#11017](https://github.com/rust-lang/cargo/pull/11017)"
msgstr ""

#: src/CHANGELOG.md:3447
msgid ""
"Enhanced the error message when in the manifest a field is expected to be an "
"array but a string is used. [\\#10944](https://github.com/rust-lang/cargo/"
"pull/10944)"
msgstr ""

#: src/CHANGELOG.md:3453
msgid ""
"Removed the restriction on file locking supports on platforms other than "
"Linux. [\\#10975](https://github.com/rust-lang/cargo/pull/10975)"
msgstr ""

#: src/CHANGELOG.md:3455
msgid ""
"Fixed incorrect OS detection by bumping os_info to 3.5.0. [\\#10943](https://"
"github.com/rust-lang/cargo/pull/10943)"
msgstr ""

#: src/CHANGELOG.md:3457
msgid ""
"Scanning the package directory now ignores errors from broken but excluded "
"symlink files. [\\#11008](https://github.com/rust-lang/cargo/pull/11008)"
msgstr ""

#: src/CHANGELOG.md:3460
msgid ""
"Fixed deadlock when build scripts are waiting for input on stdin. [\\#11257]"
"(https://github.com/rust-lang/cargo/pull/11257)"
msgstr ""

#: src/CHANGELOG.md:3463
msgid "Nightly"
msgstr ""

#: src/CHANGELOG.md:3465
msgid ""
"Progress indicator for sparse registries becomes more straightforward. "
"[\\#11068](https://github.com/rust-lang/cargo/pull/11068)"
msgstr ""

#: src/CHANGELOG.md:3468
msgid "Cargo 1.64 (2022-09-22)"
msgstr ""

#: src/CHANGELOG.md:3469
msgid ""
"[a5e08c47...rust-1.64.0](https://github.com/rust-lang/cargo/compare/"
"a5e08c47...rust-1.64.0)"
msgstr ""

#: src/CHANGELOG.md:3473
msgid ""
"🎉 Packages can now inherit settings from the workspace so that the settings "
"can be centralized in one place. See [`workspace.package`](https://doc.rust-"
"lang.org/nightly/cargo/reference/workspaces.html#the-package-table) and "
"[`workspace.dependencies`](https://doc.rust-lang.org/nightly/cargo/reference/"
"workspaces.html#the-dependencies-table) for more details on how to define "
"these common settings. [\\#10859](https://github.com/rust-lang/cargo/pull/"
"10859)"
msgstr ""

#: src/CHANGELOG.md:3480
msgid ""
"Added the [`--crate-type`](https://doc.rust-lang.org/nightly/cargo/commands/"
"cargo-rustc.html#option-cargo-rustc---crate-type) flag to `cargo rustc` to "
"override the crate type. [\\#10838](https://github.com/rust-lang/cargo/pull/"
"10838)"
msgstr ""

#: src/CHANGELOG.md:3484
msgid ""
"Cargo commands can now accept multiple `--target` flags to build for "
"multiple targets at once, and the [`build.target`](https://doc.rust-lang.org/"
"nightly/cargo/reference/config.html#buildtarget) config option may now take "
"an array of multiple targets. [\\#10766](https://github.com/rust-lang/cargo/"
"pull/10766)"
msgstr ""

#: src/CHANGELOG.md:3489
msgid ""
"The `--jobs` argument can now take a negative number to count backwards from "
"the max CPUs. [\\#10844](https://github.com/rust-lang/cargo/pull/10844)"
msgstr ""

#: src/CHANGELOG.md:3494
msgid ""
"Bash completion of `cargo install --path` now supports path completion. "
"[\\#10798](https://github.com/rust-lang/cargo/pull/10798)"
msgstr ""

#: src/CHANGELOG.md:3496
msgid ""
"Significantly improved the performance fetching git dependencies from GitHub "
"when using a hash in the `rev` field. [\\#10079](https://github.com/rust-"
"lang/cargo/pull/10079)"
msgstr ""

#: src/CHANGELOG.md:3499
msgid ""
"Published packages will now include the resolver setting from the workspace "
"to ensure that they use the same resolver when used in isolation. [\\#10911]"
"(https://github.com/rust-lang/cargo/pull/10911) [\\#10961](https://"
"github.com/rust-lang/cargo/pull/10961) [\\#10970](https://github.com/rust-"
"lang/cargo/pull/10970)"
msgstr ""

#: src/CHANGELOG.md:3504
msgid ""
"`cargo add` will now update `Cargo.lock`. [\\#10902](https://github.com/rust-"
"lang/cargo/pull/10902)"
msgstr ""

#: src/CHANGELOG.md:3506
msgid ""
"The path in the config output of `cargo vendor` now translates backslashes "
"to forward slashes so that the settings should work across platforms. "
"[\\#10668](https://github.com/rust-lang/cargo/pull/10668)"
msgstr ""

#: src/CHANGELOG.md:3509
msgid ""
"The [`workspace.default-members`](https://doc.rust-lang.org/nightly/cargo/"
"reference/workspaces.html#package-selection) setting now allows a value of "
"`\".\"` in a non-virtual workspace to refer to the root package. [\\#10784]"
"(https://github.com/rust-lang/cargo/pull/10784)"
msgstr ""

#: src/CHANGELOG.md:3517
msgid ""
"🚨 [CVE-2022-36113](https://github.com/rust-lang/cargo/security/advisories/"
"GHSA-rfj2-q3h3-hm5j): Extracting malicious crates can corrupt arbitrary "
"files. [\\#11089](https://github.com/rust-lang/cargo/pull/11089) [\\#11088]"
"(https://github.com/rust-lang/cargo/pull/11088)"
msgstr ""

#: src/CHANGELOG.md:3521
msgid ""
"🚨 [CVE-2022-36114](https://github.com/rust-lang/cargo/security/advisories/"
"GHSA-2hvr-h6gw-qrxp): Extracting malicious crates can fill the file system. "
"[\\#11089](https://github.com/rust-lang/cargo/pull/11089) [\\#11088](https://"
"github.com/rust-lang/cargo/pull/11088)"
msgstr ""

#: src/CHANGELOG.md:3525
msgid ""
"The `os` output in `cargo --version --verbose` now supports more platforms. "
"[\\#10802](https://github.com/rust-lang/cargo/pull/10802)"
msgstr ""

#: src/CHANGELOG.md:3527
msgid ""
"Cached git checkouts will now be rebuilt if they are corrupted. This may "
"happen when using `net.git-fetch-with-cli` and interrupting the clone "
"process. [\\#10829](https://github.com/rust-lang/cargo/pull/10829)"
msgstr ""

#: src/CHANGELOG.md:3531
msgid ""
"Fixed panic in `cargo add --offline`. [\\#10817](https://github.com/rust-"
"lang/cargo/pull/10817)"
msgstr ""

#: src/CHANGELOG.md:3536
msgid ""
"Fixed deserialization of unstable `check-cfg` in `config.toml`. [\\#10799]"
"(https://github.com/rust-lang/cargo/pull/10799)"
msgstr ""

#: src/CHANGELOG.md:3540
msgid "Cargo 1.63 (2022-08-11)"
msgstr ""

#: src/CHANGELOG.md:3541
msgid ""
"[3f052d8e...rust-1.63.0](https://github.com/rust-lang/cargo/compare/"
"3f052d8e...rust-1.63.0)"
msgstr ""

#: src/CHANGELOG.md:3545
msgid ""
"🎉 Added the `--config` CLI option to pass config options directly on the "
"CLI. [\\#10755](https://github.com/rust-lang/cargo/pull/10755)"
msgstr ""

#: src/CHANGELOG.md:3547
msgid ""
"The `CARGO_PKG_RUST_VERSION` environment variable is now set when compiling "
"a crate if the manifest has the `rust-version` field set. [\\#10713](https://"
"github.com/rust-lang/cargo/pull/10713)"
msgstr ""

#: src/CHANGELOG.md:3553
msgid ""
"A warning is emitted when encountering multiple packages with the same name "
"in a git dependency. This will ignore packages with `publish=false`. "
"[\\#10701](https://github.com/rust-lang/cargo/pull/10701) [\\#10767](https://"
"github.com/rust-lang/cargo/pull/10767)"
msgstr ""

#: src/CHANGELOG.md:3557
msgid ""
"Change tracking now uses the contents of a `.json` target spec file instead "
"of its path. This should help avoid rebuilds if the path changes. [\\#10746]"
"(https://github.com/rust-lang/cargo/pull/10746)"
msgstr ""

#: src/CHANGELOG.md:3560
msgid ""
"Git dependencies with a submodule configured with the `update=none` strategy "
"in `.gitmodules` is now honored, and the submodule will not be fetched. "
"[\\#10717](https://github.com/rust-lang/cargo/pull/10717)"
msgstr ""

#: src/CHANGELOG.md:3563
msgid ""
"Crate files now use a more recent date (Jul 23, 2006 instead of Nov 29, "
"1973) for deterministic behavior. [\\#10720](https://github.com/rust-lang/"
"cargo/pull/10720)"
msgstr ""

#: src/CHANGELOG.md:3566
msgid ""
"The initial template used for `cargo new` now includes a slightly more "
"realistic test structure that has `use super::*;` in the test module. "
"[\\#10706](https://github.com/rust-lang/cargo/pull/10706)"
msgstr ""

#: src/CHANGELOG.md:3569
msgid ""
"Updated the internal HTTP library libcurl with various small fixes and "
"updates. [\\#10696](https://github.com/rust-lang/cargo/pull/10696)"
msgstr ""

#: src/CHANGELOG.md:3573
msgid ""
"Fix zsh completions for `cargo add` and `cargo locate-project` [\\#10810]"
"(https://github.com/rust-lang/cargo/pull/10810) [\\#10811](https://"
"github.com/rust-lang/cargo/pull/10811)"
msgstr ""

#: src/CHANGELOG.md:3576
msgid ""
"Fixed `-p` being ignored with `cargo publish` in the root of a virtual "
"workspace. Some additional checks were also added to generate an error if "
"multiple packages were selected (previously it would pick the first one). "
"[\\#10677](https://github.com/rust-lang/cargo/pull/10677)"
msgstr ""

#: src/CHANGELOG.md:3580
msgid ""
"The human-readable executable name is no longer displayed for `cargo test` "
"when using JSON output. [\\#10691](https://github.com/rust-lang/cargo/pull/"
"10691)"
msgstr ""

#: src/CHANGELOG.md:3586
msgid ""
"Added `-Zcheck-cfg=output` to support build-scripts declaring their "
"supported set of `cfg` values with `cargo:rustc-check-cfg`. [\\#10539]"
"(https://github.com/rust-lang/cargo/pull/10539)"
msgstr ""

#: src/CHANGELOG.md:3589
msgid ""
"`-Z sparse-registry` now uses https://index.crates.io/ when accessing crates-"
"io. [\\#10725](https://github.com/rust-lang/cargo/pull/10725)"
msgstr ""

#: src/CHANGELOG.md:3591
msgid ""
"Fixed formatting of `.workspace` key in `cargo add` for workspace "
"inheritance. [\\#10705](https://github.com/rust-lang/cargo/pull/10705)"
msgstr ""

#: src/CHANGELOG.md:3593
msgid ""
"Sparse HTTP registry URLs must now end with a `/`. [\\#10698](https://"
"github.com/rust-lang/cargo/pull/10698)"
msgstr ""

#: src/CHANGELOG.md:3595
msgid ""
"Fixed issue with `cargo add` and workspace inheritance of the `default-"
"features` key. [\\#10685](https://github.com/rust-lang/cargo/pull/10685)"
msgstr ""

#: src/CHANGELOG.md:3600
msgid "Cargo 1.62 (2022-06-30)"
msgstr ""

#: src/CHANGELOG.md:3601
msgid ""
"[1ef1e0a1...rust-1.62.0](https://github.com/rust-lang/cargo/compare/"
"1ef1e0a1...rust-1.62.0)"
msgstr ""

#: src/CHANGELOG.md:3605
msgid ""
"🎉 Added the `cargo add` command for adding dependencies to `Cargo.toml` "
"from the command-line. [docs](https://doc.rust-lang.org/nightly/cargo/"
"commands/cargo-add.html) [\\#10472](https://github.com/rust-lang/cargo/pull/"
"10472) [\\#10577](https://github.com/rust-lang/cargo/pull/10577) [\\#10578]"
"(https://github.com/rust-lang/cargo/pull/10578)"
msgstr ""

#: src/CHANGELOG.md:3611
msgid ""
"Package ID specs now support `name@version` syntax in addition to the "
"previous `name:version` to align with the behavior in `cargo add` and other "
"tools. `cargo install` and `cargo yank` also now support this syntax so the "
"version does not need to passed as a separate flag. [\\#10582](https://"
"github.com/rust-lang/cargo/pull/10582) [\\#10650](https://github.com/rust-"
"lang/cargo/pull/10650) [\\#10597](https://github.com/rust-lang/cargo/pull/"
"10597)"
msgstr ""

#: src/CHANGELOG.md:3618
msgid ""
"Added the CLI option `-F` as an alias of `--features`. [\\#10576](https://"
"github.com/rust-lang/cargo/pull/10576)"
msgstr ""

#: src/CHANGELOG.md:3620
msgid ""
"The `git` and `registry` directories in Cargo's home directory (usually "
"`~/.cargo`) are now marked as cache directories so that they are not "
"included in backups or content indexing (on Windows). [\\#10553](https://"
"github.com/rust-lang/cargo/pull/10553)"
msgstr ""

#: src/CHANGELOG.md:3624
msgid ""
"Added the `--version` flag to `cargo yank` to replace the `--vers` flag to "
"be consistent with `cargo install`. [\\#10575](https://github.com/rust-lang/"
"cargo/pull/10575)"
msgstr ""

#: src/CHANGELOG.md:3627
msgid ""
"Added automatic `@` argfile support, which will use \"response files\" if "
"the command-line to `rustc` exceeds the operating system's limit. [\\#10546]"
"(https://github.com/rust-lang/cargo/pull/10546)"
msgstr ""

#: src/CHANGELOG.md:3630
msgid ""
"`cargo clean` now has a progress bar (if it takes longer than half a "
"second). [\\#10236](https://github.com/rust-lang/cargo/pull/10236)"
msgstr ""

#: src/CHANGELOG.md:3635
msgid ""
"`cargo install` no longer generates an error if no binaries were found to "
"install (such as missing required features). [\\#10508](https://github.com/"
"rust-lang/cargo/pull/10508)"
msgstr ""

#: src/CHANGELOG.md:3638
msgid ""
"`cargo test` now passes `--target` to `rustdoc` if the specified target is "
"the same as the host target. [\\#10594](https://github.com/rust-lang/cargo/"
"pull/10594)"
msgstr ""

#: src/CHANGELOG.md:3641
msgid ""
"`cargo doc` now automatically passes `-Arustdoc::private-intra-doc-links` "
"when documenting a binary (which automatically includes `--document-private-"
"items`). The [`private-intra-doc-links`](https://doc.rust-lang.org/rustdoc/"
"lints.html#private_intra_doc_links) lint is only relevant when _not_ "
"documenting private items, which doesn't apply to binaries. [\\#10142]"
"(https://github.com/rust-lang/cargo/pull/10142)"
msgstr ""

#: src/CHANGELOG.md:3648
msgid ""
"The length of the short git hash in the `cargo --version` output is now "
"fixed to 9 characters. Previously the length was inconsistent between "
"different platforms. [\\#10579](https://github.com/rust-lang/cargo/pull/"
"10579)"
msgstr ""

#: src/CHANGELOG.md:3652
msgid ""
"Attempting to publish a package with a `Cargo.toml.orig` file will now "
"result in an error. The filename would otherwise conflict with the "
"automatically-generated file. [\\#10551](https://github.com/rust-lang/cargo/"
"pull/10551)"
msgstr ""

#: src/CHANGELOG.md:3659
msgid ""
"The `build.dep-info-basedir` configuration setting now properly supports the "
"use of `..` in the path to refer to a parent directory. [\\#10281](https://"
"github.com/rust-lang/cargo/pull/10281)"
msgstr ""

#: src/CHANGELOG.md:3662
msgid ""
"Fixed regression in automatic detection of the default number of CPUs to use "
"on systems using cgroups v1. [\\#10737](https://github.com/rust-lang/cargo/"
"pull/10737) [\\#10739](https://github.com/rust-lang/cargo/pull/10739)"
msgstr ""

#: src/CHANGELOG.md:3670
msgid ""
"`cargo fetch` now works with `-Zbuild-std` to fetch the standard library's "
"dependencies. [\\#10129](https://github.com/rust-lang/cargo/pull/10129)"
msgstr ""

#: src/CHANGELOG.md:3672
msgid ""
"Added support for workspace inheritance. [docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/unstable.html#workspace-inheritance) [\\#10584]"
"(https://github.com/rust-lang/cargo/pull/10584) [\\#10568](https://"
"github.com/rust-lang/cargo/pull/10568) [\\#10565](https://github.com/rust-"
"lang/cargo/pull/10565) [\\#10564](https://github.com/rust-lang/cargo/pull/"
"10564) [\\#10563](https://github.com/rust-lang/cargo/pull/10563) [\\#10606]"
"(https://github.com/rust-lang/cargo/pull/10606) [\\#10548](https://"
"github.com/rust-lang/cargo/pull/10548) [\\#10538](https://github.com/rust-"
"lang/cargo/pull/10538)"
msgstr ""

#: src/CHANGELOG.md:3682
msgid ""
"Added `-Zcheck-cfg` which adds various forms of validating `cfg` expressions "
"for unknown names and values. [docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#check-cfg) [\\#10486](https://github.com/rust-lang/"
"cargo/pull/10486) [\\#10566](https://github.com/rust-lang/cargo/pull/10566)"
msgstr ""

#: src/CHANGELOG.md:3687
msgid ""
"The `--config` CLI option no longer allows setting a registry token. "
"[\\#10580](https://github.com/rust-lang/cargo/pull/10580)"
msgstr ""

#: src/CHANGELOG.md:3689
msgid ""
"Fixed issues with proc-macros and `-Z rustdoc-scrape-examples`. [\\#10549]"
"(https://github.com/rust-lang/cargo/pull/10549) [\\#10533](https://"
"github.com/rust-lang/cargo/pull/10533)"
msgstr ""

#: src/CHANGELOG.md:3694
msgid "Cargo 1.61 (2022-05-19)"
msgstr ""

#: src/CHANGELOG.md:3695
msgid ""
"[ea2a21c9...rust-1.61.0](https://github.com/rust-lang/cargo/compare/"
"ea2a21c9...rust-1.61.0)"
msgstr ""

#: src/CHANGELOG.md:3701
msgid ""
"`cargo test --no-run` will now display the path to the test executables. "
"[\\#10346](https://github.com/rust-lang/cargo/pull/10346)"
msgstr ""

#: src/CHANGELOG.md:3703
msgid ""
"`cargo tree --duplicates` no longer reports dependencies that are shared "
"between the host and the target as duplicates. [\\#10466](https://github.com/"
"rust-lang/cargo/pull/10466)"
msgstr ""

#: src/CHANGELOG.md:3706
msgid ""
"Updated to the 1.4.2 release of libgit2 which brings in several fixes "
"[\\#10442](https://github.com/rust-lang/cargo/pull/10442) [\\#10479](https://"
"github.com/rust-lang/cargo/pull/10479)"
msgstr ""

#: src/CHANGELOG.md:3709
msgid ""
"`cargo vendor` no longer allows multiple values for `--sync`, you must pass "
"multiple `--sync` flags instead. [\\#10448](https://github.com/rust-lang/"
"cargo/pull/10448)"
msgstr ""

#: src/CHANGELOG.md:3712
msgid ""
"Warnings are now issued for manifest keys that have mixed both underscore "
"and dash variants (such as specifying both `proc_macro` and `proc-macro`) "
"[\\#10316](https://github.com/rust-lang/cargo/pull/10316)"
msgstr ""

#: src/CHANGELOG.md:3715
msgid ""
"Cargo now uses the standard library's `available_parallelism` instead of the "
"`num_cpus` crate for determining the default parallelism. [\\#10427](https://"
"github.com/rust-lang/cargo/pull/10427)"
msgstr ""

#: src/CHANGELOG.md:3718
msgid ""
"`cargo search` terms are now highlighted. [\\#10425](https://github.com/rust-"
"lang/cargo/pull/10425)"
msgstr ""

#: src/CHANGELOG.md:3723
msgid ""
"Paths passed to VCS tools like `hg` are now added after `--` to avoid "
"conflict with VCS flags. [\\#10483](https://github.com/rust-lang/cargo/pull/"
"10483)"
msgstr ""

#: src/CHANGELOG.md:3726
msgid ""
"Fixed the `http.timeout` configuration value to actually work. [\\#10456]"
"(https://github.com/rust-lang/cargo/pull/10456)"
msgstr ""

#: src/CHANGELOG.md:3728
msgid ""
"Fixed issues with `cargo rustc --crate-type` not working in some situations. "
"[\\#10388](https://github.com/rust-lang/cargo/pull/10388)"
msgstr ""

#: src/CHANGELOG.md:3733
msgid ""
"Added `-Z check-cfg-features` to enable compile-time checking of features "
"[\\#10408](https://github.com/rust-lang/cargo/pull/10408)"
msgstr ""

#: src/CHANGELOG.md:3735
msgid ""
"Added `-Z bindeps` to support binary artifact dependencies (RFC-3028) "
"[\\#9992](https://github.com/rust-lang/cargo/pull/9992)"
msgstr ""

#: src/CHANGELOG.md:3737
msgid ""
"`-Z multitarget` is now supported in the `build.target` config value with an "
"array. [\\#10473](https://github.com/rust-lang/cargo/pull/10473)"
msgstr ""

#: src/CHANGELOG.md:3739
msgid ""
"Added `--keep-going` flag which will continue compilation even if one crate "
"fails to compile. [\\#10383](https://github.com/rust-lang/cargo/pull/10383)"
msgstr ""

#: src/CHANGELOG.md:3742
msgid ""
"Start work on inheriting manifest values in a workspace. [\\#10497](https://"
"github.com/rust-lang/cargo/pull/10497) [\\#10517](https://github.com/rust-"
"lang/cargo/pull/10517)"
msgstr ""

#: src/CHANGELOG.md:3745
msgid ""
"Added support for sparse HTTP registries. [\\#10470](https://github.com/rust-"
"lang/cargo/pull/10470) [\\#10064](https://github.com/rust-lang/cargo/pull/"
"10064)"
msgstr ""

#: src/CHANGELOG.md:3748
msgid ""
"Fixed panic when artifact target is used for "
"`[target.'cfg(<target>)'.dependencies]` [\\#10433](https://github.com/rust-"
"lang/cargo/pull/10433)"
msgstr ""

#: src/CHANGELOG.md:3750
msgid ""
"Fixed host flags to pass to build scripts (`-Z target-applies-to-host`) "
"[\\#10395](https://github.com/rust-lang/cargo/pull/10395)"
msgstr ""

#: src/CHANGELOG.md:3752
msgid ""
"Added `-Z check-cfg-features` support for rustdoc [\\#10428](https://"
"github.com/rust-lang/cargo/pull/10428)"
msgstr ""

#: src/CHANGELOG.md:3756
msgid "Cargo 1.60 (2022-04-07)"
msgstr ""

#: src/CHANGELOG.md:3757
msgid ""
"[358e79fe...rust-1.60.0](https://github.com/rust-lang/cargo/compare/"
"358e79fe...rust-1.60.0)"
msgstr ""

#: src/CHANGELOG.md:3761
msgid ""
"🎉 Added the `dep:` prefix in the `[features]` table to refer to an optional "
"dependency. This allows creating feature names with the same name as a "
"dependency, and allows for \"hiding\" optional dependencies so that they do "
"not implicitly expose a feature name. [docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/features.html#optional-dependencies) [\\#10269]"
"(https://github.com/rust-lang/cargo/pull/10269)"
msgstr ""

#: src/CHANGELOG.md:3767
msgid ""
"🎉 Added the `dep-name?/feature-name` syntax to the `[features]` table to "
"only enable the feature `feature-name` if the optional dependency `dep-name` "
"is already enabled by some other feature. [docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/features.html#dependency-features) [\\#10269]"
"(https://github.com/rust-lang/cargo/pull/10269)"
msgstr ""

#: src/CHANGELOG.md:3772
msgid ""
"🎉 Added `--timings` option to generate an HTML report about build timing, "
"concurrency, and CPU use. [docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/timings.html) [\\#10245](https://github.com/rust-lang/cargo/pull/"
"10245)"
msgstr ""

#: src/CHANGELOG.md:3776
msgid ""
"Added the `\"v\"` and `\"features2\"` fields to the registry index. The "
"`\"v\"` field provides a method for compatibility with future changes to the "
"index. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"registries.html#index-format) [\\#10269](https://github.com/rust-lang/cargo/"
"pull/10269)"
msgstr ""

#: src/CHANGELOG.md:3780
msgid ""
"Added bash completion for `cargo clippy` [\\#10347](https://github.com/rust-"
"lang/cargo/pull/10347)"
msgstr ""

#: src/CHANGELOG.md:3782
msgid ""
"Added bash completion for `cargo report` [\\#10295](https://github.com/rust-"
"lang/cargo/pull/10295)"
msgstr ""

#: src/CHANGELOG.md:3784
msgid ""
"Added support to build scripts for `rustc-link-arg-tests`, `rustc-link-arg-"
"examples`, and `rustc-link-arg-benches`. [docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/build-scripts.html#outputs-of-the-build-script) "
"[\\#10274](https://github.com/rust-lang/cargo/pull/10274)"
msgstr ""

#: src/CHANGELOG.md:3791
msgid ""
"Cargo now uses the clap 3 library for command-line argument parsing. "
"[\\#10265](https://github.com/rust-lang/cargo/pull/10265)"
msgstr ""

#: src/CHANGELOG.md:3793
msgid ""
"The `build.pipelining` config option is now deprecated, pipelining will now "
"always be enabled. [\\#10258](https://github.com/rust-lang/cargo/pull/10258)"
msgstr ""

#: src/CHANGELOG.md:3796
msgid ""
"`cargo new` will now generate a `.gitignore` which only ignores `Cargo.lock` "
"in the root of the repo, instead of any directory. [\\#10379](https://"
"github.com/rust-lang/cargo/pull/10379)"
msgstr ""

#: src/CHANGELOG.md:3799
msgid ""
"Improved startup time of bash completion. [\\#10365](https://github.com/rust-"
"lang/cargo/pull/10365)"
msgstr ""

#: src/CHANGELOG.md:3801
msgid ""
"The `--features` flag is now honored when used with the `--all-features` "
"flag, which allows enabling features from other packages. [\\#10337](https://"
"github.com/rust-lang/cargo/pull/10337)"
msgstr ""

#: src/CHANGELOG.md:3804
msgid ""
"Cargo now uses a different TOML parser. This should not introduce any user-"
"visible changes. This paves the way to support format-preserving "
"programmatic modification of TOML files for supporting `cargo add` and other "
"future enhancements. [\\#10086](https://github.com/rust-lang/cargo/pull/"
"10086)"
msgstr ""

#: src/CHANGELOG.md:3809
msgid ""
"Setting a library to emit both a `dylib` and `cdylib` is now an error, as "
"this combination is not supported. [\\#10243](https://github.com/rust-lang/"
"cargo/pull/10243)"
msgstr ""

#: src/CHANGELOG.md:3812
msgid ""
"`cargo --list` now includes the `help` command. [\\#10300](https://"
"github.com/rust-lang/cargo/pull/10300)"
msgstr ""

#: src/CHANGELOG.md:3817
msgid ""
"Fixed running `cargo doc` on examples with dev-dependencies. [\\#10341]"
"(https://github.com/rust-lang/cargo/pull/10341)"
msgstr ""

#: src/CHANGELOG.md:3819
msgid ""
"Fixed `cargo install --path` for a path that is relative to a directory "
"outside of the workspace in the current directory. [\\#10335](https://"
"github.com/rust-lang/cargo/pull/10335)"
msgstr ""

#: src/CHANGELOG.md:3822
msgid ""
"`cargo test TEST_FILTER` should no longer build binaries that are explicitly "
"disabled with `test = false`. [\\#10305](https://github.com/rust-lang/cargo/"
"pull/10305)"
msgstr ""

#: src/CHANGELOG.md:3825
msgid ""
"Fixed regression with `term.verbose` without `term.quiet`, and vice versa. "
"[\\#10429](https://github.com/rust-lang/cargo/pull/10429) [\\#10436](https://"
"github.com/rust-lang/cargo/pull/10436)"
msgstr ""

#: src/CHANGELOG.md:3831
msgid ""
"Added `rustflags` option to a profile definition. [\\#10217](https://"
"github.com/rust-lang/cargo/pull/10217)"
msgstr ""

#: src/CHANGELOG.md:3833
msgid ""
"Changed `--config` to only support dotted keys. [\\#10176](https://"
"github.com/rust-lang/cargo/pull/10176)"
msgstr ""

#: src/CHANGELOG.md:3835
msgid ""
"Fixed profile `rustflags` not being gated in profile overrides. [\\#10411]"
"(https://github.com/rust-lang/cargo/pull/10411) [\\#10413](https://"
"github.com/rust-lang/cargo/pull/10413)"
msgstr ""

#: src/CHANGELOG.md:3839
msgid "Cargo 1.59 (2022-02-24)"
msgstr ""

#: src/CHANGELOG.md:3840
msgid ""
"[7f08ace4...rust-1.59.0](https://github.com/rust-lang/cargo/compare/"
"7f08ace4...rust-1.59.0)"
msgstr ""

#: src/CHANGELOG.md:3844
msgid ""
"🎉 The `strip` option can now be specified in a profile to specify the "
"behavior for removing symbols and debug information from binaries. [docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/profiles.html#strip) "
"[\\#10088](https://github.com/rust-lang/cargo/pull/10088) [\\#10376](https://"
"github.com/rust-lang/cargo/pull/10376)"
msgstr ""

#: src/CHANGELOG.md:3849
msgid ""
"🎉 Added future incompatible reporting. This provides reporting for when a "
"future change in `rustc` may cause a package or any of its dependencies to "
"stop building. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"future-incompat-report.html) [\\#10165](https://github.com/rust-lang/cargo/"
"pull/10165)"
msgstr ""

#: src/CHANGELOG.md:3854
msgid ""
"SSH authentication on Windows now supports ssh-agent. [docs](https://"
"doc.rust-lang.org/nightly/cargo/appendix/git-authentication.html#ssh-"
"authentication) [\\#10248](https://github.com/rust-lang/cargo/pull/10248)"
msgstr ""

#: src/CHANGELOG.md:3857
msgid ""
"Added `term.quiet` configuration option to enable the `--quiet` behavior "
"from a config file. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"config.html#termquiet) [\\#10152](https://github.com/rust-lang/cargo/pull/"
"10152)"
msgstr ""

#: src/CHANGELOG.md:3861
msgid ""
"Added `-r` CLI option as an alias for `--release`. [\\#10133](https://"
"github.com/rust-lang/cargo/pull/10133)"
msgstr ""

#: src/CHANGELOG.md:3866
msgid ""
"Scanning the package directory should now be resilient to errors, such as "
"filesystem loops or access issues. [\\#10188](https://github.com/rust-lang/"
"cargo/pull/10188) [\\#10214](https://github.com/rust-lang/cargo/pull/10214) "
"[\\#10286](https://github.com/rust-lang/cargo/pull/10286)"
msgstr ""

#: src/CHANGELOG.md:3871
msgid ""
"`cargo help <alias>` will now show the target of the alias. [\\#10193]"
"(https://github.com/rust-lang/cargo/pull/10193)"
msgstr ""

#: src/CHANGELOG.md:3873
msgid ""
"Removed the deprecated `--host` CLI option. [\\#10145](https://github.com/"
"rust-lang/cargo/pull/10145) [\\#10327](https://github.com/rust-lang/cargo/"
"pull/10327)"
msgstr ""

#: src/CHANGELOG.md:3876
msgid ""
"Cargo should now report its version to always be in sync with `rustc`. "
"[\\#10178](https://github.com/rust-lang/cargo/pull/10178)"
msgstr ""

#: src/CHANGELOG.md:3878
msgid ""
"Added EOPNOTSUPP to ignored file locking errors, which is relevant to BSD "
"operating systems. [\\#10157](https://github.com/rust-lang/cargo/pull/10157)"
msgstr ""

#: src/CHANGELOG.md:3884
msgid ""
"macOS: Fixed an issue where running an executable would sporadically be "
"killed by the kernel (likely starting in macOS 12). [\\#10196](https://"
"github.com/rust-lang/cargo/pull/10196)"
msgstr ""

#: src/CHANGELOG.md:3887
msgid ""
"Fixed so that the `doc=false` setting is honored in the `[lib]` definition "
"of a dependency. [\\#10201](https://github.com/rust-lang/cargo/pull/10201) "
"[\\#10324](https://github.com/rust-lang/cargo/pull/10324)"
msgstr ""

#: src/CHANGELOG.md:3891
msgid ""
"The `\"executable\"` field in the JSON option was incorrectly including the "
"path to `index.html` when documenting a binary. It is now null. [\\#10171]"
"(https://github.com/rust-lang/cargo/pull/10171)"
msgstr ""

#: src/CHANGELOG.md:3894
msgid ""
"Documenting a binary now waits for the package library to finish documenting "
"before starting. This fixes some race conditions if the binary has intra-doc "
"links to the library. [\\#10172](https://github.com/rust-lang/cargo/pull/"
"10172)"
msgstr ""

#: src/CHANGELOG.md:3898
msgid ""
"Fixed panic when displaying help text to a closed pipe. [\\#10164](https://"
"github.com/rust-lang/cargo/pull/10164)"
msgstr ""

#: src/CHANGELOG.md:3902
msgid ""
"Added the `--crate-type` flag to `cargo rustc`. [\\#10093](https://"
"github.com/rust-lang/cargo/pull/10093)"
msgstr ""

#: src/CHANGELOG.md:3906
msgid "Cargo 1.58 (2022-01-13)"
msgstr ""

#: src/CHANGELOG.md:3907
msgid ""
"[b2e52d7c...rust-1.58.0](https://github.com/rust-lang/cargo/compare/"
"b2e52d7c...rust-1.58.0)"
msgstr ""

#: src/CHANGELOG.md:3911
msgid ""
"Added `rust_version` field to package data in `cargo metadata`. [\\#9967]"
"(https://github.com/rust-lang/cargo/pull/9967)"
msgstr ""

#: src/CHANGELOG.md:3913
msgid ""
"Added `--message-format` option to `cargo install`. [\\#10107](https://"
"github.com/rust-lang/cargo/pull/10107)"
msgstr ""

#: src/CHANGELOG.md:3918
msgid ""
"A warning is now shown when an alias shadows an external command. [\\#10082]"
"(https://github.com/rust-lang/cargo/pull/10082)"
msgstr ""

#: src/CHANGELOG.md:3920
msgid ""
"Updated curl to 7.80.0. [\\#10040](https://github.com/rust-lang/cargo/pull/"
"10040) [\\#10106](https://github.com/rust-lang/cargo/pull/10106)"
msgstr ""

#: src/CHANGELOG.md:3926
msgid ""
"Doctests now include rustc-link-args from build scripts. [\\#9916](https://"
"github.com/rust-lang/cargo/pull/9916)"
msgstr ""

#: src/CHANGELOG.md:3928
msgid ""
"Fixed `cargo tree` entering an infinite loop with cyclical dev-dependencies. "
"Fixed an edge case where the resolver would fail to handle a cyclical dev-"
"dependency with a feature. [\\#10103](https://github.com/rust-lang/cargo/"
"pull/10103)"
msgstr ""

#: src/CHANGELOG.md:3931
msgid ""
"Fixed `cargo clean -p` when the directory path contains glob characters. "
"[\\#10072](https://github.com/rust-lang/cargo/pull/10072)"
msgstr ""

#: src/CHANGELOG.md:3933
msgid ""
"Fixed debug builds of `cargo` which could panic when downloading a crate "
"when the server has a redirect with a non-empty body. [\\#10048](https://"
"github.com/rust-lang/cargo/pull/10048)"
msgstr ""

#: src/CHANGELOG.md:3939
msgid ""
"Make future-incompat-report output more user-friendly. [\\#9953](https://"
"github.com/rust-lang/cargo/pull/9953)"
msgstr ""

#: src/CHANGELOG.md:3941
msgid ""
"Added support to scrape code examples from the `examples` directory to be "
"included in the documentation. [docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#scrape-examples) [\\#9525](https://github.com/"
"rust-lang/cargo/pull/9525) [\\#10037](https://github.com/rust-lang/cargo/"
"pull/10037) [\\#10017](https://github.com/rust-lang/cargo/pull/10017)"
msgstr ""

#: src/CHANGELOG.md:3946
msgid ""
"Fixed `cargo report future-incompatibilities` to check stdout if it supports "
"color. [\\#10024](https://github.com/rust-lang/cargo/pull/10024)"
msgstr ""

#: src/CHANGELOG.md:3949
msgid "Cargo 1.57 (2021-12-02)"
msgstr ""

#: src/CHANGELOG.md:3950
msgid ""
"[18751dd3...rust-1.57.0](https://github.com/rust-lang/cargo/compare/"
"18751dd3...rust-1.57.0)"
msgstr ""

#: src/CHANGELOG.md:3954
msgid ""
"🎉 Added custom named profiles. This also changes the `test` and `bench` "
"profiles to inherit their settings from `dev` and `release`, and Cargo will "
"now only use a single profile during a given command instead of using "
"different profiles for dependencies and cargo-targets. [docs](https://"
"doc.rust-lang.org/nightly/cargo/reference/profiles.html#custom-profiles) "
"[\\#9943](https://github.com/rust-lang/cargo/pull/9943)"
msgstr ""

#: src/CHANGELOG.md:3960
msgid ""
"The `rev` option for a git dependency now supports git references that start "
"with `refs/`. An example where this can be used is to depend on a pull "
"request from a service like GitHub before it is merged. [\\#9859](https://"
"github.com/rust-lang/cargo/pull/9859)"
msgstr ""

#: src/CHANGELOG.md:3964
msgid ""
"Added `path_in_vcs` field to the `.cargo_vcs_info.json` file. [docs](https://"
"doc.rust-lang.org/nightly/cargo/commands/cargo-"
"package.html#cargo_vcs_infojson-format) [\\#9866](https://github.com/rust-"
"lang/cargo/pull/9866)"
msgstr ""

#: src/CHANGELOG.md:3970
msgid ""
"❗ `RUSTFLAGS` is no longer set for build scripts. This change was made in "
"1.55, but the release notes did not highlight this change. Build scripts "
"should use `CARGO_ENCODED_RUSTFLAGS` instead. See the [documentation]"
"(https://doc.rust-lang.org/nightly/cargo/reference/environment-"
"variables.html#environment-variables-cargo-sets-for-build-scripts) for more "
"details."
msgstr ""

#: src/CHANGELOG.md:3975
msgid ""
"The `cargo version` command now includes some extra information. [\\#9968]"
"(https://github.com/rust-lang/cargo/pull/9968)"
msgstr ""

#: src/CHANGELOG.md:3977
msgid ""
"Updated libgit2 to 1.3 which brings in a number of fixes and changes to git "
"handling. [\\#9963](https://github.com/rust-lang/cargo/pull/9963) [\\#9988]"
"(https://github.com/rust-lang/cargo/pull/9988)"
msgstr ""

#: src/CHANGELOG.md:3981
msgid ""
"Shell completions now include shorthand b/r/c/d subcommands. [\\#9951]"
"(https://github.com/rust-lang/cargo/pull/9951)"
msgstr ""

#: src/CHANGELOG.md:3983
msgid ""
"`cargo update --precise` now allows specifying a version without semver "
"metadata (stuff after `+` in the version number). [\\#9945](https://"
"github.com/rust-lang/cargo/pull/9945)"
msgstr ""

#: src/CHANGELOG.md:3986
msgid ""
"zsh completions now complete `--example` names. [\\#9939](https://github.com/"
"rust-lang/cargo/pull/9939)"
msgstr ""

#: src/CHANGELOG.md:3988
msgid ""
"The progress bar now differentiates when building unittests. [\\#9934]"
"(https://github.com/rust-lang/cargo/pull/9934)"
msgstr ""

#: src/CHANGELOG.md:3990
msgid ""
"Some backwards-compatibility support for invalid TOML syntax has been "
"removed. [\\#9932](https://github.com/rust-lang/cargo/pull/9932)"
msgstr ""

#: src/CHANGELOG.md:3992
msgid ""
"Reverted the change from 1.55 that triggered an error for dependency "
"specifications that did not include any fields. [\\#9911](https://github.com/"
"rust-lang/cargo/pull/9911)"
msgstr ""

#: src/CHANGELOG.md:3998
msgid ""
"Removed a log message (from `CARGO_LOG`) that may leak tokens. [\\#9873]"
"(https://github.com/rust-lang/cargo/pull/9873)"
msgstr ""

#: src/CHANGELOG.md:4000
msgid ""
"`cargo fix` will now avoid writing fixes to the global registry cache. "
"[\\#9938](https://github.com/rust-lang/cargo/pull/9938)"
msgstr ""

#: src/CHANGELOG.md:4002
msgid ""
"Fixed `-Z help` CLI option when used with a shorthand alias (b/c/r/d). "
"[\\#9933](https://github.com/rust-lang/cargo/pull/9933)"
msgstr ""

#: src/CHANGELOG.md:4009
msgid "Cargo 1.56 (2021-10-21)"
msgstr ""

#: src/CHANGELOG.md:4010
msgid ""
"[cebef295...rust-1.56.0](https://github.com/rust-lang/cargo/compare/"
"cebef295...rust-1.56.0)"
msgstr ""

#: src/CHANGELOG.md:4014
msgid ""
"🎉 Cargo now supports the 2021 edition. More information may be found in the "
"[edition guide](https://doc.rust-lang.org/nightly/edition-guide/rust-2021/"
"index.html). [\\#9800](https://github.com/rust-lang/cargo/pull/9800)"
msgstr ""

#: src/CHANGELOG.md:4018
msgid ""
"🎉 Added the [`rust-version`](https://doc.rust-lang.org/nightly/cargo/"
"reference/manifest.html#the-rust-version-field) field to `Cargo.toml` to "
"specify the minimum supported Rust version, and the `--ignore-rust-version` "
"command line option to override it. [\\#9732](https://github.com/rust-lang/"
"cargo/pull/9732)"
msgstr ""

#: src/CHANGELOG.md:4023
msgid ""
"Added the `[env]` table to config files to specify environment variables to "
"set. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"config.html#env) [\\#9411](https://github.com/rust-lang/cargo/pull/9411)"
msgstr ""

#: src/CHANGELOG.md:4027
msgid ""
"`[patch]` tables may now be specified in config files. [docs](https://"
"doc.rust-lang.org/nightly/cargo/reference/config.html#patch) [\\#9839]"
"(https://github.com/rust-lang/cargo/pull/9839)"
msgstr ""

#: src/CHANGELOG.md:4030
msgid ""
"`cargo doc` now supports the `--example` and `--examples` flags. [\\#9808]"
"(https://github.com/rust-lang/cargo/pull/9808)"
msgstr ""

#: src/CHANGELOG.md:4032
msgid ""
"🎉 Build scripts can now pass additional linker arguments for binaries or "
"all linkable targets. [docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/build-scripts.html#outputs-of-the-build-script) [\\#9557](https://"
"github.com/rust-lang/cargo/pull/9557)"
msgstr ""

#: src/CHANGELOG.md:4035
msgid ""
"Added support for the `-p` flag for `cargo publish` to publish a specific "
"package in a workspace. `cargo package` also now supports `-p` and `--"
"workspace`. [\\#9559](https://github.com/rust-lang/cargo/pull/9559)"
msgstr ""

#: src/CHANGELOG.md:4039
msgid ""
"Added documentation about third-party registries. [\\#9830](https://"
"github.com/rust-lang/cargo/pull/9830)"
msgstr ""

#: src/CHANGELOG.md:4041
msgid ""
"Added the `{sha256-checksum}` placeholder for URLs in a registry "
"`config.json`. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"registries.html#index-format) [\\#9801](https://github.com/rust-lang/cargo/"
"pull/9801)"
msgstr ""

#: src/CHANGELOG.md:4044
msgid ""
"Added a warning when a dependency does not have a library. [\\#9771](https://"
"github.com/rust-lang/cargo/pull/9771)"
msgstr ""

#: src/CHANGELOG.md:4049
msgid ""
"Doc tests now support the `-q` flag to show terse test output. [\\#9730]"
"(https://github.com/rust-lang/cargo/pull/9730)"
msgstr ""

#: src/CHANGELOG.md:4051
msgid ""
"`features` used in a `[replace]` table now issues a warning, as they are "
"ignored. [\\#9681](https://github.com/rust-lang/cargo/pull/9681)"
msgstr ""

#: src/CHANGELOG.md:4053
msgid ""
"Changed so that only `wasm32-unknown-emscripten` executables are built "
"without a hash in the filename. Previously it was all `wasm32` targets. "
"Additionally, all `apple` binaries are now built with a hash in the "
"filename. This allows multiple copies to be cached at once, and matches the "
"behavior on other platforms (except `msvc`). [\\#9653](https://github.com/"
"rust-lang/cargo/pull/9653)"
msgstr ""

#: src/CHANGELOG.md:4059
msgid ""
"`cargo new` now generates an example that doesn't generate a warning with "
"clippy. [\\#9796](https://github.com/rust-lang/cargo/pull/9796)"
msgstr ""

#: src/CHANGELOG.md:4062
msgid ""
"`cargo fix --edition` now only applies edition-specific lints. [\\#9846]"
"(https://github.com/rust-lang/cargo/pull/9846)"
msgstr ""

#: src/CHANGELOG.md:4064
msgid ""
"Improve resolver message to include dependency requirements. [\\#9827]"
"(https://github.com/rust-lang/cargo/pull/9827)"
msgstr ""

#: src/CHANGELOG.md:4066
msgid ""
"`cargo fix` now has more debug logging available with the `CARGO_LOG` "
"environment variable. [\\#9831](https://github.com/rust-lang/cargo/pull/9831)"
msgstr ""

#: src/CHANGELOG.md:4069
msgid ""
"Changed `cargo fix --edition` to emit a warning when on the latest stable "
"edition when running on stable instead of generating an error. [\\#9792]"
"(https://github.com/rust-lang/cargo/pull/9792)"
msgstr ""

#: src/CHANGELOG.md:4072
msgid ""
"`cargo install` will now determine all of the packages to install before "
"starting the installation, which should help with reporting errors without "
"partially installing. [\\#9793](https://github.com/rust-lang/cargo/pull/9793)"
msgstr ""

#: src/CHANGELOG.md:4076
msgid ""
"The resolver report for `cargo fix --edition` now includes differences for "
"dev-dependencies. [\\#9803](https://github.com/rust-lang/cargo/pull/9803)"
msgstr ""

#: src/CHANGELOG.md:4079
msgid ""
"`cargo fix` will now show better diagnostics for abnormal errors from "
"`rustc`. [\\#9799](https://github.com/rust-lang/cargo/pull/9799)"
msgstr ""

#: src/CHANGELOG.md:4081
msgid ""
"Entries in `cargo --list` are now deduplicated. [\\#9773](https://github.com/"
"rust-lang/cargo/pull/9773)"
msgstr ""

#: src/CHANGELOG.md:4083
msgid ""
"Aliases are now included in `cargo --list`. [\\#9764](https://github.com/"
"rust-lang/cargo/pull/9764)"
msgstr ""

#: src/CHANGELOG.md:4088
msgid ""
"Fixed panic with build-std of a proc-macro. [\\#9834](https://github.com/"
"rust-lang/cargo/pull/9834)"
msgstr ""

#: src/CHANGELOG.md:4090
msgid ""
"Fixed running `cargo` recursively from proc-macros while running `cargo "
"fix`. [\\#9818](https://github.com/rust-lang/cargo/pull/9818)"
msgstr ""

#: src/CHANGELOG.md:4092
msgid ""
"Return an error instead of a stack overflow for command alias loops. "
"[\\#9791](https://github.com/rust-lang/cargo/pull/9791)"
msgstr ""

#: src/CHANGELOG.md:4094
msgid ""
"Updated to curl 7.79.1, which will hopefully fix intermittent http2 errors. "
"[\\#9937](https://github.com/rust-lang/cargo/pull/9937)"
msgstr ""

#: src/CHANGELOG.md:4099
msgid ""
"Added `[future-incompat-report]` config section. [\\#9774](https://"
"github.com/rust-lang/cargo/pull/9774)"
msgstr ""

#: src/CHANGELOG.md:4101
msgid ""
"Fixed value-after-table error with custom named profiles. [\\#9789](https://"
"github.com/rust-lang/cargo/pull/9789)"
msgstr ""

#: src/CHANGELOG.md:4103
msgid ""
"Added the `different-binary-name` feature to support specifying a non-rust-"
"identifier for a binary name. [docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#different-binary-name) [\\#9627](https://github.com/"
"rust-lang/cargo/pull/9627)"
msgstr ""

#: src/CHANGELOG.md:4107
msgid ""
"Added a profile option to select the codegen backend. [docs](https://"
"doc.rust-lang.org/nightly/cargo/reference/unstable.html#codegen-backend) "
"[\\#9118](https://github.com/rust-lang/cargo/pull/9118)"
msgstr ""

#: src/CHANGELOG.md:4112
msgid "Cargo 1.55 (2021-09-09)"
msgstr ""

#: src/CHANGELOG.md:4113
msgid ""
"[aa8b0929...rust-1.55.0](https://github.com/rust-lang/cargo/compare/"
"aa8b0929...rust-1.55.0)"
msgstr ""

#: src/CHANGELOG.md:4117
msgid ""
"The package definition in `cargo metadata` now includes the "
"`\"default_run\"` field from the manifest. [\\#9550](https://github.com/rust-"
"lang/cargo/pull/9550)"
msgstr ""

#: src/CHANGELOG.md:4120
msgid ""
"❗ Build scripts now have access to the following environment variables: "
"`RUSTC_WRAPPER`, `RUSTC_WORKSPACE_WRAPPER`, `CARGO_ENCODED_RUSTFLAGS`. "
"`RUSTFLAGS` is no longer set for build scripts; they should use "
"`CARGO_ENCODED_RUSTFLAGS` instead. [docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/environment-variables.html#environment-variables-cargo-sets-"
"for-build-scripts) [\\#9601](https://github.com/rust-lang/cargo/pull/9601)"
msgstr ""

#: src/CHANGELOG.md:4126
msgid ""
"Added `cargo d` as an alias for `cargo doc`. [\\#9680](https://github.com/"
"rust-lang/cargo/pull/9680)"
msgstr ""

#: src/CHANGELOG.md:4128
msgid ""
"Added `{lib}` to the `cargo tree --format` option to display the library "
"name of a package. [\\#9663](https://github.com/rust-lang/cargo/pull/9663)"
msgstr ""

#: src/CHANGELOG.md:4131
msgid ""
"Added `members_mut` method to the `Workspace` API. [\\#9547](https://"
"github.com/rust-lang/cargo/pull/9547)"
msgstr ""

#: src/CHANGELOG.md:4136
msgid ""
"If a build command does not match any targets when using the `--all-"
"targets`, `--bins`, `--tests`, `--examples`, or `--benches` flags, a warning "
"is now displayed to inform you that there were no matching targets. [\\#9549]"
"(https://github.com/rust-lang/cargo/pull/9549)"
msgstr ""

#: src/CHANGELOG.md:4140
msgid ""
"The way `cargo init` detects whether or not existing source files represent "
"a binary or library has been changed to respect the command-line flags "
"instead of trying to guess which type it is. [\\#9522](https://github.com/"
"rust-lang/cargo/pull/9522)"
msgstr ""

#: src/CHANGELOG.md:4144
msgid ""
"Registry names are now displayed instead of registry URLs when possible. "
"[\\#9632](https://github.com/rust-lang/cargo/pull/9632)"
msgstr ""

#: src/CHANGELOG.md:4146
msgid ""
"Duplicate compiler diagnostics are no longer shown. This can often happen "
"with `cargo test` which builds multiple copies of the same code in parallel. "
"This also updates the warning summary to provide more context. [\\#9675]"
"(https://github.com/rust-lang/cargo/pull/9675)"
msgstr ""

#: src/CHANGELOG.md:4150
msgid ""
"The output for warnings or errors is now improved to be leaner, cleaner, and "
"show more context. [\\#9655](https://github.com/rust-lang/cargo/pull/9655)"
msgstr ""

#: src/CHANGELOG.md:4153
msgid ""
"Network send errors are now treated as \"spurious\" which means they will be "
"retried. [\\#9695](https://github.com/rust-lang/cargo/pull/9695)"
msgstr ""

#: src/CHANGELOG.md:4155
msgid ""
"Git keys (`branch`, `tag`, `rev`) on a non-git dependency are now an error. "
"Additionally, specifying both `git` and `path` is now an error. [\\#9689]"
"(https://github.com/rust-lang/cargo/pull/9689)"
msgstr ""

#: src/CHANGELOG.md:4158
msgid ""
"Specifying a dependency without any keys is now an error. [\\#9686](https://"
"github.com/rust-lang/cargo/pull/9686)"
msgstr ""

#: src/CHANGELOG.md:4160
msgid ""
"The resolver now prefers to use `[patch]` table entries of dependencies when "
"possible. [\\#9639](https://github.com/rust-lang/cargo/pull/9639)"
msgstr ""

#: src/CHANGELOG.md:4163
msgid ""
"Package name typo errors in dependencies are now displayed aligned with the "
"original to help make it easier to see the difference. [\\#9665](https://"
"github.com/rust-lang/cargo/pull/9665)"
msgstr ""

#: src/CHANGELOG.md:4166
msgid ""
"Windows platforms may now warn on environment variables that have the wrong "
"case. [\\#9654](https://github.com/rust-lang/cargo/pull/9654)"
msgstr ""

#: src/CHANGELOG.md:4168
msgid ""
"`features` used in a `[patch]` table now issues a warning, as they are "
"ignored. [\\#9666](https://github.com/rust-lang/cargo/pull/9666)"
msgstr ""

#: src/CHANGELOG.md:4170
msgid ""
"The `target` directory is now excluded from content indexing on Windows. "
"[\\#9635](https://github.com/rust-lang/cargo/pull/9635)"
msgstr ""

#: src/CHANGELOG.md:4172
msgid ""
"When `Cargo.toml` is not found, the error message now detects if it was "
"misnamed with a lowercase `c` to suggest the correct form. [\\#9607](https://"
"github.com/rust-lang/cargo/pull/9607)"
msgstr ""

#: src/CHANGELOG.md:4175
msgid ""
"Building `diesel` with the new resolver displays a compatibility notice. "
"[\\#9602](https://github.com/rust-lang/cargo/pull/9602)"
msgstr ""

#: src/CHANGELOG.md:4177
msgid ""
"Updated the `opener` dependency, which handles opening a web browser, which "
"includes several changes, such as new behavior when run on WSL, and using "
"the system `xdg-open` on Linux. [\\#9583](https://github.com/rust-lang/cargo/"
"pull/9583)"
msgstr ""

#: src/CHANGELOG.md:4181
msgid ""
"Updated to libcurl 7.78. [\\#9809](https://github.com/rust-lang/cargo/pull/"
"9809) [\\#9810](https://github.com/rust-lang/cargo/pull/9810)"
msgstr ""

#: src/CHANGELOG.md:4187
msgid ""
"Fixed dep-info files including non-local build script paths. [\\#9596]"
"(https://github.com/rust-lang/cargo/pull/9596)"
msgstr ""

#: src/CHANGELOG.md:4189
msgid ""
"Handle \"jobs = 0\" case in cargo config files [\\#9584](https://github.com/"
"rust-lang/cargo/pull/9584)"
msgstr ""

#: src/CHANGELOG.md:4191
msgid ""
"Implement warning for ignored trailing arguments after `--` [\\#9561]"
"(https://github.com/rust-lang/cargo/pull/9561)"
msgstr ""

#: src/CHANGELOG.md:4193
msgid ""
"Fixed rustc/rustdoc config values to be config-relative. [\\#9566](https://"
"github.com/rust-lang/cargo/pull/9566)"
msgstr ""

#: src/CHANGELOG.md:4195
msgid ""
"`cargo fix` now supports rustc's suggestions with multiple spans. [\\#9567]"
"(https://github.com/rust-lang/cargo/pull/9567)"
msgstr ""

#: src/CHANGELOG.md:4197
msgid ""
"`cargo fix` now fixes each target serially instead of in parallel to avoid "
"problems with fixing the same file concurrently. [\\#9677](https://"
"github.com/rust-lang/cargo/pull/9677)"
msgstr ""

#: src/CHANGELOG.md:4200
msgid ""
"Changes to the target `linker` config value now trigger a rebuild. [\\#9647]"
"(https://github.com/rust-lang/cargo/pull/9647)"
msgstr ""

#: src/CHANGELOG.md:4202
msgid ""
"Git unstaged deleted files are now ignored when using the `--allow-dirty` "
"flag with `cargo publish` or `cargo package`. [\\#9645](https://github.com/"
"rust-lang/cargo/pull/9645)"
msgstr ""

#: src/CHANGELOG.md:4208
msgid ""
"Enabled support for `cargo fix --edition` for 2021. [\\#9588](https://"
"github.com/rust-lang/cargo/pull/9588)"
msgstr ""

#: src/CHANGELOG.md:4210
msgid ""
"Several changes to named profiles. [\\#9685](https://github.com/rust-lang/"
"cargo/pull/9685)"
msgstr ""

#: src/CHANGELOG.md:4212
msgid ""
"Extended instructions on what to do when running `cargo fix --edition` on "
"the 2021 edition. [\\#9694](https://github.com/rust-lang/cargo/pull/9694)"
msgstr ""

#: src/CHANGELOG.md:4215
msgid ""
"Multiple updates to error messages using nightly features to help better "
"explain the situation. [\\#9657](https://github.com/rust-lang/cargo/pull/"
"9657)"
msgstr ""

#: src/CHANGELOG.md:4218
msgid ""
"Adjusted the edition 2021 resolver diff report. [\\#9649](https://github.com/"
"rust-lang/cargo/pull/9649)"
msgstr ""

#: src/CHANGELOG.md:4220
msgid ""
"Fixed error using `cargo doc --open` with `doc.extern-map`. [\\#9531]"
"(https://github.com/rust-lang/cargo/pull/9531)"
msgstr ""

#: src/CHANGELOG.md:4222
msgid ""
"Unified weak and namespaced features. [\\#9574](https://github.com/rust-lang/"
"cargo/pull/9574)"
msgstr ""

#: src/CHANGELOG.md:4224
msgid ""
"Various updates to future-incompatible reporting. [\\#9606](https://"
"github.com/rust-lang/cargo/pull/9606)"
msgstr ""

#: src/CHANGELOG.md:4226
msgid ""
"`[env]` environment variables are not allowed to set vars set by Cargo. "
"[\\#9579](https://github.com/rust-lang/cargo/pull/9579)"
msgstr ""

#: src/CHANGELOG.md:4229
msgid "Cargo 1.54 (2021-07-29)"
msgstr ""

#: src/CHANGELOG.md:4230
msgid ""
"[4369396c...rust-1.54.0](https://github.com/rust-lang/cargo/compare/"
"4369396c...rust-1.54.0)"
msgstr ""

#: src/CHANGELOG.md:4234
msgid ""
"Fetching from a git repository (such as the crates.io index) now displays "
"the network transfer rate. [\\#9395](https://github.com/rust-lang/cargo/pull/"
"9395)"
msgstr ""

#: src/CHANGELOG.md:4237
msgid ""
"Added `--prune` option for `cargo tree` to limit what is displayed. [\\#9520]"
"(https://github.com/rust-lang/cargo/pull/9520)"
msgstr ""

#: src/CHANGELOG.md:4239
msgid ""
"Added `--depth` option for `cargo tree` to limit what is displayed. [\\#9499]"
"(https://github.com/rust-lang/cargo/pull/9499)"
msgstr ""

#: src/CHANGELOG.md:4241
msgid ""
"Added `cargo tree -e no-proc-macro` to hide procedural macro dependencies. "
"[\\#9488](https://github.com/rust-lang/cargo/pull/9488)"
msgstr ""

#: src/CHANGELOG.md:4243
msgid ""
"Added `doc.browser` config option to set which browser to open with `cargo "
"doc --open`. [\\#9473](https://github.com/rust-lang/cargo/pull/9473)"
msgstr ""

#: src/CHANGELOG.md:4245
msgid ""
"Added `CARGO_TARGET_TMPDIR` environment variable set for integration tests & "
"benches. This provides a temporary or \"scratch\" directory in the `target` "
"directory for tests and benches to use. [\\#9375](https://github.com/rust-"
"lang/cargo/pull/9375)"
msgstr ""

#: src/CHANGELOG.md:4252
msgid ""
"`--features` CLI flags now provide typo suggestions with the new feature "
"resolver. [\\#9420](https://github.com/rust-lang/cargo/pull/9420)"
msgstr ""

#: src/CHANGELOG.md:4254
msgid ""
"Cargo now uses a new parser for SemVer versions. This should behave mostly "
"the same as before with some minor exceptions where invalid syntax for "
"version requirements is now rejected. [\\#9508](https://github.com/rust-lang/"
"cargo/pull/9508)"
msgstr ""

#: src/CHANGELOG.md:4258
msgid ""
"Mtime handling of `.crate` published packages has changed slightly to avoid "
"mtime values of 0. This was causing problems with lldb which refused to read "
"those files. [\\#9517](https://github.com/rust-lang/cargo/pull/9517)"
msgstr ""

#: src/CHANGELOG.md:4262
msgid ""
"Improved performance of git status check in `cargo package`. [\\#9478]"
"(https://github.com/rust-lang/cargo/pull/9478)"
msgstr ""

#: src/CHANGELOG.md:4264
msgid ""
"`cargo new` with fossil now places the ignore settings in the new repository "
"instead of using `fossil settings` to set them globally. This also includes "
"several other cleanups to make it more consistent with other VCS "
"configurations. [\\#9469](https://github.com/rust-lang/cargo/pull/9469)"
msgstr ""

#: src/CHANGELOG.md:4269
msgid ""
"`rustc-cdylib-link-arg` applying transitively displays a warning that this "
"was not intended, and may be an error in the future. [\\#9563](https://"
"github.com/rust-lang/cargo/pull/9563)"
msgstr ""

#: src/CHANGELOG.md:4275
msgid ""
"Fixed `package.exclude` in `Cargo.toml` using inverted exclusions (`!"
"somefile`) when not in a git repository or when vendoring a dependency. "
"[\\#9186](https://github.com/rust-lang/cargo/pull/9186)"
msgstr ""

#: src/CHANGELOG.md:4278
msgid ""
"Dep-info files now adjust build script `rerun-if-changed` paths to be "
"absolute paths. [\\#9421](https://github.com/rust-lang/cargo/pull/9421)"
msgstr ""

#: src/CHANGELOG.md:4281
msgid ""
"Fixed a bug when with resolver = \"1\" non-virtual package was allowing "
"unknown features. [\\#9437](https://github.com/rust-lang/cargo/pull/9437)"
msgstr ""

#: src/CHANGELOG.md:4284
msgid ""
"Fixed an issue with the index cache mishandling versions that only differed "
"in build metadata (such as `110.0.0` and `110.0.0+1.1.0f`). [\\#9476]"
"(https://github.com/rust-lang/cargo/pull/9476)"
msgstr ""

#: src/CHANGELOG.md:4287
msgid ""
"Fixed `cargo install` with a semver metadata version. [\\#9467](https://"
"github.com/rust-lang/cargo/pull/9467)"
msgstr ""

#: src/CHANGELOG.md:4292
msgid ""
"Added `report` subcommand, and changed `cargo describe-future-"
"incompatibilitie` to `cargo report future-incompatibilities`. [\\#9438]"
"(https://github.com/rust-lang/cargo/pull/9438)"
msgstr ""

#: src/CHANGELOG.md:4296
msgid ""
"Added a `[host]` table to the config files to be able to set build flags for "
"host target. Also added `target-applies-to-host` to control how the "
"`[target]` tables behave. [\\#9322](https://github.com/rust-lang/cargo/pull/"
"9322)"
msgstr ""

#: src/CHANGELOG.md:4300
msgid ""
"Added some validation to build script `rustc-link-arg-*` instructions to "
"return an error if the target doesn't exist. [\\#9523](https://github.com/"
"rust-lang/cargo/pull/9523)"
msgstr ""

#: src/CHANGELOG.md:4303
msgid ""
"Added `cargo:rustc-link-arg-bin` instruction for build scripts. [\\#9486]"
"(https://github.com/rust-lang/cargo/pull/9486)"
msgstr ""

#: src/CHANGELOG.md:4307
msgid "Cargo 1.53 (2021-06-17)"
msgstr ""

#: src/CHANGELOG.md:4308
msgid ""
"[90691f2b...rust-1.53.0](https://github.com/rust-lang/cargo/compare/"
"90691f2b...rust-1.53.0)"
msgstr ""

#: src/CHANGELOG.md:4313
msgid ""
"🔥 Cargo now supports git repositories where the default `HEAD` branch is "
"not \"master\". This also includes a switch to the version 3 `Cargo.lock` "
"format which can handle default branches correctly. [\\#9133](https://"
"github.com/rust-lang/cargo/pull/9133) [\\#9397](https://github.com/rust-lang/"
"cargo/pull/9397) [\\#9384](https://github.com/rust-lang/cargo/pull/9384) "
"[\\#9392](https://github.com/rust-lang/cargo/pull/9392)"
msgstr ""

#: src/CHANGELOG.md:4320
msgid ""
"🔥 macOS targets now default to `unpacked` split-debuginfo. [\\#9298]"
"(https://github.com/rust-lang/cargo/pull/9298)"
msgstr ""

#: src/CHANGELOG.md:4322
msgid ""
"❗ The `authors` field is no longer included in `Cargo.toml` for new "
"projects. [\\#9282](https://github.com/rust-lang/cargo/pull/9282)"
msgstr ""

#: src/CHANGELOG.md:4325
msgid ""
"`cargo update` may now work with the `--offline` flag. [\\#9279](https://"
"github.com/rust-lang/cargo/pull/9279)"
msgstr ""

#: src/CHANGELOG.md:4327
msgid ""
"`cargo doc` will now erase the `doc` directory when switching between "
"different toolchain versions. There are shared, unversioned files (such as "
"the search index) that can become broken when using different versions. "
"[\\#8640](https://github.com/rust-lang/cargo/pull/8640) [\\#9404](https://"
"github.com/rust-lang/cargo/pull/9404)"
msgstr ""

#: src/CHANGELOG.md:4332
msgid ""
"Improved error messages when path dependency/workspace member is missing. "
"[\\#9368](https://github.com/rust-lang/cargo/pull/9368)"
msgstr ""

#: src/CHANGELOG.md:4336
msgid ""
"Fixed `cargo doc` detecting if the documentation needs to be rebuilt when "
"changing some settings such as features. [\\#9419](https://github.com/rust-"
"lang/cargo/pull/9419)"
msgstr ""

#: src/CHANGELOG.md:4339
msgid ""
"`cargo doc` now deletes the output directory for the package before running "
"rustdoc to clear out any stale files. [\\#9419](https://github.com/rust-lang/"
"cargo/pull/9419)"
msgstr ""

#: src/CHANGELOG.md:4342
msgid ""
"Fixed the `-C metadata` value to always include all information for all "
"builds. Previously, in some situations, the hash only included the package "
"name and version. This fixes some issues, such as incremental builds with "
"split-debuginfo on macOS corrupting the incremental cache in some cases. "
"[\\#9418](https://github.com/rust-lang/cargo/pull/9418)"
msgstr ""

#: src/CHANGELOG.md:4347
msgid ""
"Fixed man pages not working on Windows if `man` is in `PATH`. [\\#9378]"
"(https://github.com/rust-lang/cargo/pull/9378)"
msgstr ""

#: src/CHANGELOG.md:4349
msgid ""
"The `rustc` cache is now aware of `RUSTC_WRAPPER` and "
"`RUSTC_WORKSPACE_WRAPPER`. [\\#9348](https://github.com/rust-lang/cargo/pull/"
"9348)"
msgstr ""

#: src/CHANGELOG.md:4351
msgid ""
"Track the `CARGO` environment variable in the rebuild fingerprint if the "
"code uses `env!(\"CARGO\")`. [\\#9363](https://github.com/rust-lang/cargo/"
"pull/9363)"
msgstr ""

#: src/CHANGELOG.md:4356
msgid ""
"Fixed config includes not working. [\\#9299](https://github.com/rust-lang/"
"cargo/pull/9299)"
msgstr ""

#: src/CHANGELOG.md:4358
msgid ""
"Emit note when `--future-incompat-report` had nothing to report. [\\#9263]"
"(https://github.com/rust-lang/cargo/pull/9263)"
msgstr ""

#: src/CHANGELOG.md:4360
msgid ""
"Error messages for nightly features flags (like `-Z` and `cargo-features`) "
"now provides more information. [\\#9290](https://github.com/rust-lang/cargo/"
"pull/9290)"
msgstr ""

#: src/CHANGELOG.md:4363
msgid ""
"Added the ability to set the target for an individual package in "
"`Cargo.toml`. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#per-package-target) [\\#9030](https://github.com/rust-lang/"
"cargo/pull/9030)"
msgstr ""

#: src/CHANGELOG.md:4366
msgid ""
"Fixed build-std updating the index on every build. [\\#9393](https://"
"github.com/rust-lang/cargo/pull/9393)"
msgstr ""

#: src/CHANGELOG.md:4368
msgid ""
"`-Z help` now displays all the `-Z` options. [\\#9369](https://github.com/"
"rust-lang/cargo/pull/9369)"
msgstr ""

#: src/CHANGELOG.md:4370
msgid ""
"Added `-Zallow-features` to specify which nightly features are allowed to be "
"used. [\\#9283](https://github.com/rust-lang/cargo/pull/9283)"
msgstr ""

#: src/CHANGELOG.md:4372
msgid ""
"Added `cargo config` subcommand. [\\#9302](https://github.com/rust-lang/"
"cargo/pull/9302)"
msgstr ""

#: src/CHANGELOG.md:4375
msgid "Cargo 1.52 (2021-05-06)"
msgstr ""

#: src/CHANGELOG.md:4376
msgid ""
"[34170fcd...rust-1.52.0](https://github.com/rust-lang/cargo/compare/"
"34170fcd...rust-1.52.0)"
msgstr ""

#: src/CHANGELOG.md:4379
msgid ""
"Added the `\"manifest_path\"` field to JSON messages for a package. [\\#9022]"
"(https://github.com/rust-lang/cargo/pull/9022) [\\#9247](https://github.com/"
"rust-lang/cargo/pull/9247)"
msgstr ""

#: src/CHANGELOG.md:4384
msgid ""
"Build scripts are now forbidden from setting `RUSTC_BOOTSTRAP` on stable. "
"[\\#9181](https://github.com/rust-lang/cargo/pull/9181) [\\#9385](https://"
"github.com/rust-lang/cargo/pull/9385)"
msgstr ""

#: src/CHANGELOG.md:4387
msgid ""
"crates.io now supports SPDX 3.11 licenses. [\\#9209](https://github.com/rust-"
"lang/cargo/pull/9209)"
msgstr ""

#: src/CHANGELOG.md:4389
msgid ""
"An error is now reported if `CARGO_TARGET_DIR` is an empty string. [\\#8939]"
"(https://github.com/rust-lang/cargo/pull/8939)"
msgstr ""

#: src/CHANGELOG.md:4391
msgid ""
"Doc tests now pass the `--message-format` flag into the test so that the "
"\"short\" format can now be used for doc tests. [\\#9128](https://github.com/"
"rust-lang/cargo/pull/9128)"
msgstr ""

#: src/CHANGELOG.md:4394
msgid ""
"`cargo test` now prints a clearer indicator of which target is currently "
"running. [\\#9195](https://github.com/rust-lang/cargo/pull/9195)"
msgstr ""

#: src/CHANGELOG.md:4396
msgid ""
"The `CARGO_TARGET_<TRIPLE>` environment variable will now issue a warning if "
"it is using lowercase letters. [\\#9169](https://github.com/rust-lang/cargo/"
"pull/9169)"
msgstr ""

#: src/CHANGELOG.md:4401
msgid ""
"Fixed publication of packages with metadata and resolver fields in "
"`Cargo.toml`. [\\#9300](https://github.com/rust-lang/cargo/pull/9300) "
"[\\#9304](https://github.com/rust-lang/cargo/pull/9304)"
msgstr ""

#: src/CHANGELOG.md:4404
msgid ""
"Fixed logic for determining prefer-dynamic for a dylib which differed in a "
"workspace vs a single package. [\\#9252](https://github.com/rust-lang/cargo/"
"pull/9252)"
msgstr ""

#: src/CHANGELOG.md:4407
msgid ""
"Fixed an issue where exclusive target-specific dependencies that overlapped "
"across dependency kinds (like regular and build-dependencies) would "
"incorrectly include the dependencies in both. [\\#9255](https://github.com/"
"rust-lang/cargo/pull/9255)"
msgstr ""

#: src/CHANGELOG.md:4411
msgid ""
"Fixed panic with certain styles of Package IDs when passed to the `-p` flag. "
"[\\#9188](https://github.com/rust-lang/cargo/pull/9188)"
msgstr ""

#: src/CHANGELOG.md:4413
msgid ""
"When running cargo with output not going to a TTY, and with the progress bar "
"and color force-enabled, the output will now correctly clear the progress "
"line. [\\#9231](https://github.com/rust-lang/cargo/pull/9231)"
msgstr ""

#: src/CHANGELOG.md:4417
msgid ""
"Error instead of panic when JSON may contain non-utf8 paths. [\\#9226]"
"(https://github.com/rust-lang/cargo/pull/9226)"
msgstr ""

#: src/CHANGELOG.md:4419
msgid ""
"Fixed a hang that can happen on broken stderr. [\\#9201](https://github.com/"
"rust-lang/cargo/pull/9201)"
msgstr ""

#: src/CHANGELOG.md:4421
msgid ""
"Fixed thin-local LTO not being disabled correctly when `lto=off` is set. "
"[\\#9182](https://github.com/rust-lang/cargo/pull/9182)"
msgstr ""

#: src/CHANGELOG.md:4425
msgid ""
"The `strip` profile option now supports `true` and `false` values. [\\#9153]"
"(https://github.com/rust-lang/cargo/pull/9153)"
msgstr ""

#: src/CHANGELOG.md:4427
msgid ""
"`cargo fix --edition` now displays a report when switching to 2021 if the "
"new resolver changes features. [\\#9268](https://github.com/rust-lang/cargo/"
"pull/9268)"
msgstr ""

#: src/CHANGELOG.md:4430
msgid ""
"Added `[patch]` table support in `.cargo/config` files. [\\#9204](https://"
"github.com/rust-lang/cargo/pull/9204)"
msgstr ""

#: src/CHANGELOG.md:4432
msgid ""
"Added `cargo describe-future-incompatibilities` for generating a report on "
"dependencies that contain future-incompatible warnings. [\\#8825](https://"
"github.com/rust-lang/cargo/pull/8825)"
msgstr ""

#: src/CHANGELOG.md:4435
msgid ""
"Added easier support for testing the 2021 edition. [\\#9184](https://"
"github.com/rust-lang/cargo/pull/9184)"
msgstr ""

#: src/CHANGELOG.md:4437
msgid ""
"Switch the default resolver to \"2\" in the 2021 edition. [\\#9184](https://"
"github.com/rust-lang/cargo/pull/9184)"
msgstr ""

#: src/CHANGELOG.md:4439
msgid ""
"`cargo fix --edition` now supports 2021. [\\#9184](https://github.com/rust-"
"lang/cargo/pull/9184)"
msgstr ""

#: src/CHANGELOG.md:4441
msgid ""
"Added `--print` flag to `cargo rustc` to pass along to `rustc` to display "
"information from rustc. [\\#9002](https://github.com/rust-lang/cargo/pull/"
"9002)"
msgstr ""

#: src/CHANGELOG.md:4444
msgid ""
"Added `-Zdoctest-in-workspace` for changing the directory where doctests are "
"_run_ versus where they are _compiled_. [\\#9105](https://github.com/rust-"
"lang/cargo/pull/9105)"
msgstr ""

#: src/CHANGELOG.md:4447
msgid ""
"Added support for an `[env]` section in `.cargo/config.toml` to set "
"environment variables when running cargo. [\\#9175](https://github.com/rust-"
"lang/cargo/pull/9175)"
msgstr ""

#: src/CHANGELOG.md:4450
msgid ""
"Added a schema field and `features2` field to the index. [\\#9161](https://"
"github.com/rust-lang/cargo/pull/9161)"
msgstr ""

#: src/CHANGELOG.md:4452
msgid ""
"Changes to JSON spec targets will now trigger a rebuild. [\\#9223](https://"
"github.com/rust-lang/cargo/pull/9223)"
msgstr ""

#: src/CHANGELOG.md:4455
msgid "Cargo 1.51 (2021-03-25)"
msgstr ""

#: src/CHANGELOG.md:4456
msgid ""
"[75d5d8cf...rust-1.51.0](https://github.com/rust-lang/cargo/compare/"
"75d5d8cf...rust-1.51.0)"
msgstr ""

#: src/CHANGELOG.md:4459
msgid ""
"🔥 Added the `split-debuginfo` profile option. [docs](https://doc.rust-"
"lang.org/nightly/cargo/reference/profiles.html#split-debuginfo) [\\#9112]"
"(https://github.com/rust-lang/cargo/pull/9112)"
msgstr ""

#: src/CHANGELOG.md:4462
msgid ""
"Added the `path` field to `cargo metadata` for the package dependencies list "
"to show the path for \"path\" dependencies. [\\#8994](https://github.com/"
"rust-lang/cargo/pull/8994)"
msgstr ""

#: src/CHANGELOG.md:4465
msgid ""
"🔥 Added a new feature resolver, and new CLI feature flag behavior. See the "
"new [features](https://doc.rust-lang.org/nightly/cargo/reference/"
"features.html#feature-resolver-version-2) and [resolver](https://doc.rust-"
"lang.org/nightly/cargo/reference/resolver.html#feature-resolver-version-2) "
"documentation for the `resolver = \"2\"` option. See the [CLI](https://"
"doc.rust-lang.org/nightly/cargo/reference/features.html#command-line-feature-"
"options) and [resolver 2 CLI](https://doc.rust-lang.org/nightly/cargo/"
"reference/features.html#resolver-version-2-command-line-flags) options for "
"the new CLI behavior. And, finally, see [RFC 2957](https://github.com/rust-"
"lang/rfcs/blob/master/text/2957-cargo-features2.md) for a detailed look at "
"what has changed. [\\#8997](https://github.com/rust-lang/cargo/pull/8997)"
msgstr ""

#: src/CHANGELOG.md:4477
msgid ""
"`cargo install --locked` now emits a warning if `Cargo.lock` is not found. "
"[\\#9108](https://github.com/rust-lang/cargo/pull/9108)"
msgstr ""

#: src/CHANGELOG.md:4479
msgid ""
"Unknown or ambiguous package IDs passed on the command-line now display "
"suggestions for the correct package ID. [\\#9095](https://github.com/rust-"
"lang/cargo/pull/9095)"
msgstr ""

#: src/CHANGELOG.md:4482
msgid ""
"Slightly optimize `cargo vendor` [\\#8937](https://github.com/rust-lang/"
"cargo/pull/8937) [\\#9131](https://github.com/rust-lang/cargo/pull/9131) "
"[\\#9132](https://github.com/rust-lang/cargo/pull/9132)"
msgstr ""

#: src/CHANGELOG.md:4488
msgid ""
"Fixed environment variables and cfg settings emitted by a build script that "
"are set for `cargo test` and `cargo run` when the build script runs multiple "
"times during the same build session. [\\#9122](https://github.com/rust-lang/"
"cargo/pull/9122)"
msgstr ""

#: src/CHANGELOG.md:4492
msgid ""
"Fixed a panic with `cargo doc` and the new feature resolver. This also "
"introduces some heuristics to try to avoid path collisions with `rustdoc` by "
"only documenting one variant of a package if there are multiple (such as "
"multiple versions, or the same package shared for host and target "
"platforms). [\\#9077](https://github.com/rust-lang/cargo/pull/9077)"
msgstr ""

#: src/CHANGELOG.md:4498
msgid ""
"Fixed a bug in Cargo's cyclic dep graph detection that caused a stack "
"overflow. [\\#9075](https://github.com/rust-lang/cargo/pull/9075)"
msgstr ""

#: src/CHANGELOG.md:4501
msgid ""
"Fixed build script `links` environment variables (`DEP_*`) not showing up "
"for testing packages in some cases. [\\#9065](https://github.com/rust-lang/"
"cargo/pull/9065)"
msgstr ""

#: src/CHANGELOG.md:4504
msgid ""
"Fixed features being selected in a nondeterministic way for a specific "
"scenario when building an entire workspace with all targets with a proc-"
"macro in the workspace with `resolver=\"2\"`. [\\#9059](https://github.com/"
"rust-lang/cargo/pull/9059)"
msgstr ""

#: src/CHANGELOG.md:4508
msgid ""
"Fixed to use `http.proxy` setting in `~/.gitconfig`. [\\#8986](https://"
"github.com/rust-lang/cargo/pull/8986)"
msgstr ""

#: src/CHANGELOG.md:4510
msgid ""
"Fixed --feature pkg/feat for V1 resolver for non-member. [\\#9275](https://"
"github.com/rust-lang/cargo/pull/9275) [\\#9277](https://github.com/rust-lang/"
"cargo/pull/9277)"
msgstr ""

#: src/CHANGELOG.md:4513
msgid ""
"Fixed panic in `cargo doc` when there are colliding output filenames in a "
"workspace. [\\#9276](https://github.com/rust-lang/cargo/pull/9276) [\\#9277]"
"(https://github.com/rust-lang/cargo/pull/9277)"
msgstr ""

#: src/CHANGELOG.md:4516
msgid ""
"Fixed `cargo install` from exiting with success if one of several packages "
"did not install successfully. [\\#9185](https://github.com/rust-lang/cargo/"
"pull/9185) [\\#9196](https://github.com/rust-lang/cargo/pull/9196)"
msgstr ""

#: src/CHANGELOG.md:4520
msgid ""
"Fix panic with doc collision orphan. [\\#9142](https://github.com/rust-lang/"
"cargo/pull/9142) [\\#9196](https://github.com/rust-lang/cargo/pull/9196)"
msgstr ""

#: src/CHANGELOG.md:4525
msgid ""
"Removed the `publish-lockfile` unstable feature, it was stabilized without "
"the need for an explicit flag 1.5 years ago. [\\#9092](https://github.com/"
"rust-lang/cargo/pull/9092)"
msgstr ""

#: src/CHANGELOG.md:4528
msgid ""
"Added better diagnostics, help messages, and documentation for nightly "
"features (such as those passed with the `-Z` flag, or specified with `cargo-"
"features` in `Cargo.toml`). [\\#9092](https://github.com/rust-lang/cargo/"
"pull/9092)"
msgstr ""

#: src/CHANGELOG.md:4532
msgid ""
"Added support for Rust edition 2021. [\\#8922](https://github.com/rust-lang/"
"cargo/pull/8922)"
msgstr ""

#: src/CHANGELOG.md:4534
msgid ""
"Added support for the `rust-version` field in project metadata. [\\#8037]"
"(https://github.com/rust-lang/cargo/pull/8037)"
msgstr ""

#: src/CHANGELOG.md:4536
msgid ""
"Added a schema field to the index. [\\#9161](https://github.com/rust-lang/"
"cargo/pull/9161) [\\#9196](https://github.com/rust-lang/cargo/pull/9196)"
msgstr ""

#: src/CHANGELOG.md:4540
msgid "Cargo 1.50 (2021-02-11)"
msgstr ""

#: src/CHANGELOG.md:4541
msgid ""
"[8662ab42...rust-1.50.0](https://github.com/rust-lang/cargo/compare/"
"8662ab42...rust-1.50.0)"
msgstr ""

#: src/CHANGELOG.md:4544
msgid ""
"Added the `doc` field to `cargo metadata`, which indicates if a target is "
"documented. [\\#8869](https://github.com/rust-lang/cargo/pull/8869)"
msgstr ""

#: src/CHANGELOG.md:4547
msgid ""
"Added `RUSTC_WORKSPACE_WRAPPER`, an alternate RUSTC wrapper that only runs "
"for the local workspace packages, and caches its artifacts independently of "
"non-wrapped builds. [\\#8976](https://github.com/rust-lang/cargo/pull/8976)"
msgstr ""

#: src/CHANGELOG.md:4551
msgid ""
"Added `--workspace` to `cargo update` to update only the workspace members, "
"and not their dependencies. This is particularly useful if you update the "
"version in `Cargo.toml` and want to update `Cargo.lock` without running any "
"other commands. [\\#8725](https://github.com/rust-lang/cargo/pull/8725)"
msgstr ""

#: src/CHANGELOG.md:4558
msgid ""
"`.crate` files uploaded to a registry are now built with reproducible "
"settings, so that the same `.crate` file created on different machines "
"should be identical. [\\#8864](https://github.com/rust-lang/cargo/pull/8864)"
msgstr ""

#: src/CHANGELOG.md:4562
msgid ""
"Git dependencies that specify more than one of `branch`, `tag`, or `rev` are "
"now rejected. [\\#8984](https://github.com/rust-lang/cargo/pull/8984)"
msgstr ""

#: src/CHANGELOG.md:4565
msgid ""
"The `rerun-if-changed` build script directive can now point to a directory, "
"in which case Cargo will check if any file in that directory changes. "
"[\\#8973](https://github.com/rust-lang/cargo/pull/8973)"
msgstr ""

#: src/CHANGELOG.md:4568
msgid ""
"If Cargo cannot determine the username or email address, `cargo new` will no "
"longer fail, and instead create an empty authors list. [\\#8912](https://"
"github.com/rust-lang/cargo/pull/8912)"
msgstr ""

#: src/CHANGELOG.md:4571
msgid ""
"The progress bar width has been reduced to provide more room to display the "
"crates currently being built. [\\#8892](https://github.com/rust-lang/cargo/"
"pull/8892)"
msgstr ""

#: src/CHANGELOG.md:4574
msgid ""
"`cargo new` will now support `includeIf` directives in `.gitconfig` to match "
"the correct directory when determining the username and email address. "
"[\\#8886](https://github.com/rust-lang/cargo/pull/8886)"
msgstr ""

#: src/CHANGELOG.md:4579
msgid ""
"Fixed `cargo metadata` and `cargo tree` to only download packages for the "
"requested target. [\\#8987](https://github.com/rust-lang/cargo/pull/8987)"
msgstr ""

#: src/CHANGELOG.md:4582
msgid ""
"Updated libgit2, which brings in many fixes, particularly fixing a zlib "
"error that occasionally appeared on 32-bit systems. [\\#8998](https://"
"github.com/rust-lang/cargo/pull/8998)"
msgstr ""

#: src/CHANGELOG.md:4585
msgid ""
"Fixed stack overflow with a circular dev-dependency that uses the `links` "
"field. [\\#8969](https://github.com/rust-lang/cargo/pull/8969)"
msgstr ""

#: src/CHANGELOG.md:4588
msgid ""
"Fixed `cargo publish` failing on some filesystems, particularly 9p on WSL2. "
"[\\#8950](https://github.com/rust-lang/cargo/pull/8950)"
msgstr ""

#: src/CHANGELOG.md:4592
msgid ""
"Allow `resolver=\"1\"` to specify the original feature resolution behavior. "
"[\\#8857](https://github.com/rust-lang/cargo/pull/8857)"
msgstr ""

#: src/CHANGELOG.md:4594
msgid ""
"Added `-Z extra-link-arg` which adds the `cargo:rustc-link-arg-bins` and "
"`cargo:rustc-link-arg` build script options. [docs](https://doc.rust-"
"lang.org/nightly/cargo/reference/unstable.html#extra-link-arg) [\\#8441]"
"(https://github.com/rust-lang/cargo/pull/8441)"
msgstr ""

#: src/CHANGELOG.md:4598
msgid ""
"Implemented external credential process support, and added `cargo logout`. "
"([RFC 2730](https://github.com/rust-lang/rfcs/blob/master/text/2730-cargo-"
"token-from-process.md)) ([docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#credential-process)) [\\#8934](https://github.com/"
"rust-lang/cargo/pull/8934)"
msgstr ""

#: src/CHANGELOG.md:4602
msgid ""
"Fix panic with `-Zbuild-std` and no roots. [\\#8942](https://github.com/rust-"
"lang/cargo/pull/8942)"
msgstr ""

#: src/CHANGELOG.md:4604
msgid ""
"Set docs.rs as the default extern-map for crates.io [\\#8877](https://"
"github.com/rust-lang/cargo/pull/8877)"
msgstr ""

#: src/CHANGELOG.md:4607
msgid "Cargo 1.49 (2020-12-31)"
msgstr ""

#: src/CHANGELOG.md:4608
msgid ""
"[75615f8e...rust-1.49.0](https://github.com/rust-lang/cargo/compare/"
"75615f8e...rust-1.49.0)"
msgstr ""

#: src/CHANGELOG.md:4611
msgid ""
"Added `homepage` and `documentation` fields to `cargo metadata`. [\\#8744]"
"(https://github.com/rust-lang/cargo/pull/8744)"
msgstr ""

#: src/CHANGELOG.md:4613
msgid ""
"Added the `CARGO_PRIMARY_PACKAGE` environment variable which is set when "
"running `rustc` if the package is one of the \"root\" packages selected on "
"the command line. [\\#8758](https://github.com/rust-lang/cargo/pull/8758)"
msgstr ""

#: src/CHANGELOG.md:4617
msgid ""
"Added support for Unix-style glob patterns for package and target selection "
"flags on the command-line (such as `-p 'serde*'` or `--test '*'`). [\\#8752]"
"(https://github.com/rust-lang/cargo/pull/8752)"
msgstr ""

#: src/CHANGELOG.md:4622
msgid ""
"Computed LTO flags are now included in the filename metadata hash so that "
"changes in LTO settings will independently cache build artifacts instead of "
"overwriting previous ones. This prevents rebuilds in some situations such as "
"switching between `cargo build` and `cargo test` in some circumstances. "
"[\\#8755](https://github.com/rust-lang/cargo/pull/8755)"
msgstr ""

#: src/CHANGELOG.md:4627
msgid ""
"`cargo tree` now displays `(proc-macro)` next to proc-macro packages. "
"[\\#8765](https://github.com/rust-lang/cargo/pull/8765)"
msgstr ""

#: src/CHANGELOG.md:4629
msgid ""
"Added a warning that the allowed characters for a feature name have been "
"restricted to letters, digits, `_`, `-`, and `+` to accommodate future "
"syntax changes. This is still a superset of the allowed syntax on crates.io, "
"which requires ASCII. This is intended to be changed to an error in the "
"future. [\\#8814](https://github.com/rust-lang/cargo/pull/8814)"
msgstr ""

#: src/CHANGELOG.md:4635
msgid ""
"`-p` without a value will now print a list of workspace package names. "
"[\\#8808](https://github.com/rust-lang/cargo/pull/8808)"
msgstr ""

#: src/CHANGELOG.md:4637
msgid ""
"Add period to allowed feature name characters. [\\#8932](https://github.com/"
"rust-lang/cargo/pull/8932) [\\#8943](https://github.com/rust-lang/cargo/pull/"
"8943)"
msgstr ""

#: src/CHANGELOG.md:4642
msgid ""
"Fixed building a library with both \"dylib\" and \"rlib\" crate types with "
"LTO enabled. [\\#8754](https://github.com/rust-lang/cargo/pull/8754)"
msgstr ""

#: src/CHANGELOG.md:4644
msgid ""
"Fixed paths in Cargo's dep-info files. [\\#8819](https://github.com/rust-"
"lang/cargo/pull/8819)"
msgstr ""

#: src/CHANGELOG.md:4646
msgid ""
"Fixed inconsistent source IDs in `cargo metadata` for git dependencies that "
"explicitly specify `branch=\"master\"`. [\\#8824](https://github.com/rust-"
"lang/cargo/pull/8824)"
msgstr ""

#: src/CHANGELOG.md:4649
msgid ""
"Fixed re-extracting dependencies which contained a `.cargo-ok` file. "
"[\\#8835](https://github.com/rust-lang/cargo/pull/8835)"
msgstr ""

#: src/CHANGELOG.md:4653
msgid ""
"Fixed a panic with `cargo doc -Zfeatures=itarget` in some situations. "
"[\\#8777](https://github.com/rust-lang/cargo/pull/8777)"
msgstr ""

#: src/CHANGELOG.md:4655
msgid ""
"New implementation for namespaced features, using the syntax `dep:serde`. "
"[docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#namespaced-features) [\\#8799](https://github.com/rust-lang/"
"cargo/pull/8799)"
msgstr ""

#: src/CHANGELOG.md:4658
msgid ""
"Added support for \"weak\" dependency features, using the syntax `dep_name?/"
"feat_name`, which will enable a feature for a dependency without also "
"enabling the dependency. [\\#8818](https://github.com/rust-lang/cargo/pull/"
"8818)"
msgstr ""

#: src/CHANGELOG.md:4662
msgid ""
"Fixed the new feature resolver downloading extra dependencies that weren't "
"strictly necessary. [\\#8823](https://github.com/rust-lang/cargo/pull/8823)"
msgstr ""

#: src/CHANGELOG.md:4666
msgid "Cargo 1.48 (2020-11-19)"
msgstr ""

#: src/CHANGELOG.md:4667
msgid ""
"[51b66125...rust-1.48.0](https://github.com/rust-lang/cargo/compare/"
"51b66125...rust-1.48.0)"
msgstr ""

#: src/CHANGELOG.md:4670
msgid ""
"Added `term.progress` configuration option to control when and how the "
"progress bar is displayed. [docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/config.html#termprogresswhen) [\\#8165](https://github.com/rust-"
"lang/cargo/pull/8165)"
msgstr ""

#: src/CHANGELOG.md:4674
msgid ""
"Added `--message-format plain` option to `cargo locate-project` to display "
"the project location without JSON to make it easier to use in a script. "
"[\\#8707](https://github.com/rust-lang/cargo/pull/8707)"
msgstr ""

#: src/CHANGELOG.md:4677
msgid ""
"Added `--workspace` option to `cargo locate-project` to display the path to "
"the workspace manifest. [\\#8712](https://github.com/rust-lang/cargo/pull/"
"8712)"
msgstr ""

#: src/CHANGELOG.md:4680
msgid ""
"A new contributor guide has been added for contributing to Cargo itself. "
"This is published at <https://rust-lang.github.io/cargo/contrib/>. [\\#8715]"
"(https://github.com/rust-lang/cargo/pull/8715)"
msgstr ""

#: src/CHANGELOG.md:4683
msgid ""
"Zsh `--target` completion will now complete with the built-in rustc targets. "
"[\\#8740](https://github.com/rust-lang/cargo/pull/8740)"
msgstr ""

#: src/CHANGELOG.md:4689
msgid ""
"Fixed `cargo new` creating a fossil repository to properly ignore the "
"`target` directory. [\\#8671](https://github.com/rust-lang/cargo/pull/8671)"
msgstr ""

#: src/CHANGELOG.md:4691
msgid ""
"Don't show warnings about the workspace in the current directory when using "
"`cargo install` of a remote package. [\\#8681](https://github.com/rust-lang/"
"cargo/pull/8681)"
msgstr ""

#: src/CHANGELOG.md:4694
msgid ""
"Automatically reinitialize the index when an \"Object not found\" error is "
"encountered in the git repository. [\\#8735](https://github.com/rust-lang/"
"cargo/pull/8735)"
msgstr ""

#: src/CHANGELOG.md:4697
msgid ""
"Updated libgit2, which brings in several fixes for git repository handling. "
"[\\#8778](https://github.com/rust-lang/cargo/pull/8778) [\\#8780](https://"
"github.com/rust-lang/cargo/pull/8780)"
msgstr ""

#: src/CHANGELOG.md:4702
msgid ""
"Fixed `cargo install` so that it will ignore the `[unstable]` table in local "
"config files. [\\#8656](https://github.com/rust-lang/cargo/pull/8656)"
msgstr ""

#: src/CHANGELOG.md:4704
msgid ""
"Fixed nondeterministic behavior of the new feature resolver. [\\#8701]"
"(https://github.com/rust-lang/cargo/pull/8701)"
msgstr ""

#: src/CHANGELOG.md:4706
msgid ""
"Fixed running `cargo test` on a proc-macro with the new feature resolver "
"under a specific combination of circumstances. [\\#8742](https://github.com/"
"rust-lang/cargo/pull/8742)"
msgstr ""

#: src/CHANGELOG.md:4710
msgid "Cargo 1.47 (2020-10-08)"
msgstr ""

#: src/CHANGELOG.md:4711
msgid ""
"[4f74d9b2...rust-1.47.0](https://github.com/rust-lang/cargo/compare/"
"4f74d9b2...rust-1.47.0)"
msgstr ""

#: src/CHANGELOG.md:4714
msgid ""
"`cargo doc` will now include the package's version in the left sidebar. "
"[\\#8509](https://github.com/rust-lang/cargo/pull/8509)"
msgstr ""

#: src/CHANGELOG.md:4716
msgid ""
"Added the `test` field to `cargo metadata` targets. [\\#8478](https://"
"github.com/rust-lang/cargo/pull/8478)"
msgstr ""

#: src/CHANGELOG.md:4718
msgid ""
"Cargo's man pages are now displayed via the `cargo help` command (such as "
"`cargo help build`). [\\#8456](https://github.com/rust-lang/cargo/pull/8456) "
"[\\#8577](https://github.com/rust-lang/cargo/pull/8577)"
msgstr ""

#: src/CHANGELOG.md:4722
msgid ""
"Added new documentation chapters on [how dependency resolution works]"
"(https://doc.rust-lang.org/nightly/cargo/reference/resolver.html) and "
"[SemVer compatibility](https://doc.rust-lang.org/nightly/cargo/reference/"
"semver.html), along with suggestions on how to version your project and work "
"with dependencies. [\\#8609](https://github.com/rust-lang/cargo/pull/8609)"
msgstr ""

#: src/CHANGELOG.md:4731
msgid ""
"The comments added to `.gitignore` when it is modified have been tweaked to "
"add some spacing. [\\#8476](https://github.com/rust-lang/cargo/pull/8476)"
msgstr ""

#: src/CHANGELOG.md:4734
msgid ""
"`cargo metadata` output should now be sorted to be deterministic. [\\#8489]"
"(https://github.com/rust-lang/cargo/pull/8489)"
msgstr ""

#: src/CHANGELOG.md:4736
msgid ""
"By default, build scripts and proc-macros are now built with `opt-level=0` "
"and the default codegen units, even in release mode. [\\#8500](https://"
"github.com/rust-lang/cargo/pull/8500)"
msgstr ""

#: src/CHANGELOG.md:4739
msgid ""
"`workspace.default-members` is now filtered by `workspace.exclude`. [\\#8485]"
"(https://github.com/rust-lang/cargo/pull/8485)"
msgstr ""

#: src/CHANGELOG.md:4741
msgid ""
"`workspace.members` globs now ignore non-directory paths. [\\#8511](https://"
"github.com/rust-lang/cargo/pull/8511)"
msgstr ""

#: src/CHANGELOG.md:4743
msgid ""
"git zlib errors now trigger a retry. [\\#8520](https://github.com/rust-lang/"
"cargo/pull/8520)"
msgstr ""

#: src/CHANGELOG.md:4745
msgid ""
"\"http\" class git errors now trigger a retry. [\\#8553](https://github.com/"
"rust-lang/cargo/pull/8553)"
msgstr ""

#: src/CHANGELOG.md:4747
msgid ""
"git dependencies now override the `core.autocrlf` git configuration value to "
"ensure they behave consistently across platforms, particularly when "
"vendoring git dependencies on Windows. [\\#8523](https://github.com/rust-"
"lang/cargo/pull/8523)"
msgstr ""

#: src/CHANGELOG.md:4751
msgid ""
"If `Cargo.lock` needs to be updated, then it will be automatically "
"transitioned to the new V2 format. This format removes the `[metadata]` "
"table, and should be easier to merge changes in source control systems. This "
"format was introduced in 1.38, and made the default for new projects in "
"1.41. [\\#8554](https://github.com/rust-lang/cargo/pull/8554)"
msgstr ""

#: src/CHANGELOG.md:4757
msgid ""
"Added preparation for support of git repositories with a non-\"master\" "
"default branch. Actual support will arrive in a future version. This "
"introduces some warnings:"
msgstr ""

#: src/CHANGELOG.md:4760
msgid ""
"Warn if a git dependency does not specify a branch, and the default branch "
"on the repository is not \"master\". In the future, Cargo will fetch the "
"default branch. In this scenario, the branch should be explicitly specified."
msgstr ""

#: src/CHANGELOG.md:4764
msgid ""
"Warn if a workspace has multiple dependencies to the same git repository, "
"one without a `branch` and one with `branch=\"master\"`. Dependencies should "
"all use one form or the other. [\\#8522](https://github.com/rust-lang/cargo/"
"pull/8522)"
msgstr ""

#: src/CHANGELOG.md:4768
msgid ""
"Warnings are now issued if a `required-features` entry lists a feature that "
"does not exist. [\\#7950](https://github.com/rust-lang/cargo/pull/7950)"
msgstr ""

#: src/CHANGELOG.md:4771
msgid ""
"Built-in aliases are now included in `cargo --list`. [\\#8542](https://"
"github.com/rust-lang/cargo/pull/8542)"
msgstr ""

#: src/CHANGELOG.md:4773
msgid ""
"`cargo install` with a specific version that has been yanked will now "
"display an error message that it has been yanked, instead of \"could not "
"find\". [\\#8565](https://github.com/rust-lang/cargo/pull/8565)"
msgstr ""

#: src/CHANGELOG.md:4777
msgid ""
"`cargo publish` with a package that has the `publish` field set to a single "
"registry, and no `--registry` flag has been given, will now publish to that "
"registry instead of generating an error. [\\#8571](https://github.com/rust-"
"lang/cargo/pull/8571)"
msgstr ""

#: src/CHANGELOG.md:4783
msgid ""
"Fixed issue where if a project directory was moved, and one of the build "
"scripts did not use the `rerun-if-changed` directive, then that build script "
"was being rebuilt when it shouldn't. [\\#8497](https://github.com/rust-lang/"
"cargo/pull/8497)"
msgstr ""

#: src/CHANGELOG.md:4787
msgid ""
"Console colors should now work on Windows 7 and 8. [\\#8540](https://"
"github.com/rust-lang/cargo/pull/8540)"
msgstr ""

#: src/CHANGELOG.md:4789
msgid ""
"The `CARGO_TARGET_{triplet}_RUNNER` environment variable will now correctly "
"override the config file instead of trying to merge the commands. [\\#8629]"
"(https://github.com/rust-lang/cargo/pull/8629)"
msgstr ""

#: src/CHANGELOG.md:4792
msgid ""
"Fixed LTO with doctests. [\\#8657](https://github.com/rust-lang/cargo/pull/"
"8657) [\\#8658](https://github.com/rust-lang/cargo/pull/8658)"
msgstr ""

#: src/CHANGELOG.md:4797
msgid ""
"Added support for `-Z terminal-width` which tells `rustc` the width of the "
"terminal so that it can format diagnostics better. [docs](https://doc.rust-"
"lang.org/nightly/cargo/reference/unstable.html#terminal-width) [\\#8427]"
"(https://github.com/rust-lang/cargo/pull/8427)"
msgstr ""

#: src/CHANGELOG.md:4801
msgid ""
"Added ability to configure `-Z` unstable flags in config files via the "
"`[unstable]` table. [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html) [\\#8393](https://github.com/rust-lang/cargo/pull/8393)"
msgstr ""

#: src/CHANGELOG.md:4805
msgid ""
"Added `-Z build-std-features` flag to set features for the standard library. "
"[docs](https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#build-"
"std-features) [\\#8490](https://github.com/rust-lang/cargo/pull/8490)"
msgstr ""

#: src/CHANGELOG.md:4809
msgid "Cargo 1.46 (2020-08-27)"
msgstr ""

#: src/CHANGELOG.md:4810
msgid ""
"[9fcb8c1d...rust-1.46.0](https://github.com/rust-lang/cargo/compare/"
"9fcb8c1d...rust-1.46.0)"
msgstr ""

#: src/CHANGELOG.md:4813
msgid ""
"The `dl` key in `config.json` of a registry index now supports the "
"replacement markers `{prefix}` and `{lowerprefix}` to allow spreading crates "
"across directories similar to how the index itself is structured. [docs]"
"(https://doc.rust-lang.org/nightly/cargo/reference/registries.html#index-"
"format) [\\#8267](https://github.com/rust-lang/cargo/pull/8267)"
msgstr ""

#: src/CHANGELOG.md:4818
msgid "Added new environment variables that are set during compilation:"
msgstr ""

#: src/CHANGELOG.md:4819
msgid "`CARGO_CRATE_NAME`: The name of the crate being built."
msgstr ""

#: src/CHANGELOG.md:4820
msgid ""
"`CARGO_BIN_NAME`: The name of the executable binary (if this is a binary "
"crate)."
msgstr ""

#: src/CHANGELOG.md:4821
msgid "`CARGO_PKG_LICENSE`: The `license` field from the manifest."
msgstr ""

#: src/CHANGELOG.md:4822
msgid ""
"`CARGO_PKG_LICENSE_FILE`: The `license-file` field from the manifest. "
"[\\#8270](https://github.com/rust-lang/cargo/pull/8270) [\\#8325](https://"
"github.com/rust-lang/cargo/pull/8325) [\\#8387](https://github.com/rust-lang/"
"cargo/pull/8387)"
msgstr ""

#: src/CHANGELOG.md:4826
msgid ""
"If the value for `readme` is not specified in `Cargo.toml`, it is now "
"automatically inferred from the existence of a file named `README`, "
"`README.md`, or `README.txt`. This can be suppressed by setting `readme = "
"false`. [\\#8277](https://github.com/rust-lang/cargo/pull/8277)"
msgstr ""

#: src/CHANGELOG.md:4831
msgid ""
"`cargo install` now supports the `--index` flag to install directly from an "
"index. [\\#8344](https://github.com/rust-lang/cargo/pull/8344)"
msgstr ""

#: src/CHANGELOG.md:4833
msgid ""
"Added the `metadata` table to the `workspace` definition in `Cargo.toml`. "
"This can be used for arbitrary data similar to the `package.metadata` table. "
"[\\#8323](https://github.com/rust-lang/cargo/pull/8323)"
msgstr ""

#: src/CHANGELOG.md:4836
msgid ""
"Added the `--target-dir` flag to `cargo install` to set the target "
"directory. [\\#8391](https://github.com/rust-lang/cargo/pull/8391)"
msgstr ""

#: src/CHANGELOG.md:4838
msgid ""
"Changes to environment variables used by the [`env!`](https://doc.rust-"
"lang.org/std/macro.env.html) or [`option_env!`](https://doc.rust-lang.org/"
"std/macro.option_env.html) macros are now automatically detected to trigger "
"a rebuild. [\\#8421](https://github.com/rust-lang/cargo/pull/8421)"
msgstr ""

#: src/CHANGELOG.md:4843
msgid ""
"The `target` directory now includes the `CACHEDIR.TAG` file which is used by "
"some tools to exclude the directory from backups. [\\#8378](https://"
"github.com/rust-lang/cargo/pull/8378)"
msgstr ""

#: src/CHANGELOG.md:4846
msgid ""
"Added docs about rustup's `+toolchain` syntax. [\\#8455](https://github.com/"
"rust-lang/cargo/pull/8455)"
msgstr ""

#: src/CHANGELOG.md:4850
msgid ""
"A warning is now displayed if a git dependency includes a `#` fragment in "
"the URL. This was potentially confusing because Cargo itself displays git "
"URLs with this syntax, but it does not have any meaning outside of the "
"`Cargo.lock` file, and would not work properly. [\\#8297](https://github.com/"
"rust-lang/cargo/pull/8297)"
msgstr ""

#: src/CHANGELOG.md:4855
msgid ""
"Various optimizations and fixes for bitcode embedding and LTO. [\\#8349]"
"(https://github.com/rust-lang/cargo/pull/8349)"
msgstr ""

#: src/CHANGELOG.md:4857
msgid ""
"Reduced the amount of data fetched for git dependencies. If Cargo knows the "
"branch or tag to fetch, it will now only fetch that branch or tag instead of "
"all branches and tags. [\\#8363](https://github.com/rust-lang/cargo/pull/"
"8363)"
msgstr ""

#: src/CHANGELOG.md:4861
msgid ""
"Enhanced git fetch error messages. [\\#8409](https://github.com/rust-lang/"
"cargo/pull/8409)"
msgstr ""

#: src/CHANGELOG.md:4863
msgid ""
"`.crate` files are now generated with GNU tar format instead of UStar, which "
"supports longer file names. [\\#8453](https://github.com/rust-lang/cargo/"
"pull/8453)"
msgstr ""

#: src/CHANGELOG.md:4868
msgid ""
"Fixed a rare situation where an update to `Cargo.lock` failed once, but then "
"subsequent runs allowed it proceed. [\\#8274](https://github.com/rust-lang/"
"cargo/pull/8274)"
msgstr ""

#: src/CHANGELOG.md:4871
msgid ""
"Removed assertion that Windows dylibs must have a `.dll` extension. Some "
"custom JSON spec targets may change the extension. [\\#8310](https://"
"github.com/rust-lang/cargo/pull/8310)"
msgstr ""

#: src/CHANGELOG.md:4874
msgid ""
"Updated libgit2, which brings in a fix for zlib errors for some remote git "
"servers like googlesource.com. [\\#8320](https://github.com/rust-lang/cargo/"
"pull/8320)"
msgstr ""

#: src/CHANGELOG.md:4877
msgid ""
"Fixed the GitHub fast-path check for up-to-date git dependencies on non-"
"master branches. [\\#8363](https://github.com/rust-lang/cargo/pull/8363)"
msgstr ""

#: src/CHANGELOG.md:4880
msgid ""
"Fixed issue when enabling a feature with `pkg/feature` syntax, and `pkg` is "
"an optional dependency, but also a dev-dependency, and the dev-dependency "
"appears before the optional normal dependency in the registry summary, then "
"the optional dependency would not get activated. [\\#8395](https://"
"github.com/rust-lang/cargo/pull/8395)"
msgstr ""

#: src/CHANGELOG.md:4885
msgid ""
"Fixed `clean -p` deleting the build directory if there is a test named "
"`build`. [\\#8398](https://github.com/rust-lang/cargo/pull/8398)"
msgstr ""

#: src/CHANGELOG.md:4888
msgid ""
"Fixed indentation of multi-line Cargo error messages. [\\#8409](https://"
"github.com/rust-lang/cargo/pull/8409)"
msgstr ""

#: src/CHANGELOG.md:4890
msgid ""
"Fixed issue where the automatic inclusion of the `--document-private-items` "
"flag for rustdoc would override any flags passed to the `cargo rustdoc` "
"command. [\\#8449](https://github.com/rust-lang/cargo/pull/8449)"
msgstr ""

#: src/CHANGELOG.md:4894
msgid ""
"Cargo will now include a version in the hash of the fingerprint directories "
"to support backwards-incompatible changes to the fingerprint structure. "
"[\\#8473](https://github.com/rust-lang/cargo/pull/8473) [\\#8488](https://"
"github.com/rust-lang/cargo/pull/8488)"
msgstr ""

#: src/CHANGELOG.md:4900
msgid ""
"Added `-Zrustdoc-map` feature which provides external mappings for rustdoc "
"(such as https://docs.rs/ links). [docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#rustdoc-map) [\\#8287](https://github.com/rust-"
"lang/cargo/pull/8287)"
msgstr ""

#: src/CHANGELOG.md:4904
msgid ""
"Fixed feature calculation when a proc-macro is declared in `Cargo.toml` with "
"an underscore (like `proc_macro = true`). [\\#8319](https://github.com/rust-"
"lang/cargo/pull/8319)"
msgstr ""

#: src/CHANGELOG.md:4907
msgid ""
"Added support for setting `-Clinker` with `-Zdoctest-xcompile`. [\\#8359]"
"(https://github.com/rust-lang/cargo/pull/8359)"
msgstr ""

#: src/CHANGELOG.md:4909
msgid ""
"Fixed setting the `strip` profile field in config files. [\\#8454](https://"
"github.com/rust-lang/cargo/pull/8454)"
msgstr ""

#: src/CHANGELOG.md:4912
msgid "Cargo 1.45 (2020-07-16)"
msgstr ""

#: src/CHANGELOG.md:4913
msgid ""
"[ebda5065e...rust-1.45.0](https://github.com/rust-lang/cargo/compare/"
"ebda5065...rust-1.45.0)"
msgstr ""

#: src/CHANGELOG.md:4918
msgid ""
"Changed official documentation to recommend `.cargo/config.toml` filenames "
"(with the `.toml` extension). `.toml` extension support was added in 1.39. "
"[\\#8121](https://github.com/rust-lang/cargo/pull/8121)"
msgstr ""

#: src/CHANGELOG.md:4921
msgid ""
"The `registry.index` config value is no longer allowed (it has been "
"deprecated for 4 years). [\\#7973](https://github.com/rust-lang/cargo/pull/"
"7973)"
msgstr ""

#: src/CHANGELOG.md:4924
msgid ""
"An error is generated if both `--index` and `--registry` are passed "
"(previously `--index` was silently ignored). [\\#7973](https://github.com/"
"rust-lang/cargo/pull/7973)"
msgstr ""

#: src/CHANGELOG.md:4927
msgid ""
"The `registry.token` config value is no longer used with the `--index` flag. "
"This is intended to avoid potentially leaking the crates.io token to another "
"registry. [\\#7973](https://github.com/rust-lang/cargo/pull/7973)"
msgstr ""

#: src/CHANGELOG.md:4931
msgid ""
"Added a warning if `registry.token` is used with source replacement. It is "
"intended this will be an error in future versions. [\\#7973](https://"
"github.com/rust-lang/cargo/pull/7973)"
msgstr ""

#: src/CHANGELOG.md:4934
msgid ""
"Windows GNU targets now copy `.dll.a` import library files for DLL crate "
"types to the output directory. [\\#8141](https://github.com/rust-lang/cargo/"
"pull/8141)"
msgstr ""

#: src/CHANGELOG.md:4937
msgid ""
"Dylibs for all dependencies are now unconditionally copied to the output "
"directory. Some obscure scenarios can cause an old dylib to be referenced "
"between builds, and this ensures that all the latest copies are used. "
"[\\#8139](https://github.com/rust-lang/cargo/pull/8139)"
msgstr ""

#: src/CHANGELOG.md:4941
msgid ""
"`package.exclude` can now match directory names. If a directory is "
"specified, the entire directory will be excluded, and Cargo will not attempt "
"to inspect it further. Previously Cargo would try to check every file in the "
"directory which could cause problems if the directory contained unreadable "
"files. [\\#8095](https://github.com/rust-lang/cargo/pull/8095)"
msgstr ""

#: src/CHANGELOG.md:4947
msgid ""
"When packaging with `cargo publish` or `cargo package`, Cargo can use git to "
"guide its decision on which files to include. Previously this git-based "
"logic required a `Cargo.toml` file to exist at the root of the repository. "
"This is no longer required, so Cargo will now use git-based guidance even if "
"there is not a `Cargo.toml` in the root of the repository. [\\#8095](https://"
"github.com/rust-lang/cargo/pull/8095)"
msgstr ""

#: src/CHANGELOG.md:4953
msgid ""
"While unpacking a crate on Windows, if it fails to write a file because the "
"file is a reserved Windows filename (like \"aux.rs\"), Cargo will display an "
"extra message to explain why it failed. [\\#8136](https://github.com/rust-"
"lang/cargo/pull/8136)"
msgstr ""

#: src/CHANGELOG.md:4957
msgid ""
"Failures to set mtime on files are now ignored. Some filesystems did not "
"support this. [\\#8185](https://github.com/rust-lang/cargo/pull/8185)"
msgstr ""

#: src/CHANGELOG.md:4960
msgid ""
"Certain classes of git errors will now recommend enabling `net.git-fetch-"
"with-cli`. [\\#8166](https://github.com/rust-lang/cargo/pull/8166)"
msgstr ""

#: src/CHANGELOG.md:4963
msgid ""
"When doing an LTO build, Cargo will now instruct rustc not to perform "
"codegen when possible. This may result in a faster build and use less disk "
"space. Additionally, for non-LTO builds, Cargo will instruct rustc to not "
"embed LLVM bitcode in libraries, which should decrease their size. [\\#8192]"
"(https://github.com/rust-lang/cargo/pull/8192) [\\#8226](https://github.com/"
"rust-lang/cargo/pull/8226) [\\#8254](https://github.com/rust-lang/cargo/pull/"
"8254)"
msgstr ""

#: src/CHANGELOG.md:4970
msgid ""
"The implementation for `cargo clean -p` has been rewritten so that it can "
"more accurately remove the files for a specific package. [\\#8210](https://"
"github.com/rust-lang/cargo/pull/8210)"
msgstr ""

#: src/CHANGELOG.md:4973
msgid ""
"The way Cargo computes the outputs from a build has been rewritten to be "
"more complete and accurate. Newly tracked files will be displayed in JSON "
"messages, and may be uplifted to the output directory in some cases. Some of "
"the changes from this are:"
msgstr ""

#: src/CHANGELOG.md:4978
msgid "`.exp` export files on Windows MSVC dynamic libraries are now tracked."
msgstr ""

#: src/CHANGELOG.md:4979
msgid "Proc-macros on Windows track import/export files."
msgstr ""

#: src/CHANGELOG.md:4980
msgid ""
"All targets (like tests, etc.) that generate separate debug files (pdb/dSYM) "
"are tracked."
msgstr ""

#: src/CHANGELOG.md:4982
msgid "Added .map files for wasm32-unknown-emscripten."
msgstr ""

#: src/CHANGELOG.md:4983
msgid ""
"macOS dSYM directories are tracked for all dynamic libraries (dylib/cdylib/"
"proc-macro) and for build scripts."
msgstr ""

#: src/CHANGELOG.md:4986
msgid "There are a variety of other changes as a consequence of this:"
msgstr ""

#: src/CHANGELOG.md:4988
msgid ""
"Binary examples on Windows MSVC with a hyphen will now show up twice in the "
"examples directory (`foo_bar.exe` and `foo-bar.exe`). Previously Cargo just "
"renamed the file instead of hard-linking it."
msgstr ""

#: src/CHANGELOG.md:4991
msgid ""
"Example libraries now follow the same rules for hyphen/underscore "
"translation as normal libs (they will now use underscores)."
msgstr ""

#: src/CHANGELOG.md:4994
msgid "[\\#8210](https://github.com/rust-lang/cargo/pull/8210)"
msgstr ""

#: src/CHANGELOG.md:4995
msgid ""
"Cargo attempts to scrub any secrets from the debug log for HTTP debugging. "
"[\\#8222](https://github.com/rust-lang/cargo/pull/8222)"
msgstr ""

#: src/CHANGELOG.md:4997
msgid ""
"Context has been added to many of Cargo's filesystem operations, so that "
"error messages now provide more information, such as the path that caused "
"the problem. [\\#8232](https://github.com/rust-lang/cargo/pull/8232)"
msgstr ""

#: src/CHANGELOG.md:5001
msgid ""
"Several commands now ignore the error if stdout or stderr is closed while it "
"is running. For example `cargo install --list | grep -q cargo-fuzz` would "
"previously sometimes panic because `grep -q` may close stdout before the "
"command finishes. Regular builds continue to fail if stdout or stderr is "
"closed, matching the behavior of many other build systems. [\\#8236](https://"
"github.com/rust-lang/cargo/pull/8236)"
msgstr ""

#: src/CHANGELOG.md:5007
msgid ""
"If `cargo install` is given an exact version, like `--version=1.2.3`, it "
"will now avoid updating the index if that version is already installed, and "
"exit quickly indicating it is already installed. [\\#8022](https://"
"github.com/rust-lang/cargo/pull/8022)"
msgstr ""

#: src/CHANGELOG.md:5011
msgid ""
"Changes to the `[patch]` section will now attempt to automatically update "
"`Cargo.lock` to the new version. It should now also provide better error "
"messages for the rare cases where it is unable to automatically update. "
"[\\#8248](https://github.com/rust-lang/cargo/pull/8248)"
msgstr ""

#: src/CHANGELOG.md:5017
msgid ""
"Fixed copying Windows `.pdb` files to the output directory when the filename "
"contained dashes. [\\#8123](https://github.com/rust-lang/cargo/pull/8123)"
msgstr ""

#: src/CHANGELOG.md:5020
msgid ""
"Fixed error where Cargo would fail when scanning if a package is inside a "
"git repository when any of its ancestor paths is a symlink. [\\#8186]"
"(https://github.com/rust-lang/cargo/pull/8186)"
msgstr ""

#: src/CHANGELOG.md:5023
msgid ""
"Fixed `cargo update` with an unused `[patch]` so that it does not get stuck "
"and refuse to update. [\\#8243](https://github.com/rust-lang/cargo/pull/8243)"
msgstr ""

#: src/CHANGELOG.md:5026
msgid ""
"Fixed a situation where Cargo would hang if stderr is closed, and the "
"compiler generated a large number of messages. [\\#8247](https://github.com/"
"rust-lang/cargo/pull/8247)"
msgstr ""

#: src/CHANGELOG.md:5029
msgid ""
"Fixed backtraces on macOS not showing filenames or line numbers. As a "
"consequence of this, binary executables on apple targets do not include a "
"hash in the filename in Cargo's cache. This means Cargo can only track one "
"copy, so if you switch features or rustc versions, Cargo will need to "
"rebuild the executable. [\\#8329](https://github.com/rust-lang/cargo/pull/"
"8329) [\\#8335](https://github.com/rust-lang/cargo/pull/8335)"
msgstr ""

#: src/CHANGELOG.md:5036
msgid ""
"Fixed fingerprinting when using lld on Windows with a dylib. Cargo was "
"erroneously thinking the dylib was never fresh. [\\#8290](https://github.com/"
"rust-lang/cargo/pull/8290) [\\#8335](https://github.com/rust-lang/cargo/pull/"
"8335)"
msgstr ""

#: src/CHANGELOG.md:5042
msgid ""
"Fixed passing the full path for `--target` to `rustdoc` when using JSON spec "
"targets. [\\#8094](https://github.com/rust-lang/cargo/pull/8094)"
msgstr ""

#: src/CHANGELOG.md:5045
msgid ""
"`-Cembed-bitcode=no` renamed to `-Cbitcode-in-rlib=no` [\\#8134](https://"
"github.com/rust-lang/cargo/pull/8134)"
msgstr ""

#: src/CHANGELOG.md:5047
msgid ""
"Added new `resolver` field to `Cargo.toml` to opt-in to the new feature "
"resolver. [\\#8129](https://github.com/rust-lang/cargo/pull/8129)"
msgstr ""

#: src/CHANGELOG.md:5050
msgid ""
"`-Zbuild-std` no longer treats std dependencies as \"local\". This means "
"that it won't use incremental compilation for those dependencies, removes "
"them from dep-info files, and caps lints at \"allow\". [\\#8177](https://"
"github.com/rust-lang/cargo/pull/8177)"
msgstr ""

#: src/CHANGELOG.md:5054
msgid ""
"Added `-Zmultitarget` which allows multiple `--target` flags to build the "
"same thing for multiple targets at once. [docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/unstable.html#multitarget) [\\#8167](https://"
"github.com/rust-lang/cargo/pull/8167)"
msgstr ""

#: src/CHANGELOG.md:5058
msgid ""
"Added `strip` option to the profile to remove symbols and debug information. "
"[docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#profile-strip-option) [\\#8246](https://github.com/rust-lang/"
"cargo/pull/8246)"
msgstr ""

#: src/CHANGELOG.md:5061
msgid ""
"Fixed panic with `cargo tree --target=all -Zfeatures=all`. [\\#8269](https://"
"github.com/rust-lang/cargo/pull/8269)"
msgstr ""

#: src/CHANGELOG.md:5064
msgid "Cargo 1.44 (2020-06-04)"
msgstr ""

#: src/CHANGELOG.md:5065
msgid ""
"[bda50510...rust-1.44.0](https://github.com/rust-lang/cargo/compare/"
"bda50510...rust-1.44.0)"
msgstr ""

#: src/CHANGELOG.md:5068
msgid ""
"🔥 Added the `cargo tree` command. [docs](https://doc.rust-lang.org/nightly/"
"cargo/commands/cargo-tree.html) [\\#8062](https://github.com/rust-lang/cargo/"
"pull/8062)"
msgstr ""

#: src/CHANGELOG.md:5071
msgid ""
"Added warnings if a package has Windows-restricted filenames (like `nul`, "
"`con`, `aux`, `prn`, etc.). [\\#7959](https://github.com/rust-lang/cargo/"
"pull/7959)"
msgstr ""

#: src/CHANGELOG.md:5074
msgid ""
"Added a `\"build-finished\"` JSON message when compilation is complete so "
"that tools can detect when they can stop listening for JSON messages with "
"commands like `cargo run` or `cargo test`. [\\#8069](https://github.com/rust-"
"lang/cargo/pull/8069)"
msgstr ""

#: src/CHANGELOG.md:5080
msgid ""
"Valid package names are now restricted to Unicode XID identifiers. This is "
"mostly the same as before, except package names cannot start with a number "
"or `-`. [\\#7959](https://github.com/rust-lang/cargo/pull/7959)"
msgstr ""

#: src/CHANGELOG.md:5084
msgid ""
"`cargo new` and `init` will warn or reject additional package names "
"(reserved Windows names, reserved Cargo directories, non-ASCII names, "
"conflicting std names like `core`, etc.). [\\#7959](https://github.com/rust-"
"lang/cargo/pull/7959)"
msgstr ""

#: src/CHANGELOG.md:5088
msgid ""
"Tests are no longer hard-linked into the output directory (`target/debug/`). "
"This ensures tools will have access to debug symbols and execute tests in "
"the same way as Cargo. Tools should use JSON messages to discover the path "
"to the executable. [\\#7965](https://github.com/rust-lang/cargo/pull/7965)"
msgstr ""

#: src/CHANGELOG.md:5093
msgid ""
"Updating git submodules now displays an \"Updating\" message for each "
"submodule. [\\#7989](https://github.com/rust-lang/cargo/pull/7989)"
msgstr ""

#: src/CHANGELOG.md:5096
msgid ""
"File modification times are now preserved when extracting a `.crate` file. "
"This reverses the change made in 1.40 where the mtime was not preserved. "
"[\\#7935](https://github.com/rust-lang/cargo/pull/7935)"
msgstr ""

#: src/CHANGELOG.md:5099
msgid ""
"Build script warnings are now displayed separately when the build script "
"fails. [\\#8017](https://github.com/rust-lang/cargo/pull/8017)"
msgstr ""

#: src/CHANGELOG.md:5102
msgid ""
"Removed the `git-checkout` subcommand. [\\#8040](https://github.com/rust-"
"lang/cargo/pull/8040)"
msgstr ""

#: src/CHANGELOG.md:5104
msgid ""
"The progress bar is now enabled for all unix platforms. Previously it was "
"only Linux, macOS, and FreeBSD. [\\#8054](https://github.com/rust-lang/cargo/"
"pull/8054)"
msgstr ""

#: src/CHANGELOG.md:5107
msgid ""
"Artifacts generated by pre-release versions of `rustc` now share the same "
"filenames. This means that changing nightly versions will not leave stale "
"files in the build directory. [\\#8073](https://github.com/rust-lang/cargo/"
"pull/8073)"
msgstr ""

#: src/CHANGELOG.md:5111
msgid ""
"Invalid package names are rejected when using renamed dependencies. [\\#8090]"
"(https://github.com/rust-lang/cargo/pull/8090)"
msgstr ""

#: src/CHANGELOG.md:5113
msgid ""
"Added a certain class of HTTP2 errors as \"spurious\" that will get retried. "
"[\\#8102](https://github.com/rust-lang/cargo/pull/8102)"
msgstr ""

#: src/CHANGELOG.md:5115
msgid ""
"Allow `cargo package --list` to succeed, even if there are other validation "
"errors (such as `Cargo.lock` generation problem, or missing dependencies). "
"[\\#8175](https://github.com/rust-lang/cargo/pull/8175) [\\#8215](https://"
"github.com/rust-lang/cargo/pull/8215)"
msgstr ""

#: src/CHANGELOG.md:5121
msgid ""
"Cargo no longer buffers excessive amounts of compiler output in memory. "
"[\\#7838](https://github.com/rust-lang/cargo/pull/7838)"
msgstr ""

#: src/CHANGELOG.md:5123
msgid ""
"Symbolic links in git repositories now work on Windows. [\\#7996](https://"
"github.com/rust-lang/cargo/pull/7996)"
msgstr ""

#: src/CHANGELOG.md:5125
msgid ""
"Fixed an issue where `profile.dev` was not loaded from a config file with "
"`cargo test` when the `dev` profile was not defined in `Cargo.toml`. "
"[\\#8012](https://github.com/rust-lang/cargo/pull/8012)"
msgstr ""

#: src/CHANGELOG.md:5128
msgid ""
"When a binary is built as an implicit dependency of an integration test, it "
"now checks `dep_name/feature_name` syntax in `required-features` correctly. "
"[\\#8020](https://github.com/rust-lang/cargo/pull/8020)"
msgstr ""

#: src/CHANGELOG.md:5131
msgid ""
"Fixed an issue where Cargo would not detect that an executable (such as an "
"integration test) needs to be rebuilt when the previous build was "
"interrupted with Ctrl-C. [\\#8087](https://github.com/rust-lang/cargo/pull/"
"8087)"
msgstr ""

#: src/CHANGELOG.md:5135
msgid ""
"Protect against some (unknown) situations where Cargo could panic when the "
"system monotonic clock doesn't appear to be monotonic. [\\#8114](https://"
"github.com/rust-lang/cargo/pull/8114)"
msgstr ""

#: src/CHANGELOG.md:5138
msgid ""
"Fixed panic with `cargo clean -p` if the package has a build script. "
"[\\#8216](https://github.com/rust-lang/cargo/pull/8216)"
msgstr ""

#: src/CHANGELOG.md:5142
msgid ""
"Fixed panic with new feature resolver and required-features. [\\#7962]"
"(https://github.com/rust-lang/cargo/pull/7962)"
msgstr ""

#: src/CHANGELOG.md:5144
msgid ""
"Added `RUSTC_WORKSPACE_WRAPPER` environment variable, which provides a way "
"to wrap `rustc` for workspace members only, and affects the filename hash so "
"that artifacts produced by the wrapper are cached separately. This usage can "
"be seen on nightly clippy with `cargo clippy -Zunstable-options`. [\\#7533]"
"(https://github.com/rust-lang/cargo/pull/7533)"
msgstr ""

#: src/CHANGELOG.md:5149
msgid ""
"Added `--unit-graph` CLI option to display Cargo's internal dependency graph "
"as JSON. [\\#7977](https://github.com/rust-lang/cargo/pull/7977)"
msgstr ""

#: src/CHANGELOG.md:5152
msgid ""
"Changed `-Zbuild_dep` to `-Zhost_dep`, and added proc-macros to the feature "
"decoupling logic. [\\#8003](https://github.com/rust-lang/cargo/pull/8003) "
"[\\#8028](https://github.com/rust-lang/cargo/pull/8028)"
msgstr ""

#: src/CHANGELOG.md:5156
msgid ""
"Fixed so that `--crate-version` is not automatically passed when the flag is "
"found in `RUSTDOCFLAGS`. [\\#8014](https://github.com/rust-lang/cargo/pull/"
"8014)"
msgstr ""

#: src/CHANGELOG.md:5159
msgid ""
"Fixed panic with `-Zfeatures=dev_dep` and `check --profile=test`. [\\#8027]"
"(https://github.com/rust-lang/cargo/pull/8027)"
msgstr ""

#: src/CHANGELOG.md:5161
msgid ""
"Fixed panic with `-Zfeatures=itarget` with certain host dependencies. "
"[\\#8048](https://github.com/rust-lang/cargo/pull/8048)"
msgstr ""

#: src/CHANGELOG.md:5163
msgid ""
"Added support for `-Cembed-bitcode=no`, which provides a performance boost "
"and disk-space usage reduction for non-LTO builds. [\\#8066](https://"
"github.com/rust-lang/cargo/pull/8066)"
msgstr ""

#: src/CHANGELOG.md:5166
msgid ""
"`-Zpackage-features` has been extended with several changes intended to make "
"it easier to select features on the command-line in a workspace. [\\#8074]"
"(https://github.com/rust-lang/cargo/pull/8074)"
msgstr ""

#: src/CHANGELOG.md:5170
msgid "Cargo 1.43 (2020-04-23)"
msgstr ""

#: src/CHANGELOG.md:5171
msgid ""
"[9d32b7b0...rust-1.43.0](https://github.com/rust-lang/cargo/compare/"
"9d32b7b0...rust-1.43.0)"
msgstr ""

#: src/CHANGELOG.md:5174
msgid ""
"🔥 Profiles may now be specified in config files (and environment "
"variables). [docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"config.html#profile) [\\#7823](https://github.com/rust-lang/cargo/pull/7823)"
msgstr ""

#: src/CHANGELOG.md:5177
msgid ""
"❗ Added `CARGO_BIN_EXE_<name>` environment variable when building "
"integration tests. This variable contains the path to any `[[bin]]` targets "
"in the package. Integration tests should use the `env!` macro to determine "
"the path to a binary to execute. [docs](https://doc.rust-lang.org/nightly/"
"cargo/reference/environment-variables.html#environment-variables-cargo-sets-"
"for-crates) [\\#7697](https://github.com/rust-lang/cargo/pull/7697)"
msgstr ""

#: src/CHANGELOG.md:5185
msgid ""
"`cargo install --git` now honors workspaces in a git repository. This allows "
"workspace settings, like `[patch]`, `[replace]`, or `[profile]` to be used. "
"[\\#7768](https://github.com/rust-lang/cargo/pull/7768)"
msgstr ""

#: src/CHANGELOG.md:5188
msgid ""
"`cargo new` will now run `rustfmt` on the new files to pick up rustfmt "
"settings like `tab_spaces` so that the new file matches the user's preferred "
"indentation settings. [\\#7827](https://github.com/rust-lang/cargo/pull/7827)"
msgstr ""

#: src/CHANGELOG.md:5192
msgid ""
"Environment variables printed with \"very verbose\" output (`-vv`) are now "
"consistently sorted. [\\#7877](https://github.com/rust-lang/cargo/pull/7877)"
msgstr ""

#: src/CHANGELOG.md:5195
msgid ""
"Debug logging for fingerprint rebuild-detection now includes more "
"information. [\\#7888](https://github.com/rust-lang/cargo/pull/7888) "
"[\\#7890](https://github.com/rust-lang/cargo/pull/7890) [\\#7952](https://"
"github.com/rust-lang/cargo/pull/7952)"
msgstr ""

#: src/CHANGELOG.md:5199
msgid ""
"Added warning during publish if the license-file doesn't exist. [\\#7905]"
"(https://github.com/rust-lang/cargo/pull/7905)"
msgstr ""

#: src/CHANGELOG.md:5201
msgid ""
"The `license-file` file is automatically included during publish, even if it "
"is not explicitly listed in the `include` list or is in a location outside "
"of the root of the package. [\\#7905](https://github.com/rust-lang/cargo/"
"pull/7905)"
msgstr ""

#: src/CHANGELOG.md:5205
msgid ""
"`CARGO_CFG_DEBUG_ASSERTIONS` and `CARGO_CFG_PROC_MACRO` are no longer set "
"when running a build script. These were inadvertently set in the past, but "
"had no meaning as they were always true. Additionally, `cfg(proc-macro)` is "
"no longer supported in a `target` expression. [\\#7943](https://github.com/"
"rust-lang/cargo/pull/7943) [\\#7970](https://github.com/rust-lang/cargo/pull/"
"7970)"
msgstr ""

#: src/CHANGELOG.md:5213
msgid ""
"Global command-line flags now work with aliases (like `cargo -v b`). "
"[\\#7837](https://github.com/rust-lang/cargo/pull/7837)"
msgstr ""

#: src/CHANGELOG.md:5215
msgid ""
"Required-features using dependency syntax (like `renamed_dep/feat_name`) now "
"handle renamed dependencies correctly. [\\#7855](https://github.com/rust-"
"lang/cargo/pull/7855)"
msgstr ""

#: src/CHANGELOG.md:5218
msgid ""
"Fixed a rare situation where if a build script is run multiple times during "
"the same build, Cargo will now keep the results separate instead of losing "
"the output of the first execution. [\\#7857](https://github.com/rust-lang/"
"cargo/pull/7857)"
msgstr ""

#: src/CHANGELOG.md:5222
msgid ""
"Fixed incorrect interpretation of environment variable "
"`CARGO_TARGET_*_RUNNER=true` as a boolean. Also improved related env var "
"error messages. [\\#7891](https://github.com/rust-lang/cargo/pull/7891)"
msgstr ""

#: src/CHANGELOG.md:5226
msgid ""
"Updated internal libgit2 library, bringing various fixes to git support. "
"[\\#7939](https://github.com/rust-lang/cargo/pull/7939)"
msgstr ""

#: src/CHANGELOG.md:5228
msgid ""
"`cargo package` / `cargo publish` should no longer buffer the entire "
"contents of each file in memory. [\\#7946](https://github.com/rust-lang/"
"cargo/pull/7946)"
msgstr ""

#: src/CHANGELOG.md:5231
msgid ""
"Ignore more invalid `Cargo.toml` files in a git dependency. Cargo currently "
"walks the entire repo to find the requested package. Certain invalid "
"manifests were already skipped, and now it should skip all of them. [\\#7947]"
"(https://github.com/rust-lang/cargo/pull/7947)"
msgstr ""

#: src/CHANGELOG.md:5237
msgid ""
"Added `build.out-dir` config variable to set the output directory. [\\#7810]"
"(https://github.com/rust-lang/cargo/pull/7810)"
msgstr ""

#: src/CHANGELOG.md:5239
msgid ""
"Added `-Zjobserver-per-rustc` feature to support improved performance for "
"parallel rustc. [\\#7731](https://github.com/rust-lang/cargo/pull/7731)"
msgstr ""

#: src/CHANGELOG.md:5242
msgid ""
"Fixed filename collision with `build-std` and crates like `cc`. [\\#7860]"
"(https://github.com/rust-lang/cargo/pull/7860)"
msgstr ""

#: src/CHANGELOG.md:5244
msgid ""
"`-Ztimings` will now save its report even if there is an error. [\\#7872]"
"(https://github.com/rust-lang/cargo/pull/7872)"
msgstr ""

#: src/CHANGELOG.md:5246
msgid ""
"Updated `--config` command-line flag to support taking a path to a config "
"file to load. [\\#7901](https://github.com/rust-lang/cargo/pull/7901)"
msgstr ""

#: src/CHANGELOG.md:5249
msgid ""
"Added new feature resolver. [\\#7820](https://github.com/rust-lang/cargo/"
"pull/7820)"
msgstr ""

#: src/CHANGELOG.md:5251
msgid ""
"Rustdoc docs now automatically include the version of the package in the "
"side bar (requires `-Z crate-versions` flag). [\\#7903](https://github.com/"
"rust-lang/cargo/pull/7903)"
msgstr ""

#: src/CHANGELOG.md:5255
msgid "Cargo 1.42 (2020-03-12)"
msgstr ""

#: src/CHANGELOG.md:5256
msgid ""
"[0bf7aafe...rust-1.42.0](https://github.com/rust-lang/cargo/compare/"
"0bf7aafe...rust-1.42.0)"
msgstr ""

#: src/CHANGELOG.md:5259
msgid ""
"Added documentation on git authentication. [\\#7658](https://github.com/rust-"
"lang/cargo/pull/7658)"
msgstr ""

#: src/CHANGELOG.md:5261
msgid ""
"Bitbucket Pipeline badges are now supported on crates.io. [\\#7663](https://"
"github.com/rust-lang/cargo/pull/7663)"
msgstr ""

#: src/CHANGELOG.md:5263
msgid ""
"`cargo vendor` now accepts the `--versioned-dirs` option to force it to "
"always include the version number in each package's directory name. [\\#7631]"
"(https://github.com/rust-lang/cargo/pull/7631)"
msgstr ""

#: src/CHANGELOG.md:5266
msgid ""
"The `proc_macro` crate is now automatically added to the extern prelude for "
"proc-macro packages. This means that `extern crate proc_macro;` is no longer "
"necessary for proc-macros. [\\#7700](https://github.com/rust-lang/cargo/pull/"
"7700)"
msgstr ""

#: src/CHANGELOG.md:5272
msgid ""
"Emit a warning if `debug_assertions`, `test`, `proc_macro`, or `feature=` is "
"used in a `cfg()` expression. [\\#7660](https://github.com/rust-lang/cargo/"
"pull/7660)"
msgstr ""

#: src/CHANGELOG.md:5275
msgid ""
"Large update to the Cargo documentation, adding new chapters on Cargo "
"targets, workspaces, and features. [\\#7733](https://github.com/rust-lang/"
"cargo/pull/7733)"
msgstr ""

#: src/CHANGELOG.md:5278
msgid ""
"Windows: `.lib` DLL import libraries are now copied next to the dll for all "
"Windows MSVC targets. Previously it was only supported for `pc-windows-"
"msvc`. This adds DLL support for `uwp-windows-msvc` targets. [\\#7758]"
"(https://github.com/rust-lang/cargo/pull/7758)"
msgstr ""

#: src/CHANGELOG.md:5282
msgid ""
"The `ar` field in the `[target]` configuration is no longer read. It has "
"been ignored for over 4 years. [\\#7763](https://github.com/rust-lang/cargo/"
"pull/7763)"
msgstr ""

#: src/CHANGELOG.md:5285
msgid ""
"Bash completion file simplified and updated for latest changes. [\\#7789]"
"(https://github.com/rust-lang/cargo/pull/7789)"
msgstr ""

#: src/CHANGELOG.md:5287
msgid ""
"Credentials are only loaded when needed, instead of every Cargo command. "
"[\\#7774](https://github.com/rust-lang/cargo/pull/7774)"
msgstr ""

#: src/CHANGELOG.md:5291
msgid ""
"Removed `--offline` empty index check, which was a false positive in some "
"cases. [\\#7655](https://github.com/rust-lang/cargo/pull/7655)"
msgstr ""

#: src/CHANGELOG.md:5294
msgid ""
"Files and directories starting with a `.` can now be included in a package "
"by adding it to the `include` list. [\\#7680](https://github.com/rust-lang/"
"cargo/pull/7680)"
msgstr ""

#: src/CHANGELOG.md:5297
msgid ""
"Fixed `cargo login` removing alternative registry tokens when previous "
"entries existed in the credentials file. [\\#7708](https://github.com/rust-"
"lang/cargo/pull/7708)"
msgstr ""

#: src/CHANGELOG.md:5300
msgid ""
"Fixed `cargo vendor` from panicking when used with alternative registries. "
"[\\#7718](https://github.com/rust-lang/cargo/pull/7718)"
msgstr ""

#: src/CHANGELOG.md:5302
msgid ""
"Fixed incorrect explanation in the fingerprint debug log message. [\\#7749]"
"(https://github.com/rust-lang/cargo/pull/7749)"
msgstr ""

#: src/CHANGELOG.md:5304
msgid ""
"A `[source]` that is defined multiple times will now result in an error. "
"Previously it was randomly picking a source, which could cause non-"
"deterministic behavior. [\\#7751](https://github.com/rust-lang/cargo/pull/"
"7751)"
msgstr ""

#: src/CHANGELOG.md:5308
msgid ""
"`dep_kinds` in `cargo metadata` are now de-duplicated. [\\#7756](https://"
"github.com/rust-lang/cargo/pull/7756)"
msgstr ""

#: src/CHANGELOG.md:5310
msgid ""
"Fixed packaging where `Cargo.lock` was listed in `.gitignore` in a "
"subdirectory inside a git repository. Previously it was assuming "
"`Cargo.lock` was at the root of the repo. [\\#7779](https://github.com/rust-"
"lang/cargo/pull/7779)"
msgstr ""

#: src/CHANGELOG.md:5314
msgid ""
"Partial file transfer errors will now cause an automatic retry. [\\#7788]"
"(https://github.com/rust-lang/cargo/pull/7788)"
msgstr ""

#: src/CHANGELOG.md:5316
msgid ""
"Linux: Fixed panic if CPU iowait stat decreases. [\\#7803](https://"
"github.com/rust-lang/cargo/pull/7803)"
msgstr ""

#: src/CHANGELOG.md:5318
msgid ""
"Fixed using the wrong sysroot for detecting host compiler settings when `--"
"sysroot` is passed in via `RUSTFLAGS`. [\\#7798](https://github.com/rust-"
"lang/cargo/pull/7798)"
msgstr ""

#: src/CHANGELOG.md:5323
msgid ""
"`build-std` now uses `--extern` instead of `--sysroot` to find sysroot "
"packages. [\\#7699](https://github.com/rust-lang/cargo/pull/7699)"
msgstr ""

#: src/CHANGELOG.md:5326
msgid ""
"Added `--config` command-line option to set config settings. [\\#7649]"
"(https://github.com/rust-lang/cargo/pull/7649)"
msgstr ""

#: src/CHANGELOG.md:5328
msgid ""
"Added `include` config setting which allows including another config file. "
"[\\#7649](https://github.com/rust-lang/cargo/pull/7649)"
msgstr ""

#: src/CHANGELOG.md:5330
msgid ""
"Profiles in config files now support any named profile. Previously it was "
"limited to dev/release. [\\#7750](https://github.com/rust-lang/cargo/pull/"
"7750)"
msgstr ""

#: src/CHANGELOG.md:5334
msgid "Cargo 1.41 (2020-01-30)"
msgstr ""

#: src/CHANGELOG.md:5335
msgid ""
"[5da4b4d4...rust-1.41.0](https://github.com/rust-lang/cargo/compare/"
"5da4b4d4...rust-1.41.0)"
msgstr ""

#: src/CHANGELOG.md:5338
msgid ""
"🔥 Cargo now uses a new `Cargo.lock` file format. This new format should "
"support easier merges in source control systems. Projects using the old "
"format will continue to use the old format, only new `Cargo.lock` files will "
"use the new format. [\\#7579](https://github.com/rust-lang/cargo/pull/7579)"
msgstr ""

#: src/CHANGELOG.md:5343
msgid ""
"🔥 `cargo install` will now upgrade already installed packages instead of "
"failing. [\\#7560](https://github.com/rust-lang/cargo/pull/7560)"
msgstr ""

#: src/CHANGELOG.md:5346
msgid ""
"🔥 Profile overrides have been added. This allows overriding profiles for "
"individual dependencies or build scripts. See [the documentation](https://"
"doc.rust-lang.org/nightly/cargo/reference/profiles.html#overrides) for more. "
"[\\#7591](https://github.com/rust-lang/cargo/pull/7591)"
msgstr ""

#: src/CHANGELOG.md:5351
msgid ""
"Added new documentation for build scripts. [\\#7565](https://github.com/rust-"
"lang/cargo/pull/7565)"
msgstr ""

#: src/CHANGELOG.md:5353
msgid ""
"Added documentation for Cargo's JSON output. [\\#7595](https://github.com/"
"rust-lang/cargo/pull/7595)"
msgstr ""

#: src/CHANGELOG.md:5355
msgid ""
"Significant expansion of config and environment variable documentation. "
"[\\#7650](https://github.com/rust-lang/cargo/pull/7650)"
msgstr ""

#: src/CHANGELOG.md:5357
msgid ""
"Add back support for `BROWSER` environment variable for `cargo doc --open`. "
"[\\#7576](https://github.com/rust-lang/cargo/pull/7576)"
msgstr ""

#: src/CHANGELOG.md:5359
msgid ""
"Added `kind` and `platform` for dependencies in `cargo metadata`. [\\#7132]"
"(https://github.com/rust-lang/cargo/pull/7132)"
msgstr ""

#: src/CHANGELOG.md:5361
msgid ""
"The `OUT_DIR` value is now included in the `build-script-executed` JSON "
"message. [\\#7622](https://github.com/rust-lang/cargo/pull/7622)"
msgstr ""

#: src/CHANGELOG.md:5365
msgid ""
"`cargo doc` will now document private items in binaries by default. [\\#7593]"
"(https://github.com/rust-lang/cargo/pull/7593)"
msgstr ""

#: src/CHANGELOG.md:5367
msgid ""
"Subcommand typo suggestions now include aliases. [\\#7486](https://"
"github.com/rust-lang/cargo/pull/7486)"
msgstr ""

#: src/CHANGELOG.md:5369
msgid ""
"Tweak how the \"already existing...\" comment is added to `.gitignore`. "
"[\\#7570](https://github.com/rust-lang/cargo/pull/7570)"
msgstr ""

#: src/CHANGELOG.md:5371
msgid ""
"Ignore `cargo login` text from copy/paste in token. [\\#7588](https://"
"github.com/rust-lang/cargo/pull/7588)"
msgstr ""

#: src/CHANGELOG.md:5373
msgid ""
"Windows: Ignore errors for locking files when not supported by the "
"filesystem. [\\#7602](https://github.com/rust-lang/cargo/pull/7602)"
msgstr ""

#: src/CHANGELOG.md:5375
msgid ""
"Remove `**/*.rs.bk` from `.gitignore`. [\\#7647](https://github.com/rust-"
"lang/cargo/pull/7647)"
msgstr ""

#: src/CHANGELOG.md:5379
msgid ""
"Fix unused warnings for some keys in the `build` config section. [\\#7575]"
"(https://github.com/rust-lang/cargo/pull/7575)"
msgstr ""

#: src/CHANGELOG.md:5381
msgid ""
"Linux: Don't panic when parsing `/proc/stat`. [\\#7580](https://github.com/"
"rust-lang/cargo/pull/7580)"
msgstr ""

#: src/CHANGELOG.md:5383
msgid ""
"Don't show canonical path in `cargo vendor`. [\\#7629](https://github.com/"
"rust-lang/cargo/pull/7629)"
msgstr ""

#: src/CHANGELOG.md:5389
msgid "Cargo 1.40 (2019-12-19)"
msgstr ""

#: src/CHANGELOG.md:5390
msgid ""
"[1c6ec66d...5da4b4d4](https://github.com/rust-lang/cargo/compare/"
"1c6ec66d...5da4b4d4)"
msgstr ""

#: src/CHANGELOG.md:5393
msgid ""
"Added `http.ssl-version` config option to control the version of TLS, along "
"with min/max versions. [\\#7308](https://github.com/rust-lang/cargo/pull/"
"7308)"
msgstr ""

#: src/CHANGELOG.md:5396
msgid ""
"🔥 Compiler warnings are now cached on disk. If a build generates warnings, "
"re-running the build will now re-display the warnings. [\\#7450](https://"
"github.com/rust-lang/cargo/pull/7450)"
msgstr ""

#: src/CHANGELOG.md:5399
msgid ""
"Added `--filter-platform` option to `cargo metadata` to narrow the nodes "
"shown in the resolver graph to only packages included for the given target "
"triple. [\\#7376](https://github.com/rust-lang/cargo/pull/7376)"
msgstr ""

#: src/CHANGELOG.md:5405
msgid ""
"Cargo's \"platform\" `cfg` parsing has been extracted into a separate crate "
"named `cargo-platform`. [\\#7375](https://github.com/rust-lang/cargo/pull/"
"7375)"
msgstr ""

#: src/CHANGELOG.md:5408
msgid ""
"Dependencies extracted into Cargo's cache no longer preserve mtimes to "
"reduce syscall overhead. [\\#7465](https://github.com/rust-lang/cargo/pull/"
"7465)"
msgstr ""

#: src/CHANGELOG.md:5411
msgid ""
"Windows: EXE files no longer include a metadata hash in the filename. This "
"helps with debuggers correlating the filename with the PDB file. [\\#7400]"
"(https://github.com/rust-lang/cargo/pull/7400)"
msgstr ""

#: src/CHANGELOG.md:5414
msgid ""
"Wasm32: `.wasm` files are no longer treated as an \"executable\", allowing "
"`cargo test` and `cargo run` to work properly with the generated `.js` file. "
"[\\#7476](https://github.com/rust-lang/cargo/pull/7476)"
msgstr ""

#: src/CHANGELOG.md:5417
msgid ""
"crates.io now supports SPDX 3.6 licenses. [\\#7481](https://github.com/rust-"
"lang/cargo/pull/7481)"
msgstr ""

#: src/CHANGELOG.md:5419
msgid ""
"Improved cyclic dependency error message. [\\#7470](https://github.com/rust-"
"lang/cargo/pull/7470)"
msgstr ""

#: src/CHANGELOG.md:5421
msgid ""
"Bare `cargo clean` no longer locks the package cache. [\\#7502](https://"
"github.com/rust-lang/cargo/pull/7502)"
msgstr ""

#: src/CHANGELOG.md:5423
msgid ""
"`cargo publish` now allows dev-dependencies without a version key to be "
"published. A git or path-only dev-dependency will be removed from the "
"package manifest before uploading. [\\#7333](https://github.com/rust-lang/"
"cargo/pull/7333)"
msgstr ""

#: src/CHANGELOG.md:5427
msgid ""
"`--features` and `--no-default-features` in the root of a virtual workspace "
"will now generate an error instead of being ignored. [\\#7507](https://"
"github.com/rust-lang/cargo/pull/7507)"
msgstr ""

#: src/CHANGELOG.md:5430
msgid ""
"Generated files (like `Cargo.toml` and `Cargo.lock`) in a package archive "
"now have their timestamp set to the current time instead of the epoch. "
"[\\#7523](https://github.com/rust-lang/cargo/pull/7523)"
msgstr ""

#: src/CHANGELOG.md:5433
msgid ""
"The `-Z` flag parser is now more strict, rejecting more invalid syntax. "
"[\\#7531](https://github.com/rust-lang/cargo/pull/7531)"
msgstr ""

#: src/CHANGELOG.md:5437
msgid ""
"Fixed an issue where if a package had an `include` field, and `Cargo.lock` "
"in `.gitignore`, and a binary or example target, and the `Cargo.lock` exists "
"in the current project, it would fail to publish complaining the "
"`Cargo.lock` was dirty. [\\#7448](https://github.com/rust-lang/cargo/pull/"
"7448)"
msgstr ""

#: src/CHANGELOG.md:5442
msgid ""
"Fixed a panic in a particular combination of `[patch]` entries. [\\#7452]"
"(https://github.com/rust-lang/cargo/pull/7452)"
msgstr ""

#: src/CHANGELOG.md:5444
msgid ""
"Windows: Better error message when `cargo test` or `rustc` crashes in an "
"abnormal way, such as a signal or seg fault. [\\#7535](https://github.com/"
"rust-lang/cargo/pull/7535)"
msgstr ""

#: src/CHANGELOG.md:5449
msgid ""
"The `mtime-on-use` feature may now be enabled via the "
"`unstable.mtime_on_use` config option. [\\#7411](https://github.com/rust-"
"lang/cargo/pull/7411)"
msgstr ""

#: src/CHANGELOG.md:5452
msgid ""
"Added support for named profiles. [\\#6989](https://github.com/rust-lang/"
"cargo/pull/6989)"
msgstr ""

#: src/CHANGELOG.md:5454
msgid ""
"Added `-Zpanic-abort-tests` to allow building and running tests with the "
"\"abort\" panic strategy. [\\#7460](https://github.com/rust-lang/cargo/pull/"
"7460)"
msgstr ""

#: src/CHANGELOG.md:5457
msgid ""
"Changed `build-std` to use `--sysroot`. [\\#7421](https://github.com/rust-"
"lang/cargo/pull/7421)"
msgstr ""

#: src/CHANGELOG.md:5459
msgid ""
"Various fixes and enhancements to `-Ztimings`. [\\#7395](https://github.com/"
"rust-lang/cargo/pull/7395) [\\#7398](https://github.com/rust-lang/cargo/pull/"
"7398) [\\#7397](https://github.com/rust-lang/cargo/pull/7397) [\\#7403]"
"(https://github.com/rust-lang/cargo/pull/7403) [\\#7428](https://github.com/"
"rust-lang/cargo/pull/7428) [\\#7429](https://github.com/rust-lang/cargo/pull/"
"7429)"
msgstr ""

#: src/CHANGELOG.md:5466
msgid ""
"Profile overrides have renamed the syntax to be "
"`[profile.dev.package.NAME]`. [\\#7504](https://github.com/rust-lang/cargo/"
"pull/7504)"
msgstr ""

#: src/CHANGELOG.md:5469
msgid ""
"Fixed warnings for unused profile overrides in a workspace. [\\#7536]"
"(https://github.com/rust-lang/cargo/pull/7536)"
msgstr ""

#: src/CHANGELOG.md:5472
msgid "Cargo 1.39 (2019-11-07)"
msgstr ""

#: src/CHANGELOG.md:5473
msgid ""
"[e853aa97...1c6ec66d](https://github.com/rust-lang/cargo/compare/"
"e853aa97...1c6ec66d)"
msgstr ""

#: src/CHANGELOG.md:5476
msgid ""
"Config files may now use the `.toml` filename extension. [\\#7295](https://"
"github.com/rust-lang/cargo/pull/7295)"
msgstr ""

#: src/CHANGELOG.md:5478
msgid ""
"The `--workspace` flag has been added as an alias for `--all` to help avoid "
"confusion about the meaning of \"all\". [\\#7241](https://github.com/rust-"
"lang/cargo/pull/7241)"
msgstr ""

#: src/CHANGELOG.md:5481
msgid ""
"The `publish` field has been added to `cargo metadata`. [\\#7354](https://"
"github.com/rust-lang/cargo/pull/7354)"
msgstr ""

#: src/CHANGELOG.md:5485
msgid ""
"Display more information if parsing the output from `rustc` fails. [\\#7236]"
"(https://github.com/rust-lang/cargo/pull/7236)"
msgstr ""

#: src/CHANGELOG.md:5487
msgid ""
"TOML errors now show the column number. [\\#7248](https://github.com/rust-"
"lang/cargo/pull/7248)"
msgstr ""

#: src/CHANGELOG.md:5489
msgid ""
"`cargo vendor` no longer deletes files in the `vendor` directory that starts "
"with a `.`. [\\#7242](https://github.com/rust-lang/cargo/pull/7242)"
msgstr ""

#: src/CHANGELOG.md:5492
msgid ""
"`cargo fetch` will now show manifest warnings. [\\#7243](https://github.com/"
"rust-lang/cargo/pull/7243)"
msgstr ""

#: src/CHANGELOG.md:5494
msgid ""
"`cargo publish` will now check git submodules if they contain any "
"uncommitted changes. [\\#7245](https://github.com/rust-lang/cargo/pull/7245)"
msgstr ""

#: src/CHANGELOG.md:5497
msgid ""
"In a build script, `cargo:rustc-flags` now allows `-l` and `-L` flags "
"without spaces. [\\#7257](https://github.com/rust-lang/cargo/pull/7257)"
msgstr ""

#: src/CHANGELOG.md:5500
msgid ""
"When `cargo install` replaces an older version of a package it will now "
"delete any installed binaries that are no longer present in the newly "
"installed version. [\\#7246](https://github.com/rust-lang/cargo/pull/7246)"
msgstr ""

#: src/CHANGELOG.md:5504
msgid ""
"A git dependency may now also specify a `version` key when published. The "
"`git` value will be stripped from the uploaded crate, matching the behavior "
"of `path` dependencies. [\\#7237](https://github.com/rust-lang/cargo/pull/"
"7237)"
msgstr ""

#: src/CHANGELOG.md:5508
msgid ""
"The behavior of workspace default-members has changed. The default-members "
"now only applies when running Cargo in the root of the workspace. Previously "
"it would always apply regardless of which directory Cargo is running in. "
"[\\#7270](https://github.com/rust-lang/cargo/pull/7270)"
msgstr ""

#: src/CHANGELOG.md:5512
msgid ""
"libgit2 updated pulling in all upstream changes. [\\#7275](https://"
"github.com/rust-lang/cargo/pull/7275)"
msgstr ""

#: src/CHANGELOG.md:5514
msgid ""
"Bump `home` dependency for locating home directories. [\\#7277](https://"
"github.com/rust-lang/cargo/pull/7277)"
msgstr ""

#: src/CHANGELOG.md:5516
msgid ""
"zsh completions have been updated. [\\#7296](https://github.com/rust-lang/"
"cargo/pull/7296)"
msgstr ""

#: src/CHANGELOG.md:5518
msgid ""
"SSL connect errors are now retried. [\\#7318](https://github.com/rust-lang/"
"cargo/pull/7318)"
msgstr ""

#: src/CHANGELOG.md:5520
msgid ""
"The jobserver has been changed to acquire N tokens (instead of N-1), and "
"then immediately acquires the extra token. This was changed to accommodate "
"the `cc` crate on Windows to allow it to release its implicit token. "
"[\\#7344](https://github.com/rust-lang/cargo/pull/7344)"
msgstr ""

#: src/CHANGELOG.md:5524
msgid ""
"The scheduling algorithm for choosing which crate to build next has been "
"changed. It now chooses the crate with the greatest number of transitive "
"crates waiting on it. Previously it used a maximum topological depth. "
"[\\#7390](https://github.com/rust-lang/cargo/pull/7390)"
msgstr ""

#: src/CHANGELOG.md:5528
msgid ""
"RUSTFLAGS are no longer incorporated in the metadata and filename hash, "
"reversing the change from 1.33 that added it. This means that any change to "
"RUSTFLAGS will cause a recompile, and will not affect symbol munging. "
"[\\#7459](https://github.com/rust-lang/cargo/pull/7459)"
msgstr ""

#: src/CHANGELOG.md:5534
msgid ""
"Git dependencies with submodules with shorthand SSH URLs (like "
"`git@github.com/user/repo.git`) should now work. [\\#7238](https://"
"github.com/rust-lang/cargo/pull/7238)"
msgstr ""

#: src/CHANGELOG.md:5537
msgid ""
"Handle broken symlinks when creating `.dSYM` symlinks on macOS. [\\#7268]"
"(https://github.com/rust-lang/cargo/pull/7268)"
msgstr ""

#: src/CHANGELOG.md:5539
msgid ""
"Fixed issues with multiple versions of the same crate in a `[patch]` table. "
"[\\#7303](https://github.com/rust-lang/cargo/pull/7303)"
msgstr ""

#: src/CHANGELOG.md:5541
msgid ""
"Fixed issue with custom target `.json` files where a substring of the name "
"matches an unsupported crate type (like \"bin\"). [\\#7363](https://"
"github.com/rust-lang/cargo/issues/7363)"
msgstr ""

#: src/CHANGELOG.md:5544
msgid ""
"Fixed issues with generating documentation for proc-macro crate types. "
"[\\#7159](https://github.com/rust-lang/cargo/pull/7159)"
msgstr ""

#: src/CHANGELOG.md:5546
msgid ""
"Fixed hang if Cargo panics within a build thread. [\\#7366](https://"
"github.com/rust-lang/cargo/pull/7366)"
msgstr ""

#: src/CHANGELOG.md:5548
msgid ""
"Fixed rebuild detection if a `build.rs` script issues different `rerun-if` "
"directives between builds. Cargo was erroneously causing a rebuild after the "
"change. [\\#7373](https://github.com/rust-lang/cargo/pull/7373)"
msgstr ""

#: src/CHANGELOG.md:5552
msgid ""
"Properly handle canonical URLs for `[patch]` table entries, preventing the "
"patch from working after the first time it is used. [\\#7368](https://"
"github.com/rust-lang/cargo/pull/7368)"
msgstr ""

#: src/CHANGELOG.md:5555
msgid ""
"Fixed an issue where integration tests were waiting for the package binary "
"to finish building before starting their own build. They now may build "
"concurrently. [\\#7394](https://github.com/rust-lang/cargo/pull/7394)"
msgstr ""

#: src/CHANGELOG.md:5559
msgid ""
"Fixed accidental change in the previous release on how `--features a b` flag "
"is interpreted, restoring the original behavior where this is interpreted as "
"`--features a` along with the argument `b` passed to the command. To pass "
"multiple features, use quotes around the features to pass multiple features "
"like `--features \"a b\"`, or use commas, or use multiple `--features` "
"flags. [\\#7419](https://github.com/rust-lang/cargo/pull/7419)"
msgstr ""

#: src/CHANGELOG.md:5567
msgid ""
"Basic support for building the standard library directly from Cargo has been "
"added. ([docs](https://doc.rust-lang.org/nightly/cargo/reference/"
"unstable.html#build-std)) [\\#7216](https://github.com/rust-lang/cargo/pull/"
"7216)"
msgstr ""

#: src/CHANGELOG.md:5571
msgid ""
"Added `-Ztimings` feature to generate an HTML report on the time spent on "
"individual compilation steps. This also may output completion steps on the "
"console and JSON data. ([docs](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#timings)) [\\#7311](https://github.com/rust-lang/"
"cargo/pull/7311)"
msgstr ""

#: src/CHANGELOG.md:5576
msgid ""
"Added ability to cross-compile doctests. ([docs](https://doc.rust-lang.org/"
"nightly/cargo/reference/unstable.html#doctest-xcompile)) [\\#6892](https://"
"github.com/rust-lang/cargo/pull/6892)"
msgstr ""

#: src/CHANGELOG.md:5580
msgid "Cargo 1.38 (2019-09-26)"
msgstr ""

#: src/CHANGELOG.md:5581
msgid ""
"[4c1fa54d...23ef9a4e](https://github.com/rust-lang/cargo/compare/"
"4c1fa54d...23ef9a4e)"
msgstr ""

#: src/CHANGELOG.md:5584
msgid ""
"🔥 Cargo build pipelining has been enabled by default to leverage more idle "
"CPU parallelism during builds. [\\#7143](https://github.com/rust-lang/cargo/"
"pull/7143)"
msgstr ""

#: src/CHANGELOG.md:5587
msgid ""
"The `--message-format` option to Cargo can now be specified multiple times "
"and accepts a comma-separated list of values. In addition to the previous "
"values it also now accepts `json-diagnostic-short` and `json-diagnostic-"
"rendered-ansi` which configures the output coming from rustc in `json` "
"message mode. [\\#7214](https://github.com/rust-lang/cargo/pull/7214)"
msgstr ""

#: src/CHANGELOG.md:5593
msgid ""
"Cirrus CI badges are now supported on crates.io. [\\#7119](https://"
"github.com/rust-lang/cargo/pull/7119)"
msgstr ""

#: src/CHANGELOG.md:5595
msgid ""
"A new format for `Cargo.lock` has been introduced. This new format is "
"intended to avoid source-control merge conflicts more often, and to "
"generally make it safer to merge changes. This new format is _not_ enabled "
"at this time, though Cargo will use it if it sees it. At some point in the "
"future, it is intended that this will become the default. [\\#7070](https://"
"github.com/rust-lang/cargo/pull/7070)"
msgstr ""

#: src/CHANGELOG.md:5601
msgid ""
"Progress bar support added for FreeBSD. [\\#7222](https://github.com/rust-"
"lang/cargo/pull/7222)"
msgstr ""

#: src/CHANGELOG.md:5605
msgid ""
"The `-q` flag will no longer suppress the root error message for an error "
"from Cargo itself. [\\#7116](https://github.com/rust-lang/cargo/pull/7116)"
msgstr ""

#: src/CHANGELOG.md:5608
msgid ""
"The Cargo Book is now published with mdbook 0.3 providing a number of "
"formatting fixes and improvements. [\\#7140](https://github.com/rust-lang/"
"cargo/pull/7140)"
msgstr ""

#: src/CHANGELOG.md:5611
msgid ""
"The `--features` command-line flag can now be specified multiple times. The "
"list of features from all the flags are joined together. [\\#7084](https://"
"github.com/rust-lang/cargo/pull/7084)"
msgstr ""

#: src/CHANGELOG.md:5614
msgid ""
"Package include/exclude glob-vs-gitignore warnings have been removed. "
"Packages may now use gitignore-style matching without producing any "
"warnings. [\\#7170](https://github.com/rust-lang/cargo/pull/7170)"
msgstr ""

#: src/CHANGELOG.md:5618
msgid ""
"Cargo now shows the command and output when parsing `rustc` output fails "
"when querying `rustc` for information like `cfg` values. [\\#7185](https://"
"github.com/rust-lang/cargo/pull/7185)"
msgstr ""

#: src/CHANGELOG.md:5621
msgid ""
"`cargo package`/`cargo publish` now allows a symbolic link to a git "
"submodule to include that submodule. [\\#6817](https://github.com/rust-lang/"
"cargo/pull/6817)"
msgstr ""

#: src/CHANGELOG.md:5624
msgid ""
"Improved the error message when a version requirement does not match any "
"versions, but there are pre-release versions available. [\\#7191](https://"
"github.com/rust-lang/cargo/pull/7191)"
msgstr ""

#: src/CHANGELOG.md:5629
msgid ""
"Fixed using the wrong directory when updating git repositories when using "
"the `git-fetch-with-cli` config option, and the `GIT_DIR` environment "
"variable is set. This may happen when running cargo from git callbacks. "
"[\\#7082](https://github.com/rust-lang/cargo/pull/7082)"
msgstr ""

#: src/CHANGELOG.md:5633
msgid ""
"Fixed dep-info files being overwritten for targets that have separate debug "
"outputs. For example, binaries on `-apple-` targets with `.dSYM` directories "
"would overwrite the `.d` file. [\\#7057](https://github.com/rust-lang/cargo/"
"pull/7057)"
msgstr ""

#: src/CHANGELOG.md:5637
msgid ""
"Fix `[patch]` table not preserving \"one major version per source\" rule. "
"[\\#7118](https://github.com/rust-lang/cargo/pull/7118)"
msgstr ""

#: src/CHANGELOG.md:5639
msgid ""
"Ignore `--remap-path-prefix` flags for the metadata hash in the `cargo "
"rustc` command. This was causing the remap settings to inadvertently affect "
"symbol names. [\\#7134](https://github.com/rust-lang/cargo/pull/7134)"
msgstr ""

#: src/CHANGELOG.md:5643
msgid ""
"Fixed cycle detection in `[patch]` dependencies. [\\#7174](https://"
"github.com/rust-lang/cargo/pull/7174)"
msgstr ""

#: src/CHANGELOG.md:5645
msgid ""
"Fixed `cargo new` leaving behind a symlink on Windows when `core.symlinks` "
"git config is true. Also adds a number of fixes and updates from upstream "
"libgit2. [\\#7176](https://github.com/rust-lang/cargo/pull/7176)"
msgstr ""

#: src/CHANGELOG.md:5649
msgid ""
"macOS: Fixed setting the flag to mark the `target` directory to be excluded "
"from backups. [\\#7192](https://github.com/rust-lang/cargo/pull/7192)"
msgstr ""

#: src/CHANGELOG.md:5652
msgid ""
"Fixed `cargo fix` panicking under some situations involving multi-byte "
"characters. [\\#7221](https://github.com/rust-lang/cargo/pull/7221)"
msgstr ""

#: src/CHANGELOG.md:5657
msgid ""
"Added `cargo fix --clippy` which will apply machine-applicable fixes from "
"Clippy. [\\#7069](https://github.com/rust-lang/cargo/pull/7069)"
msgstr ""

#: src/CHANGELOG.md:5660
msgid ""
"Added `-Z binary-dep-depinfo` flag to add change tracking for binary "
"dependencies like the standard library. [\\#7137](https://github.com/rust-"
"lang/cargo/pull/7137) [\\#7219](https://github.com/rust-lang/cargo/pull/7219)"
msgstr ""

#: src/CHANGELOG.md:5664
msgid ""
"`cargo clippy-preview` will always run, even if no changes have been made. "
"[\\#7157](https://github.com/rust-lang/cargo/pull/7157)"
msgstr ""

#: src/CHANGELOG.md:5666
msgid ""
"Fixed exponential blowup when using `CARGO_BUILD_PIPELINING`. [\\#7062]"
"(https://github.com/rust-lang/cargo/pull/7062)"
msgstr ""

#: src/CHANGELOG.md:5668
msgid ""
"Fixed passing args to clippy in `cargo clippy-preview`. [\\#7162](https://"
"github.com/rust-lang/cargo/pull/7162)"
msgstr ""

#: src/CHANGELOG.md:5671
msgid "Cargo 1.37 (2019-08-15)"
msgstr ""

#: src/CHANGELOG.md:5672
msgid ""
"[c4fcfb72...9edd0891](https://github.com/rust-lang/cargo/compare/"
"c4fcfb72...9edd0891)"
msgstr ""

#: src/CHANGELOG.md:5675
msgid ""
"Added `doctest` field to `cargo metadata` to determine if a target's "
"documentation is tested. [\\#6953](https://github.com/rust-lang/cargo/pull/"
"6953) [\\#6965](https://github.com/rust-lang/cargo/pull/6965)"
msgstr ""

#: src/CHANGELOG.md:5679
msgid ""
"🔥 The [`cargo vendor`](https://doc.rust-lang.org/nightly/cargo/commands/"
"cargo-vendor.html) command is now built-in to Cargo. This command may be "
"used to create a local copy of the sources of all dependencies. [\\#6869]"
"(https://github.com/rust-lang/cargo/pull/6869)"
msgstr ""

#: src/CHANGELOG.md:5684
msgid ""
"🔥 The \"publish lockfile\" feature is now stable. This feature will "
"automatically include the `Cargo.lock` file when a package is published if "
"it contains a binary executable target. By default, Cargo will ignore "
"`Cargo.lock` when installing a package. To force Cargo to use the "
"`Cargo.lock` file included in the published package, use `cargo install --"
"locked`. This may be useful to ensure that `cargo install` consistently "
"reproduces the same result. It may also be useful when a semver-incompatible "
"change is accidentally published to a dependency, providing a way to fall "
"back to a version that is known to work. [\\#7026](https://github.com/rust-"
"lang/cargo/pull/7026)"
msgstr ""

#: src/CHANGELOG.md:5694
msgid ""
"🔥 The `default-run` feature has been stabilized. This feature allows you to "
"specify which binary executable to run by default with `cargo run` when a "
"package includes multiple binaries. Set the `default-run` key in the "
"`[package]` table in `Cargo.toml` to the name of the binary to use by "
"default. [\\#7056](https://github.com/rust-lang/cargo/pull/7056)"
msgstr ""

#: src/CHANGELOG.md:5702
msgid ""
"`cargo package` now verifies that build scripts do not create empty "
"directories. [\\#6973](https://github.com/rust-lang/cargo/pull/6973)"
msgstr ""

#: src/CHANGELOG.md:5705
msgid ""
"A warning is now issued if `cargo doc` generates duplicate outputs, which "
"causes files to be randomly stomped on. This may happen for a variety of "
"reasons (renamed dependencies, multiple versions of the same package, "
"packages with renamed libraries, etc.). This is a known bug, which needs "
"more work to handle correctly. [\\#6998](https://github.com/rust-lang/cargo/"
"pull/6998)"
msgstr ""

#: src/CHANGELOG.md:5711
msgid ""
"Enabling a dependency's feature with `--features foo/bar` will no longer "
"compile the current crate with the `foo` feature if `foo` is not an optional "
"dependency. [\\#7010](https://github.com/rust-lang/cargo/pull/7010)"
msgstr ""

#: src/CHANGELOG.md:5715
msgid ""
"If `--remap-path-prefix` is passed via RUSTFLAGS, it will no longer affect "
"the filename metadata hash. [\\#6966](https://github.com/rust-lang/cargo/"
"pull/6966)"
msgstr ""

#: src/CHANGELOG.md:5718
msgid ""
"libgit2 has been updated to 0.28.2, which Cargo uses to access git "
"repositories. This brings in hundreds of changes and fixes since it was last "
"updated in November. [\\#7018](https://github.com/rust-lang/cargo/pull/7018)"
msgstr ""

#: src/CHANGELOG.md:5722
msgid ""
"Cargo now supports absolute paths in the dep-info files generated by rustc. "
"This is laying the groundwork for [tracking binaries](https://github.com/"
"rust-lang/rust/pull/61727), such as libstd, for rebuild detection. (Note: "
"this contains a known bug.) [\\#7030](https://github.com/rust-lang/cargo/"
"pull/7030)"
msgstr ""

#: src/CHANGELOG.md:5729
msgid ""
"Fixed how zsh completions fetch the list of commands. [\\#6956](https://"
"github.com/rust-lang/cargo/pull/6956)"
msgstr ""

#: src/CHANGELOG.md:5731
msgid ""
"\"+ debuginfo\" is no longer printed in the build summary when `debug` is "
"set to 0. [\\#6971](https://github.com/rust-lang/cargo/pull/6971)"
msgstr ""

#: src/CHANGELOG.md:5734
msgid ""
"Fixed `cargo doc` with an example configured with `doc = true` to document "
"correctly. [\\#7023](https://github.com/rust-lang/cargo/pull/7023)"
msgstr ""

#: src/CHANGELOG.md:5737
msgid ""
"Don't fail if a read-only lock cannot be acquired in CARGO_HOME. This helps "
"when CARGO_HOME doesn't exist, but `--locked` is used which means CARGO_HOME "
"is not needed. [\\#7149](https://github.com/rust-lang/cargo/pull/7149)"
msgstr ""

#: src/CHANGELOG.md:5741
msgid ""
"Reverted a change in 1.35 which released jobserver tokens when Cargo blocked "
"on a lock file. It caused a deadlock in some situations. [\\#7204](https://"
"github.com/rust-lang/cargo/pull/7204)"
msgstr ""

#: src/CHANGELOG.md:5746
msgid ""
"Added [compiler message caching](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#cache-messages). The `-Z cache-messages` flag makes "
"cargo cache the compiler output so that future runs can redisplay previous "
"warnings. [\\#6933](https://github.com/rust-lang/cargo/pull/6933)"
msgstr ""

#: src/CHANGELOG.md:5751
msgid ""
"`-Z mtime-on-use` no longer touches intermediate artifacts. [\\#7050]"
"(https://github.com/rust-lang/cargo/pull/7050)"
msgstr ""

#: src/CHANGELOG.md:5754
msgid "Cargo 1.36 (2019-07-04)"
msgstr ""

#: src/CHANGELOG.md:5755
msgid ""
"[6f3e9c36...c4fcfb72](https://github.com/rust-lang/cargo/compare/"
"6f3e9c36...c4fcfb72)"
msgstr ""

#: src/CHANGELOG.md:5758
msgid ""
"Added more detailed documentation on target auto-discovery. [\\#6898]"
"(https://github.com/rust-lang/cargo/pull/6898)"
msgstr ""

#: src/CHANGELOG.md:5760
msgid ""
"🔥 Stabilize the `--offline` flag which allows using cargo without a network "
"connection. [\\#6934](https://github.com/rust-lang/cargo/pull/6934) [\\#6871]"
"(https://github.com/rust-lang/cargo/pull/6871)"
msgstr ""

#: src/CHANGELOG.md:5766
msgid ""
"`publish = [\"crates-io\"]` may be added to the manifest to restrict "
"publishing to crates.io only. [\\#6838](https://github.com/rust-lang/cargo/"
"pull/6838)"
msgstr ""

#: src/CHANGELOG.md:5769
msgid ""
"macOS: Only include the default paths if `DYLD_FALLBACK_LIBRARY_PATH` is not "
"set. Also, remove `/lib` from the default set. [\\#6856](https://github.com/"
"rust-lang/cargo/pull/6856)"
msgstr ""

#: src/CHANGELOG.md:5772
msgid ""
"`cargo publish` will now exit early if the login token is not available. "
"[\\#6854](https://github.com/rust-lang/cargo/pull/6854)"
msgstr ""

#: src/CHANGELOG.md:5774
msgid ""
"HTTP/2 stream errors are now considered \"spurious\" and will cause a retry. "
"[\\#6861](https://github.com/rust-lang/cargo/pull/6861)"
msgstr ""

#: src/CHANGELOG.md:5776
msgid ""
"Setting a feature on a dependency where that feature points to a _required_ "
"dependency is now an error. Previously it was a warning. [\\#6860](https://"
"github.com/rust-lang/cargo/pull/6860)"
msgstr ""

#: src/CHANGELOG.md:5779
msgid ""
"The `registry.index` config value now supports relative `file:` URLs. "
"[\\#6873](https://github.com/rust-lang/cargo/pull/6873)"
msgstr ""

#: src/CHANGELOG.md:5781
msgid ""
"macOS: The `.dSYM` directory is now symbolically linked next to example "
"binaries without the metadata hash so that debuggers can find it. [\\#6891]"
"(https://github.com/rust-lang/cargo/pull/6891)"
msgstr ""

#: src/CHANGELOG.md:5784
msgid ""
"The default `Cargo.toml` template for now projects now includes a comment "
"providing a link to the documentation. [\\#6881](https://github.com/rust-"
"lang/cargo/pull/6881)"
msgstr ""

#: src/CHANGELOG.md:5787
msgid ""
"Some improvements to the wording of the crate download summary. [\\#6916]"
"(https://github.com/rust-lang/cargo/pull/6916) [\\#6920](https://github.com/"
"rust-lang/cargo/pull/6920)"
msgstr ""

#: src/CHANGELOG.md:5790
msgid ""
"✨ Changed `RUST_LOG` environment variable to `CARGO_LOG` so that user code "
"that uses the `log` crate will not display cargo's debug output. [\\#6918]"
"(https://github.com/rust-lang/cargo/pull/6918)"
msgstr ""

#: src/CHANGELOG.md:5793
msgid ""
"`Cargo.toml` is now always included when packaging, even if it is not listed "
"in `package.include`. [\\#6925](https://github.com/rust-lang/cargo/pull/6925)"
msgstr ""

#: src/CHANGELOG.md:5796
msgid ""
"Package include/exclude values now use gitignore patterns instead of glob "
"patterns. [\\#6924](https://github.com/rust-lang/cargo/pull/6924)"
msgstr ""

#: src/CHANGELOG.md:5798
msgid ""
"Provide a better error message when crates.io times out. Also improve error "
"messages with other HTTP response codes. [\\#6936](https://github.com/rust-"
"lang/cargo/pull/6936)"
msgstr ""

#: src/CHANGELOG.md:5802
msgid "Performance"
msgstr ""

#: src/CHANGELOG.md:5803
msgid ""
"Resolver performance improvements for some cases. [\\#6853](https://"
"github.com/rust-lang/cargo/pull/6853)"
msgstr ""

#: src/CHANGELOG.md:5805
msgid ""
"Optimized how cargo reads the index JSON files by caching the results. "
"[\\#6880](https://github.com/rust-lang/cargo/pull/6880) [\\#6912](https://"
"github.com/rust-lang/cargo/pull/6912) [\\#6940](https://github.com/rust-lang/"
"cargo/pull/6940)"
msgstr ""

#: src/CHANGELOG.md:5809
msgid ""
"Various performance improvements. [\\#6867](https://github.com/rust-lang/"
"cargo/pull/6867)"
msgstr ""

#: src/CHANGELOG.md:5813
msgid ""
"More carefully track the on-disk fingerprint information for dependencies. "
"This can help in some rare cases where the build is interrupted and "
"restarted. [\\#6832](https://github.com/rust-lang/cargo/pull/6832)"
msgstr ""

#: src/CHANGELOG.md:5816
msgid ""
"`cargo run` now correctly passes non-UTF8 arguments to the child process. "
"[\\#6849](https://github.com/rust-lang/cargo/pull/6849)"
msgstr ""

#: src/CHANGELOG.md:5818
msgid ""
"Fixed bash completion to run on bash 3.2, the stock version in macOS. "
"[\\#6905](https://github.com/rust-lang/cargo/pull/6905)"
msgstr ""

#: src/CHANGELOG.md:5820
msgid ""
"Various fixes and improvements to zsh completion. [\\#6926](https://"
"github.com/rust-lang/cargo/pull/6926) [\\#6929](https://github.com/rust-lang/"
"cargo/pull/6929)"
msgstr ""

#: src/CHANGELOG.md:5823
msgid ""
"Fix `cargo update` ignoring `-p` arguments if the `Cargo.lock` file was "
"missing. [\\#6904](https://github.com/rust-lang/cargo/pull/6904)"
msgstr ""

#: src/CHANGELOG.md:5828
msgid ""
"Added [`-Z install-upgrade` feature](https://doc.rust-lang.org/nightly/cargo/"
"reference/unstable.html#install-upgrade) to track details about installed "
"crates and to update them if they are out-of-date. [\\#6798](https://"
"github.com/rust-lang/cargo/pull/6798)"
msgstr ""

#: src/CHANGELOG.md:5832
msgid ""
"Added the [`public-dependency` feature](https://doc.rust-lang.org/nightly/"
"cargo/reference/unstable.html#public-dependency) which allows tracking "
"public versus private dependencies. [\\#6772](https://github.com/rust-lang/"
"cargo/pull/6772)"
msgstr ""

#: src/CHANGELOG.md:5836
msgid ""
"Added build pipelining via the `build.pipelining` config option "
"(`CARGO_BUILD_PIPELINING` env var). [\\#6883](https://github.com/rust-lang/"
"cargo/pull/6883)"
msgstr ""

#: src/CHANGELOG.md:5839
msgid ""
"The `publish-lockfile` feature has had some significant changes. The default "
"is now `true`, the `Cargo.lock` will always be published for binary crates. "
"The `Cargo.lock` is now regenerated during publishing. `cargo install` now "
"ignores the `Cargo.lock` file by default, and requires `--locked` to use the "
"lock file. Warnings have been added if yanked dependencies are detected. "
"[\\#6840](https://github.com/rust-lang/cargo/pull/6840)"
msgstr ""

#: src/CHANGELOG.md:5846
msgid "Cargo 1.35 (2019-05-23)"
msgstr ""

#: src/CHANGELOG.md:5847
msgid ""
"[6789d8a0...6f3e9c36](https://github.com/rust-lang/cargo/compare/"
"6789d8a0...6f3e9c36)"
msgstr ""

#: src/CHANGELOG.md:5850
msgid ""
"Added the `rustc-cdylib-link-arg` key for build scripts to specify linker "
"arguments for cdylib crates. [\\#6298](https://github.com/rust-lang/cargo/"
"pull/6298)"
msgstr ""

#: src/CHANGELOG.md:5855
msgid ""
"When passing a test filter, such as `cargo test foo`, don't build examples "
"(unless they set `test = true`). [\\#6683](https://github.com/rust-lang/"
"cargo/pull/6683)"
msgstr ""

#: src/CHANGELOG.md:5858
msgid ""
"Forward the `--quiet` flag from `cargo test` to the libtest harness so that "
"tests are actually quiet. [\\#6358](https://github.com/rust-lang/cargo/pull/"
"6358)"
msgstr ""

#: src/CHANGELOG.md:5861
msgid ""
"The verification step in `cargo package` that checks if any files are "
"modified is now stricter. It uses a hash of the contents instead of checking "
"filesystem mtimes. It also checks _all_ files in the package. [\\#6740]"
"(https://github.com/rust-lang/cargo/pull/6740)"
msgstr ""

#: src/CHANGELOG.md:5865
msgid ""
"Jobserver tokens are now released whenever Cargo blocks on a file lock. "
"[\\#6748](https://github.com/rust-lang/cargo/pull/6748)"
msgstr ""

#: src/CHANGELOG.md:5867
msgid ""
"Issue a warning for a previous bug in the TOML parser that allowed multiple "
"table headers with the same name. [\\#6761](https://github.com/rust-lang/"
"cargo/pull/6761)"
msgstr ""

#: src/CHANGELOG.md:5870
msgid ""
"Removed the `CARGO_PKG_*` environment variables from the metadata hash and "
"added them to the fingerprint instead. This means that when these values "
"change, stale artifacts are not left behind. Also added the \"repository\" "
"value to the fingerprint. [\\#6785](https://github.com/rust-lang/cargo/pull/"
"6785)"
msgstr ""

#: src/CHANGELOG.md:5875
msgid ""
"`cargo metadata` no longer shows a `null` field for a dependency without a "
"library in `resolve.nodes.deps`. The dependency is no longer shown. [\\#6534]"
"(https://github.com/rust-lang/cargo/pull/6534)"
msgstr ""

#: src/CHANGELOG.md:5878
msgid ""
"`cargo new` will no longer include an email address in the `authors` field "
"if it is set to the empty string. [\\#6802](https://github.com/rust-lang/"
"cargo/pull/6802)"
msgstr ""

#: src/CHANGELOG.md:5881
msgid ""
"`cargo doc --open` now works when documenting multiple packages. [\\#6803]"
"(https://github.com/rust-lang/cargo/pull/6803)"
msgstr ""

#: src/CHANGELOG.md:5883
msgid ""
"`cargo install --path P` now loads the `.cargo/config` file from the "
"directory P. [\\#6805](https://github.com/rust-lang/cargo/pull/6805)"
msgstr ""

#: src/CHANGELOG.md:5885
msgid ""
"Using semver metadata in a version requirement (such as `1.0.0+1234`) now "
"issues a warning that it is ignored. [\\#6806](https://github.com/rust-lang/"
"cargo/pull/6806)"
msgstr ""

#: src/CHANGELOG.md:5888
msgid ""
"`cargo install` now rejects certain combinations of flags where some flags "
"would have been ignored. [\\#6801](https://github.com/rust-lang/cargo/pull/"
"6801)"
msgstr ""

#: src/CHANGELOG.md:5891
msgid ""
"Resolver performance improvements for some cases. [\\#6776](https://"
"github.com/rust-lang/cargo/pull/6776)"
msgstr ""

#: src/CHANGELOG.md:5895
msgid ""
"Fixed running separate commands (such as `cargo build` then `cargo test`) "
"where the second command could use stale results from a build script. "
"[\\#6720](https://github.com/rust-lang/cargo/pull/6720)"
msgstr ""

#: src/CHANGELOG.md:5898
msgid ""
"Fixed `cargo fix` not working properly if a `.gitignore` file that matched "
"the root package directory. [\\#6767](https://github.com/rust-lang/cargo/"
"pull/6767)"
msgstr ""

#: src/CHANGELOG.md:5901
msgid ""
"Fixed accidentally compiling a lib multiple times if `panic=unwind` was set "
"in a profile. [\\#6781](https://github.com/rust-lang/cargo/pull/6781)"
msgstr ""

#: src/CHANGELOG.md:5903
msgid ""
"Paths to JSON files in `build.target` config value are now canonicalized to "
"fix building dependencies. [\\#6778](https://github.com/rust-lang/cargo/pull/"
"6778)"
msgstr ""

#: src/CHANGELOG.md:5906
msgid ""
"Fixed re-running a build script if its compilation was interrupted (such as "
"if it is killed). [\\#6782](https://github.com/rust-lang/cargo/pull/6782)"
msgstr ""

#: src/CHANGELOG.md:5908
msgid ""
"Fixed `cargo new` initializing a fossil repo. [\\#6792](https://github.com/"
"rust-lang/cargo/pull/6792)"
msgstr ""

#: src/CHANGELOG.md:5910
msgid ""
"Fixed supporting updating a git repo that has a force push when using the "
"`git-fetch-with-cli` feature. `git-fetch-with-cli` also shows more error "
"information now when it fails. [\\#6800](https://github.com/rust-lang/cargo/"
"pull/6800)"
msgstr ""

#: src/CHANGELOG.md:5914
msgid ""
"`--example` binaries built for the WASM target are fixed to no longer "
"include a metadata hash in the filename, and are correctly emitted in the "
"`compiler-artifact` JSON message. [\\#6812](https://github.com/rust-lang/"
"cargo/pull/6812)"
msgstr ""

#: src/CHANGELOG.md:5920
msgid ""
"`cargo clippy-preview` is now a built-in cargo command. [\\#6759](https://"
"github.com/rust-lang/cargo/pull/6759)"
msgstr ""

#: src/CHANGELOG.md:5922
msgid ""
"The `build-override` profile setting now includes proc-macros and their "
"dependencies. [\\#6811](https://github.com/rust-lang/cargo/pull/6811)"
msgstr ""

#: src/CHANGELOG.md:5925
msgid ""
"Optional and target dependencies now work better with `-Z offline`. [\\#6814]"
"(https://github.com/rust-lang/cargo/pull/6814)"
msgstr ""

#: src/CHANGELOG.md:5928
msgid "Cargo 1.34 (2019-04-11)"
msgstr ""

#: src/CHANGELOG.md:5929
msgid ""
"[f099fe94...6789d8a0](https://github.com/rust-lang/cargo/compare/"
"f099fe94...6789d8a0)"
msgstr ""

#: src/CHANGELOG.md:5932
msgid ""
"🔥 Stabilized support for [alternate registries](https://doc.rust-lang.org/"
"1.34.0/cargo/reference/registries.html). [\\#6654](https://github.com/rust-"
"lang/cargo/pull/6654)"
msgstr ""

#: src/CHANGELOG.md:5935
msgid ""
"Added documentation on using builds.sr.ht Continuous Integration with Cargo. "
"[\\#6565](https://github.com/rust-lang/cargo/pull/6565)"
msgstr ""

#: src/CHANGELOG.md:5937
msgid ""
"`Cargo.lock` now includes a comment at the top that it is `@generated`. "
"[\\#6548](https://github.com/rust-lang/cargo/pull/6548)"
msgstr ""

#: src/CHANGELOG.md:5939
msgid ""
"Azure DevOps badges are now supported. [\\#6264](https://github.com/rust-"
"lang/cargo/pull/6264)"
msgstr ""

#: src/CHANGELOG.md:5941
msgid ""
"Added a warning if `--exclude` flag specifies an unknown package. [\\#6679]"
"(https://github.com/rust-lang/cargo/pull/6679)"
msgstr ""

#: src/CHANGELOG.md:5945
msgid ""
"`cargo test --doc --no-run` doesn't do anything, so it now displays an error "
"to that effect. [\\#6628](https://github.com/rust-lang/cargo/pull/6628)"
msgstr ""

#: src/CHANGELOG.md:5947
msgid ""
"Various updates to bash completion: add missing options and commands, "
"support libtest completions, use rustup for `--target` completion, fallback "
"to filename completion, fix editing the command line. [\\#6644](https://"
"github.com/rust-lang/cargo/pull/6644)"
msgstr ""

#: src/CHANGELOG.md:5951
msgid ""
"Publishing a crate with a `[patch]` section no longer generates an error. "
"The `[patch]` section is removed from the manifest before publishing. "
"[\\#6535](https://github.com/rust-lang/cargo/pull/6535)"
msgstr ""

#: src/CHANGELOG.md:5954
msgid ""
"`build.incremental = true` config value is now treated the same as "
"`CARGO_INCREMENTAL=1`, previously it was ignored. [\\#6688](https://"
"github.com/rust-lang/cargo/pull/6688)"
msgstr ""

#: src/CHANGELOG.md:5957
msgid ""
"Errors from a registry are now always displayed regardless of the HTTP "
"response code. [\\#6771](https://github.com/rust-lang/cargo/pull/6771)"
msgstr ""

#: src/CHANGELOG.md:5961
msgid ""
"Fixed bash completion for `cargo run --example`. [\\#6578](https://"
"github.com/rust-lang/cargo/pull/6578)"
msgstr ""

#: src/CHANGELOG.md:5963
msgid ""
"Fixed a race condition when using a _local_ registry and running multiple "
"cargo commands at the same time that build the same crate. [\\#6591](https://"
"github.com/rust-lang/cargo/pull/6591)"
msgstr ""

#: src/CHANGELOG.md:5966
msgid ""
"Fixed some flickering and excessive updates of the progress bar. [\\#6615]"
"(https://github.com/rust-lang/cargo/pull/6615)"
msgstr ""

#: src/CHANGELOG.md:5968
msgid ""
"Fixed a hang when using a git credential helper that returns incorrect "
"credentials. [\\#6681](https://github.com/rust-lang/cargo/pull/6681)"
msgstr ""

#: src/CHANGELOG.md:5970
msgid ""
"Fixed resolving yanked crates with a local registry. [\\#6750](https://"
"github.com/rust-lang/cargo/pull/6750)"
msgstr ""

#: src/CHANGELOG.md:5974
msgid ""
"Added `-Z mtime-on-use` flag to cause the mtime to be updated on the "
"filesystem when a crate is used. This is intended to be able to track stale "
"artifacts in the future for cleaning up unused files. [\\#6477](https://"
"github.com/rust-lang/cargo/pull/6477) [\\#6573](https://github.com/rust-lang/"
"cargo/pull/6573)"
msgstr ""

#: src/CHANGELOG.md:5979
msgid ""
"Added experimental `-Z dual-proc-macros` to build proc macros for both the "
"host and the target. [\\#6547](https://github.com/rust-lang/cargo/pull/6547)"
msgstr ""

#: src/CHANGELOG.md:5983
msgid "Cargo 1.33 (2019-02-28)"
msgstr ""

#: src/CHANGELOG.md:5984
msgid ""
"[8610973a...f099fe94](https://github.com/rust-lang/cargo/compare/"
"8610973a...f099fe94)"
msgstr ""

#: src/CHANGELOG.md:5987
msgid ""
"`compiler-artifact` JSON messages now include an `\"executable\"` key which "
"includes the path to the executable that was built. [\\#6363](https://"
"github.com/rust-lang/cargo/pull/6363)"
msgstr ""

#: src/CHANGELOG.md:5990
msgid ""
"The man pages have been rewritten, and are now published with the web "
"documentation. [\\#6405](https://github.com/rust-lang/cargo/pull/6405)"
msgstr ""

#: src/CHANGELOG.md:5992
msgid ""
"`cargo login` now displays a confirmation after saving the token. [\\#6466]"
"(https://github.com/rust-lang/cargo/pull/6466)"
msgstr ""

#: src/CHANGELOG.md:5994
msgid ""
"A warning is now emitted if a `[patch]` entry does not match any package. "
"[\\#6470](https://github.com/rust-lang/cargo/pull/6470)"
msgstr ""

#: src/CHANGELOG.md:5996
msgid ""
"`cargo metadata` now includes the `links` key for a package. [\\#6480]"
"(https://github.com/rust-lang/cargo/pull/6480)"
msgstr ""

#: src/CHANGELOG.md:5998
msgid ""
"\"Very verbose\" output with `-vv` now displays the environment variables "
"that cargo sets when it runs a process. [\\#6492](https://github.com/rust-"
"lang/cargo/pull/6492)"
msgstr ""

#: src/CHANGELOG.md:6001
msgid ""
"`--example`, `--bin`, `--bench`, or `--test` without an argument now lists "
"the available targets for those options. [\\#6505](https://github.com/rust-"
"lang/cargo/pull/6505)"
msgstr ""

#: src/CHANGELOG.md:6004
msgid ""
"Windows: If a process fails with an extended status exit code, a human-"
"readable name for the code is now displayed. [\\#6532](https://github.com/"
"rust-lang/cargo/pull/6532)"
msgstr ""

#: src/CHANGELOG.md:6007
msgid ""
"Added `--features`, `--no-default-features`, and `--all-features` flags to "
"the `cargo package` and `cargo publish` commands to use the given features "
"when verifying the package. [\\#6453](https://github.com/rust-lang/cargo/"
"pull/6453)"
msgstr ""

#: src/CHANGELOG.md:6013
msgid ""
"If `cargo fix` fails to compile the fixed code, the rustc errors are now "
"displayed on the console. [\\#6419](https://github.com/rust-lang/cargo/pull/"
"6419)"
msgstr ""

#: src/CHANGELOG.md:6016
msgid ""
"Hide the `--host` flag from `cargo login`, it is unused. [\\#6466](https://"
"github.com/rust-lang/cargo/pull/6466)"
msgstr ""

#: src/CHANGELOG.md:6018
msgid ""
"Build script fingerprints now include the rustc version. [\\#6473](https://"
"github.com/rust-lang/cargo/pull/6473)"
msgstr ""

#: src/CHANGELOG.md:6020
msgid ""
"macOS: Switched to setting `DYLD_FALLBACK_LIBRARY_PATH` instead of "
"`DYLD_LIBRARY_PATH`. [\\#6355](https://github.com/rust-lang/cargo/pull/6355)"
msgstr ""

#: src/CHANGELOG.md:6022
msgid ""
"`RUSTFLAGS` is now included in the metadata hash, meaning that changing the "
"flags will not overwrite previously built files. [\\#6503](https://"
"github.com/rust-lang/cargo/pull/6503)"
msgstr ""

#: src/CHANGELOG.md:6025
msgid ""
"When updating the crate graph, unrelated yanked crates were erroneously "
"removed. They are now kept at their original version if possible. This was "
"causing unrelated packages to be downgraded during `cargo update -p "
"somecrate`. [\\#5702](https://github.com/rust-lang/cargo/issues/5702)"
msgstr ""

#: src/CHANGELOG.md:6029
msgid ""
"TOML files now support the [0.5 TOML syntax](https://github.com/toml-lang/"
"toml/blob/master/CHANGELOG.md#050--2018-07-11)."
msgstr ""

#: src/CHANGELOG.md:6033
msgid ""
"`cargo fix` will now ignore suggestions that modify multiple files. [\\#6402]"
"(https://github.com/rust-lang/cargo/pull/6402)"
msgstr ""

#: src/CHANGELOG.md:6035
msgid ""
"`cargo fix` will now only fix one target at a time, to deal with targets "
"which share the same source files. [\\#6434](https://github.com/rust-lang/"
"cargo/pull/6434)"
msgstr ""

#: src/CHANGELOG.md:6038
msgid ""
"Fixed bash completion showing the list of cargo commands. [\\#6461](https://"
"github.com/rust-lang/cargo/issues/6461)"
msgstr ""

#: src/CHANGELOG.md:6040
msgid ""
"`cargo init` will now avoid creating duplicate entries in `.gitignore` "
"files. [\\#6521](https://github.com/rust-lang/cargo/pull/6521)"
msgstr ""

#: src/CHANGELOG.md:6042
msgid ""
"Builds now attempt to detect if a file is modified in the middle of a "
"compilation, allowing you to build again and pick up the new changes. This "
"is done by keeping track of when the compilation _starts_ not when it "
"finishes. Also, [\\#5919](https://github.com/rust-lang/cargo/pull/5919) was "
"reverted, meaning that cargo does _not_ treat equal filesystem mtimes as "
"requiring a rebuild. [\\#6484](https://github.com/rust-lang/cargo/pull/6484)"
msgstr ""

#: src/CHANGELOG.md:6050
msgid ""
"Allow using registry _names_ in `[patch]` tables instead of just URLs. "
"[\\#6456](https://github.com/rust-lang/cargo/pull/6456)"
msgstr ""

#: src/CHANGELOG.md:6052
msgid ""
"`cargo metadata` added the `registry` key for dependencies. [\\#6500]"
"(https://github.com/rust-lang/cargo/pull/6500)"
msgstr ""

#: src/CHANGELOG.md:6054
msgid ""
"Registry names are now restricted to the same style as package names "
"(alphanumeric, `-` and `_` characters). [\\#6469](https://github.com/rust-"
"lang/cargo/pull/6469)"
msgstr ""

#: src/CHANGELOG.md:6057
msgid ""
"`cargo login` now displays the `/me` URL from the registry config. [\\#6466]"
"(https://github.com/rust-lang/cargo/pull/6466)"
msgstr ""

#: src/CHANGELOG.md:6059
msgid ""
"`cargo login --registry=NAME` now supports interactive input for the token. "
"[\\#6466](https://github.com/rust-lang/cargo/pull/6466)"
msgstr ""

#: src/CHANGELOG.md:6061
msgid ""
"Registries may now elide the `api` key from `config.json` to indicate they "
"do not support API access. [\\#6466](https://github.com/rust-lang/cargo/pull/"
"6466)"
msgstr ""

#: src/CHANGELOG.md:6064
msgid ""
"Fixed panic when using `--message-format=json` with metabuild. [\\#6432]"
"(https://github.com/rust-lang/cargo/pull/6432)"
msgstr ""

#: src/CHANGELOG.md:6066
msgid ""
"Fixed detection of publishing to crates.io when using alternate registries. "
"[\\#6525](https://github.com/rust-lang/cargo/pull/6525)"
msgstr ""

#: src/CHANGELOG.md:6069
msgid "Cargo 1.32 (2019-01-17)"
msgstr ""

#: src/CHANGELOG.md:6070
msgid ""
"[339d9f9c...8610973a](https://github.com/rust-lang/cargo/compare/"
"339d9f9c...8610973a)"
msgstr ""

#: src/CHANGELOG.md:6073
msgid ""
"Registries may now display warnings after a successful publish. [\\#6303]"
"(https://github.com/rust-lang/cargo/pull/6303)"
msgstr ""

#: src/CHANGELOG.md:6075
msgid ""
"Added a [glossary](https://doc.rust-lang.org/cargo/appendix/glossary.html) "
"to the documentation. [\\#6321](https://github.com/rust-lang/cargo/pull/6321)"
msgstr ""

#: src/CHANGELOG.md:6077
msgid ""
"Added the alias `c` for `cargo check`. [\\#6218](https://github.com/rust-"
"lang/cargo/pull/6218)"
msgstr ""

#: src/CHANGELOG.md:6081
msgid ""
"🔥 HTTP/2 multiplexing is now enabled by default. The `http.multiplexing` "
"config value may be used to disable it. [\\#6271](https://github.com/rust-"
"lang/cargo/pull/6271)"
msgstr ""

#: src/CHANGELOG.md:6084
msgid ""
"Use ANSI escape sequences to clear lines instead of spaces. [\\#6233]"
"(https://github.com/rust-lang/cargo/pull/6233)"
msgstr ""

#: src/CHANGELOG.md:6086
msgid ""
"Disable git templates when checking out git dependencies, which can cause "
"problems. [\\#6252](https://github.com/rust-lang/cargo/pull/6252)"
msgstr ""

#: src/CHANGELOG.md:6088
msgid ""
"Include the `--update-head-ok` git flag when using the `net.git-fetch-with-"
"cli` option. This can help prevent failures when fetching some repositories. "
"[\\#6250](https://github.com/rust-lang/cargo/pull/6250)"
msgstr ""

#: src/CHANGELOG.md:6092
msgid ""
"When extracting a crate during the verification step of `cargo package`, the "
"filesystem mtimes are no longer set, which was failing on some rare "
"filesystems. [\\#6257](https://github.com/rust-lang/cargo/pull/6257)"
msgstr ""

#: src/CHANGELOG.md:6095
msgid ""
"`crate-type = [\"proc-macro\"]` is now treated the same as `proc-macro = "
"true` in `Cargo.toml`. [\\#6256](https://github.com/rust-lang/cargo/pull/"
"6256)"
msgstr ""

#: src/CHANGELOG.md:6097
msgid ""
"An error is raised if `dependencies`, `features`, `target`, or `badges` is "
"set in a virtual workspace. Warnings are displayed if `replace` or `patch` "
"is used in a workspace member. [\\#6276](https://github.com/rust-lang/cargo/"
"pull/6276)"
msgstr ""

#: src/CHANGELOG.md:6101
msgid ""
"Improved performance of the resolver in some cases. [\\#6283](https://"
"github.com/rust-lang/cargo/pull/6283) [\\#6366](https://github.com/rust-lang/"
"cargo/pull/6366)"
msgstr ""

#: src/CHANGELOG.md:6104
msgid ""
"`.rmeta` files are no longer hard-linked into the base target directory "
"(`target/debug`). [\\#6292](https://github.com/rust-lang/cargo/pull/6292)"
msgstr ""

#: src/CHANGELOG.md:6106
msgid ""
"A warning is issued if multiple targets are built with the same output "
"filenames. [\\#6308](https://github.com/rust-lang/cargo/pull/6308)"
msgstr ""

#: src/CHANGELOG.md:6108
msgid ""
"When using `cargo build` (without `--release`) benchmarks are now built "
"using the \"test\" profile instead of \"bench\". This makes it easier to "
"debug benchmarks, and avoids confusing behavior. [\\#6309](https://"
"github.com/rust-lang/cargo/pull/6309)"
msgstr ""

#: src/CHANGELOG.md:6112
msgid ""
"User aliases may now override built-in aliases (`b`, `r`, `t`, and `c`). "
"[\\#6259](https://github.com/rust-lang/cargo/pull/6259)"
msgstr ""

#: src/CHANGELOG.md:6114
msgid ""
"Setting `autobins=false` now disables auto-discovery of inferred targets. "
"[\\#6329](https://github.com/rust-lang/cargo/pull/6329)"
msgstr ""

#: src/CHANGELOG.md:6116
msgid ""
"`cargo verify-project` will now fail on stable if the project uses unstable "
"features. [\\#6326](https://github.com/rust-lang/cargo/pull/6326)"
msgstr ""

#: src/CHANGELOG.md:6118
msgid ""
"Platform targets with an internal `.` within the name are now allowed. "
"[\\#6255](https://github.com/rust-lang/cargo/pull/6255)"
msgstr ""

#: src/CHANGELOG.md:6120
msgid ""
"`cargo clean --release` now only deletes the release directory. [\\#6349]"
"(https://github.com/rust-lang/cargo/pull/6349)"
msgstr ""

#: src/CHANGELOG.md:6124
msgid ""
"Avoid adding extra angle brackets in email address for `cargo new`. [\\#6243]"
"(https://github.com/rust-lang/cargo/pull/6243)"
msgstr ""

#: src/CHANGELOG.md:6126
msgid ""
"The progress bar is disabled if the CI environment variable is set. [\\#6281]"
"(https://github.com/rust-lang/cargo/pull/6281)"
msgstr ""

#: src/CHANGELOG.md:6128
msgid ""
"Avoid retaining all rustc output in memory. [\\#6289](https://github.com/"
"rust-lang/cargo/pull/6289)"
msgstr ""

#: src/CHANGELOG.md:6130
msgid ""
"If JSON parsing fails, and rustc exits nonzero, don't lose the parse failure "
"message. [\\#6290](https://github.com/rust-lang/cargo/pull/6290)"
msgstr ""

#: src/CHANGELOG.md:6132
msgid ""
"Fixed renaming a project directory with build scripts. [\\#6328](https://"
"github.com/rust-lang/cargo/pull/6328)"
msgstr ""

#: src/CHANGELOG.md:6134
msgid ""
"Fixed `cargo run --example NAME` to work correctly if the example sets "
"`crate_type = [\"bin\"]`. [\\#6330](https://github.com/rust-lang/cargo/pull/"
"6330)"
msgstr ""

#: src/CHANGELOG.md:6137
msgid ""
"Fixed issue with `cargo package` git discovery being too aggressive. The `--"
"allow-dirty` now completely disables the git repo checks. [\\#6280](https://"
"github.com/rust-lang/cargo/pull/6280)"
msgstr ""

#: src/CHANGELOG.md:6140
msgid ""
"Fixed build change tracking for `[patch]` deps which resulted in `cargo "
"build` rebuilding when it shouldn't. [\\#6493](https://github.com/rust-lang/"
"cargo/pull/6493)"
msgstr ""

#: src/CHANGELOG.md:6145
msgid ""
"Allow usernames in registry URLs. [\\#6242](https://github.com/rust-lang/"
"cargo/pull/6242)"
msgstr ""

#: src/CHANGELOG.md:6147
msgid ""
"Added `\"compile_mode\"` key to the build-plan JSON structure to be able to "
"distinguish running a custom build script versus compiling the build script. "
"[\\#6331](https://github.com/rust-lang/cargo/pull/6331)"
msgstr ""

#: src/CHANGELOG.md:6150
msgid ""
"`--out-dir` no longer copies over build scripts. [\\#6300](https://"
"github.com/rust-lang/cargo/pull/6300)"
msgstr ""

#: src/CHANGELOG.md:6153
msgid "Cargo 1.31 (2018-12-06)"
msgstr ""

#: src/CHANGELOG.md:6154
msgid ""
"[36d96825...339d9f9c](https://github.com/rust-lang/cargo/compare/"
"36d96825...339d9f9c)"
msgstr ""

#: src/CHANGELOG.md:6157
msgid ""
"🔥 Stabilized support for the 2018 edition. [\\#5984](https://github.com/"
"rust-lang/cargo/pull/5984) [\\#5989](https://github.com/rust-lang/cargo/pull/"
"5989)"
msgstr ""

#: src/CHANGELOG.md:6160
msgid ""
"🔥 Added the ability to [rename dependencies](https://doc.rust-lang.org/"
"1.31.0/cargo/reference/specifying-dependencies.html#renaming-dependencies-in-"
"cargotoml) in Cargo.toml. [\\#6319](https://github.com/rust-lang/cargo/pull/"
"6319)"
msgstr ""

#: src/CHANGELOG.md:6163
msgid ""
"🔥 Added support for HTTP/2 pipelining and multiplexing. Set the "
"`http.multiplexing` config value to enable. [\\#6005](https://github.com/"
"rust-lang/cargo/pull/6005)"
msgstr ""

#: src/CHANGELOG.md:6166
msgid ""
"Added `http.debug` configuration value to debug HTTP connections. Use "
"`CARGO_HTTP_DEBUG=true RUST_LOG=cargo::ops::registry cargo build` to display "
"the debug information. [\\#6166](https://github.com/rust-lang/cargo/pull/"
"6166)"
msgstr ""

#: src/CHANGELOG.md:6169
msgid ""
"`CARGO_PKG_REPOSITORY` environment variable is set with the repository value "
"from `Cargo.toml` when building . [\\#6096](https://github.com/rust-lang/"
"cargo/pull/6096)"
msgstr ""

#: src/CHANGELOG.md:6174
msgid ""
"`cargo test --doc` now rejects other flags instead of ignoring them. "
"[\\#6037](https://github.com/rust-lang/cargo/pull/6037)"
msgstr ""

#: src/CHANGELOG.md:6176
msgid ""
"`cargo install` ignores `~/.cargo/config`. [\\#6026](https://github.com/rust-"
"lang/cargo/pull/6026)"
msgstr ""

#: src/CHANGELOG.md:6178
msgid ""
"`cargo version --verbose` is now the same as `cargo -vV`. [\\#6076](https://"
"github.com/rust-lang/cargo/pull/6076)"
msgstr ""

#: src/CHANGELOG.md:6180
msgid ""
"Comments at the top of `Cargo.lock` are now preserved. [\\#6181](https://"
"github.com/rust-lang/cargo/pull/6181)"
msgstr ""

#: src/CHANGELOG.md:6182
msgid ""
"When building in \"very verbose\" mode (`cargo build -vv`), build script "
"output is prefixed with the package name and version, such as `[foo 0.0.1]`. "
"[\\#6164](https://github.com/rust-lang/cargo/pull/6164)"
msgstr ""

#: src/CHANGELOG.md:6185
msgid ""
"If `cargo fix --broken-code` fails to compile after fixes have been applied, "
"the files are no longer reverted and are left in their broken state. "
"[\\#6316](https://github.com/rust-lang/cargo/pull/6316)"
msgstr ""

#: src/CHANGELOG.md:6190
msgid ""
"Windows: Pass Ctrl-C to the process with `cargo run`. [\\#6004](https://"
"github.com/rust-lang/cargo/pull/6004)"
msgstr ""

#: src/CHANGELOG.md:6192
msgid ""
"macOS: Fix bash completion. [\\#6038](https://github.com/rust-lang/cargo/"
"pull/6038)"
msgstr ""

#: src/CHANGELOG.md:6194
msgid ""
"Support arbitrary toolchain names when completing `+toolchain` in bash "
"completion. [\\#6038](https://github.com/rust-lang/cargo/pull/6038)"
msgstr ""

#: src/CHANGELOG.md:6196
msgid ""
"Fixed edge cases in the resolver, when backtracking on failed dependencies. "
"[\\#5988](https://github.com/rust-lang/cargo/pull/5988)"
msgstr ""

#: src/CHANGELOG.md:6198
msgid ""
"Fixed `cargo test --all-targets` running lib tests three times. [\\#6039]"
"(https://github.com/rust-lang/cargo/pull/6039)"
msgstr ""

#: src/CHANGELOG.md:6200
msgid ""
"Fixed publishing renamed dependencies to crates.io. [\\#5993](https://"
"github.com/rust-lang/cargo/pull/5993)"
msgstr ""

#: src/CHANGELOG.md:6202
msgid ""
"Fixed `cargo install` on a git repo with multiple binaries. [\\#6060]"
"(https://github.com/rust-lang/cargo/pull/6060)"
msgstr ""

#: src/CHANGELOG.md:6204
msgid ""
"Fixed deeply nested JSON emitted by rustc being lost. [\\#6081](https://"
"github.com/rust-lang/cargo/pull/6081)"
msgstr ""

#: src/CHANGELOG.md:6206
msgid ""
"Windows: Fix locking msys terminals to 60 characters. [\\#6122](https://"
"github.com/rust-lang/cargo/pull/6122)"
msgstr ""

#: src/CHANGELOG.md:6208
msgid ""
"Fixed renamed dependencies with dashes. [\\#6140](https://github.com/rust-"
"lang/cargo/pull/6140)"
msgstr ""

#: src/CHANGELOG.md:6210
msgid ""
"Fixed linking against the wrong dylib when the dylib existed in both `target/"
"debug` and `target/debug/deps`. [\\#6167](https://github.com/rust-lang/cargo/"
"pull/6167)"
msgstr ""

#: src/CHANGELOG.md:6213
msgid ""
"Fixed some unnecessary recompiles when `panic=abort` is used. [\\#6170]"
"(https://github.com/rust-lang/cargo/pull/6170)"
msgstr ""

#: src/CHANGELOG.md:6217
msgid ""
"Added `--registry` flag to `cargo install`. [\\#6128](https://github.com/"
"rust-lang/cargo/pull/6128)"
msgstr ""

#: src/CHANGELOG.md:6219
msgid ""
"Added `registry.default` configuration value to specify the default registry "
"to use if `--registry` flag is not passed. [\\#6135](https://github.com/rust-"
"lang/cargo/pull/6135)"
msgstr ""

#: src/CHANGELOG.md:6222
msgid ""
"Added `--registry` flag to `cargo new` and `cargo init`. [\\#6135](https://"
"github.com/rust-lang/cargo/pull/6135)"
msgstr ""

#: src/CHANGELOG.md:6225
msgid "Cargo 1.30 (2018-10-25)"
msgstr ""

#: src/CHANGELOG.md:6226
msgid ""
"[524a578d...36d96825](https://github.com/rust-lang/cargo/compare/"
"524a578d...36d96825)"
msgstr ""

#: src/CHANGELOG.md:6229
msgid ""
"🔥 Added an animated progress bar shows progress during building. [\\#5995]"
"(https://github.com/rust-lang/cargo/pull/5995/)"
msgstr ""

#: src/CHANGELOG.md:6231
msgid ""
"Added `resolve.nodes.deps` key to `cargo metadata`, which includes more "
"information about resolved dependencies, and properly handles renamed "
"dependencies. [\\#5871](https://github.com/rust-lang/cargo/pull/5871)"
msgstr ""

#: src/CHANGELOG.md:6234
msgid ""
"When creating a package, provide more detail with `-v` when failing to "
"discover if files are dirty in a git repository. Also fix a problem with "
"discovery on Windows. [\\#5858](https://github.com/rust-lang/cargo/pull/5858)"
msgstr ""

#: src/CHANGELOG.md:6237
msgid ""
"Filters like `--bin`, `--test`, `--example`, `--bench`, or `--lib` can be "
"used in a workspace without selecting a specific package. [\\#5873](https://"
"github.com/rust-lang/cargo/pull/5873)"
msgstr ""

#: src/CHANGELOG.md:6240
msgid ""
"`cargo run` can be used in a workspace without selecting a specific package. "
"[\\#5877](https://github.com/rust-lang/cargo/pull/5877)"
msgstr ""

#: src/CHANGELOG.md:6242
msgid ""
"`cargo doc --message-format=json` now outputs JSON messages from rustdoc. "
"[\\#5878](https://github.com/rust-lang/cargo/pull/5878)"
msgstr ""

#: src/CHANGELOG.md:6244
msgid ""
"Added `--message-format=short` to show one-line messages. [\\#5879](https://"
"github.com/rust-lang/cargo/pull/5879)"
msgstr ""

#: src/CHANGELOG.md:6246
msgid ""
"Added `.cargo_vcs_info.json` file to `.crate` packages that captures the "
"current git hash. [\\#5886](https://github.com/rust-lang/cargo/pull/5886)"
msgstr ""

#: src/CHANGELOG.md:6248
msgid ""
"Added `net.git-fetch-with-cli` configuration option to use the `git` "
"executable to fetch repositories instead of using the built-in libgit2 "
"library. [\\#5914](https://github.com/rust-lang/cargo/pull/5914)"
msgstr ""

#: src/CHANGELOG.md:6251
msgid ""
"Added `required-features` to `cargo metadata`. [\\#5902](https://github.com/"
"rust-lang/cargo/pull/5902)"
msgstr ""

#: src/CHANGELOG.md:6253
msgid ""
"`cargo uninstall` within a package will now uninstall that package. [\\#5927]"
"(https://github.com/rust-lang/cargo/pull/5927)"
msgstr ""

#: src/CHANGELOG.md:6255
msgid ""
"Added `--allow-staged` flag to `cargo fix` to allow it to run if files are "
"staged in git. [\\#5943](https://github.com/rust-lang/cargo/pull/5943)"
msgstr ""

#: src/CHANGELOG.md:6257
msgid ""
"Added `net.low-speed-limit` config value, and also honor `net.timeout` for "
"http operations. [\\#5957](https://github.com/rust-lang/cargo/pull/5957)"
msgstr ""

#: src/CHANGELOG.md:6259
msgid ""
"Added `--edition` flag to `cargo new`. [\\#5984](https://github.com/rust-"
"lang/cargo/pull/5984)"
msgstr ""

#: src/CHANGELOG.md:6261
msgid ""
"Temporarily stabilized 2018 edition support for the duration of the beta. "
"[\\#5984](https://github.com/rust-lang/cargo/pull/5984) [\\#5989](https://"
"github.com/rust-lang/cargo/pull/5989)"
msgstr ""

#: src/CHANGELOG.md:6264
msgid ""
"Added support for `target.'cfg(…)'.runner` config value to specify the run/"
"test/bench runner for targets that use config expressions. [\\#5959](https://"
"github.com/rust-lang/cargo/pull/5959)"
msgstr ""

#: src/CHANGELOG.md:6269
msgid ""
"Windows: `cargo run` will not kill child processes when the main process "
"exits. [\\#5887](https://github.com/rust-lang/cargo/pull/5887)"
msgstr ""

#: src/CHANGELOG.md:6271
msgid ""
"Switched to the `opener` crate to open a web browser with `cargo doc --"
"open`. This should more reliably select the system-preferred browser on all "
"platforms. [\\#5888](https://github.com/rust-lang/cargo/pull/5888)"
msgstr ""

#: src/CHANGELOG.md:6274
msgid ""
"Equal file mtimes now cause a target to be rebuilt. Previously only if files "
"were strictly _newer_ than the last build would it cause a rebuild. [\\#5919]"
"(https://github.com/rust-lang/cargo/pull/5919)"
msgstr ""

#: src/CHANGELOG.md:6277
msgid ""
"Ignore `build.target` config value when running `cargo install`. [\\#5874]"
"(https://github.com/rust-lang/cargo/pull/5874)"
msgstr ""

#: src/CHANGELOG.md:6279
msgid ""
"Ignore `RUSTC_WRAPPER` for `cargo fix`. [\\#5983](https://github.com/rust-"
"lang/cargo/pull/5983)"
msgstr ""

#: src/CHANGELOG.md:6281
msgid ""
"Ignore empty `RUSTC_WRAPPER`. [\\#5985](https://github.com/rust-lang/cargo/"
"pull/5985)"
msgstr ""

#: src/CHANGELOG.md:6285
msgid ""
"Fixed error when creating a package with an edition field in `Cargo.toml`. "
"[\\#5908](https://github.com/rust-lang/cargo/pull/5908)"
msgstr ""

#: src/CHANGELOG.md:6287
msgid ""
"More consistently use relative paths for path dependencies in a workspace. "
"[\\#5935](https://github.com/rust-lang/cargo/pull/5935)"
msgstr ""

#: src/CHANGELOG.md:6289
msgid ""
"`cargo fix` now always runs, even if it was run previously. [\\#5944]"
"(https://github.com/rust-lang/cargo/pull/5944)"
msgstr ""

#: src/CHANGELOG.md:6291
msgid ""
"Windows: Attempt to more reliably detect terminal width. msys-based "
"terminals are forced to 60 characters wide. [\\#6010](https://github.com/"
"rust-lang/cargo/pull/6010)"
msgstr ""

#: src/CHANGELOG.md:6294
msgid ""
"Allow multiple target flags with `cargo doc --document-private-items`. [6022]"
"(https://github.com/rust-lang/cargo/pull/6022)"
msgstr ""

#: src/CHANGELOG.md:6298
msgid ""
"Added [metabuild](https://doc.rust-lang.org/1.30.0/cargo/reference/"
"unstable.html#metabuild). [\\#5628](https://github.com/rust-lang/cargo/pull/"
"5628)"
msgstr ""

#: src/appendix/glossary.md:1
msgid "Glossary"
msgstr ""

#: src/appendix/glossary.md:3
msgid "Artifact"
msgstr ""

#: src/appendix/glossary.md:5
msgid ""
"An _artifact_ is the file or set of files created as a result of the "
"compilation process. This includes linkable libraries, executable binaries, "
"and generated documentation."
msgstr ""

#: src/appendix/glossary.md:11
msgid ""
"_Cargo_ is the Rust [_package manager_](#package-manager), and the primary "
"topic of this book."
msgstr ""

#: src/appendix/glossary.md:14
msgid "Cargo.lock"
msgstr ""

#: src/appendix/glossary.md:16
msgid "See [_lock file_](#lock-file)."
msgstr ""

#: src/appendix/glossary.md:18
msgid "Cargo.toml"
msgstr ""

#: src/appendix/glossary.md:20
msgid "See [_manifest_](#manifest)."
msgstr ""

#: src/appendix/glossary.md:22
msgid "Crate"
msgstr ""

#: src/appendix/glossary.md:24
msgid ""
"A Rust _crate_ is either a library or an executable program, referred to as "
"either a _library crate_ or a _binary crate_, respectively."
msgstr ""

#: src/appendix/glossary.md:27
msgid ""
"Every [target](#target) defined for a Cargo [package](#package) is a _crate_."
msgstr ""

#: src/appendix/glossary.md:29
msgid ""
"Loosely, the term _crate_ may refer to either the source code of the target "
"or to the compiled artifact that the target produces. It may also refer to a "
"compressed package fetched from a [registry](#registry)."
msgstr ""

#: src/appendix/glossary.md:33
msgid ""
"The source code for a given crate may be subdivided into [_modules_]"
"(#module)."
msgstr ""

#: src/appendix/glossary.md:37
msgid ""
"A _Rust edition_ is a developmental landmark of the Rust language. The "
"[edition of a package](../reference/manifest.md#the-edition-field) is "
"specified in the `Cargo.toml` [manifest](#manifest), and individual targets "
"can specify which edition they use. See the [Edition Guide](../../edition-"
"guide/index.html) for more information."
msgstr ""

#: src/appendix/glossary.md:42
msgid "Feature"
msgstr ""

#: src/appendix/glossary.md:44
msgid "The meaning of _feature_ depends on the context:"
msgstr ""

#: src/appendix/glossary.md:46
msgid ""
"A [_feature_](../reference/features.md) is a named flag which allows for "
"conditional compilation. A feature can refer to an optional dependency, or "
"an arbitrary name defined in a `Cargo.toml` [manifest](#manifest) that can "
"be checked within source code."
msgstr ""

#: src/appendix/glossary.md:51
msgid ""
"Cargo has [_unstable feature flags_](../reference/unstable.md) which can be "
"used to enable experimental behavior of Cargo itself."
msgstr ""

#: src/appendix/glossary.md:54
msgid ""
"The Rust compiler and Rustdoc have their own unstable feature flags (see "
"[The Unstable Book](https://doc.rust-lang.org/nightly/unstable-book/"
"index.html) and [The Rustdoc Book](https://doc.rust-lang.org/nightly/rustdoc/"
"unstable-features.html))."
msgstr ""

#: src/appendix/glossary.md:58
msgid ""
"CPU targets have [_target features_](../../reference/attributes/"
"codegen.html#the-target_feature-attribute) which specify capabilities of a "
"CPU."
msgstr ""

#: src/appendix/glossary.md:61
msgid "Index"
msgstr ""

#: src/appendix/glossary.md:63
msgid ""
"The _index_ is the searchable list of [_crates_](#crate) in a [_registry_]"
"(#registry)."
msgstr ""

#: src/appendix/glossary.md:66
msgid "Lock file"
msgstr ""

#: src/appendix/glossary.md:68
msgid ""
"The `Cargo.lock` _lock file_ is a file that captures the exact version of "
"every dependency used in a [_workspace_](#workspace) or [_package_]"
"(#package). It is automatically generated by Cargo. See [Cargo.toml vs "
"Cargo.lock](../guide/cargo-toml-vs-cargo-lock.md)."
msgstr ""

#: src/appendix/glossary.md:73
msgid "Manifest"
msgstr ""

#: src/appendix/glossary.md:75
msgid ""
"A [_manifest_](../reference/manifest.md) is a description of a [package]"
"(#package) or a [workspace](#workspace) in a file named `Cargo.toml`."
msgstr ""

#: src/appendix/glossary.md:78
msgid ""
"A [_virtual manifest_](../reference/workspaces.md) is a `Cargo.toml` file "
"that only describes a workspace, and does not include a package."
msgstr ""

#: src/appendix/glossary.md:81
msgid "Member"
msgstr ""

#: src/appendix/glossary.md:83
msgid ""
"A _member_ is a [_package_](#package) that belongs to a [_workspace_]"
"(#workspace)."
msgstr ""

#: src/appendix/glossary.md:86
msgid "Module"
msgstr ""

#: src/appendix/glossary.md:88
msgid ""
"Rust's module system is used to organize code into logical units called "
"_modules_, which provide isolated namespaces within the code."
msgstr ""

#: src/appendix/glossary.md:91
msgid ""
"The source code for a given [crate](#crate) may be subdivided into one or "
"more separate modules. This is usually done to organize the code into areas "
"of related functionality or to control the visible scope (public/private) of "
"symbols within the source (structs, functions, and so on)."
msgstr ""

#: src/appendix/glossary.md:96
msgid ""
"A [`Cargo.toml`](#manifest) file is primarily concerned with the [package]"
"(#package) it defines, its crates, and the packages of the crates on which "
"they depend. Nevertheless, you will see the term \"module\" often when "
"working with Rust, so you should understand its relationship to a given "
"crate."
msgstr ""

#: src/appendix/glossary.md:101
msgid "Package"
msgstr ""

#: src/appendix/glossary.md:103
msgid ""
"A _package_ is a collection of source files and a `Cargo.toml` [_manifest_]"
"(#manifest) file which describes the package. A package has a name and "
"version which is used for specifying dependencies between packages."
msgstr ""

#: src/appendix/glossary.md:107
msgid ""
"A package contains multiple [_targets_](#target), each of which is a "
"[_crate_](#crate). The `Cargo.toml` file describes the type of the crates "
"(binary or library) within the package, along with some metadata about each "
"one --- how each is to be built, what their direct dependencies are, etc., "
"as described throughout this book."
msgstr ""

#: src/appendix/glossary.md:113
msgid ""
"The _package root_ is the directory where the package's `Cargo.toml` "
"manifest is located. (Compare with [_workspace root_](#workspace).)"
msgstr ""

#: src/appendix/glossary.md:116
msgid ""
"The [_package ID specification_](../reference/pkgid-spec.md), or _SPEC_, is "
"a string used to uniquely reference a specific version of a package from a "
"specific source."
msgstr ""

#: src/appendix/glossary.md:119
msgid ""
"Small to medium sized Rust projects will only need a single package, though "
"it is common for them to have multiple crates."
msgstr ""

#: src/appendix/glossary.md:122
msgid ""
"Larger projects may involve multiple packages, in which case Cargo "
"[_workspaces_](#workspace) can be used to manage common dependencies and "
"other related metadata between the packages."
msgstr ""

#: src/appendix/glossary.md:126
msgid "Package manager"
msgstr ""

#: src/appendix/glossary.md:128
msgid ""
"Broadly speaking, a _package manager_ is a program (or collection of related "
"programs) in a software ecosystem that automates the process of obtaining, "
"installing, and upgrading artifacts. Within a programming language "
"ecosystem, a package manager is a developer-focused tool whose primary "
"functionality is to download library artifacts and their dependencies from "
"some central repository; this capability is often combined with the ability "
"to perform software builds (by invoking the language-specific compiler)."
msgstr ""

#: src/appendix/glossary.md:136
msgid ""
"[_Cargo_](#cargo) is the package manager within the Rust ecosystem. Cargo "
"downloads your Rust [package](#package)’s dependencies ([_artifacts_]"
"(#artifact) known as [_crates_](#crate)), compiles your packages, makes "
"distributable packages, and (optionally) uploads them to [crates.io](https://"
"crates.io/), the Rust community’s [_package registry_](#registry)."
msgstr ""

#: src/appendix/glossary.md:142
msgid "Package registry"
msgstr ""

#: src/appendix/glossary.md:144
msgid "See [_registry_](#registry)."
msgstr ""

#: src/appendix/glossary.md:146
msgid "Project"
msgstr ""

#: src/appendix/glossary.md:148
msgid "Another name for a [package](#package)."
msgstr ""

#: src/appendix/glossary.md:150
msgid "Registry"
msgstr ""

#: src/appendix/glossary.md:152
msgid ""
"A _registry_ is a service that contains a collection of downloadable "
"[_crates_](#crate) that can be installed or used as dependencies for a "
"[_package_](#package). The default registry in the Rust ecosystem is "
"[crates.io](https://crates.io). The registry has an [_index_](#index) which "
"contains a list of all crates, and tells Cargo how to download the crates "
"that are needed."
msgstr ""

#: src/appendix/glossary.md:159
msgid "Source"
msgstr ""

#: src/appendix/glossary.md:161
msgid ""
"A _source_ is a provider that contains [_crates_](#crate) that may be "
"included as dependencies for a [_package_](#package). There are several "
"kinds of sources:"
msgstr ""

#: src/appendix/glossary.md:165
msgid "**Registry source** --- See [registry](#registry)."
msgstr ""

#: src/appendix/glossary.md:166
msgid ""
"**Local registry source** --- A set of crates stored as compressed files on "
"the filesystem. See [Local Registry Sources](../reference/source-"
"replacement.md#local-registry-sources)."
msgstr ""

#: src/appendix/glossary.md:168
msgid ""
"**Directory source** --- A set of crates stored as uncompressed files on the "
"filesystem. See [Directory Sources](../reference/source-"
"replacement.md#directory-sources)."
msgstr ""

#: src/appendix/glossary.md:170
msgid ""
"**Path source** --- An individual package located on the filesystem (such as "
"a [path dependency](../reference/specifying-dependencies.md#specifying-path-"
"dependencies)) or a set of multiple packages (such as [path overrides](../"
"reference/overriding-dependencies.md#paths-overrides))."
msgstr ""

#: src/appendix/glossary.md:172
msgid ""
"**Git source** --- Packages located in a git repository (such as a [git "
"dependency](../reference/specifying-dependencies.md#specifying-dependencies-"
"from-git-repositories) or [git source](../reference/source-replacement.md))."
msgstr ""

#: src/appendix/glossary.md:175
msgid ""
"See [Source Replacement](../reference/source-replacement.md) for more "
"information."
msgstr ""

#: src/appendix/glossary.md:179
msgid "See [package ID specification](#package)."
msgstr ""

#: src/appendix/glossary.md:183
msgid "The meaning of the term _target_ depends on the context:"
msgstr ""

#: src/appendix/glossary.md:185
msgid ""
"**Cargo Target** --- Cargo [_packages_](#package) consist of _targets_ which "
"correspond to [_artifacts_](#artifact) that will be produced. Packages can "
"have library, binary, example, test, and benchmark targets. The [list of "
"targets](../reference/cargo-targets.md#configuring-a-target) are configured "
"in the `Cargo.toml` [_manifest_](#manifest), often inferred automatically by "
"the [directory layout](../guide/project-layout.md) of the source files."
msgstr ""

#: src/appendix/glossary.md:191
msgid ""
"**Target Directory** --- Cargo places all built artifacts and intermediate "
"files in the _target_ directory. By default this is a directory named "
"`target` at the [_workspace_](#workspace) root, or the package root if not "
"using a workspace. The directory may be changed with the `--target-dir` "
"command-line option, the `CARGO_TARGET_DIR` [environment variable](../"
"reference/environment-variables.md), or the `build.target-dir` [config "
"option](../reference/config.md)."
msgstr ""

#: src/appendix/glossary.md:197
msgid ""
"**Target Architecture** --- The OS and machine architecture for the built "
"artifacts are typically referred to as a _target_."
msgstr ""

#: src/appendix/glossary.md:199
msgid ""
"**Target Triple** --- A triple is a specific format for specifying a target "
"architecture. Triples may be referred to as a _target triple_ which is the "
"architecture for the artifact produced, and the _host triple_ which is the "
"architecture that the compiler is running on. The target triple can be "
"specified with the `--target` command-line option or the `build.target` "
"[config option](../reference/config.md). The general format of the triple is "
"`<arch><sub>-<vendor>-<sys>-<abi>` where:"
msgstr ""

#: src/appendix/glossary.md:207
msgid ""
"`arch` = The base CPU architecture, for example `x86_64`, `i686`, `arm`, "
"`thumb`, `mips`, etc."
msgstr ""

#: src/appendix/glossary.md:209
msgid ""
"`sub` = The CPU sub-architecture, for example `arm` has `v7`, `v7s`, `v5te`, "
"etc."
msgstr ""

#: src/appendix/glossary.md:211
msgid ""
"`vendor` = The vendor, for example `unknown`, `apple`, `pc`, `nvidia`, etc."
msgstr ""

#: src/appendix/glossary.md:212
msgid ""
"`sys` = The system name, for example `linux`, `windows`, `darwin`, etc. "
"`none` is typically used for bare-metal without an OS."
msgstr ""

#: src/appendix/glossary.md:214
msgid "`abi` = The ABI, for example `gnu`, `android`, `eabi`, etc."
msgstr ""

#: src/appendix/glossary.md:216
msgid ""
"Some parameters may be omitted. Run `rustc --print target-list` for a list "
"of supported targets."
msgstr ""

#: src/appendix/glossary.md:219
msgid "Test Targets"
msgstr ""

#: src/appendix/glossary.md:221
msgid ""
"Cargo _test targets_ generate binaries which help verify proper operation "
"and correctness of code. There are two types of test artifacts:"
msgstr ""

#: src/appendix/glossary.md:224
msgid ""
"**Unit test** --- A _unit test_ is an executable binary compiled directly "
"from a library or a binary target. It contains the entire contents of the "
"library or binary code, and runs `#[test]` annotated functions, intended to "
"verify individual units of code."
msgstr ""

#: src/appendix/glossary.md:228
msgid ""
"**Integration test target** --- An [_integration test target_](../reference/"
"cargo-targets.md#integration-tests) is an executable binary compiled from a "
"_test target_ which is a distinct [_crate_](#crate) whose source is located "
"in the `tests` directory or specified by the [`[[test]]` table](../reference/"
"cargo-targets.md#configuring-a-target) in the `Cargo.toml` [_manifest_]"
"(#manifest). It is intended to only test the public API of a library, or "
"execute a binary to verify its operation."
msgstr ""

#: src/appendix/glossary.md:235
msgid "Workspace"
msgstr ""

#: src/appendix/glossary.md:237
msgid ""
"A [_workspace_](../reference/workspaces.md) is a collection of one or more "
"[_packages_](#package) that share common dependency resolution (with a "
"shared `Cargo.lock` [_lock file_](#lock-file)), output directory, and "
"various settings such as profiles."
msgstr ""

#: src/appendix/glossary.md:242
msgid ""
"A [_virtual workspace_](../reference/workspaces.md) is a workspace where the "
"root `Cargo.toml` [_manifest_](#manifest) does not define a package, and "
"only lists the workspace [_members_](#member)."
msgstr ""

#: src/appendix/glossary.md:246
msgid ""
"The _workspace root_ is the directory where the workspace's `Cargo.toml` "
"manifest is located. (Compare with [_package root_](#package).)"
msgstr ""

#: src/appendix/git-authentication.md:1
msgid "Git Authentication"
msgstr ""

#: src/appendix/git-authentication.md:3
msgid ""
"Cargo supports some forms of authentication when using git dependencies and "
"registries. This appendix contains some information for setting up git "
"authentication in a way that works with Cargo."
msgstr ""

#: src/appendix/git-authentication.md:7
msgid ""
"If you need other authentication methods, the [`net.git-fetch-with-cli`](../"
"reference/config.md#netgit-fetch-with-cli) config value can be set to cause "
"Cargo to execute the `git` executable to handle fetching remote repositories "
"instead of using the built-in support. This can be enabled with the "
"`CARGO_NET_GIT_FETCH_WITH_CLI=true` environment variable."
msgstr ""

#: src/appendix/git-authentication.md:13
msgid "HTTPS authentication"
msgstr ""

#: src/appendix/git-authentication.md:15
msgid ""
"HTTPS authentication requires the [`credential.helper`](https://git-scm.com/"
"book/en/v2/Git-Tools-Credential-Storage) mechanism. There are multiple "
"credential helpers, and you specify the one you want to use in your global "
"git configuration file."
msgstr ""

#: src/appendix/git-authentication.md:26
msgid ""
"Cargo does not ask for passwords, so for most helpers you will need to give "
"the helper the initial username/password before running Cargo. One way to do "
"this is to run `git clone` of the private git repo and enter the username/"
"password."
msgstr ""

#: src/appendix/git-authentication.md:31
msgid ""
"**Tip:**<br> macOS users may want to consider using the osxkeychain helper."
"<br> Windows users may want to consider using the [GCM](https://github.com/"
"microsoft/Git-Credential-Manager-Core/) helper."
msgstr ""

#: src/appendix/git-authentication.md:35
msgid ""
"**Note:** Windows users will need to make sure that the `sh` shell is "
"available in your `PATH`. This typically is available with the Git for "
"Windows installation."
msgstr ""

#: src/appendix/git-authentication.md:39
msgid "SSH authentication"
msgstr ""

#: src/appendix/git-authentication.md:41
msgid ""
"SSH authentication requires `ssh-agent` to be running to acquire the SSH "
"key. Make sure the appropriate environment variables are set up "
"(`SSH_AUTH_SOCK` on most Unix-like systems), and that the correct keys are "
"added (with `ssh-add`)."
msgstr ""

#: src/appendix/git-authentication.md:45
msgid ""
"Windows can use Pageant (part of [PuTTY](https://www.chiark.greenend.org.uk/"
"~sgtatham/putty/)) or `ssh-agent`. To use `ssh-agent`, Cargo needs to use "
"the OpenSSH that is distributed as part of Windows, as Cargo does not "
"support the simulated Unix-domain sockets used by MinGW or Cygwin. More "
"information about installing with Windows can be found at the [Microsoft "
"installation documentation](https://docs.microsoft.com/en-us/windows-server/"
"administration/openssh/openssh_install_firstuse) and the page on [key "
"management](https://docs.microsoft.com/en-us/windows-server/administration/"
"openssh/openssh_keymanagement) has instructions on how to start `ssh-agent` "
"and to add keys."
msgstr ""

#: src/appendix/git-authentication.md:53
msgid ""
"**Note:** Cargo does not support git's shorthand SSH URLs like "
"`git@example.com:user/repo.git`. Use a full SSH URL like `ssh://"
"git@example.com/user/repo.git`."
msgstr ""

#: src/appendix/git-authentication.md:57
msgid ""
"**Note:** SSH configuration files (like OpenSSH's `~/.ssh/config`) are not "
"used by Cargo's built-in SSH library. More advanced requirements should use "
"[`net.git-fetch-with-cli`](../reference/config.md#netgit-fetch-with-cli)."
msgstr ""

#: src/appendix/git-authentication.md:61
msgid "SSH Known Hosts"
msgstr ""

#: src/appendix/git-authentication.md:63
msgid ""
"When connecting to an SSH host, Cargo must verify the identity of the host "
"using \"known hosts\", which are a list of host keys. Cargo can look for "
"these known hosts in OpenSSH-style `known_hosts` files located in their "
"standard locations (`.ssh/known_hosts` in your home directory, or `/etc/ssh/"
"ssh_known_hosts` on Unix-like platforms or `%PROGRAMDATA%"
"\\ssh\\ssh_known_hosts` on Windows). More information about these files can "
"be found in the [sshd man page](https://man.openbsd.org/"
"sshd#SSH_KNOWN_HOSTS_FILE_FORMAT). Alternatively, keys may be configured in "
"a Cargo configuration file with [`net.ssh.known-hosts`](../reference/"
"config.md#netsshknown-hosts)."
msgstr ""

#: src/appendix/git-authentication.md:72
msgid ""
"When connecting to an SSH host before the known hosts has been configured, "
"Cargo will display an error message instructing you how to add the host key. "
"This also includes a \"fingerprint\", which is a smaller hash of the host "
"key, which should be easier to visually verify. The server administrator can "
"get the fingerprint by running `ssh-keygen` against the public key (for "
"example, `ssh-keygen -l -f /etc/ssh/ssh_host_ecdsa_key.pub`). Well-known "
"sites may publish their fingerprints on the web; for example GitHub posts "
"theirs at <https://docs.github.com/en/authentication/keeping-your-account-"
"and-data-secure/githubs-ssh-key-fingerprints>."
msgstr ""

#: src/appendix/git-authentication.md:81
msgid ""
"Cargo comes with the host keys for [github.com](https://github.com) built-"
"in. If those ever change, you can add the new keys to the config or "
"known_hosts file."
msgstr ""

#: src/appendix/git-authentication.md:84
msgid ""
"**Note:** Cargo doesn't support the `@cert-authority` or `@revoked` markers "
"in `known_hosts` files. To make use of this functionality, use [`net.git-"
"fetch-with-cli`](../reference/config.md#netgit-fetch-with-cli). This is also "
"a good tip if Cargo's SSH client isn't behaving the way you expect it to."
msgstr ""

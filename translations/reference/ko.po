msgstr "_백슬래시 이스케이프_는 `U+005C`(`\\`) 문자이며, ASCII 인코딩 `0x5C`를 나타내기 위해 _이스케이프_되어야 합니다."
"Project-Id-Version: The Rust Reference\n"
"POT-Creation-Date: 2025-10-15T16:19:04+09:00\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ko\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"PO-Revision-Date: 2025-10-15T16:19:04+09:00\n"
"Last-Translator: Automatically generated\n"
"Language-Team: none\n"

#: src/SUMMARY.md:1
msgid "The Rust Reference"
msgstr "러스트 레퍼런스"

#: src/SUMMARY.md:3 src/introduction.md:1
msgid "Introduction"
msgstr "소개"

#: src/SUMMARY.md:5 src/notation.md:1 src/notation.md:7
msgid "Notation"
msgstr "표기법"

#: src/SUMMARY.md:7 src/lexical-structure.md:1
msgid "Lexical structure"
msgstr "어휘 구조"

#: src/SUMMARY.md:8 src/input-format.md:3
msgid "Input format"
msgstr "입력 형식"

#: src/SUMMARY.md:9 src/keywords.md:3
msgid "Keywords"
msgstr "키워드"

#: src/SUMMARY.md:10 src/identifiers.md:3
msgid "Identifiers"
msgstr "식별자"

#: src/SUMMARY.md:11 src/comments.md:3
msgid "Comments"
msgstr "주석"

#: src/SUMMARY.md:12 src/whitespace.md:3
msgid "Whitespace"
msgstr "공백"

#: src/SUMMARY.md:13 src/tokens.md:3
msgid "Tokens"
msgstr "토큰"

#: src/SUMMARY.md:15 src/macros.md:3 src/attributes.md:301
msgid "Macros"
msgstr "매크로"

#: src/SUMMARY.md:16 src/macros-by-example.md:3
msgid "Macros By Example"
msgstr "예제를 통한 매크로"

#: src/SUMMARY.md:17 src/procedural-macros.md:3
msgid "Procedural Macros"
msgstr "절차적 매크로"

#: src/SUMMARY.md:19 src/crates-and-source-files.md:3
msgid "Crates and source files"
msgstr "크레이트와 소스 파일"

#: src/SUMMARY.md:21 src/conditional-compilation.md:3 src/attributes.md:287
msgid "Conditional compilation"
msgstr "조건부 컴파일"

#: src/SUMMARY.md:23 src/items.md:3
msgid "Items"
msgstr "아이템"

#: src/SUMMARY.md:24 src/items/modules.md:3 src/attributes.md:352
msgid "Modules"
msgstr "모듈"

#: src/SUMMARY.md:25
msgid "Extern crates"
msgstr "외부 크레이트"

#: src/SUMMARY.md:26 src/items/use-declarations.md:3
#: src/names/namespaces.md:106
msgid "Use declarations"
msgstr "Use 선언"

#: src/SUMMARY.md:27 src/items/functions.md:3 src/items/external-blocks.md:51
msgid "Functions"
msgstr "함수"

#: src/SUMMARY.md:28 src/items/type-aliases.md:3
msgid "Type aliases"
msgstr "타입 별칭"

#: src/SUMMARY.md:29 src/items/structs.md:3
msgid "Structs"
msgstr "구조체"

#: src/SUMMARY.md:30 src/items/enumerations.md:3
msgid "Enumerations"
msgstr "열거형"

#: src/SUMMARY.md:31 src/items/unions.md:3
msgid "Unions"
msgstr "공용체"

#: src/SUMMARY.md:32 src/items/constant-items.md:3
msgid "Constant items"
msgstr "상수 아이템"

#: src/SUMMARY.md:33 src/items/static-items.md:3
msgid "Static items"
msgstr "정적 아이템"

#: src/SUMMARY.md:34 src/items/traits.md:3
msgid "Traits"
msgstr "트레잇"

#: src/SUMMARY.md:35 src/items/implementations.md:3
msgid "Implementations"
msgstr "구현"

#: src/SUMMARY.md:36 src/items/external-blocks.md:3
msgid "External blocks"
msgstr "외부 블록"

#: src/SUMMARY.md:37 src/items/generics.md:3
msgid "Generic parameters"
msgstr "제네릭 파라미터"

#: src/SUMMARY.md:38 src/items/associated-items.md:3
msgid "Associated Items"
msgstr "연관 아이템"

#: src/SUMMARY.md:40 src/items/generics.md:297 src/attributes.md:30
msgid "Attributes"
msgstr "속성"

#: src/SUMMARY.md:41 src/attributes.md:291
msgid "Testing"
msgstr "테스팅"

#: src/SUMMARY.md:42 src/attributes.md:296 src/attributes/derive.md:3
msgid "Derive"
msgstr "파생"

#: src/SUMMARY.md:43 src/attributes.md:309
msgid "Diagnostics"
msgstr "진단"

#: src/SUMMARY.md:44 src/attributes.md:336
msgid "Code generation"
msgstr "코드 생성"

#: src/SUMMARY.md:45 src/attributes.md:355 src/attributes/limits.md:3
msgid "Limits"
msgstr "제한"

#: src/SUMMARY.md:46 src/attributes.md:369
msgid "Type System"
msgstr "타입 시스템"

#: src/SUMMARY.md:47 src/attributes.md:373
msgid "Debugger"
msgstr "디버거"

#: src/SUMMARY.md:49 src/statements-and-expressions.md:3
msgid "Statements and expressions"
msgstr "구문과 표현식"

#: src/SUMMARY.md:50 src/statements.md:3
msgid "Statements"
msgstr "구문"

#: src/SUMMARY.md:51 src/expressions.md:3
msgid "Expressions"
msgstr "표현식"

#: src/SUMMARY.md:52 src/expressions/literal-expr.md:3
msgid "Literal expressions"
msgstr "리터럴 표현식"

#: src/SUMMARY.md:53 src/expressions/path-expr.md:3
msgid "Path expressions"
msgstr "경로 표현식"

#: src/SUMMARY.md:54 src/expressions/block-expr.md:3
msgid "Block expressions"
msgstr "블록 표현식"

#: src/SUMMARY.md:55 src/expressions/operator-expr.md:3
msgid "Operator expressions"
msgstr "연산자 표현식"

#: src/SUMMARY.md:56 src/expressions/grouped-expr.md:3
msgid "Grouped expressions"
msgstr "그룹화된 표현식"

#: src/SUMMARY.md:57
msgid "Array and index expressions"
msgstr "배열 및 인덱스 표현식"

#: src/SUMMARY.md:58
msgid "Tuple and index expressions"
msgstr "튜플 및 인덱스 표현식"

#: src/SUMMARY.md:59 src/expressions/struct-expr.md:3
msgid "Struct expressions"
msgstr "구조체 표현식"

#: src/SUMMARY.md:60 src/expressions/call-expr.md:3
msgid "Call expressions"
msgstr "호출 표현식"

#: src/SUMMARY.md:61
msgid "Method call expressions"
msgstr "메서드 호출 표현식"

#: src/SUMMARY.md:62 src/expressions/field-expr.md:3
msgid "Field access expressions"
msgstr "필드 접근 표현식"

#: src/SUMMARY.md:63 src/expressions/closure-expr.md:3
msgid "Closure expressions"
msgstr "클로저 표현식"

#: src/SUMMARY.md:64
msgid "Loop expressions"
msgstr "루프 표현식"

#: src/SUMMARY.md:65 src/expressions/range-expr.md:3
msgid "Range expressions"
msgstr "범위 표현식"

#: src/SUMMARY.md:66
msgid "If and if let expressions"
msgstr "if 및 if let 표현식"

#: src/SUMMARY.md:67
msgid "Match expressions"
msgstr "match 표현식"

#: src/SUMMARY.md:68
msgid "Return expressions"
msgstr "return 표현식"

#: src/SUMMARY.md:69 src/expressions/await-expr.md:3
msgid "Await expressions"
msgstr "await 표현식"

#: src/SUMMARY.md:70
msgid "Underscore expressions"
msgstr "밑줄 표현식"

#: src/SUMMARY.md:72 src/patterns.md:3
msgid "Patterns"
msgstr "패턴"

#: src/SUMMARY.md:74 src/type-system.md:1
msgid "Type system"
msgstr "타입 시스템"

#: src/SUMMARY.md:75 src/types.md:46
msgid "Types"
msgstr "타입"

#: src/SUMMARY.md:76 src/types/boolean.md:3
msgid "Boolean type"
msgstr "불리언 타입"

#: src/SUMMARY.md:77 src/types/numeric.md:3
msgid "Numeric types"
msgstr "숫자 타입"

#: src/SUMMARY.md:78 src/types/textual.md:3
msgid "Textual types"
msgstr "텍스트 타입"

#: src/SUMMARY.md:79 src/types/never.md:3
msgid "Never type"
msgstr "결코 리턴하지 않는 타입"

#: src/SUMMARY.md:80 src/types/tuple.md:3
msgid "Tuple types"
msgstr "튜플 타입"

#: src/SUMMARY.md:81 src/types/array.md:3
msgid "Array types"
msgstr "배열 타입"

#: src/SUMMARY.md:82 src/types/slice.md:3
msgid "Slice types"
msgstr "슬라이스 타입"

#: src/SUMMARY.md:83 src/types/struct.md:3
msgid "Struct types"
msgstr "구조체 타입"

#: src/SUMMARY.md:84 src/types/enum.md:3
msgid "Enumerated types"
msgstr "열거 타입"

#: src/SUMMARY.md:85 src/types/union.md:3
msgid "Union types"
msgstr "공용체 타입"

#: src/SUMMARY.md:86 src/types/function-item.md:3
msgid "Function item types"
msgstr "함수 아이템 타입"

#: src/SUMMARY.md:87 src/types/closure.md:3
msgid "Closure types"
msgstr "클로저 타입"

#: src/SUMMARY.md:88 src/types/pointer.md:3
msgid "Pointer types"
msgstr "포인터 타입"

#: src/SUMMARY.md:89 src/types/function-pointer.md:3
msgid "Function pointer types"
msgstr "함수 포인터 타입"

#: src/SUMMARY.md:90
msgid "Trait object types"
msgstr "트레잇 객체 타입"

#: src/SUMMARY.md:91
msgid "Impl trait type"
msgstr "impl 트레잇 타입"

#: src/SUMMARY.md:92 src/types/parameters.md:3
msgid "Type parameters"
msgstr "타입 파라미터"

#: src/SUMMARY.md:93 src/types/inferred.md:3
msgid "Inferred type"
msgstr "추론된 타입"

#: src/SUMMARY.md:94 src/dynamically-sized-types.md:1
msgid "Dynamically Sized Types"
msgstr "동적 크기 타입"

#: src/SUMMARY.md:95
msgid "Type layout"
msgstr "타입 레이아웃"

#: src/SUMMARY.md:96
msgid "Interior mutability"
msgstr "내부 가변성"

#: src/SUMMARY.md:97 src/subtyping.md:3
msgid "Subtyping and Variance"
msgstr "서브타이핑과 가변성"

#: src/SUMMARY.md:98 src/trait-bounds.md:3
msgid "Trait and lifetime bounds"
msgstr "트레잇과 라이프타임 바운드"

#: src/SUMMARY.md:99 src/type-coercions.md:3
msgid "Type coercions"
msgstr "타입 강제 변환"

#: src/SUMMARY.md:100 src/destructors.md:1
msgid "Destructors"
msgstr "소멸자"

#: src/SUMMARY.md:101 src/lifetime-elision.md:3
msgid "Lifetime elision"
msgstr "라이프타임 생략"

#: src/SUMMARY.md:103 src/special-types-and-traits.md:3
msgid "Special types and traits"
msgstr "특수 타입과 트레잇"

#: src/SUMMARY.md:105 src/names.md:3
msgid "Names"
msgstr "이름"

#: src/SUMMARY.md:106 src/names/namespaces.md:3
msgid "Namespaces"
msgstr "네임스페이스"

#: src/SUMMARY.md:107 src/names/scopes.md:3
msgid "Scopes"
msgstr "스코프"

#: src/SUMMARY.md:108 src/attributes.md:348 src/names/preludes.md:3
msgid "Preludes"
msgstr "프렐류드"

#: src/SUMMARY.md:109 src/expressions.md:86 src/paths.md:3
msgid "Paths"
msgstr "경로"

#: src/SUMMARY.md:110 src/names/name-resolution.md:1 src/glossary.md:158
msgid "Name resolution"
msgstr "이름 확인"

#: src/SUMMARY.md:111
msgid "Visibility and privacy"
msgstr "가시성과 프라이버시"

#: src/SUMMARY.md:113 src/memory-model.md:1
msgid "Memory model"
msgstr "메모리 모델"

#: src/SUMMARY.md:114 src/memory-allocation-and-lifetime.md:3
msgid "Memory allocation and lifetime"
msgstr "메모리 할당과 라이프타임"

#: src/SUMMARY.md:115 src/variables.md:3
msgid "Variables"
msgstr "변수"

#: src/SUMMARY.md:117 src/linkage.md:3
msgid "Linkage"
msgstr "연결"

#: src/SUMMARY.md:119 src/inline-assembly.md:3
msgid "Inline assembly"
msgstr "인라인 어셈블리"

#: src/SUMMARY.md:121 src/unsafety.md:3
msgid "Unsafety"
msgstr "안전하지 않음"

#: src/SUMMARY.md:122 src/unsafe-keyword.md:3
msgid "The `unsafe` keyword"
msgstr "`unsafe` 키워드"

#: src/SUMMARY.md:123 src/behavior-considered-undefined.md:3
msgid "Behavior considered undefined"
msgstr "정의되지 않은 동작으로 간주되는 경우"

#: src/SUMMARY.md:124
msgid "Behavior not considered unsafe"
msgstr "안전하지 않은 것으로 간주되지 않는 동작"

#: src/SUMMARY.md:126
msgid "Constant Evaluation"
msgstr "상수 평가"

#: src/SUMMARY.md:128
msgid "Application Binary Interface"
msgstr "애플리케이션 바이너리 인터페이스"

#: src/SUMMARY.md:130 src/runtime.md:3
msgid "The Rust runtime"
msgstr "러스트 런타임"

#: src/SUMMARY.md:132 src/appendices.md:1
msgid "Appendices"
msgstr "부록"

#: src/SUMMARY.md:133
msgid "Macro Follow-Set Ambiguity Formal Specification"
msgstr "매크로 Follow-Set 모호성 공식 명세"

#: src/SUMMARY.md:134 src/influences.md:1
msgid "Influences"
msgstr "영향"

#: src/SUMMARY.md:135 src/test-summary.md:1
msgid "Test summary"
msgstr "테스트 요약"

#: src/SUMMARY.md:136 src/glossary.md:1
msgid "Glossary"
msgstr "용어집"

#: src/introduction.md:3
msgid "This book is the primary reference for the Rust programming language. It provides three kinds of material:"
msgstr "이 책은 러스트 프로그래밍 언어의 주요 참고 자료입니다. 이 책은 세 가지 종류의 자료를 제공합니다:"

#: src/introduction.md:6
msgid "Chapters that informally describe each language construct and their use."
msgstr "각 언어 구성 요소와 그 사용법을 비공식적으로 설명하는 장."

#: src/introduction.md:7
msgid "Chapters that informally describe the memory model, concurrency model, runtime services, linkage model, and debugging facilities."
msgstr "메모리 모델, 동시성 모델, 런타임 서비스, 연결 모델 및 디버깅 기능을 비공식적으로 설명하는 장."

#: src/introduction.md:8
msgid ""
"Appendix chapters providing rationale and references to languages that "
"influenced the design."
msgstr "설계에 영향을 미친 언어에 대한 근거와 참조를 제공하는 부록 장."

#: src/introduction.md:12
msgid ""
"_**Warning:**_ This book is incomplete. Documenting everything takes a "
"while. See the [GitHub issues](https://github.com/rust-lang/reference/"
"issues) for what is not documented in this book."
msgstr "_**경고:**_ 이 책은 미완성입니다. 모든 것을 문서화하는 데는 시간이 걸립니다. 이 책에 문서화되지 않은 내용은 [GitHub 이슈](https://github.com/rust-lang/reference/issues)를 참조하십시오."

#: src/introduction.md:19
msgid "Rust releases"
msgstr "러스트 릴리스"

#: src/introduction.md:21
msgid "Rust has a new language release every six weeks. The first stable release of the language was Rust 1.0.0, followed by Rust 1.1.0 and so on. Tools (`rustc`, `cargo`, etc.) and documentation ([Standard library](../std/index.html), this book, etc.) are released with the language release."
msgstr "러스트는 6주마다 새로운 언어 릴리스를 발표합니다. 언어의 첫 번째 안정 릴리스는 Rust 1.0.0이었고, 이어서 Rust 1.1.0 등이 출시되었습니다. 도구(`rustc`, `cargo` 등) 및 문서([표준 라이브러리](../std/index.html), 이 책 등)는 언어 릴리스와 함께 출시됩니다."

#: src/introduction.md:25
msgid "The latest release of this book, matching the latest Rust version, can always be found at <https://doc.rust-lang.org/reference/>. Prior versions can be found by adding the Rust version before the \"reference\" directory. For example, the Reference for Rust 1.49.0 is located at <https://doc.rust-lang.org/1.49.0/reference/>."
msgstr "최신 Rust 버전에 해당하는 이 책의 최신 릴리스는 항상 <https://doc.rust-lang.org/reference/>에서 찾을 수 있습니다. 이전 버전은 \"reference\" 디렉토리 앞에 Rust 버전을 추가하여 찾을 수 있습니다. 예를 들어, Rust 1.49.0에 대한 참조는 <https://doc.rust-lang.org/1.49.0/reference/>에 있습니다."

#: src/introduction.md:29
msgid "What _The Reference_ is not"
msgstr "_참조_가 아닌 것"

#: src/introduction.md:31
msgid "This book does not serve as an introduction to the language. Background familiarity with the language is assumed. A separate [book](../book/index.html) is available to help acquire such background familiarity."
msgstr "이 책은 언어 입문서가 아닙니다. 언어에 대한 기본적인 지식이 있다고 가정합니다. 이러한 배경 지식을 습득하는 데 도움이 되는 별도의 [책](../book/index.html)이 있습니다."

#: src/introduction.md:35
msgid "This book also does not serve as a reference to the [standard library](../std/index.html) included in the language distribution. Those libraries are documented separately by extracting documentation attributes from their source code. Many of the features that one might expect to be language features are library features in Rust, so what you're looking for may be there, not here."
msgstr "이 책은 또한 언어 배포판에 포함된 [표준 라이브러리](../std/index.html)에 대한 참조 역할을 하지 않습니다. 해당 라이브러리는 소스 코드에서 문서 속성을 추출하여 별도로 문서화됩니다. 언어 기능이라고 예상할 수 있는 많은 기능이 Rust에서는 라이브러리 기능이므로, 찾고 있는 것이 여기에 없을 수도 있습니다."

#: src/introduction.md:39
msgid "Similarly, this book does not usually document the specifics of `rustc` as a tool or of Cargo. `rustc` has its own [book](../rustc/index.html). Cargo has a [book](../cargo/index.html) that contains a [reference](../cargo/reference/index.html). There are a few pages such as [linkage](linkage.html) that still describe how `rustc` works."
msgstr "마찬가지로, 이 책은 일반적으로 `rustc` 도구 또는 Cargo의 세부 사항을 문서화하지 않습니다. `rustc`에는 자체 [책](../rustc/index.html)이 있습니다. Cargo에는 [참조](../cargo/reference/index.html)가 포함된 [책](../cargo/index.html)이 있습니다. [연결](linkage.html)과 같은 몇몇 페이지는 여전히 `rustc`의 작동 방식을 설명합니다."

#: src/introduction.md:44
msgid ""
"This book also only serves as a reference to what is available in stable "
"Rust. For unstable features being worked on, see the [Unstable Book](https://"
"doc.rust-lang.org/nightly/unstable-book/)."
msgstr "이 책은 또한 안정적인 Rust에서 사용할 수 있는 기능에 대한 참조 역할만 합니다. 개발 중인 불안정한 기능에 대해서는 [불안정 책](https://doc.rust-lang.org/nightly/unstable-book/)을 참조하십시오."

#: src/introduction.md:47
msgid "Rust compilers, including `rustc`, will perform optimizations. The reference does not specify what optimizations are allowed or disallowed. Instead, think of the compiled program as a black box. You can only probe by running it, feeding it input and observing its output. Everything that happens that way must conform to what the reference says."
msgstr "`rustc`를 포함한 Rust 컴파일러는 최적화를 수행합니다. 참조는 어떤 최적화가 허용되거나 허용되지 않는지 명시하지 않습니다. 대신, 컴파일된 프로그램을 블랙박스로 생각하십시오. 프로그램을 실행하고 입력을 제공하며 출력을 관찰함으로써만 탐색할 수 있습니다. 그렇게 발생하는 모든 것은 참조가 말하는 바를 따라야 합니다."

#: src/introduction.md:53
msgid ""
"Finally, this book is not normative. It may include details that are "
"specific to `rustc` itself, and should not be taken as a specification for "
"the Rust language. We intend to produce such a book someday, and until then, "
"the reference is the closest thing we have to one."
msgstr "마지막으로, 이 책은 규범적이지 않습니다. `rustc` 자체에 특정한 세부 사항을 포함할 수 있으며, Rust 언어에 대한 사양으로 간주되어서는 안 됩니다. 우리는 언젠가 그러한 책을 만들 계획이며, 그때까지는 이 참조가 가장 가까운 것입니다."

#: src/introduction.md:57
msgid "How to use this book"
msgstr "이 책을 사용하는 방법"

#: src/introduction.md:59
msgid "This book does not assume you are reading this book sequentially. Each chapter generally can be read standalone, but will cross-link to other chapters for facets of the language they refer to, but do not discuss."
msgstr "이 책은 순차적으로 읽는다고 가정하지 않습니다. 각 장은 일반적으로 독립적으로 읽을 수 있지만, 언급하지만 논의하지 않는 언어의 측면에 대해서는 다른 장으로 상호 연결됩니다."

#: src/introduction.md:62
msgid "There are two main ways to read this document."
msgstr "이 문서를 읽는 두 가지 주요 방법이 있습니다."

#: src/introduction.md:64
msgid "The first is to answer a specific question. If you know which chapter answers that question, you can jump to that chapter in the table of contents. Otherwise, you can press `s` or click the magnifying glass on the top bar to search for keywords related to your question. For example, say you wanted to know when a temporary value created in a let statement is dropped. If you didn't already know that the [lifetime of temporaries](expressions.html#temporaries) is defined in the [expressions chapter](expressions.html), you could search \"temporary let\" and the first search result will take you to that section."
msgstr "첫 번째는 특정 질문에 답하는 것입니다. 해당 질문에 답하는 장을 알고 있다면 목차에서 해당 장으로 이동할 수 있습니다. 그렇지 않으면 `s`를 누르거나 상단 바의 돋보기를 클릭하여 질문과 관련된 키워드를 검색할 수 있습니다. 예를 들어, let 문에서 생성된 임시 값이 언제 삭제되는지 알고 싶다고 가정해 봅시다. [임시 값의 수명](expressions.html#temporaries)이 [표현식 장](expressions.html)에 정의되어 있다는 것을 이미 알고 있지 못했다면, \"temporary let\"을 검색하면 첫 번째 검색 결과가 해당 섹션으로 안내할 것입니다."

#: src/introduction.md:70
msgid "The second is to generally improve your knowledge of a facet of the language. In that case, just browse the table of contents until you see something you want to know more about, and just start reading. If a link looks interesting, click it, and read about that section."
msgstr "두 번째는 언어의 한 측면에 대한 지식을 일반적으로 향상시키는 것입니다. 이 경우, 더 알고 싶은 것을 볼 때까지 목차를 탐색하고 읽기 시작하십시오. 링크가 흥미로워 보이면 클릭하여 해당 섹션을 읽으십시오."

#: src/introduction.md:74
msgid ""
"That said, there is no wrong way to read this book. Read it however you feel "
"helps you best."
msgstr "그렇다고 해서 이 책을 읽는 데 잘못된 방법은 없습니다. 가장 도움이 된다고 생각하는 방식으로 읽으십시오."

#: src/introduction.md:76
msgid "Conventions"
msgstr "규약"

#: src/introduction.md:78
msgid ""
"Like all technical books, this book has certain conventions in how it "
"displays information. These conventions are documented here."
msgstr "모든 기술 서적과 마찬가지로 이 책은 정보를 표시하는 방식에 있어 특정 규칙을 따릅니다. 이러한 규칙은 여기에 문서화되어 있습니다."

#: src/introduction.md:81
msgid ""
"Statements that define a term contain that term in _italics_. Whenever that "
"term is used outside of that chapter, it is usually a link to the section "
"that has this definition."
msgstr "용어를 정의하는 문장은 해당 용어를 _이탤릭체_로 포함합니다. 해당 용어가 해당 장 외부에서 사용될 때마다 일반적으로 이 정의가 있는 섹션에 대한 링크입니다."

#: src/introduction.md:84
msgid "An _example term_ is an example of a term being defined."
msgstr "_예시 용어_는 정의되는 용어의 예시입니다."

#: src/introduction.md:86
msgid ""
"Differences in the language by which edition the crate is compiled under are "
"in a blockquote that start with the words \"Edition differences:\" in "
"**bold**."
msgstr "크레이트가 컴파일되는 에디션에 따른 언어의 차이점은 \"에디션 차이:\"라는 단어로 시작하는 **굵은 글씨**의 인용 블록에 있습니다."

#: src/introduction.md:88
msgid ""
"**Edition differences**: In the 2015 edition, this syntax is valid that is "
"disallowed as of the 2018 edition."
msgstr "**에디션 차이**: 2015년 에디션에서는 이 구문이 유효했지만, 2018년 에디션부터는 허용되지 않습니다."

#: src/introduction.md:90
msgid ""
"Notes that contain useful information about the state of the book or point "
"out useful, but mostly out of scope, information are in blockquotes that "
"start with the word \"Note:\" in **bold**."
msgstr "책의 상태에 대한 유용한 정보나 유용하지만 대부분 범위 외의 정보를 포함하는 노트는 **굵은 글씨**로 \"참고:\"라는 단어로 시작하는 인용 블록에 있습니다."

#: src/introduction.md:92
msgid "**Note**: This is an example note."
msgstr "**참고**: 이것은 예시 노트입니다."

#: src/introduction.md:94
msgid ""
"Warnings that show unsound behavior in the language or possibly confusing "
"interactions of language features are in a special warning box."
msgstr "언어의 불안정한 동작 또는 언어 기능의 혼란스러운 상호 작용을 보여주는 경고는 특별 경고 상자에 있습니다."

#: src/introduction.md:98
msgid "_**Warning:**_ This is an example warning."
msgstr "_**경고:**_ 이것은 예시 경고입니다."

#: src/introduction.md:104
msgid "Code snippets inline in the text are inside `<code>` tags."
msgstr "텍스트 내의 코드 스니펫은 `<code>` 태그 안에 있습니다."

#: src/introduction.md:106
msgid ""
"Longer code examples are in a syntax highlighted box that has controls for "
"copying, executing, and showing hidden lines in the top right corner."
msgstr "더 긴 코드 예제는 구문 강조 표시된 상자에 있으며, 오른쪽 상단 모서리에 복사, 실행 및 숨겨진 줄 표시를 위한 컨트롤이 있습니다."

#: src/introduction.md:109
msgid "// This is a hidden line.\n"
msgstr "// 이것은 숨겨진 줄입니다.\n"

#: src/introduction.md:111
msgid "\"This is a code example\""
msgstr "\"이것은 코드 예시입니다\""

#: src/introduction.md:115
msgid ""
"All examples are written for the latest edition unless otherwise stated."
msgstr "모든 예제는 별도로 명시되지 않는 한 최신 에디션을 기준으로 작성되었습니다."

#: src/introduction.md:117
msgid ""
"The grammar and lexical structure is in blockquotes with either \"Lexer\" or "
"\"Syntax\" in <sup>**bold superscript**</sup> as the first line."
msgstr "문법 및 어휘 구조는 첫 줄에 <sup>**굵은 위첨자**</sup>로 \"Lexer\" 또는 \"Syntax\"가 있는 인용 블록에 있습니다."

#: src/introduction.md:119
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ExampleGrammar_:  \n"
"      `~` [_Expression_](expressions.md)  \n"
"   | `box` [_Expression_](expressions.md)"
msgstr "**<sup>구문</sup>**  \n_예시문법_:  \n      `~` [_표현식_](expressions.md)  \n   | `box` [_표현식_](expressions.md)"

#: src/introduction.md:124
msgid "See [Notation](notation.md) for more detail."
msgstr "자세한 내용은 [표기법](notation.md)을 참조하십시오."

#: src/introduction.md:126
msgid ""
"Rule identifiers appear before each language rule enclosed in square "
"brackets. These identifiers provide a way to refer to a specific rule in the "
"language. The rule identifier uses periods to separate sections from most "
"general to most specific ([destructors.scope.nesting.function-body]"
"(destructors.md#r-destructors.scope.nesting.function-body) for example)."
msgstr "규칙 식별자는 각 언어 규칙 앞에 대괄호로 묶여 나타납니다. 이러한 식별자는 언어의 특정 규칙을 참조하는 방법을 제공합니다. 규칙 식별자는 가장 일반적인 것부터 가장 구체적인 것까지 섹션을 구분하기 위해 마침표를 사용합니다(예: [destructors.scope.nesting.function-body](destructors.md#r-destructors.scope.nesting.function-body))."

#: src/introduction.md:128
msgid "The rule name can be clicked to link to that rule."
msgstr "규칙 이름을 클릭하면 해당 규칙으로 연결됩니다."

#: src/introduction.md:135
msgid ""
"_**Warning:**_ The organization of the rules is currently in flux. For the "
"time being, these identifier names are not stable between releases, and "
"links to these rules may fail if they are changed. We intend to stabilize "
"these once the organization has settled so that links to the rule names will "
"not break between releases."
msgstr "_**경고:**_ 규칙의 구성은 현재 유동적입니다. 당분간 이러한 식별자 이름은 릴리스 간에 안정적이지 않으며, 변경될 경우 이러한 규칙에 대한 링크가 실패할 수 있습니다. 우리는 구성이 안정화되면 규칙 이름에 대한 링크가 릴리스 간에 깨지지 않도록 이를 안정화할 계획입니다."

#: src/introduction.md:141
msgid "Contributing"
msgstr "기여하기"

#: src/introduction.md:143
msgid "We welcome contributions of all kinds."
msgstr "모든 종류의 기여를 환영합니다."

#: src/introduction.md:145
msgid ""
"You can contribute to this book by opening an issue or sending a pull "
"request to [the Rust Reference repository](https://github.com/rust-lang/"
"reference/). If this book does not answer your question, and you think its "
"answer is in scope of it, please do not hesitate to [file an issue](https://"
"github.com/rust-lang/reference/issues) or ask about it in the `t-lang/doc` "
"stream on [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/237824-t-"
"lang.2Fdoc). Knowing what people use this book for the most helps direct our "
"attention to making those sections the best that they can be. We also want "
"the reference to be as normative as possible, so if you see anything that is "
"wrong or is non-normative but not specifically called out, please also [file "
"an issue](https://github.com/rust-lang/reference/issues)."
msgstr "이 책에 기여하려면 [Rust 참조 저장소](https://github.com/rust-lang/reference/)에 이슈를 열거나 풀 리퀘스트를 보내십시오. 이 책이 질문에 답하지 못하고 그 답이 이 책의 범위 내에 있다고 생각되면 주저하지 말고 [이슈를 제출](https://github.com/rust-lang/reference/issues)하거나 [Zulip](https://rust-lang.zulipchat.com/#narrow/stream/237824-t-lang.2Fdoc)의 `t-lang/doc` 스트림에서 문의하십시오. 사람들이 이 책을 가장 많이 사용하는 용도를 알면 해당 섹션을 최상으로 만드는 데 집중하는 데 도움이 됩니다. 또한 참조가 가능한 한 규범적이기를 원하므로, 잘못되었거나 비규범적이지만 특별히 언급되지 않은 부분이 있으면 [이슈를 제출](https://github.com/rust-lang/reference/issues)해 주십시오."

#: src/notation.md:3
msgid "Grammar"
msgstr "문법"

#: src/notation.md:5
msgid ""
"The following notations are used by the _Lexer_ and _Syntax_ grammar "
"snippets:"
msgstr "다음 표기법은 _렉서_ 및 _구문_ 문법 스니펫에서 사용됩니다."

#: src/notation.md:7 src/comments.md:91 src/tokens.md:29
#: src/attributes/codegen.md:467 src/destructors.md:433
msgid "Examples"
msgstr "예시"

#: src/notation.md:7 src/expressions/operator-expr.md:438
msgid "Meaning"
msgstr "의미"

#: src/notation.md:9
msgid "CAPITAL"
msgstr "대문자"

#: src/notation.md:9
msgid "KW_IF, INTEGER_LITERAL"
msgstr "KW_IF, 정수_리터럴"

#: src/notation.md:9
msgid "A token produced by the lexer"
msgstr "렉서가 생성한 토큰"

#: src/notation.md:10
msgid "_ItalicCamelCase_"
msgstr "_이탤릭카멜케이스_"

#: src/notation.md:10
msgid "_LetStatement_, _Item_"
msgstr "_Let문_, _아이템_"

#: src/notation.md:10
msgid "A syntactical production"
msgstr "구문 생성"

#: src/notation.md:11
msgid "`string`"
msgstr "`문자열`"

#: src/notation.md:11
msgid "`x`, `while`, `*`"
msgstr "`x`, `while`, `*`"

#: src/notation.md:11
msgid "The exact character(s)"
msgstr "정확한 문자(들)"

#: src/notation.md:12
msgid "\\\\x"
msgstr "\\x"

#: src/notation.md:12
msgid "\\\\n, \\\\r, \\\\t, \\\\0"
msgstr "\\n, \\r, \\t, \\0"

#: src/notation.md:12
msgid "The character represented by this escape"
msgstr "이 이스케이프가 나타내는 문자"

#: src/notation.md:13
msgid "x<sup>?</sup>"
msgstr "x<sup>?</sup>"

#: src/notation.md:13
msgid "`pub`<sup>?</sup>"
msgstr "`pub`<sup>?</sup>"

#: src/notation.md:13
msgid "An optional item"
msgstr "선택적 항목"

#: src/notation.md:14
msgid "x<sup>\\*</sup>"
msgstr "x<sup>*</sup>"

#: src/notation.md:14
msgid "_OuterAttribute_<sup>\\*</sup>"
msgstr "_외부속성_<sup>*</sup>"

#: src/notation.md:14
msgid "0 or more of x"
msgstr "x가 0개 이상"

#: src/notation.md:15
msgid "x<sup>+</sup>"
msgstr "x<sup>+</sup>"

#: src/notation.md:15
msgid "_MacroMatch_<sup>+</sup>"
msgstr "_매크로매치_<sup>+</sup>"

#: src/notation.md:15
msgid "1 or more of x"
msgstr "x가 1개 이상"

#: src/notation.md:16
msgid "x<sup>a..b</sup>"
msgstr "x<sup>a..b</sup>"

#: src/notation.md:16
msgid "HEX_DIGIT<sup>1..6</sup>"
msgstr "16진수_숫자<sup>1..6</sup>"

#: src/notation.md:16
msgid "a to b repetitions of x"
msgstr "x의 a부터 b까지 반복"

#: src/notation.md:17
msgid "\\|"
msgstr "|"

#: src/notation.md:17
msgid "`u8` \\| `u16`, Block \\| Item"
msgstr "`u8` | `u16`, 블록 | 아이템"

#: src/notation.md:17
msgid "Either one or another"
msgstr "둘 중 하나"

#: src/notation.md:18
msgid "\\[ \\]"
msgstr "[ ]"

#: src/notation.md:18
msgid "\\[`b` `B`\\]"
msgstr "[`b` `B`]"

#: src/notation.md:18
msgid "Any of the characters listed"
msgstr "나열된 문자 중 하나"

#: src/notation.md:19
msgid "\\[ - \\]"
msgstr "[ - ]"

#: src/notation.md:19
msgid "\\[`a`\\-`z`\\]"
msgstr "[`a`\-`z`]"

#: src/notation.md:19
msgid "Any of the characters in the range"
msgstr "범위 내의 문자 중 하나"

#: src/notation.md:20
msgid "~\\[ \\]"
msgstr "~[ ]"

#: src/notation.md:20
msgid "~\\[`b` `B`\\]"
msgstr "~[`b` `B`]"

#: src/notation.md:20
msgid "Any characters, except those listed"
msgstr "나열된 문자를 제외한 모든 문자"

#: src/notation.md:21
msgid "~`string`"
msgstr "~`문자열`"

#: src/notation.md:21
msgid "~`\\n`, ~`*/`"
msgstr "~`\n`, ~`*/`"

#: src/notation.md:21
msgid "Any characters, except this sequence"
msgstr "이 시퀀스를 제외한 모든 문자"

#: src/notation.md:22
msgid "( )"
msgstr "( )"

#: src/notation.md:22
msgid "(`,` _Parameter_)<sup>?</sup>"
msgstr "(`,` _매개변수_)<sup>?</sup>"

#: src/notation.md:22
msgid "Groups items"
msgstr "항목 그룹화"

#: src/notation.md:24
msgid "String table productions"
msgstr "문자열 테이블 생성"

#: src/notation.md:26
msgid ""
"Some rules in the grammar — notably [unary operators](expressions/operator-"
"expr.md#borrow-operators), [binary operators](expressions/operator-"
"expr.md#arithmetic-and-logical-binary-operators), and [keywords]"
"(keywords.md) — are given in a simplified form: as a listing of printable "
"strings. These cases form a subset of the rules regarding the [token]"
"(tokens.md) rule, and are assumed to be the result of a lexical-analysis "
"phase feeding the parser, driven by a <abbr title=\"Deterministic Finite\n"
"Automaton\">DFA</abbr>, operating over the disjunction of all such string "
"table entries."
msgstr "문법의 일부 규칙(특히 [단항 연산자](expressions/operator-expr.md#borrow-operators), [이항 연산자](expressions/operator-expr.md#arithmetic-and-logical-binary-operators) 및 [키워드](keywords.md))은 인쇄 가능한 문자열 목록으로 단순화된 형태로 제공됩니다. 이러한 경우는 [토큰](tokens.md) 규칙에 관한 규칙의 하위 집합을 형성하며, <abbr title=\"결정론적 유한 오토마톤\">DFA</abbr>에 의해 구동되는 어휘 분석 단계가 파서에 공급하는 결과로 간주되며, 이러한 모든 문자열 테이블 항목의 논리합에 대해 작동합니다."

#: src/notation.md:34
msgid ""
"When such a string in `monospace` font occurs inside the grammar, it is an "
"implicit reference to a single member of such a string table production. See "
"[tokens](tokens.md) for more information."
msgstr "문법 내에서 `monospace` 글꼴의 문자열이 나타나면, 이는 해당 문자열 테이블 생성의 단일 멤버에 대한 암시적 참조입니다. 자세한 내용은 [토큰](tokens.md)을 참조하십시오."

#: src/input-format.md:7
msgid ""
"This chapter describes how a source file is interpreted as a sequence of "
"tokens."
msgstr "이 장에서는 소스 파일이 토큰 시퀀스로 해석되는 방법을 설명합니다."

#: src/input-format.md:9
msgid ""
"See [Crates and source files](crates-and-source-files.md) for a description "
"of how programs are organised into files."
msgstr "프로그램이 파일로 구성되는 방법에 대한 설명은 [크레이트 및 소스 파일](crates-and-source-files.md)을 참조하십시오."

#: src/input-format.md:13
msgid "Source encoding"
msgstr "소스 인코딩"

#: src/input-format.md:17
msgid ""
"Each source file is interpreted as a sequence of Unicode characters encoded "
"in UTF-8."
msgstr "각 소스 파일은 UTF-8로 인코딩된 유니코드 문자 시퀀스로 해석됩니다."

#: src/input-format.md:21
msgid "It is an error if the file is not valid UTF-8."
msgstr "파일이 유효한 UTF-8이 아니면 오류입니다."

#: src/input-format.md:25
msgid "Byte order mark removal"
msgstr "바이트 순서 마크 제거"

#: src/input-format.md:28
msgid ""
"If the first character in the sequence is `U+FEFF` ([BYTE ORDER MARK]"
"(https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8)), it is removed."
msgstr "시퀀스의 첫 번째 문자가 `U+FEFF`([바이트 순서 마크](https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8))이면 제거됩니다."

#: src/input-format.md:32
msgid "CRLF normalization"
msgstr "CRLF 정규화"

#: src/input-format.md:35
msgid ""
"Each pair of characters `U+000D` (CR) immediately followed by `U+000A` (LF) "
"is replaced by a single `U+000A` (LF)."
msgstr "`U+000D` (CR) 문자와 그 뒤에 바로 오는 `U+000A` (LF) 문자의 각 쌍은 단일 `U+000A` (LF)로 대체됩니다."

#: src/input-format.md:37
msgid ""
"Other occurrences of the character `U+000D` (CR) are left in place (they are "
"treated as [whitespace](whitespace.md))."
msgstr "`U+000D` (CR) 문자의 다른 발생은 그대로 유지됩니다(이들은 [공백](whitespace.md)으로 처리됩니다)."

#: src/input-format.md:41
msgid "Shebang removal"
msgstr "쉬뱅 제거"

#: src/input-format.md:45
msgid ""
"If the remaining sequence begins with the characters `#!`, the characters up "
"to and including the first `U+000A` (LF) are removed from the sequence."
msgstr "남은 시퀀스가 `#!` 문자로 시작하면, 첫 번째 `U+000A` (LF)까지의 문자가 시퀀스에서 제거됩니다."

#: src/input-format.md:47
msgid "For example, the first line of the following file would be ignored:"
msgstr "예를 들어, 다음 파일의 첫 번째 줄은 무시됩니다:"

#: src/input-format.md:54 src/macros.md:82
msgid "\"Hello!\""
msgstr "\"안녕하세요!\""

#: src/input-format.md:60
msgid ""
"As an exception, if the `#!` characters are followed (ignoring intervening "
"[comments](comments.md) or [whitespace](whitespace.md)) by a `[` token, "
"nothing is removed. This prevents an [inner attribute](attributes.md) at the "
"start of a source file being removed."
msgstr "예외적으로, `#!` 문자 뒤에 (중간에 있는 [주석](comments.md)이나 [공백](whitespace.md)을 무시하고) `[` 토큰이 오면 아무것도 제거되지 않습니다. 이는 소스 파일 시작 부분에 있는 [내부 속성](attributes.md)이 제거되는 것을 방지합니다."

#: src/input-format.md:63
msgid ""
"**Note**: The standard library [`include!`](../core/macro.include.html) "
"macro applies byte order mark removal, CRLF normalization, and shebang "
"removal to the file it reads. The [`include_str!`](../core/"
"macro.include_str.html) and [`include_bytes!`](../core/"
"macro.include_bytes.html) macros do not."
msgstr "**참고**: 표준 라이브러리 [`include!`](../core/macro.include.html) 매크로는 읽는 파일에 바이트 순서 마크 제거, CRLF 정규화 및 쉬뱅 제거를 적용합니다. [`include_str!`](../core/macro.include_str.html) 및 [`include_bytes!`](../core/macro.include_bytes.html) 매크로는 그렇지 않습니다."

#: src/input-format.md:67
msgid "Tokenization"
msgstr "토큰화"

#: src/input-format.md:70
msgid ""
"The resulting sequence of characters is then converted into tokens as "
"described in the remainder of this chapter."
msgstr "결과 문자 시퀀스는 이 장의 나머지 부분에 설명된 대로 토큰으로 변환됩니다."

#: src/keywords.md:5
msgid "Rust divides keywords into three categories:"
msgstr "러스트는 키워드를 세 가지 범주로 나눕니다:"

#: src/keywords.md:7
msgid "[strict](#strict-keywords)"
msgstr "[엄격](#strict-keywords)"

#: src/keywords.md:8
msgid "[reserved](#reserved-keywords)"
msgstr "[예약됨](#reserved-keywords)"

#: src/keywords.md:9
msgid "[weak](#weak-keywords)"
msgstr "[약함](#weak-keywords)"

#: src/keywords.md:13
msgid "Strict keywords"
msgstr "엄격한 키워드"

#: src/keywords.md:17
msgid ""
"These keywords can only be used in their correct contexts. They cannot be "
"used as the names of:"
msgstr "이 키워드는 올바른 컨텍스트에서만 사용할 수 있습니다. 다음 이름으로는 사용할 수 없습니다:"

#: src/keywords.md:20
msgid "[Items](items.md)"
msgstr "[아이템](items.md)"

#: src/keywords.md:21
msgid "[Variables](variables.md) and function parameters"
msgstr "[변수](variables.md) 및 함수 매개변수"

#: src/keywords.md:22
msgid "Fields and [variants](items/enumerations.md)"
msgstr "필드 및 [변형](items/enumerations.md)"

#: src/keywords.md:23
msgid "[Type parameters](types/parameters.md)"
msgstr "[타입 매개변수](types/parameters.md)"

#: src/keywords.md:24
msgid ""
"Lifetime parameters or [loop labels](expressions/loop-expr.md#loop-labels)"
msgstr "라이프타임 매개변수 또는 [루프 레이블](expressions/loop-expr.md#loop-labels)"

#: src/keywords.md:25
msgid "[Macros](macros.md) or [attributes](attributes.md)"
msgstr "[매크로](macros.md) 또는 [속성](attributes.md)"

#: src/keywords.md:26
msgid "[Macro placeholders](macros-by-example.md)"
msgstr "[매크로 플레이스홀더](macros-by-example.md)"

#: src/keywords.md:27
msgid "[Crates](crates-and-source-files.md)"
msgstr "[크레이트](crates-and-source-files.md)"

#: src/keywords.md:31
msgid ""
"**<sup>Lexer:<sup>**  \n"
"KW_AS             : `as`  \n"
"KW_BREAK          : `break`  \n"
"KW_CONST          : `const`  \n"
"KW_CONTINUE       : `continue`  \n"
"KW_CRATE          : `crate`  \n"
"KW_ELSE           : `else`  \n"
"KW_ENUM           : `enum`  \n"
"KW_EXTERN         : `extern`  \n"
"KW_FALSE          : `false`  \n"
"KW_FN             : `fn`  \n"
"KW_FOR            : `for`  \n"
"KW_IF             : `if`  \n"
"KW_IMPL           : `impl`  \n"
"KW_IN             : `in`  \n"
"KW_LET            : `let`  \n"
"KW_LOOP           : `loop`  \n"
"KW_MATCH          : `match`  \n"
"KW_MOD            : `mod`  \n"
"KW_MOVE           : `move`  \n"
"KW_MUT            : `mut`  \n"
"KW_PUB            : `pub`  \n"
"KW_REF            : `ref`  \n"
"KW_RETURN         : `return`  \n"
"KW_SELFVALUE      : `self`  \n"
"KW_SELFTYPE       : `Self`  \n"
"KW_STATIC         : `static`  \n"
"KW_STRUCT         : `struct`  \n"
"KW_SUPER          : `super`  \n"
"KW_TRAIT          : `trait`  \n"
"KW_TRUE           : `true`  \n"
"KW_TYPE           : `type`  \n"
"KW_UNSAFE         : `unsafe`  \n"
"KW_USE            : `use`  \n"
"KW_WHERE          : `where`  \n"
"KW_WHILE          : `while`"
msgstr ""
"**<sup>렉서:<sup>**  \n"
"KW_AS             : `as`  \n"
"KW_BREAK          : `break`  \n"
"KW_CONST          : `const`  \n"
"KW_CONTINUE       : `continue`  \n"
"KW_CRATE          : `crate`  \n"
"KW_ELSE           : `else`  \n"
"KW_ENUM           : `enum`  \n"
"KW_EXTERN         : `extern`  \n"
"KW_FALSE          : `false`  \n"
"KW_FN             : `fn`  \n"
"KW_FOR            : `for`  \n"
"KW_IF             : `if`  \n"
"KW_IMPL           : `impl`  \n"
"KW_IN             : `in`  \n"
"KW_LET            : `let`  \n"
"KW_LOOP           : `loop`  \n"
"KW_MATCH          : `match`  \n"
"KW_MOD            : `mod`  \n"
"KW_MOVE           : `move`  \n"
"KW_MUT            : `mut`  \n"
"KW_PUB            : `pub`  \n"
"KW_REF            : `ref`  \n"
"KW_RETURN         : `return`  \n"
"KW_SELFVALUE      : `self`  \n"
"KW_SELFTYPE       : `Self`  \n"
"KW_STATIC         : `static`  \n"
"KW_STRUCT         : `struct`  \n"
"KW_SUPER          : `super`  \n"
"KW_TRAIT          : `trait`  \n"
"KW_TRUE           : `true`  \n"
"KW_TYPE           : `type`  \n"
"KW_UNSAFE         : `unsafe`  \n"
"KW_USE            : `use`  \n"
"KW_WHERE          : `where`  \n"
"KW_WHILE          : `while`"

#: src/keywords.md:70
msgid "The following keywords were added beginning in the 2018 edition."
msgstr "다음 키워드는 2018년 에디션부터 추가되었습니다."

#: src/keywords.md:72
msgid ""
"**<sup>Lexer 2018+</sup>**  \n"
"KW_ASYNC          : `async`  \n"
"KW_AWAIT          : `await`  \n"
"KW_DYN            : `dyn`"
msgstr ""
"**<sup>렉서 2018+</sup>**  \n"
"KW_ASYNC          : `async`  \n"
"KW_AWAIT          : `await`  \n"
"KW_DYN            : `dyn`"

#: src/keywords.md:79
msgid "Reserved keywords"
msgstr "예약된 키워드"

#: src/keywords.md:83
msgid ""
"These keywords aren't used yet, but they are reserved for future use. They "
"have the same restrictions as strict keywords. The reasoning behind this is "
"to make current programs forward compatible with future versions of Rust by "
"forbidding them to use these keywords."
msgstr "이 키워드들은 아직 사용되지 않지만, 미래를 위해 예약되어 있습니다. 이 키워드들은 엄격한 키워드와 동일한 제약 조건을 가집니다. 이 키워드들을 사용하지 못하게 함으로써 현재 프로그램이 미래 버전의 Rust와 호환되도록 하기 위함입니다."

#: src/keywords.md:90
msgid ""
"**<sup>Lexer</sup>**  \n"
"KW_ABSTRACT       : `abstract`  \n"
"KW_BECOME         : `become`  \n"
"KW_BOX            : `box`  \n"
"KW_DO             : `do`  \n"
"KW_FINAL          : `final`  \n"
"KW_MACRO          : `macro`  \n"
"KW_OVERRIDE       : `override`  \n"
"KW_PRIV           : `priv`  \n"
"KW_TYPEOF         : `typeof`  \n"
"KW_UNSIZED        : `unsized`  \n"
"KW_VIRTUAL        : `virtual`  \n"
"KW_YIELD          : `yield`"
msgstr ""
"**<sup>렉서</sup>**  \n"
"KW_ABSTRACT       : `abstract`  \n"
"KW_BECOME         : `become`  \n"
"KW_BOX            : `box`  \n"
"KW_DO             : `do`  \n"
"KW_FINAL          : `final`  \n"
"KW_MACRO          : `macro`  \n"
"KW_OVERRIDE       : `override`  \n"
"KW_PRIV           : `priv`  \n"
"KW_TYPEOF         : `typeof`  \n"
"KW_UNSIZED        : `unsized`  \n"
"KW_VIRTUAL        : `virtual`  \n"
"KW_YIELD          : `yield`"
"**<sup>렉서</sup>**  \n"
"KW_ABSTRACT       : `abstract`  \n"
"KW_BECOME         : `become`  \n"
"KW_BOX            : `box`  \n"
"KW_DO             : `do`  \n"
"KW_FINAL          : `final`  \n"
"KW_MACRO          : `macro`  \n"
"KW_OVERRIDE       : `override`  \n"
"KW_PRIV           : `priv`  \n"
"KW_TYPEOF         : `typeof`  \n"
"KW_UNSIZED        : `unsized`  \n"
"KW_VIRTUAL        : `virtual`  \n"
"KW_YIELD          : `yield`"

#: src/keywords.md:106
msgid "The following keywords are reserved beginning in the 2018 edition."
msgstr "다음 키워드는 2018년 에디션부터 예약되었습니다."

#: src/keywords.md:108
msgid ""
"**<sup>Lexer 2018+</sup>**  \n"
"KW_TRY   : `try`"
msgstr "**<sup>렉서 2018+</sup>**  \nKW_TRY   : `try`"

#: src/keywords.md:111
msgid "The following keywords are reserved beginning in the 2024 edition."
msgstr "다음 키워드는 2024년 에디션부터 예약되었습니다."

#: src/keywords.md:113
msgid ""
"**<sup>Lexer 2024+</sup>**  \n"
"KW_GEN   : `gen`"
msgstr "**<sup>렉서 2024+</sup>**  \nKW_GEN   : `gen`"

#: src/keywords.md:118
msgid "Weak keywords"
msgstr "약한 키워드"

#: src/keywords.md:122
msgid ""
"These keywords have special meaning only in certain contexts. For example, "
"it is possible to declare a variable or method with the name `union`."
msgstr "이 키워드는 특정 컨텍스트에서만 특별한 의미를 가집니다. 예를 들어, `union`이라는 이름으로 변수나 메서드를 선언할 수 있습니다."

#: src/keywords.md:125
msgid ""
"**<sup>Lexer</sup>**  \n"
"KW_MACRO_RULES    : `macro_rules`  \n"
"KW_UNION          : `union`  \n"
"KW_STATICLIFETIME : `'static`  \n"
"KW_SAFE           : `safe`  \n"
"KW_RAW            : `raw`"
msgstr ""
"**<sup>렉서</sup>**  \n"
"KW_MACRO_RULES    : `macro_rules`  \n"
"KW_UNION          : `union`  \n"
"KW_STATICLIFETIME : `'static`  \n"
"KW_SAFE           : `safe`  \n"
"KW_RAW            : `raw`"
"**<sup>렉서</sup>**  \n"
"KW_MACRO_RULES    : `macro_rules`  \n"
"KW_UNION          : `union`  \n"
"KW_STATICLIFETIME : `'static`  \n"
"KW_SAFE           : `safe`  \n"
"KW_RAW            : `raw`"
"**<sup>렉서</sup>**  \n"
"KW_MACRO_RULES    : `macro_rules`  \n"
"KW_UNION          : `union`  \n"
"KW_STATICLIFETIME : `'static`  \n"
"KW_SAFE           : `safe`  \n"
"KW_RAW            : `raw`"

#: src/keywords.md:132
msgid ""
"**<sup>Lexer 2015</sup>**  \n"
"KW_DYN            : `dyn`"
msgstr "**<sup>렉서 2015</sup>**  \nKW_DYN            : `dyn`"

#: src/keywords.md:137
msgid "`macro_rules` is used to create custom [macros](macros.md)."
msgstr "`macro_rules`는 사용자 정의 [매크로](macros.md)를 생성하는 데 사용됩니다."

#: src/keywords.md:141
msgid ""
"`union` is used to declare a [union](items/unions.md) and is only a keyword "
"when used in a union declaration."
msgstr "`union`은 [유니온](items/unions.md)을 선언하는 데 사용되며, 유니온 선언에서 사용될 때만 키워드입니다."

#: src/keywords.md:146
msgid ""
"`'static` is used for the static lifetime and cannot be used as a [generic "
"lifetime parameter](items/generics.md) or [loop label](expressions/loop-"
"expr.md#loop-labels)"
msgstr "`'static`은 정적 라이프타임에 사용되며, [제네릭 라이프타임 매개변수](items/generics.md) 또는 [루프 레이블](expressions/loop-expr.md#loop-labels)로 사용될 수 없습니다."

#: src/keywords.md:149
msgid ""
"```compile_fail\n"
"// error[E0262]: invalid lifetime parameter name: `'static`\n"
"fn invalid_lifetime_parameter<'static>(s: &'static str) -> &'static str "
"{ s }\n"
"```"
msgstr "```compile_fail\n// error[E0262]: 잘못된 라이프타임 매개변수 이름: `'static`\nfn invalid_lifetime_parameter<'static>(s: &'static str) -> &'static str { s }\n```"

#: src/keywords.md:156
msgid ""
"In the 2015 edition, [`dyn`](types/trait-object.md) is a keyword when used "
"in a type position followed by a path that does not start with `::` or `<`, "
"a lifetime, a question mark, a `for` keyword or an opening parenthesis."
msgstr "2015년 에디션에서 [`dyn`](types/trait-object.md)은 `::` 또는 `<`로 시작하지 않는 경로, 라이프타임, 물음표, `for` 키워드 또는 여는 괄호가 뒤따르는 타입 위치에서 사용될 때 키워드입니다."

#: src/keywords.md:160
msgid ""
"Beginning in the 2018 edition, `dyn` has been promoted to a strict keyword."
msgstr "2018년 에디션부터 `dyn`은 엄격한 키워드로 승격되었습니다."

#: src/keywords.md:164
msgid ""
"`safe` is used for functions and statics, which has meaning in [external "
"blocks](items/external-blocks.md)."
msgstr "`safe`는 함수와 정적에 사용되며, [외부 블록](items/external-blocks.md)에서 의미를 가집니다."

#: src/keywords.md:168
msgid ""
"`raw` is used for [raw borrow operators](expressions/operator-expr.md#raw-"
"borrow-operators), and is only a keyword when matching a raw borrow operator "
"form (such as `&raw const expr` or `&raw mut expr`)."
msgstr "`raw`는 [원시 차용 연산자](expressions/operator-expr.md#raw-borrow-operators)에 사용되며, 원시 차용 연산자 형식(예: `&raw const expr` 또는 `&raw mut expr`)과 일치할 때만 키워드입니다."

#: src/identifiers.md:7
msgid ""
"**<sup>Lexer:</sup>**  \n"
"IDENTIFIER_OR_KEYWORD :  \n"
"      XID_Start XID_Continue<sup>\\*</sup>  \n"
"   | `_` XID_Continue<sup>+</sup>"
msgstr "**<sup>렉서:</sup>**  \n식별자_또는_키워드 :  \n      XID_시작 XID_계속<sup>*</sup>  \n   | `_` XID_계속<sup>+</sup>"

#: src/identifiers.md:12
msgid ""
"RAW_IDENTIFIER : `r#` IDENTIFIER_OR_KEYWORD <sub>_Except `crate`, `self`, "
"`super`, `Self`_</sub>"
msgstr "RAW_IDENTIFIER : `r#` 식별자_또는_키워드 <sub>_`crate`, `self`, `super`, `Self` 제외_</sub>"

#: src/identifiers.md:14
msgid ""
"NON_KEYWORD_IDENTIFIER : IDENTIFIER_OR_KEYWORD <sub>_Except a [strict]"
"(keywords.md#strict-keywords) or [reserved](keywords.md#reserved-keywords) "
"keyword_</sub>"
msgstr "비_키워드_식별자 : 식별자_또는_키워드 <sub>_[엄격한](keywords.md#strict-keywords) 또는 [예약된](keywords.md#reserved-keywords) 키워드 제외_</sub>"

#: src/identifiers.md:16
msgid ""
"IDENTIFIER :  \n"
"NON_KEYWORD_IDENTIFIER | RAW_IDENTIFIER"
msgstr "식별자 :  \n비_키워드_식별자 | 원시_식별자"

#: src/identifiers.md:19
msgid "RESERVED_RAW_IDENTIFIER : `r#_`"
msgstr "예약된_원시_식별자 : `r#_`"

#: src/identifiers.md:24
msgid ""
"Identifiers follow the specification in [Unicode Standard Annex #31](https://"
"www.unicode.org/reports/tr31/tr31-41.html) for Unicode version 16.0, with "
"the additions described below. Some examples of identifiers:"
msgstr "식별자는 유니코드 버전 16.0의 [유니코드 표준 부록 #31](https://www.unicode.org/reports/tr31/tr31-41.html) 사양을 따르며, 아래에 설명된 추가 사항이 있습니다. 식별자의 몇 가지 예:"

#: src/identifiers.md:26
msgid "`foo`"
msgstr "`foo`"

#: src/identifiers.md:27
msgid "`_identifier`"
msgstr "`_identifier`"

#: src/identifiers.md:28
msgid "`r#true`"
msgstr "`r#true`"

#: src/identifiers.md:29
msgid "`Москва`"
msgstr "`Москва`"

#: src/identifiers.md:30
msgid "`東京`"
msgstr "`東京`"

#: src/identifiers.md:34
msgid "The profile used from UAX #31 is:"
msgstr "UAX #31에서 사용된 프로필은 다음과 같습니다:"

#: src/identifiers.md:36
msgid ""
"Start := [`XID_Start`](http://unicode.org/cldr/utility/list-unicodeset.jsp?"
"a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=), plus the underscore character (U+005F)"
msgstr ""
"시작 := [`XID_Start`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=), 더하기 밑줄 문자 (U+005F)"

#: src/identifiers.md:37
msgid ""
"Continue := [`XID_Continue`](http://unicode.org/cldr/utility/list-"
"unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=)"
msgstr ""
"계속 := [`XID_Continue`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=)"

#: src/identifiers.md:38
msgid "Medial := empty"
msgstr "중간 := 비어 있음"

#: src/identifiers.md:40
msgid ""
"with the additional constraint that a single underscore character is not an "
"identifier."
msgstr "단일 밑줄 문자는 식별자가 아니라는 추가 제약 조건과 함께."

#: src/identifiers.md:42
msgid ""
"**Note**: Identifiers starting with an underscore are typically used to "
"indicate an identifier that is intentionally unused, and will silence the "
"unused warning in `rustc`."
msgstr "**참고**: 밑줄로 시작하는 식별자는 일반적으로 의도적으로 사용되지 않는 식별자를 나타내는 데 사용되며, `rustc`의 사용되지 않는 경고를 억제합니다."

#: src/identifiers.md:46
msgid ""
"Identifiers may not be a [strict](keywords.md#strict-keywords) or [reserved]"
"(keywords.md#reserved-keywords) keyword without the `r#` prefix described "
"below in [raw identifiers](#raw-identifiers)."
msgstr "식별자는 아래 [원시 식별자](#raw-identifiers)에 설명된 `r#` 접두사 없이 [엄격한](keywords.md#strict-keywords) 또는 [예약된](keywords.md#reserved-keywords) 키워드일 수 없습니다."

#: src/identifiers.md:50
msgid ""
"Zero width non-joiner (ZWNJ U+200C) and zero width joiner (ZWJ U+200D) "
"characters are not allowed in identifiers."
msgstr "제로 너비 비결합자(ZWNJ U+200C) 및 제로 너비 결합자(ZWJ U+200D) 문자는 식별자에 허용되지 않습니다."

#: src/identifiers.md:54
msgid ""
"Identifiers are restricted to the ASCII subset of [`XID_Start`](http://"
"unicode.org/cldr/utility/list-unicodeset.jsp?"
"a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=) and [`XID_Continue`](http://"
"unicode.org/cldr/utility/list-unicodeset.jsp?"
"a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=) in the following situations:"
msgstr "식별자는 다음 상황에서 [`XID_Start`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Start%3A%5D&abb=on&g=&i=) 및 [`XID_Continue`](http://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B%3AXID_Continue%3A%5D&abb=on&g=&i=)의 ASCII 서브셋으로 제한됩니다:"

#: src/identifiers.md:56
msgid ""
"[`extern crate`](items/extern-crates.md) declarations (except the _AsClause_ "
"identifier)"
msgstr "[`extern crate`](items/extern-crates.md) 선언 (_AsClause_ 식별자 제외)"

#: src/identifiers.md:57
msgid "External crate names referenced in a [path](paths.md)"
msgstr "[경로](paths.md)에서 참조되는 외부 크레이트 이름"

#: src/identifiers.md:58
msgid ""
"[Module](items/modules.md) names loaded from the filesystem without a "
"[`path` attribute](items/modules.md#the-path-attribute)"
msgstr "[`path` 속성](items/modules.md#the-path-attribute) 없이 파일 시스템에서 로드된 [모듈](items/modules.md) 이름"

#: src/identifiers.md:59
msgid "[`no_mangle`](abi.md#the-no_mangle-attribute) attributed items"
msgstr "[`no_mangle`](abi.md#the-no_mangle-attribute) 속성 항목"

#: src/identifiers.md:60
msgid "Item names in [external blocks](items/external-blocks.md)"
msgstr "[외부 블록](items/external-blocks.md)의 아이템 이름"

#: src/identifiers.md:64
msgid "Normalization"
msgstr "정규화"

#: src/identifiers.md:67
msgid ""
"Identifiers are normalized using Normalization Form C (NFC) as defined in "
"[Unicode Standard Annex #15](https://www.unicode.org/reports/tr15/"
"tr15-56.html). Two identifiers are equal if their NFC forms are equal."
msgstr "식별자는 [유니코드 표준 부록 #15](https://www.unicode.org/reports/tr15/tr15-56.html)에 정의된 정규화 형식 C(NFC)를 사용하여 정규화됩니다. 두 식별자는 NFC 형식이 같으면 동일합니다."

#: src/identifiers.md:69
msgid ""
"[Procedural](procedural-macros.md) and [declarative](macros-by-example.md) "
"macros receive normalized identifiers in their input."
msgstr "[절차적](procedural-macros.md) 및 [선언적](macros-by-example.md) 매크로는 입력에서 정규화된 식별자를 받습니다."

#: src/identifiers.md:73
msgid "Raw identifiers"
msgstr "원시 식별자"

#: src/identifiers.md:77
msgid ""
"A raw identifier is like a normal identifier, but prefixed by `r#`. (Note "
"that the `r#` prefix is not included as part of the actual identifier.)"
msgstr "원시 식별자는 일반 식별자와 같지만 `r#` 접두사가 붙습니다. (`r#` 접두사는 실제 식별자의 일부로 포함되지 않습니다.)"

#: src/identifiers.md:82
msgid ""
"Unlike a normal identifier, a raw identifier may be any strict or reserved "
"keyword except the ones listed above for `RAW_IDENTIFIER`."
msgstr "일반 식별자와 달리, 원시 식별자는 `RAW_IDENTIFIER`에 대해 위에 나열된 키워드를 제외한 모든 엄격하거나 예약된 키워드일 수 있습니다."

#: src/identifiers.md:87
msgid ""
"It is an error to use the RESERVED_RAW_IDENTIFIER token `r#_` in order to "
"avoid confusion with the [_WildcardPattern_](patterns.md#wildcard-pattern)."
msgstr "[_와일드카드 패턴_](patterns.md#wildcard-pattern)과의 혼동을 피하기 위해 RESERVED_RAW_IDENTIFIER 토큰 `r#_`를 사용하는 것은 오류입니다."

#: src/comments.md:6
msgid ""
"**<sup>Lexer</sup>**  \n"
"LINE_COMMENT :  \n"
"      `//` (~\\[`/` `!` `\\n`\\] | `//`) ~`\\n`<sup>\\*</sup>  \n"
"   | `//`"
msgstr ""
"**<sup>렉서</sup>**  \n"
"LINE_COMMENT :  \n"
"      `//` (~\\[`/` `!` `\\n`\\] | `//`) ~`\\n`<sup>\\*</sup>  \n"
"   | `//`"
"**<sup>렉서</sup>**  \n"
"LINE_COMMENT :  \n"
"      `//` (~\\[`/` `!` `\\n`\\] | `//`) ~`\\n`<sup>\\*</sup>  \n"
"   | `//`"
"**<sup>렉서</sup>**  \n"
"LINE_COMMENT :  \n"
"      `//` (~\\[`/` `!` `\\n`\\] | `//`) ~`\\n`<sup>\\*</sup>  \n"
"   | `//`"

#: src/comments.md:11
msgid ""
"BLOCK_COMMENT :  \n"
"      `/*` (~\\[`*` `!`\\] | `**` | _BlockCommentOrDoc_) "
"(_BlockCommentOrDoc_ | ~`*/`)<sup>\\*</sup> `*/`  \n"
"   | `/**/`  \n"
"   | `/***/`"
msgstr ""
"BLOCK_COMMENT :  \n"
"      `/*` (~\\[`*` `!`\\] | `**` | _BlockCommentOrDoc_) "
"(_BlockCommentOrDoc_ | ~`*/`)<sup>\\*</sup> `*/`  \n"
"   | `/**/`  \n"
"   | `/***/`"
"BLOCK_COMMENT :  \n"
"      `/*` (~\\[`*` `!`\\] | `**` | _BlockCommentOrDoc_) "
"(_BlockCommentOrDoc_ | ~`*/`)<sup>\\*</sup> `*/`  \n"
"   | `/**/`  \n"
"   | `/***/`"

#: src/comments.md:17
msgid ""
"INNER_LINE_DOC :  \n"
"   `//!` ~\\[`\\n` _IsolatedCR_\\]<sup>\\*</sup>"
msgstr ""
"INNER_LINE_DOC :  \n"
"   `//!` ~\\[`\\n` _IsolatedCR_\\]<sup>\\*</sup>"
"INNER_LINE_DOC :  \n"
"   `//!` ~\\[`\\n` _IsolatedCR_\\]<sup>\\*</sup>"

#: src/comments.md:20
msgid ""
"INNER_BLOCK_DOC :  \n"
"   `/*!` ( _BlockCommentOrDoc_ | ~\\[`*/` _IsolatedCR_\\] )<sup>\\*</sup> `*/`"
msgstr "INNER_BLOCK_DOC :  \n"
"   `/*!` ( _BlockCommentOrDoc_ | ~\\[`*/` _IsolatedCR_\\] )<sup>\\*</sup> `*/`"

#: src/comments.md:23
msgstr "OUTER_LINE_DOC :  \n" \
"   `///` (~`/` ~\\[`\\n` _IsolatedCR_\\]<sup>\\*</sup>)<sup>?</sup>"
"OUTER_LINE_DOC :  \n"
"   `///` (~`/` ~\\[`\\n` _IsolatedCR_\\]<sup>\\*</sup>)<sup>?</sup>"

#: src/comments.md:26
msgstr "OUTER_BLOCK_DOC :  \n" \
"   `/**` (~`*` | _BlockCommentOrDoc_ ) (_BlockCommentOrDoc_ | ~\\[`*/` _IsolatedCR_\\])<sup>\\*</sup> `*/`"
"OUTER_BLOCK_DOC :  \n"
"   `/**` (~`*` | _BlockCommentOrDoc_ ) (_BlockCommentOrDoc_ | ~\\[`*/` "
"_IsolatedCR_\\])<sup>\\*</sup> `*/`"

#: src/comments.md:30
msgstr "_BlockCommentOrDoc_ :  \n" \
"      BLOCK_COMMENT  \n" \
"   | OUTER_BLOCK_DOC  \n" \
"   | INNER_BLOCK_DOC"
"_BlockCommentOrDoc_ :  \n"
"      BLOCK_COMMENT  \n"
"   | OUTER_BLOCK_DOC  \n"
"   | INNER_BLOCK_DOC"

#: src/comments.md:35
msgid ""
"_IsolatedCR_ :  \n"
"   \\\\r"
msgstr ""
"_IsolatedCR_ :  \n"
"   \\\\r"

#: src/comments.md:40
msgid "Non-doc comments"
msgstr "비 문서 주석"

#: src/comments.md:43
msgid ""
"Comments follow the general C++ style of line (`//`) and block (`/* ... */`) "
"comment forms. Nested block comments are supported."
msgstr "주석은 일반적인 C++ 스타일의 라인 (`//`) 및 블록 (`/* ... */`) 주석 형식을 따릅니다. 중첩된 블록 주석이 지원됩니다."

#: src/comments.md:48
msgid "Non-doc comments are interpreted as a form of whitespace."
msgstr "비 문서 주석은 공백의 한 형태로 해석됩니다."

#: src/comments.md:52
msgid "Doc comments"
msgstr "문서 주석"

#: src/comments.md:56
msgid ""
"Line doc comments beginning with exactly _three_ slashes (`///`), and block "
"doc comments (`/** ... */`), both outer doc comments, are interpreted as a "
"special syntax for [`doc` attributes](../rustdoc/the-doc-attribute.html)."
msgstr "정확히 세 개의 슬래시(`///`)로 시작하는 라인 문서 주석과 블록 문서 주석(`/** ... */`), 이 두 가지 외부 문서 주석은 [`doc` 속성](../rustdoc/the-doc-attribute.html)을 위한 특별한 구문으로 해석됩니다."

#: src/comments.md:62
msgid ""
"That is, they are equivalent to writing `#[doc=\"...\"]` around the body of "
"the comment, i.e., `/// Foo` turns into `#[doc=\"Foo\"]` and `/** Bar */` "
"turns into `#[doc=\"Bar\"]`. They must therefore appear before something "
"that accepts an outer attribute."
msgstr "즉, 이들은 주석 본문 주위에 `#[doc=\"...\"]`를 작성하는 것과 동일합니다. 즉, `/// Foo`는 `#[doc=\"Foo\"]`로, `/** Bar */`는 `#[doc=\"Bar\"]`로 바뀝니다. 따라서 외부 속성을 허용하는 것 앞에 나타나야 합니다."

#: src/comments.md:69
msgid ""
"Line comments beginning with `//!` and block comments `/*! ... */` are doc "
"comments that apply to the parent of the comment, rather than the item that "
"follows."
msgstr "`//!`로 시작하는 라인 주석과 `/*! ... */` 블록 주석은 뒤따르는 항목이 아닌 주석의 부모에 적용되는 문서 주석입니다."

#: src/comments.md:75
msgid ""
"That is, they are equivalent to writing `#![doc=\"...\"]` around the body of "
"the comment. `//!` comments are usually used to document modules that occupy "
"a source file."
msgstr "즉, 이들은 주석 본문 주위에 `#![doc=\"...\"]`를 작성하는 것과 동일합니다. `//!` 주석은 일반적으로 소스 파일을 차지하는 모듈을 문서화하는 데 사용됩니다."

#: src/comments.md:81
msgid "The character `U+000D` (CR) is not allowed in doc comments."
msgstr "문서 주석에는 `U+000D` (CR) 문자가 허용되지 않습니다."

#: src/comments.md:83
msgid ""
"**Note**: It is conventional for doc comments to contain Markdown, as "
"expected by `rustdoc`. However, the comment syntax does not respect any "
"internal Markdown. ``/** `glob = \"*/*.rs\";` */`` terminates the comment at "
"the first `*/`, and the remaining code would cause a syntax error. This "
"slightly limits the content of block doc comments compared to line doc "
"comments."
msgstr "**참고**: `rustdoc`에서 예상하는 바와 같이 문서 주석에 마크다운을 포함하는 것이 일반적입니다. 그러나 주석 구문은 내부 마크다운을 존중하지 않습니다. ``/** `glob = \"*/*.rs\";` */``는 첫 번째 `*/`에서 주석을 종료하며, 나머지 코드는 구문 오류를 발생시킵니다. 이는 라인 문서 주석에 비해 블록 문서 주석의 내용을 약간 제한합니다."

#: src/comments.md:89
msgid ""
"**Note**:  The sequence `U+000D` (CR) immediately followed by `U+000A` (LF) "
"would have been previously transformed into a single `U+000A` (LF)."
msgstr "**참고**: `U+000D` (CR) 문자와 그 뒤에 바로 오는 `U+000A` (LF) 문자의 시퀀스는 이전에 단일 `U+000A` (LF)로 변환되었을 것입니다."

#: src/comments.md:94
msgid ""
"//! A doc comment that applies to the implicit anonymous module of this "
"crate\n"
msgstr "//! 이 크레이트의 암시적 익명 모듈에 적용되는 문서 주석\n"

#: src/comments.md:98
msgid ""
"//!  - Inner line doc\n"
"    //!! - Still an inner line doc (but with a bang at the beginning)\n"
msgstr ""
"//!  - 내부 라인 문서\n"
"    //!! - 여전히 내부 라인 문서 (하지만 시작에 느낌표가 있음)\n"

#: src/comments.md:101
msgid "/*!  - Inner block doc */"
msgstr "/*!  - 내부 블록 문서 */"

#: src/comments.md:102
msgid "/*!! - Still an inner block doc (but with a bang at the beginning) */"
msgstr "/*!! - 여전히 내부 블록 문서 (하지만 시작에 느낌표가 있음) */"

#: src/comments.md:104
msgid ""
"//   - Only a comment\n"
"    ///  - Outer line doc (exactly 3 slashes)\n"
"    //// - Only a comment\n"
msgstr ""
"//   - 단순 주석\n"
"    ///  - 외부 라인 문서 (정확히 슬래시 3개)\n"
"    //// - 단순 주석\n"

#: src/comments.md:108
msgid "/*   - Only a comment */"
msgstr "/*   - 단순 주석 */"

#: src/comments.md:109
msgid "/**  - Outer block doc (exactly) 2 asterisks */"
msgstr "/**  - 외부 블록 문서 (정확히) 별표 2개 */"

#: src/comments.md:110
msgid "/*** - Only a comment */"
msgstr "/*** - 단순 주석 */"

#: src/comments.md:115
msgid "/* In Rust /* we can /* nest comments */ */ */"
msgstr "/* Rust에서는 /* /* 주석을 중첩할 수 있습니다 */ */ */"

#: src/comments.md:117
msgid ""
"// All three types of block comments can contain or be nested inside\n"
"        // any other type:\n"
msgstr "// 세 가지 유형의 블록 주석은 다른 유형 내에 포함되거나 중첩될 수 있습니다:\n"

#: src/comments.md:120
msgid "/*   /* */  /** */  /*! */  */"
msgstr "/*   /* */  /** */  /*! */  */"

#: src/comments.md:121
msgid "/*!  /* */  /** */  /*! */  */"
msgstr "/*!  /* */  /** */  /*! */  */"

#: src/comments.md:122
msgid "/**  /* */  /** */  /*! */  */"
msgstr "/**  /* */  /** */  /*! */  */"

#: src/comments.md:127
msgid ""
"// empty inner line doc\n"
"        //!\n"
msgstr ""
"// 비어 있는 내부 라인 문서\n"
"        //!\n"

#: src/comments.md:130
msgid ""
"// empty inner block doc\n"
"        /*!*/"
msgstr ""
"// 비어 있는 내부 블록 문서\n"
"        /*!*/"

#: src/comments.md:133
msgid ""
"// empty line comment\n"
"        //\n"
msgstr ""
"// 비어 있는 라인 주석\n"
"        //\n"

#: src/comments.md:136
msgid ""
"// empty outer line doc\n"
"        ///\n"
msgstr ""
"// 비어 있는 외부 라인 문서\n"
"        ///\n"

#: src/comments.md:139
msgid ""
"// empty block comment\n"
"        /**/"
msgstr ""
"// 비어 있는 블록 주석\n"
"        /**/"

#: src/comments.md:144
msgid ""
"// empty 2-asterisk block isn't a doc block, it is a block comment\n"
"        /***/"
msgstr ""
"// 비어 있는 2-별표 블록은 문서 블록이 아니라 블록 주석입니다.\n"
"        /***/"

#: src/comments.md:149
msgid ""
"/* The next one isn't allowed because outer doc comments\n"
"       require an item that will receive the doc */"
msgstr "/* 다음은 외부 문서 주석이 문서를 받을 항목을 요구하기 때문에 허용되지 않습니다 */"

#: src/comments.md:152
msgid "/// Where is my item?\n"
msgstr "/// 내 항목은 어디에 있나요?\n"

#: src/whitespace.md:7
msgid ""
"Whitespace is any non-empty string containing only characters that have the "
"[`Pattern_White_Space`](https://www.unicode.org/reports/tr31/) Unicode "
"property, namely:"
msgstr "공백은 [`Pattern_White_Space`](https://www.unicode.org/reports/tr31/) 유니코드 속성을 가진 문자만 포함하는 비어 있지 않은 문자열입니다. 즉:"

#: src/whitespace.md:10
msgid "`U+0009` (horizontal tab, `'\\t'`)"
msgstr "`U+0009` (수평 탭, `'\\t'`)"

#: src/whitespace.md:11
msgid "`U+000A` (line feed, `'\\n'`)"
msgstr "`U+000A` (줄 바꿈, `'\\n'`)"

#: src/whitespace.md:12
msgid "`U+000B` (vertical tab)"
msgstr "`U+000B` (수직 탭)"

#: src/whitespace.md:13
msgid "`U+000C` (form feed)"
msgstr "`U+000C` (폼 피드)"

#: src/whitespace.md:14
msgid "`U+000D` (carriage return, `'\\r'`)"
msgstr "`U+000D` (캐리지 리턴, `'\\r'`)"

#: src/whitespace.md:15
msgid "`U+0020` (space, `' '`)"
msgstr "`U+0020` (공백, `' '`)"

#: src/whitespace.md:16
msgid "`U+0085` (next line)"
msgstr "`U+0085` (다음 줄)"

#: src/whitespace.md:17
msgid "`U+200E` (left-to-right mark)"
msgstr "`U+200E` (좌에서 우로 마크)"

#: src/whitespace.md:18
msgid "`U+200F` (right-to-left mark)"
msgstr "`U+200F` (우에서 좌로 마크)"

#: src/whitespace.md:19
msgid "`U+2028` (line separator)"
msgstr "`U+2028` (줄 구분자)"

#: src/whitespace.md:20
msgid "`U+2029` (paragraph separator)"
msgstr "`U+2029` (단락 구분자)"

#: src/whitespace.md:24
msgid ""
"Rust is a \"free-form\" language, meaning that all forms of whitespace serve "
"only to separate _tokens_ in the grammar, and have no semantic significance."
msgstr "Rust는 \"자유 형식\" 언어입니다. 즉, 모든 형태의 공백은 문법에서 _토큰_을 구분하는 역할만 하며, 의미론적 중요성은 없습니다."

#: src/whitespace.md:29
msgid ""
"A Rust program has identical meaning if each whitespace element is replaced "
"with any other legal whitespace element, such as a single space character."
msgstr "Rust 프로그램은 각 공백 요소가 단일 공백 문자처럼 다른 유효한 공백 요소로 대체되어도 동일한 의미를 가집니다."

#: src/tokens.md:7
msgid ""
"Tokens are primitive productions in the grammar defined by regular (non-"
"recursive) languages.  Rust source input can be broken down into the "
"following kinds of tokens:"
msgstr "토큰은 정규 (비재귀) 언어로 정의된 문법의 기본 생성물입니다. Rust 소스 입력은 다음 종류의 토큰으로 나눌 수 있습니다:"

#: src/tokens.md:11
msgid "[Keywords](keywords.md)"
msgstr "[키워드](keywords.md)"

#: src/tokens.md:12
msgid "[Identifiers](identifiers.md)"
msgstr "[식별자](identifiers.md)"

#: src/tokens.md:13
msgid "[Literals](#literals)"
msgstr "[리터럴](#literals)"

#: src/tokens.md:14
msgid "[Lifetimes](#lifetimes-and-loop-labels)"
msgstr "[라이프타임](#lifetimes-and-loop-labels)"

#: src/tokens.md:15
msgid "[Punctuation](#punctuation)"
msgstr "[구두점](#punctuation)"

#: src/tokens.md:16
msgid "[Delimiters](#delimiters)"
msgstr "[구분자](#delimiters)"

#: src/tokens.md:18
msgid ""
"Within this documentation's grammar, \"simple\" tokens are given in [string "
"table production](notation.md#string-table-productions) form, and appear in "
"`monospace` font."
msgstr "이 문서의 문법에서 \"단순\" 토큰은 [문자열 테이블 생성](notation.md#string-table-productions) 형식으로 주어지며, `monospace` 글꼴로 나타납니다."

#: src/tokens.md:25
msgid "Literals"
msgstr "리터럴"

#: src/tokens.md:27
msgid ""
"Literals are tokens used in [literal expressions](expressions/literal-"
"expr.md)."
msgstr "리터럴은 [리터럴 표현식](expressions/literal-expr.md)에 사용되는 토큰입니다."

#: src/tokens.md:31
msgid "Characters and strings"
msgstr "문자와 문자열"

#: src/tokens.md:33 src/tokens.md:85 src/attributes.md:224
#: src/expressions/closure-expr.md:99 src/inline-assembly.md:27
msgid "Example"
msgstr "예시"

#: src/tokens.md:33
msgid "`#` sets[^nsets]"
msgstr "`#` 세트[^nsets]"

#: src/tokens.md:33
msgid "Characters"
msgstr "문자"

#: src/tokens.md:33 src/expressions/literal-expr.md:47
msgid "Escapes"
msgstr "이스케이프"

#: src/tokens.md:35
msgid "[Character](#character-literals)"
msgstr "[문자](#character-literals)"

#: src/tokens.md:35
msgid "`'H'`"
msgstr "`'H'`"

#: src/tokens.md:35 src/tokens.md:36 src/tokens.md:38 src/tokens.md:39
#: src/tokens.md:41 src/types/numeric.md:15 src/types/numeric.md:16
#: src/types/numeric.md:17 src/types/numeric.md:18 src/types/numeric.md:19
msgid "0"
msgstr "0"

#: src/tokens.md:35 src/tokens.md:36 src/tokens.md:37 src/tokens.md:41
#: src/tokens.md:42
msgid "All Unicode"
msgstr "모든 유니코드"

#: src/tokens.md:35 src/tokens.md:36
msgid ""
"[Quote](#quote-escapes) & [ASCII](#ascii-escapes) & [Unicode](#unicode-"
"escapes)"
msgstr "[인용](#quote-escapes) & [ASCII](#ascii-escapes) & [유니코드](#unicode-escapes)"

#: src/tokens.md:36
msgid "[String](#string-literals)"
msgstr "[문자열](#string-literals)"

#: src/tokens.md:36
msgid "`\"hello\"`"
msgstr "`\"hello\"`"

#: src/tokens.md:37
msgid "[Raw string](#raw-string-literals)"
msgstr "[원시 문자열](#raw-string-literals)"

#: src/tokens.md:37
msgid "`r#\"hello\"#`"
msgstr "`r#\"hello\"#`"

#: src/tokens.md:37 src/tokens.md:40 src/tokens.md:42
msgid "\\<256"
msgstr "\\<256"

#: src/tokens.md:37 src/tokens.md:40 src/tokens.md:42 src/tokens.md:87
#: src/tokens.md:88 src/tokens.md:89 src/tokens.md:90
msgid "`N/A`"
msgstr "`N/A`"

#: src/tokens.md:38
msgid "[Byte](#byte-literals)"
msgstr "[바이트](#byte-literals)"

#: src/tokens.md:38
msgid "`b'H'`"
msgstr "`b'H'`"

#: src/tokens.md:38 src/tokens.md:39 src/tokens.md:40
msgid "All ASCII"
msgstr "모든 ASCII"

#: src/tokens.md:38 src/tokens.md:39
msgid "[Quote](#quote-escapes) & [Byte](#byte-escapes)"
msgstr "[인용](#quote-escapes) & [바이트](#byte-escapes)"

#: src/tokens.md:39
msgid "[Byte string](#byte-string-literals)"
msgstr "[바이트 문자열](#byte-string-literals)"

#: src/tokens.md:39
msgid "`b\"hello\"`"
msgstr "`b\"hello\"`"

#: src/tokens.md:40
msgid "[Raw byte string](#raw-byte-string-literals)"
msgstr "[원시 바이트 문자열](#raw-byte-string-literals)"

#: src/tokens.md:40
msgid "`br#\"hello\"#`"
msgstr "`br#\"hello\"#`"

#: src/tokens.md:41
msgid "[C string](#c-string-literals)"
msgstr "[C 문자열](#c-string-literals)"

#: src/tokens.md:41
msgid "`c\"hello\"`"
msgstr "`c\"hello\"`"

#: src/tokens.md:41
msgid ""
"[Quote](#quote-escapes) & [Byte](#byte-escapes) & [Unicode](#unicode-escapes)"
msgstr "[인용](#quote-escapes) & [바이트](#byte-escapes) & [유니코드](#unicode-escapes)"

#: src/tokens.md:42
msgid "[Raw C string](#raw-c-string-literals)"
msgstr "[원시 C 문자열](#raw-c-string-literals)"

#: src/tokens.md:42
msgid "`cr#\"hello\"#`"
msgstr "`cr#\"hello\"#`"

#: src/tokens.md:44
msgid "The number of `#`s on each side of the same literal must be equivalent."
msgstr "동일한 리터럴의 각 면에 있는 `#`의 수는 동일해야 합니다."

#: src/tokens.md:46
msgid ""
"**Note**:  Character and string literal tokens never include the sequence of "
"`U+000D` (CR) immediately followed by `U+000A` (LF): this pair would have "
"been previously transformed into a single `U+000A` (LF)."
msgstr "**참고**: 문자 및 문자열 리터럴 토큰은 `U+000D` (CR) 뒤에 `U+000A` (LF)가 즉시 오는 시퀀스를 포함하지 않습니다. 이 쌍은 이전에 단일 `U+000A` (LF)로 변환되었을 것입니다."

#: src/tokens.md:48
msgid "ASCII escapes"
msgstr "ASCII 이스케이프"

#: src/tokens.md:50 src/tokens.md:61 src/tokens.md:72 src/tokens.md:78
#: src/tokens.md:881 src/glossary.md:151
msgid "Name"
msgstr "이름"

#: src/tokens.md:52
msgid "`\\x41`"
msgstr "`\\x41`"

#: src/tokens.md:52
msgid "7-bit character code (exactly 2 digits, up to 0x7F)"
msgstr "7비트 문자 코드 (정확히 2자리, 최대 0x7F)"

#: src/tokens.md:53 src/tokens.md:64 src/expressions/literal-expr.md:75
msgid "`\\n`"
msgstr "`\\n`"

#: src/tokens.md:53 src/tokens.md:64
msgid "Newline"
msgstr "새 줄"

#: src/tokens.md:54 src/tokens.md:65 src/expressions/literal-expr.md:76
msgid "`\\r`"
msgstr "`\\r`"

#: src/tokens.md:54 src/tokens.md:65
msgid "Carriage return"
msgstr "캐리지 리턴"

#: src/tokens.md:55 src/tokens.md:66 src/expressions/literal-expr.md:74
msgid "`\\t`"
msgstr "`\\t`"

#: src/tokens.md:55 src/tokens.md:66
msgid "Tab"
msgstr "탭"

#: src/tokens.md:56 src/tokens.md:67 src/expressions/literal-expr.md:79
msgid "`\\\\`"
msgstr "`\\\\`"

#: src/tokens.md:56 src/tokens.md:67
msgid "Backslash"
msgstr "백슬래시"

#: src/tokens.md:57 src/tokens.md:68 src/expressions/literal-expr.md:73
msgid "`\\0`"
msgstr "`\\0`"

#: src/tokens.md:57 src/tokens.md:68
msgid "Null"
msgstr "널"

#: src/tokens.md:59
msgid "Byte escapes"
msgstr "바이트 이스케이프"

#: src/tokens.md:63
msgid "`\\x7F`"
msgstr "`\\x7F`"

#: src/tokens.md:63
msgid "8-bit character code (exactly 2 digits)"
msgstr "8비트 문자 코드 (정확히 2자리)"

#: src/tokens.md:70 src/expressions/literal-expr.md:101
msgid "Unicode escapes"
msgstr "유니코드 이스케이프"

#: src/tokens.md:74
msgid "`\\u{7FFF}`"
msgstr "`\\u{7FFF}`"

#: src/tokens.md:74
msgid "24-bit Unicode character code (up to 6 digits)"
msgstr "24비트 유니코드 문자 코드 (최대 6자리)"

#: src/tokens.md:76
msgid "Quote escapes"
msgstr "인용 이스케이프"

#: src/tokens.md:80 src/expressions/literal-expr.md:78
msgid "`\\'`"
msgstr "`\\'`"

#: src/tokens.md:80
msgid "Single quote"
msgstr "작은따옴표"

#: src/tokens.md:81 src/expressions/literal-expr.md:77
msgid "`\\\"`"
msgstr ""

#: src/tokens.md:81
msgid "Double quote"
msgstr "큰따옴표"

#: src/tokens.md:83
msgid "Numbers"
msgstr "숫자"

#: src/tokens.md:85
msgid "[Number literals](#number-literals)[^nl]"
msgstr "[숫자 리터럴](#number-literals)[^nl]"

#: src/tokens.md:85
msgid "Exponentiation"
msgstr "지수"

#: src/tokens.md:87
msgid "Decimal integer"
msgstr "10진수 정수"

#: src/tokens.md:87
msgid "`98_222`"
msgstr "`98_222`"

#: src/tokens.md:88
msgid "Hex integer"
msgstr "16진수 정수"

#: src/tokens.md:88
msgid "`0xff`"
msgstr "`0xff`"

#: src/tokens.md:89
msgid "Octal integer"
msgstr "8진수 정수"

#: src/tokens.md:89
msgid "`0o77`"
msgstr "`0o77`"

#: src/tokens.md:90
msgid "Binary integer"
msgstr "2진수 정수"

#: src/tokens.md:90
msgid "`0b1111_0000`"
msgstr "`0b1111_0000`"

#: src/tokens.md:91 src/tokens.md:131
msgid "Floating-point"
msgstr "부동 소수점"

#: src/tokens.md:91
msgid "`123.0E+77`"
msgstr "`123.0E+77`"

#: src/tokens.md:91
msgid "`Optional`"
msgstr "`선택 사항`"

#: src/tokens.md:93
msgid "All number literals allow `_` as a visual separator: `1_234.0E+18f64`"
msgstr "모든 숫자 리터럴은 `_`를 시각적 구분자로 허용합니다: `1_234.0E+18f64`"

#: src/tokens.md:97
msgid "Suffixes"
msgstr "접미사"

#: src/tokens.md:101
msgid ""
"A suffix is a sequence of characters following the primary part of a literal "
"(without intervening whitespace), of the same form as a non-raw identifier "
"or keyword."
msgstr "접미사는 리터럴의 주요 부분 뒤에 오는 문자 시퀀스(중간 공백 없이)로, 비원시 식별자 또는 키워드와 동일한 형태입니다."

#: src/tokens.md:105
msgid ""
"**<sup>Lexer</sup>**  \n"
"SUFFIX : IDENTIFIER_OR_KEYWORD  \n"
"SUFFIX_NO_E : SUFFIX <sub>_not beginning with `e` or `E`_</sub>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"SUFFIX : 식별자_또는_키워드  \n"
"SUFFIX_NO_E : SUFFIX <sub>_`e` 또는 `E`로 시작하지 않음_</sub>"
"**<sup>렉서</sup>**  \n"
"SUFFIX : 식별자_또는_키워드  \n"
"SUFFIX_NO_E : SUFFIX <sub>_`e` 또는 `E`로 시작하지 않음_</sub>"

#: src/tokens.md:111
msgid ""
"Any kind of literal (string, integer, etc) with any suffix is valid as a "
"token."
msgstr "어떤 종류의 리터럴(문자열, 정수 등)이든 어떤 접미사와 함께 사용되어도 유효한 토큰입니다."

#: src/tokens.md:113
msgid ""
"A literal token with any suffix can be passed to a macro without producing "
"an error. The macro itself will decide how to interpret such a token and "
"whether to produce an error or not. In particular, the `literal` fragment "
"specifier for by-example macros matches literal tokens with arbitrary "
"suffixes."
msgstr "어떤 접미사가 붙은 리터럴 토큰도 오류 없이 매크로에 전달될 수 있습니다. 매크로 자체는 그러한 토큰을 해석하는 방법과 오류를 발생시킬지 여부를 결정합니다. 특히, 예제 매크로의 `literal` 프래그먼트 지정자는 임의의 접미사가 붙은 리터럴 토큰과 일치합니다."

#: src/tokens.md:121
msgid "\"string\""
msgstr "\"string\""

#: src/tokens.md:121 src/tokens.md:122 src/items/type-aliases.md:37
#: src/names/scopes.md:161 src/names/scopes.md:162 src/names/scopes.md:163
msgid "// OK\n"
msgstr "// OK\n"

#: src/tokens.md:127
msgid ""
"However, suffixes on literal tokens which are interpreted as literal "
"expressions or patterns are restricted. Any suffixes are rejected on non-"
"numeric literal tokens, and numeric literal tokens are accepted only with "
"suffixes from the list below."
msgstr "그러나 리터럴 표현식 또는 패턴으로 해석되는 리터럴 토큰의 접미사는 제한됩니다. 비숫자 리터럴 토큰의 모든 접미사는 거부되며, 숫자 리터럴 토큰은 아래 목록의 접미사만 허용됩니다."

#: src/tokens.md:131 src/expressions/operator-expr.md:311
#: src/expressions/operator-expr.md:356 src/expressions/operator-expr.md:534
#: src/expressions/operator-expr.md:536
msgid "Integer"
msgstr "정수"

#: src/tokens.md:133
msgid ""
"`u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, "
"`usize`, `isize`"
msgstr "`u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, `usize`, `isize`"

#: src/tokens.md:133 src/inline-assembly.md:617
msgid "`f32`, `f64`"
msgstr "`f32`, `f64`"

#: src/tokens.md:135
msgid "Character and string literals"
msgstr "문자 및 문자열 리터럴"

#: src/tokens.md:139
msgid "Character literals"
msgstr "문자 리터럴"

#: src/tokens.md:143
msgid ""
"**<sup>Lexer</sup>**  \n"
"CHAR_LITERAL :  \n"
"   `'` ( ~\\[`'` `\\` \\\\n \\\\r \\\\t\\] | QUOTE_ESCAPE | ASCII_ESCAPE | "
"UNICODE_ESCAPE ) `'` SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"CHAR_LITERAL :  \n"
"   `'` ( ~\\[`'` `\\` \\\\n \\\\r \\\\t\\] | QUOTE_ESCAPE | ASCII_ESCAPE | "
"UNICODE_ESCAPE ) `'` SUFFIX<sup>?</sup>"
"**<sup>렉서</sup>**  \n"
"CHAR_LITERAL :  \n"
"   `'` ( ~\\[`'` `\\` \\\\n \\\\r \\\\t\\] | QUOTE_ESCAPE | ASCII_ESCAPE | "
"UNICODE_ESCAPE ) `'` SUFFIX<sup>?</sup>"

#: src/tokens.md:147
msgid ""
"QUOTE_ESCAPE :  \n"
"   `\\'` | `\\\"`"
msgstr ""
"QUOTE_ESCAPE :  \n"
"   `\\'` | `\\\"`"

#: src/tokens.md:150
msgid ""
"ASCII_ESCAPE :  \n"
"      `\\x` OCT_DIGIT HEX_DIGIT  \n"
"   | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0`"
msgstr ""
"ASCII_ESCAPE :  \n"
"      `\\x` 8진수_숫자 16진수_숫자  \n"
"   | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0`"
"ASCII_ESCAPE :  \n"
"      `\\x` 8진수_숫자 16진수_숫자  \n"
"   | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0`"

#: src/tokens.md:154
msgid ""
"UNICODE_ESCAPE :  \n"
"   `\\u{` ( HEX_DIGIT `_`<sup>\\*</sup> )<sup>1..6</sup> `}`"
msgstr ""
"UNICODE_ESCAPE :  \n"
"   `\\u{` ( 16진수_숫자 `_`<sup>*</sup> )<sup>1..6</sup> `}`"
"UNICODE_ESCAPE :  \n"
"   `\\u{` ( 16진수_숫자 `_`<sup>*</sup> )<sup>1..6</sup> `}`"

#: src/tokens.md:159
msgid ""
"A _character literal_ is a single Unicode character enclosed within two "
"`U+0027` (single-quote) characters, with the exception of `U+0027` itself, "
"which must be _escaped_ by a preceding `U+005C` character (`\\`)."
msgstr "_문자 리터럴_은 두 개의 `U+0027`(작은따옴표) 문자 안에 묶인 단일 유니코드 문자입니다. 단, `U+0027` 자체는 선행하는 `U+005C` 문자(`\\`)로 _이스케이프_되어야 합니다."

#: src/tokens.md:165
msgid "String literals"
msgstr "문자열 리터럴"

#: src/tokens.md:169
msgid ""
"**<sup>Lexer</sup>**  \n"
"STRING_LITERAL :  \n"
"   `\"` (  \n"
"      ~\\[`\"` `\\` _IsolatedCR_\\]  \n"
"      | QUOTE_ESCAPE  \n"
"      | ASCII_ESCAPE  \n"
"      | UNICODE_ESCAPE  \n"
"      | STRING_CONTINUE  \n"
"   )<sup>\\*</sup> `\"` SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"STRING_LITERAL :  \n"
"   `\"` (  \n"
"      ~\\[`\"` `\\` _IsolatedCR_\\]  \n"
"      | QUOTE_ESCAPE  \n"
"      | ASCII_ESCAPE  \n"
"      | UNICODE_ESCAPE  \n"
"      | STRING_CONTINUE  \n"
"   )<sup>*</sup> `\"` SUFFIX<sup>?</sup>"
"**<sup>렉서</sup>**  \n"
"STRING_LITERAL :  \n"
"   `\"` (  \n"
"      ~\\[`\"` `\\` _IsolatedCR_\\]  \n"
"      | QUOTE_ESCAPE  \n"
"      | ASCII_ESCAPE  \n"
"      | UNICODE_ESCAPE  \n"
"      | STRING_CONTINUE  \n"
"   )<sup>*</sup> `\"` SUFFIX<sup>?</sup>"

#: src/tokens.md:179
msgid ""
"STRING_CONTINUE :  \n"
"   `\\` _followed by_ \\\\n"
msgstr ""
"STRING_CONTINUE :  \n"
"   `\\` _뒤에_ \\\\n"
"STRING_CONTINUE :  \n"
"   `\\` _뒤에_ \\\\n"

#: src/tokens.md:184
msgid ""
"A _string literal_ is a sequence of any Unicode characters enclosed within "
"two `U+0022` (double-quote) characters, with the exception of `U+0022` "
"itself, which must be _escaped_ by a preceding `U+005C` character (`\\`)."
msgstr "_문자열 리터럴_은 두 개의 `U+0022`(큰따옴표) 문자 안에 묶인 모든 유니코드 문자 시퀀스입니다. 단, `U+0022` 자체는 선행하는 `U+005C` 문자(`\\`)로 _이스케이프_되어야 합니다."

#: src/tokens.md:190
msgid ""
"Line-breaks, represented by the  character `U+000A` (LF), are allowed in "
"string literals. When an unescaped `U+005C` character (`\\`) occurs "
"immediately before a line break, the line break does not appear in the "
"string represented by the token. See [String continuation escapes]"
"(expressions/literal-expr.md#string-continuation-escapes) for details. The "
"character `U+000D` (CR) may not appear in a string literal other than as "
"part of such a string continuation escape."
msgstr "`U+000A`(LF) 문자로 표현되는 줄 바꿈은 문자열 리터럴에서 허용됩니다. 이스케이프되지 않은 `U+005C` 문자(`\\`)가 줄 바꿈 바로 앞에 오면, 줄 바꿈은 토큰으로 표현되는 문자열에 나타나지 않습니다. 자세한 내용은 [문자열 연속 이스케이프](expressions/literal-expr.md#string-continuation-escapes)를 참조하십시오. `U+000D`(CR) 문자는 문자열 연속 이스케이프의 일부가 아닌 한 문자열 리터럴에 나타날 수 없습니다."

#: src/tokens.md:197
msgid "Character escapes"
msgstr "문자 이스케이프"

#: src/tokens.md:201
msgid ""
"Some additional _escapes_ are available in either character or non-raw "
"string literals. An escape starts with a `U+005C` (`\\`) and continues with "
"one of the following forms:"
msgstr "문자 또는 비원시 문자열 리터럴에는 몇 가지 추가 _이스케이프_가 사용 가능합니다. 이스케이프는 `U+005C`(`\\`)로 시작하며 다음 형식 중 하나로 이어집니다:"

#: src/tokens.md:207
msgid ""
"A _7-bit code point escape_ starts with `U+0078` (`x`) and is followed by "
"exactly two _hex digits_ with value up to `0x7F`. It denotes the ASCII "
"character with value equal to the provided hex value. Higher values are not "
"permitted because it is ambiguous whether they mean Unicode code points or "
"byte values."
msgstr "_7비트 코드 포인트 이스케이프_는 `U+0078`(`x`)로 시작하며, `0x7F`까지의 값을 가진 정확히 두 개의 _16진수 숫자_가 뒤따릅니다. 이는 제공된 16진수 값과 동일한 값을 가진 ASCII 문자를 나타냅니다. 더 높은 값은 유니코드 코드 포인트를 의미하는지 바이트 값을 의미하는지 모호하기 때문에 허용되지 않습니다."

#: src/tokens.md:215
msgid ""
"A _24-bit code point escape_ starts with `U+0075` (`u`) and is followed by "
"up to six _hex digits_ surrounded by braces `U+007B` (`{`) and `U+007D` (`}"
"`). It denotes the Unicode code point equal to the provided hex value."
msgstr "_24비트 코드 포인트 이스케이프_는 `U+0075`(`u`)로 시작하며, `U+007B`(`{`)와 `U+007D`(`}`) 중괄호로 둘러싸인 최대 6개의 _16진수 숫자_가 뒤따릅니다. 이는 제공된 16진수 값과 동일한 유니코드 코드 포인트를 나타냅니다."

#: src/tokens.md:221
msgid ""
"A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` "
"(`r`), or `U+0074` (`t`), denoting the Unicode values `U+000A` (LF), "
"`U+000D` (CR) or `U+0009` (HT) respectively."
msgstr "_공백 이스케이프_는 `U+006E`(`n`), `U+0072`(`r`), 또는 `U+0074`(`t`) 문자 중 하나이며, 각각 유니코드 값 `U+000A`(LF), `U+000D`(CR) 또는 `U+0009`(HT)를 나타냅니다."

#: src/tokens.md:227
msgid ""
"The _null escape_ is the character `U+0030` (`0`) and denotes the Unicode "
"value `U+0000` (NUL)."
msgstr "_널 이스케이프_는 `U+0030`(`0`) 문자이며 유니코드 값 `U+0000`(NUL)을 나타냅니다."

#: src/tokens.md:232
msgid ""
"The _backslash escape_ is the character `U+005C` (`\\`) which must be "
"_escaped_ in order to denote itself."
msgstr "_백슬래시 이스케이프_는 `U+005C`(`\\`) 문자이며, 자신을 나타내기 위해 _이스케이프_되어야 합니다."

#: src/tokens.md:237
msgid "Raw string literals"
msgstr "원시 문자열 리터럴"

#: src/tokens.md:241
msgid ""
"**<sup>Lexer</sup>**  \n"
"RAW_STRING_LITERAL :  \n"
"   `r` RAW_STRING_CONTENT SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"RAW_STRING_LITERAL :  \n"
"   `r` 원시_문자열_내용 접미사<sup>?</sup>"
"**<sup>렉서</sup>**  \n"
"RAW_STRING_LITERAL :  \n"
"   `r` 원시_문자열_내용 접미사<sup>?</sup>"

#: src/tokens.md:245
msgid ""
"RAW_STRING_CONTENT :  \n"
"      `\"` ( ~ _IsolatedCR_ )<sup>\\* (non-greedy)</sup> `\"`  \n"
"   | `#` RAW_STRING_CONTENT `#`"
msgstr ""
"RAW_STRING_CONTENT :  \n"
"      `\"` ( ~ _IsolatedCR_ )<sup>* (non-greedy)</sup> `\"`  \n"
"   | `#` 원시_문자열_내용 `#`"
"RAW_STRING_CONTENT :  \n"
"      `\"` ( ~ _IsolatedCR_ )<sup>* (non-greedy)</sup> `\"`  \n"
"   | `#` 원시_문자열_내용 `#`"

#: src/tokens.md:251
msgid ""
"Raw string literals do not process any escapes. They start with the "
"character `U+0072` (`r`), followed by fewer than 256 of the character "
"`U+0023` (`#`) and a `U+0022` (double-quote) character."
msgstr "원시 문자열 리터럴은 어떤 이스케이프도 처리하지 않습니다. 이들은 `U+0072`(`r`) 문자로 시작하며, 256개 미만의 `U+0023`(`#`) 문자와 `U+0022`(큰따옴표) 문자가 뒤따릅니다."

#: src/tokens.md:257
msgid ""
"The _raw string body_ can contain any sequence of Unicode characters other "
"than `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) "
"character, followed by the same number of `U+0023` (`#`) characters that "
"preceded the opening `U+0022` (double-quote) character."
msgstr "_원시 문자열 본문_은 `U+000D`(CR)를 제외한 모든 유니코드 문자 시퀀스를 포함할 수 있습니다. 이스케이프는 다른 `U+0022`(큰따옴표) 문자로만 종료되며, 여는 `U+0022`(큰따옴표) 문자 앞에 있던 것과 동일한 수의 `U+0023`(`#`) 문자가 뒤따릅니다."

#: src/tokens.md:262
msgid ""
"All Unicode characters contained in the raw string body represent "
"themselves, the characters `U+0022` (double-quote) (except when followed by "
"at least as many `U+0023` (`#`) characters as were used to start the raw "
"string literal) or `U+005C` (`\\`) do not have any special meaning."
msgstr "원시 문자열 본문에 포함된 모든 유니코드 문자는 그 자체를 나타내며, `U+0022`(큰따옴표) 문자(원시 문자열 리터럴을 시작하는 데 사용된 `U+0023`(`#`) 문자 수만큼 이상이 뒤따르지 않는 경우) 또는 `U+005C`(`\\`)는 특별한 의미를 갖지 않습니다."

#: src/tokens.md:267
msgid "Examples for string literals:"
msgstr "문자열 리터럴 예시:"

#: src/tokens.md:270 src/tokens.md:543 src/items/external-blocks.md:288
#: src/attributes/type_system.md:126 src/attributes/type_system.md:131
#: src/expressions/literal-expr.md:234 src/expressions/literal-expr.md:399
#: src/types/closure.md:296 src/types/closure.md:313 src/types/closure.md:647
#: src/types/closure.md:732
msgid "\"foo\""
msgstr "\"foo\""

#: src/tokens.md:270 src/tokens.md:543 src/expressions/literal-expr.md:234
#: src/expressions/literal-expr.md:399
msgid "r\"foo\""
msgstr "r\"foo\""

#: src/tokens.md:270 src/expressions/literal-expr.md:234
msgid ""
"// foo\n"
"\"\\\"foo\\\"\""
msgstr ""
"// foo\n"
"\"\\\"foo\\\"\""

#: src/tokens.md:271 src/tokens.md:544 src/expressions/literal-expr.md:235
#: src/expressions/literal-expr.md:400
msgid "r#\"\"foo\"\"#"
msgstr "r#\"\"foo\"\"#"

#: src/tokens.md:271 src/tokens.md:405 src/tokens.md:544
#: src/expressions/literal-expr.md:235 src/expressions/literal-expr.md:342
#: src/expressions/literal-expr.md:400
msgid "// \"foo\"\n"
msgstr "// \"foo\"\n"

#: src/tokens.md:272 src/tokens.md:546 src/expressions/literal-expr.md:236
#: src/expressions/literal-expr.md:402
msgid "\"foo #\\\"# bar\""
msgstr "\"foo #\\\"# bar\""

#: src/tokens.md:273 src/tokens.md:547 src/expressions/literal-expr.md:237
#: src/expressions/literal-expr.md:403
msgid "r##\"foo #\"# bar\"##"
msgstr "r##\"foo #\"# bar\"##"

#: src/tokens.md:274 src/tokens.md:408 src/tokens.md:547
#: src/expressions/literal-expr.md:238 src/expressions/literal-expr.md:345
#: src/expressions/literal-expr.md:403
msgid "// foo #\"# bar\n"
msgstr "// foo #\"# bar\n"

#: src/tokens.md:275 src/tokens.md:549 src/expressions/literal-expr.md:239
#: src/expressions/literal-expr.md:405
msgid "\"\\x52\""
msgstr "\"\\x52\""

#: src/tokens.md:276 src/tokens.md:549 src/expressions/literal-expr.md:240
#: src/expressions/literal-expr.md:405
msgid "\"R\""
msgstr "\"R\""

#: src/tokens.md:276 src/tokens.md:549 src/expressions/literal-expr.md:240
#: src/expressions/literal-expr.md:405
msgid "r\"R\""
msgstr "r\"R\""

#: src/tokens.md:276 src/expressions/literal-expr.md:240
msgid ""
"// R\n"
"\"\\\\x52\""
msgstr ""
"// R\n"
"\"\\\\x52\""

#: src/tokens.md:277 src/tokens.md:550 src/expressions/literal-expr.md:241
#: src/expressions/literal-expr.md:406
msgid "r\"\\x52\""
msgstr "r\"\\x52\""

#: src/tokens.md:277 src/tokens.md:411 src/tokens.md:550
#: src/expressions/literal-expr.md:241 src/expressions/literal-expr.md:348
#: src/expressions/literal-expr.md:406
msgid "// \\x52\n"
msgstr "// \\x52\n"

#: src/tokens.md:280
msgid "Byte and byte string literals"
msgstr "바이트 및 바이트 문자열 리터럴"

#: src/tokens.md:284
msgid "Byte literals"
msgstr "바이트 리터럴"

#: src/tokens.md:288
msgid ""
"**<sup>Lexer</sup>**  \n"
"BYTE_LITERAL :  \n"
"   `b'` ( ASCII_FOR_CHAR | BYTE_ESCAPE )  `'` SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"BYTE_LITERAL :  \n"
"   `b'` ( ASCII_FOR_CHAR | BYTE_ESCAPE )  `'` 접미사<sup>?</sup>"

#: src/tokens.md:292
msgid ""
"ASCII_FOR_CHAR :  \n"
"   _any ASCII (i.e. 0x00 to 0x7F), except_ `'`, `\\`, \\\\n, \\\\r or \\\\t"
msgstr ""
"ASCII_FOR_CHAR :  \n"
"   _모든 ASCII (즉, 0x00에서 0x7F까지), 단_ `'`, `\\`, \\\\n, \\\\r 또는 \\\\t 제외_"

#: src/tokens.md:295
msgid ""
"BYTE_ESCAPE :  \n"
"      `\\x` HEX_DIGIT HEX_DIGIT  \n"
"   | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0` | `\\'` | `\\\"`"
msgstr ""
"BYTE_ESCAPE :  \n"
"      `\\x` 16진수_숫자 16진수_숫자  \n"
"   | `\\n` | `\\r` | `\\t` | `\\\\` | `\\0` | `\\'` | `\\\"`"

#: src/tokens.md:301
msgid ""
"A _byte literal_ is a single ASCII character (in the `U+0000` to `U+007F` "
"range) or a single _escape_ preceded by the characters `U+0062` (`b`) and "
"`U+0027` (single-quote), and followed by the character `U+0027`. If the "
"character `U+0027` is present within the literal, it must be _escaped_ by a "
"preceding `U+005C` (`\\`) character. It is equivalent to a `u8` unsigned 8-"
"bit integer _number literal_."
msgstr "_바이트 리터럴_은 `U+0062`(`b`)와 `U+0027`(작은따옴표) 문자로 시작하고 `U+0027` 문자로 끝나는 단일 ASCII 문자(`U+0000`에서 `U+007F` 범위) 또는 단일 _이스케이프_입니다. `U+0027` 문자가 리터럴 내에 있으면 선행하는 `U+005C`(`\\`) 문자로 _이스케이프_되어야 합니다. 이는 `u8` 부호 없는 8비트 정수 _숫자 리터럴_과 동일합니다."

#: src/tokens.md:310
msgid "Byte string literals"
msgstr "바이트 문자열 리터럴"

#: src/tokens.md:314
msgid ""
"**<sup>Lexer</sup>**  \n"
"BYTE_STRING_LITERAL :  \n"
"   `b\"` ( ASCII_FOR_STRING | BYTE_ESCAPE | STRING_CONTINUE )<sup>\\*</sup> "
"`\"` SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"BYTE_STRING_LITERAL :  \n"
"   `b\"` ( ASCII_FOR_STRING | BYTE_ESCAPE | STRING_CONTINUE )<sup>*</sup> "
"`\"` 접미사<sup>?</sup>"
"**<sup>렉서</sup>**  \n"
"BYTE_STRING_LITERAL :  \n"
"   `b\"` ( ASCII_FOR_STRING | BYTE_ESCAPE | STRING_CONTINUE )<sup>*</sup> "
"`\"` 접미사<sup>?</sup>"

#: src/tokens.md:318
msgid ""
"ASCII_FOR_STRING :  \n"
"   _any ASCII (i.e 0x00 to 0x7F), except_ `\"`, `\\` _and IsolatedCR_"
msgstr ""
"ASCII_FOR_STRING :  \n"
"   _모든 ASCII (즉, 0x00에서 0x7F까지), 단_ `\"`, `\\` _및 IsolatedCR 제외_"
"ASCII_FOR_STRING :  \n"
"   _모든 ASCII (즉, 0x00에서 0x7F까지), 단_ `\"`, `\\` _및 IsolatedCR 제외_"

#: src/tokens.md:323
msgid ""
"A non-raw _byte string literal_ is a sequence of ASCII characters and "
"_escapes_, preceded by the characters `U+0062` (`b`) and `U+0022` (double-"
"quote), and followed by the character `U+0022`. If the character `U+0022` is "
"present within the literal, it must be _escaped_ by a preceding `U+005C` "
"(`\\`) character. Alternatively, a byte string literal can be a _raw byte "
"string literal_, defined below."
msgstr "비원시 _바이트 문자열 리터럴_은 `U+0062`(`b`)와 `U+0022`(큰따옴표) 문자로 시작하고 `U+0022` 문자로 끝나는 ASCII 문자와 _이스케이프_ 시퀀스입니다. `U+0022` 문자가 리터럴 내에 있으면 선행하는 `U+005C`(`\\`) 문자로 _이스케이프_되어야 합니다. 또는 바이트 문자열 리터럴은 아래에 정의된 _원시 바이트 문자열 리터럴_일 수 있습니다."

#: src/tokens.md:332
msgid ""
"Line-breaks, represented by the  character `U+000A` (LF), are allowed in "
"byte string literals. When an unescaped `U+005C` character (`\\`) occurs "
"immediately before a line break, the line break does not appear in the "
"string represented by the token. See [String continuation escapes]"
"(expressions/literal-expr.md#string-continuation-escapes) for details. The "
"character `U+000D` (CR) may not appear in a byte string literal other than "
"as part of such a string continuation escape."
msgstr "`U+000A`(LF) 문자로 표현되는 줄 바꿈은 바이트 문자열 리터럴에서 허용됩니다. 이스케이프되지 않은 `U+005C` 문자(`\\`)가 줄 바꿈 바로 앞에 오면, 줄 바꿈은 토큰으로 표현되는 문자열에 나타나지 않습니다. 자세한 내용은 [문자열 연속 이스케이프](expressions/literal-expr.md#string-continuation-escapes)를 참조하십시오. `U+000D`(CR) 문자는 문자열 연속 이스케이프의 일부가 아닌 한 바이트 문자열 리터럴에 나타날 수 없습니다."

#: src/tokens.md:339
msgid ""
"Some additional _escapes_ are available in either byte or non-raw byte "
"string literals. An escape starts with a `U+005C` (`\\`) and continues with "
"one of the following forms:"
msgstr "바이트 또는 비원시 바이트 문자열 리터럴에는 몇 가지 추가 _이스케이프_가 사용 가능합니다. 이스케이프는 `U+005C`(`\\`)로 시작하며 다음 형식 중 하나로 이어집니다:"

#: src/tokens.md:345 src/tokens.md:462
msgid ""
"A _byte escape_ escape starts with `U+0078` (`x`) and is followed by exactly "
"two _hex digits_. It denotes the byte equal to the provided hex value."
msgstr "_바이트 이스케이프_는 `U+0078`(`x`)로 시작하며, 정확히 두 개의 _16진수 숫자_가 뒤따릅니다. 이는 제공된 16진수 값과 동일한 바이트를 나타냅니다."

#: src/tokens.md:351 src/tokens.md:474
msgid ""
"A _whitespace escape_ is one of the characters `U+006E` (`n`), `U+0072` "
"(`r`), or `U+0074` (`t`), denoting the bytes values `0x0A` (ASCII LF), "
"`0x0D` (ASCII CR) or `0x09` (ASCII HT) respectively."
msgstr "_공백 이스케이프_는 `U+006E`(`n`), `U+0072`(`r`), 또는 `U+0074`(`t`) 문자 중 하나이며, 각각 바이트 값 `0x0A`(ASCII LF), `0x0D`(ASCII CR) 또는 `0x09`(ASCII HT)를 나타냅니다."

#: src/tokens.md:357
msgid ""
"The _null escape_ is the character `U+0030` (`0`) and denotes the byte value "
"`0x00` (ASCII NUL)."
msgstr "_널 이스케이프_는 `U+0030`(`0`) 문자이며 바이트 값 `0x00`(ASCII NUL)을 나타냅니다."

#: src/tokens.md:362 src/tokens.md:480
msgid ""
"The _backslash escape_ is the character `U+005C` (`\\`) which must be "
"_escaped_ in order to denote its ASCII encoding `0x5C`."
msgstr "_백슬래시 이스케이프_는 `U+005C`(`\\`) 문자이며, ASCII 인코딩 `0x5C`를 나타내기 위해 _이스케이프_되어야 합니다."

#: src/tokens.md:367
msgid "Raw byte string literals"
msgstr "원시 바이트 문자열 리터럴"

#: src/tokens.md:371
msgid ""
"**<sup>Lexer</sup>**  \n"
"RAW_BYTE_STRING_LITERAL :  \n"
"   `br` RAW_BYTE_STRING_CONTENT SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"RAW_BYTE_STRING_LITERAL :  \n"
"   `br` 원시_바이트_문자열_내용 접미사<sup>?</sup>"
"**<sup>렉서</sup>**  \n"
"RAW_BYTE_STRING_LITERAL :  \n"
"   `br` 원시_바이트_문자열_내용 접미사<sup>?</sup>"

#: src/tokens.md:375
msgid ""
"RAW_BYTE_STRING_CONTENT :  \n"
"      `\"` ASCII_FOR_RAW<sup>\\* (non-greedy)</sup> `\"`  \n"
"   | `#` RAW_BYTE_STRING_CONTENT `#`"
msgstr ""
"RAW_BYTE_STRING_CONTENT :  \n"
"      `\"` ASCII_FOR_RAW<sup>* (non-greedy)</sup> `\"`  \n"
"   | `#` 원시_바이트_문자열_내용 `#`"
"RAW_BYTE_STRING_CONTENT :  \n"
"      `\"` ASCII_FOR_RAW<sup>* (non-greedy)</sup> `\"`  \n"
"   | `#` 원시_바이트_문자열_내용 `#`"

#: src/tokens.md:379
msgid ""
"ASCII_FOR_RAW :  \n"
"   _any ASCII (i.e. 0x00 to 0x7F) except IsolatedCR_"
msgstr ""
"ASCII_FOR_RAW :  \n"
"   _모든 ASCII (즉, 0x00에서 0x7F까지) 단, IsolatedCR 제외_"
"ASCII_FOR_RAW :  \n"
"   _모든 ASCII (즉, 0x00에서 0x7F까지) 단, IsolatedCR 제외_"

#: src/tokens.md:384
msgid ""
"Raw byte string literals do not process any escapes. They start with the "
"character `U+0062` (`b`), followed by `U+0072` (`r`), followed by fewer than "
"256 of the character `U+0023` (`#`), and a `U+0022` (double-quote) character."
msgstr "원시 바이트 문자열 리터럴은 어떤 이스케이프도 처리하지 않습니다. 이들은 `U+0062`(`b`) 문자로 시작하고 `U+0072`(`r`) 문자가 뒤따르며, 256개 미만의 `U+0023`(`#`) 문자와 `U+0022`(큰따옴표) 문자가 뒤따릅니다."

#: src/tokens.md:390
msgid ""
"The _raw string body_ can contain any sequence of ASCII characters other "
"than `U+000D` (CR). It is terminated only by another `U+0022` (double-quote) "
"character, followed by the same number of `U+0023` (`#`) characters that "
"preceded the opening `U+0022` (double-quote) character. A raw byte string "
"literal can not contain any non-ASCII byte."
msgstr "_원시 문자열 본문_은 `U+000D`(CR)를 제외한 모든 ASCII 문자 시퀀스를 포함할 수 있습니다. 이스케이프는 다른 `U+0022`(큰따옴표) 문자로만 종료되며, 여는 `U+0022`(큰따옴표) 문자 앞에 있던 것과 동일한 수의 `U+0023`(`#`) 문자가 뒤따릅니다. 원시 바이트 문자열 리터럴은 비 ASCII 바이트를 포함할 수 없습니다."

#: src/tokens.md:396
msgid ""
"All characters contained in the raw string body represent their ASCII "
"encoding, the characters `U+0022` (double-quote) (except when followed by at "
"least as many `U+0023` (`#`) characters as were used to start the raw string "
"literal) or `U+005C` (`\\`) do not have any special meaning."
msgstr "원시 문자열 본문에 포함된 모든 문자는 ASCII 인코딩을 나타내며, `U+0022`(큰따옴표) 문자(원시 문자열 리터럴을 시작하는 데 사용된 `U+0023`(`#`) 문자 수만큼 이상이 뒤따르지 않는 경우) 또는 `U+005C`(`\\`)는 특별한 의미를 갖지 않습니다."

#: src/tokens.md:401
msgid "Examples for byte string literals:"
msgstr "바이트 문자열 리터럴 예시:"

#: src/tokens.md:404 src/expressions/literal-expr.md:341
msgid "b\"foo\""
msgstr "b\"foo\""

#: src/tokens.md:404 src/expressions/literal-expr.md:341
msgid "br\"foo\""
msgstr "br\"foo\""

#: src/tokens.md:404 src/expressions/literal-expr.md:341
msgid ""
"// foo\n"
"b\"\\\"foo\\\"\""
msgstr ""
"// foo\n"
"b\"\\\"foo\\\"\""

#: src/tokens.md:405 src/expressions/literal-expr.md:342
msgid "br#\"\"foo\"\"#"
msgstr "br#\"\"foo\"\"#"

#: src/tokens.md:406 src/expressions/literal-expr.md:343
msgid "b\"foo #\\\"# bar\""
msgstr "b\"foo #\\\"# bar\""

#: src/tokens.md:407 src/expressions/literal-expr.md:344
msgid "br##\"foo #\"# bar\"##"
msgstr "br##\"foo #\"# bar\"##"

#: src/tokens.md:409 src/expressions/literal-expr.md:346
msgid "b\"\\x52\""
msgstr "b\"\\x52\""

#: src/tokens.md:410 src/expressions/literal-expr.md:347
msgid "b\"R\""
msgstr "b\"R\""

#: src/tokens.md:410 src/expressions/literal-expr.md:347
msgid "br\"R\""
msgstr "br\"R\""

#: src/tokens.md:410 src/expressions/literal-expr.md:347
msgid ""
"// R\n"
"b\"\\\\x52\""
msgstr ""
"// R\n"
"b\"\\\\x52\""

#: src/tokens.md:411 src/expressions/literal-expr.md:348
msgid "br\"\\x52\""
msgstr "br\"\\x52\""

#: src/tokens.md:414
msgid "C string and raw C string literals"
msgstr "C 문자열 및 원시 C 문자열 리터럴"

#: src/tokens.md:418
msgid "C string literals"
msgstr "C 문자열 리터럴"

#: src/tokens.md:422
msgid ""
"**<sup>Lexer</sup>**  \n"
"C_STRING_LITERAL :  \n"
"   `c\"` (  \n"
"      ~\\[`\"` `\\` _IsolatedCR_ _NUL_\\]  \n"
"      | BYTE_ESCAPE _except `\\0` or `\\x00`_  \n"
"      | UNICODE_ESCAPE _except `\\u{0}`, `\\u{00}`, …, `\\u{000000}`_  \n"
"      | STRING_CONTINUE  \n"
"   )<sup>\\*</sup> `\"` SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"C_STRING_LITERAL :  \n"
"   `c\"` (  \n"
"      ~\\[`\"` `\\` _IsolatedCR_ _NUL_\\]  \n"
"      | BYTE_ESCAPE _단, `\\0` 또는 `\\x00` 제외_  \n"
"      | UNICODE_ESCAPE _단, `\\u{0}`, `\\u{00}`, …, `\\u{000000}` 제외_  \n"
"      | STRING_CONTINUE  \n"
"   )<sup>*</sup> `\"` 접미사<sup>?</sup>"
"**<sup>렉서</sup>**  \n"
"C_STRING_LITERAL :  \n"
"   `c\"` (  \n"
"      ~\\[`\"` `\\` _IsolatedCR_ _NUL_\\]  \n"
"      | BYTE_ESCAPE _단, `\\0` 또는 `\\x00` 제외_  \n"
"      | UNICODE_ESCAPE _단, `\\u{0}`, `\\u{00}`, …, `\\u{000000}` 제외_  \n"
"      | STRING_CONTINUE  \n"
"   )<sup>*</sup> `\"` 접미사<sup>?</sup>"

#: src/tokens.md:433
msgid ""
"A _C string literal_ is a sequence of Unicode characters and _escapes_, "
"preceded by the characters `U+0063` (`c`) and `U+0022` (double-quote), and "
"followed by the character `U+0022`. If the character `U+0022` is present "
"within the literal, it must be _escaped_ by a preceding `U+005C` (`\\`) "
"character. Alternatively, a C string literal can be a _raw C string "
"literal_, defined below."
msgstr "_C 문자열 리터럴_은 `U+0063`(`c`)과 `U+0022`(큰따옴표) 문자로 시작하고 `U+0022` 문자로 끝나는 유니코드 문자와 _이스케이프_ 시퀀스입니다. `U+0022` 문자가 리터럴 내에 있으면 선행하는 `U+005C`(`\\`) 문자로 _이스케이프_되어야 합니다. 또는 C 문자열 리터럴은 아래에 정의된 _원시 C 문자열 리터럴_일 수 있습니다."

#: src/tokens.md:443
msgid ""
"C strings are implicitly terminated by byte `0x00`, so the C string literal "
"`c\"\"` is equivalent to manually constructing a `&CStr` from the byte "
"string literal `b\"\\x00\"`. Other than the implicit terminator, byte `0x00` "
"is not permitted within a C string."
msgstr "C 문자열은 바이트 `0x00`으로 암시적으로 종료되므로, C 문자열 리터럴 `c\"\"`는 바이트 문자열 리터럴 `b\"\\x00\"`에서 `&CStr`를 수동으로 구성하는 것과 동일합니다. 암시적 종료자를 제외하고, 바이트 `0x00`은 C 문자열 내에서 허용되지 않습니다."

#: src/tokens.md:450
msgid ""
"Line-breaks, represented by the  character `U+000A` (LF), are allowed in C "
"string literals. When an unescaped `U+005C` character (`\\`) occurs "
"immediately before a line break, the line break does not appear in the "
"string represented by the token. See [String continuation escapes]"
"(expressions/literal-expr.md#string-continuation-escapes) for details. The "
"character `U+000D` (CR) may not appear in a C string literal other than as "
"part of such a string continuation escape."
msgstr "`U+000A`(LF) 문자로 표현되는 줄 바꿈은 C 문자열 리터럴에서 허용됩니다. 이스케이프되지 않은 `U+005C` 문자(`\\`)가 줄 바꿈 바로 앞에 오면, 줄 바꿈은 토큰으로 표현되는 문자열에 나타나지 않습니다. 자세한 내용은 [문자열 연속 이스케이프](expressions/literal-expr.md#string-continuation-escapes)를 참조하십시오. `U+000D`(CR) 문자는 문자열 연속 이스케이프의 일부가 아닌 한 C 문자열 리터럴에 나타날 수 없습니다."

#: src/tokens.md:457
msgid ""
"Some additional _escapes_ are available in non-raw C string literals. An "
"escape starts with a `U+005C` (`\\`) and continues with one of the following "
"forms:"
msgstr "비원시 C 문자열 리터럴에는 몇 가지 추가 _이스케이프_가 사용 가능합니다. 이스케이프는 `U+005C`(`\\`)로 시작하며 다음 형식 중 하나로 이어집니다:"

#: src/tokens.md:467
msgid ""
"A _24-bit code point escape_ starts with `U+0075` (`u`) and is followed by "
"up to six _hex digits_ surrounded by braces `U+007B` (`{`) and `U+007D` (`}"
"`). It denotes the Unicode code point equal to the provided hex value, "
"encoded as UTF-8."
msgstr ""
"_24비트 코드 포인트 이스케이프_는 `U+0075`(`u`)로 시작하고 중괄호 `U+007B`(`{`) 및 `U+007D`(`}`)로 둘러싸인 최대 6개의 _16진수 숫자_가 뒤따릅니다. "
"제공된 16진수 값과 동일한 유니코드 코드 포인트를 나타내며 UTF-8로 인코딩됩니다."

#: src/tokens.md:485
msgid ""
"A C string represents bytes with no defined encoding, but a C string literal "
"may contain Unicode characters above `U+007F`. Such characters will be "
"replaced with the bytes of that character's UTF-8 representation."
msgstr "C 문자열은 정의된 인코딩이 없는 바이트를 나타내지만 C 문자열 리터럴에는 `U+007F` 이상의 유니코드 문자가 포함될 수 있습니다. 이러한 문자는 해당 문자의 UTF-8 표현 바이트로 대체됩니다."

#: src/tokens.md:489
msgid "The following C string literals are equivalent:"
msgstr "다음 C 문자열 리터럴은 동일합니다."

#: src/tokens.md:492 src/expressions/literal-expr.md:408
msgid "\"æ\""
msgstr "\"æ\""

#: src/tokens.md:492 src/expressions/literal-expr.md:184
#: src/expressions/literal-expr.md:408 src/expressions/literal-expr.md:409
#: src/expressions/literal-expr.md:410
msgid "// LATIN SMALL LETTER AE (U+00E6)\n"
msgstr "// 라틴어 소문자 AE (U+00E6)\n"

#: src/tokens.md:493 src/expressions/literal-expr.md:409
#: src/expressions/literal-expr.md:413
msgid "\"\\u{00E6}\""
msgstr ""

#: src/tokens.md:494 src/expressions/literal-expr.md:410
msgid "\"\\xC3\\xA6\""
msgstr ""

#: src/tokens.md:499
msgid ""
"**Edition differences**: C string literals are accepted in the 2021 edition "
"or later. In earlier additions the token `c\"\"` is lexed as `c \"\"`."
msgstr "**에디션 차이**: C 문자열 리터럴은 2021 에디션 이상에서 허용됩니다. 이전 에디션에서는 `c\"\"` 토큰이 `c \"\"`로 분석됩니다."

#: src/tokens.md:504
msgid "Raw C string literals"
msgstr "원시 C 문자열 리터럴"

#: src/tokens.md:508
msgid ""
"**<sup>Lexer</sup>**  \n"
"RAW_C_STRING_LITERAL :  \n"
"   `cr` RAW_C_STRING_CONTENT SUFFIX<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"RAW_C_STRING_LITERAL :  \n"
"   `cr` RAW_C_STRING_CONTENT 접미사<sup>?</sup>"

#: src/tokens.md:512
msgid ""
"RAW_C_STRING_CONTENT :  \n"
"      `\"` ( ~ _IsolatedCR_ _NUL_ )<sup>\\* (non-greedy)</sup> `\"`  \n"
"   | `#` RAW_C_STRING_CONTENT `#`"
msgstr ""
"RAW_C_STRING_CONTENT :  \n"
"      `\"` ( ~ _IsolatedCR_ _NUL_ )<sup>* (non-greedy)</sup> `\"`  \n"
"   | `#` RAW_C_STRING_CONTENT `#`"

#: src/tokens.md:518
msgid ""
"Raw C string literals do not process any escapes. They start with the "
"character `U+0063` (`c`), followed by `U+0072` (`r`), followed by fewer than "
"256 of the character `U+0023` (`#`), and a `U+0022` (double-quote) character."
msgstr "원시 C 문자열 리터럴은 어떤 이스케이프도 처리하지 않습니다. `U+0063`(`c`) 문자로 시작하고 `U+0072`(`r`) 문자가 뒤따르며, 256자 미만의 `U+0023`(`#`) 문자와 `U+0022`(큰따옴표) 문자가 뒤따릅니다."

#: src/tokens.md:524
msgid ""
"The _raw C string body_ can contain any sequence of Unicode characters other "
"than `U+0000` (NUL) and `U+000D` (CR). It is terminated only by another "
"`U+0022` (double-quote) character, followed by the same number of `U+0023` "
"(`#`) characters that preceded the opening `U+0022` (double-quote) character."
msgstr "_원시 C 문자열 본문_은 `U+0000`(NUL) 및 `U+000D`(CR) 이외의 모든 유니코드 문자 시퀀스를 포함할 수 있습니다. 다른 `U+0022`(큰따옴표) 문자로만 종료되며, 여는 `U+0022`(큰따옴표) 문자 앞에 있던 것과 동일한 수의 `U+0023`(`#`) 문자가 뒤따릅니다."

#: src/tokens.md:529
msgid ""
"All characters contained in the raw C string body represent themselves in "
"UTF-8 encoding. The characters `U+0022` (double-quote) (except when followed "
"by at least as many `U+0023` (`#`) characters as were used to start the raw "
"C string literal) or `U+005C` (`\\`) do not have any special meaning."
msgstr "원시 C 문자열 본문에 포함된 모든 문자는 UTF-8 인코딩으로 자신을 나타냅니다. `U+0022`(큰따옴표) 문자(원시 C 문자열 리터럴을 시작하는 데 사용된 `U+0023`(`#`) 문자 수만큼 이상 뒤따르지 않는 경우) 또는 `U+005C`(`\\`)는 특별한 의미를 갖지 않습니다."

#: src/tokens.md:536
msgid ""
"**Edition differences**: Raw C string literals are accepted in the 2021 "
"edition or later. In earlier additions the token `cr\"\"` is lexed as `cr "
"\"\"`, and `cr#\"\"#` is lexed as `cr #\"\"#` (which is non-grammatical)."
msgstr "**에디션 차이**: 원시 C 문자열 리터럴은 2021 에디션 이상에서 허용됩니다. 이전 에디션에서는 `cr\"\"` 토큰이 `cr \"\"`로, `cr#\"\"#`는 `cr #\"\"#`(문법에 맞지 않음)로 어휘 분석됩니다."

#: src/tokens.md:540
msgid "Examples for C string and raw C string literals"
msgstr "C 문자열 및 원시 C 문자열 리터럴의 예"

#: src/tokens.md:543 src/expressions/literal-expr.md:399
msgid "// foo\n"
msgstr ""

#: src/tokens.md:544 src/expressions/literal-expr.md:400
msgid "\"\\\"foo\\\"\""
msgstr ""

#: src/tokens.md:549 src/expressions/literal-expr.md:405
msgid "// R\n"
msgstr ""

#: src/tokens.md:550 src/expressions/literal-expr.md:406
msgid "\"\\\\x52\""
msgstr ""

#: src/tokens.md:555
msgid "Number literals"
msgstr "숫자 리터럴"

#: src/tokens.md:558
msgid ""
"A _number literal_ is either an _integer literal_ or a _floating-point "
"literal_. The grammar for recognizing the two kinds of literals is mixed."
msgstr "_숫자 리터럴_은 _정수 리터럴_ 또는 _부동 소수점 리터럴_입니다. 두 종류의 리터럴을 인식하는 문법은 혼합되어 있습니다."

#: src/tokens.md:563
msgid "Integer literals"
msgstr "정수 리터럴"

#: src/tokens.md:567
msgid ""
"**<sup>Lexer</sup>**  \n"
"INTEGER_LITERAL :  \n"
"   ( DEC_LITERAL | BIN_LITERAL | OCT_LITERAL | HEX_LITERAL ) "
"SUFFIX_NO_E<sup>?</sup>"
msgstr ""
"**<sup>렉서</sup>**  \n"
"INTEGER_LITERAL :  \n"
"   ( DEC_LITERAL | BIN_LITERAL | OCT_LITERAL | HEX_LITERAL ) "
"SUFFIX_NO_E<sup>?</sup>"

#: src/tokens.md:572
msgid ""
"DEC_LITERAL :  \n"
"   DEC_DIGIT (DEC_DIGIT|`_`)<sup>\\*</sup>"
msgstr ""
"DEC_LITERAL :  \n"
"   DEC_DIGIT (DEC_DIGIT|`_`)<sup>*</sup>"

#: src/tokens.md:575
msgid ""
"BIN_LITERAL :  \n"
"   `0b` (BIN_DIGIT|`_`)<sup>\\*</sup> BIN_DIGIT (BIN_DIGIT|`_`)<sup>\\*</sup>"
msgstr ""
"BIN_LITERAL :  \n"
"   `0b` (BIN_DIGIT|`_`)<sup>*</sup> BIN_DIGIT (BIN_DIGIT|`_`)<sup>*</sup>"

#: src/tokens.md:578
msgid ""
"OCT_LITERAL :  \n"
"   `0o` (OCT_DIGIT|`_`)<sup>\\*</sup> OCT_DIGIT (OCT_DIGIT|`_`)<sup>\\*</sup>"
msgstr ""
"OCT_LITERAL :  \n"
"   `0o` (OCT_DIGIT|`_`)<sup>*</sup> OCT_DIGIT (OCT_DIGIT|`_`)<sup>*</sup>"

#: src/tokens.md:581
msgid ""
"HEX_LITERAL :  \n"
"   `0x` (HEX_DIGIT|`_`)<sup>\\*</sup> HEX_DIGIT (HEX_DIGIT|`_`)<sup>\\*</sup>"
msgstr ""
"HEX_LITERAL :  \n"
"   `0x` (HEX_DIGIT|`_`)<sup>*</sup> HEX_DIGIT (HEX_DIGIT|`_`)<sup>*</sup>"

#: src/tokens.md:584
msgid "BIN_DIGIT : \\[`0`\\-`1`\\]"
msgstr "BIN_DIGIT : \\[`0`\\-`1`\\]"

#: src/tokens.md:586
msgid "OCT_DIGIT : \\[`0`\\-`7`\\]"
msgstr "OCT_DIGIT : \\[`0`\\-`7`\\]"

#: src/tokens.md:588
msgid "DEC_DIGIT : \\[`0`\\-`9`\\]"
msgstr "DEC_DIGIT : \\[`0`\\-`9`\\]"

#: src/tokens.md:590
msgid "HEX_DIGIT : \\[`0`\\-`9` `a`\\-`f` `A`\\-`F`\\]"
msgstr "HEX_DIGIT : \\[`0`\\-`9` `a`\\-`f` `A`\\-`F`\\]"

#: src/tokens.md:594
msgid "An _integer literal_ has one of four forms:"
msgstr "_정수 리터럴_은 네 가지 형태 중 하나를 갖습니다."

#: src/tokens.md:598
msgid ""
"A _decimal literal_ starts with a _decimal digit_ and continues with any "
"mixture of _decimal digits_ and _underscores_."
msgstr "_십진수 리터럴_은 _십진수 숫자_로 시작하고 _십진수 숫자_와 _밑줄_의 혼합으로 이어집니다."

#: src/tokens.md:603
msgid ""
"A _hex literal_ starts with the character sequence `U+0030` `U+0078` (`0x`) "
"and continues as any mixture (with at least one digit) of hex digits and "
"underscores."
msgstr "_16진수 리터럴_은 문자 시퀀스 `U+0030` `U+0078`(`0x`)로 시작하고 16진수 숫자와 밑줄의 혼합(최소 한 자리 이상)으로 이어집니다."

#: src/tokens.md:609
msgid ""
"An _octal literal_ starts with the character sequence `U+0030` `U+006F` "
"(`0o`) and continues as any mixture (with at least one digit) of octal "
"digits and underscores."
msgstr "_8진수 리터럴_은 문자 시퀀스 `U+0030` `U+006F`(`0o`)로 시작하고 8진수 숫자와 밑줄의 혼합(최소 한 자리 이상)으로 이어집니다."

#: src/tokens.md:615
msgid ""
"A _binary literal_ starts with the character sequence `U+0030` `U+0062` "
"(`0b`) and continues as any mixture (with at least one digit) of binary "
"digits and underscores."
msgstr "_2진수 리터럴_은 문자 시퀀스 `U+0030` `U+0062`(`0b`)로 시작하고 2진수 숫자와 밑줄의 혼합(최소 한 자리 이상)으로 이어집니다."

#: src/tokens.md:621
msgid ""
"Like any literal, an integer literal may be followed (immediately, without "
"any spaces) by a suffix as described above. The suffix may not begin with "
"`e` or `E`, as that would be interpreted as the exponent of a floating-point "
"literal. See [Integer literal expressions](expressions/literal-"
"expr.md#integer-literal-expressions) for the effect of these suffixes."
msgstr "모든 리터럴과 마찬가지로 정수 리터럴 뒤에는 위에서 설명한 대로 접미사가 (공백 없이) 바로 올 수 있습니다. 접미사는 `e` 또는 `E`로 시작할 수 없습니다. 이는 부동 소수점 리터럴의 지수로 해석되기 때문입니다. 이러한 접미사의 효과에 대해서는 [정수 리터럴 표현식](expressions/literal-expr.md#integer-literal-expressions)을 참조하십시오."

#: src/tokens.md:625
msgid "Examples of integer literals which are accepted as literal expressions:"
msgstr "리터럴 표현식으로 허용되는 정수 리터럴의 예:"

#: src/tokens.md:636
msgid "// integer 7986, not floating-point 1.0\n"
msgstr "// 정수 7986, 부동 소수점 1.0 아님\n"

#: src/tokens.md:637
msgid "// integer 483, not floating-point 1000.0\n"
msgstr "// 정수 483, 부동 소수점 1000.0 아님\n"

#: src/tokens.md:647
msgid ""
"// These are too big for their type, but are accepted as literal "
"expressions.\n"
msgstr ""

#: src/tokens.md:651
msgid ""
"// This is an integer literal, accepted as a floating-point literal "
"expression.\n"
msgstr ""

#: src/tokens.md:656
msgid ""
"Note that `-1i8`, for example, is analyzed as two tokens: `-` followed by "
"`1i8`."
msgstr "예를 들어 `-1i8`은 `-`와 `1i8`의 두 토큰으로 분석됩니다."

#: src/tokens.md:659
msgid ""
"Examples of integer literals which are not accepted as literal expressions:"
msgstr ""

#: src/tokens.md:673
msgid "Tuple index"
msgstr "튜플 인덱스"

#: src/tokens.md:677
msgid ""
"**<sup>Lexer</sup>**  \n"
"TUPLE_INDEX:   \n"
"   INTEGER_LITERAL"
msgstr ""
"**<sup>렉서</sup>**  \n"
"TUPLE_INDEX:   \n"
"   INTEGER_LITERAL"

#: src/tokens.md:683
msgid ""
"A tuple index is used to refer to the fields of [tuples](types/tuple.md), "
"[tuple structs](items/structs.md), and [tuple variants](items/"
"enumerations.md)."
msgstr "튜플 인덱스는 [튜플](types/tuple.md), [튜플 구조체](items/structs.md) 및 [튜플 변형](items/enumerations.md)의 필드를 참조하는 데 사용됩니다."

#: src/tokens.md:688
msgid ""
"Tuple indices are compared with the literal token directly. Tuple indices "
"start with `0` and each successive index increments the value by `1` as a "
"decimal value. Thus, only decimal values will match, and the value must not "
"have any extra `0` prefix characters."
msgstr "튜플 인덱스는 리터럴 토큰과 직접 비교됩니다. 튜플 인덱스는 `0`으로 시작하고 각 연속 인덱스는 값을 1씩 10진수 값으로 증가시킵니다. 따라서 10진수 값만 일치하며 값에 추가 `0` 접두사 문자가 없어야 합니다."

#: src/tokens.md:694
msgid "\"dog\""
msgstr ""

#: src/tokens.md:694
msgid "\\\"cat\\\""
msgstr "\\\"cat\\\""

#: src/tokens.md:694
msgid "\"horse\""
msgstr "말"

#: src/tokens.md:696
msgid "// The following examples are invalid.\n"
msgstr "// 다음 예제는 유효하지 않습니다.\n"

#: src/tokens.md:698
msgid "// ERROR no field named `01`\n"
msgstr "// 오류: `01`이라는 필드가 없습니다\n"

#: src/tokens.md:699
msgid "// ERROR no field named `0b10`\n"
msgstr "// 오류: `0b10`이라는 필드가 없습니다\n"

#: src/tokens.md:702
msgid ""
"**Note**: Tuple indices may include certain suffixes, but this is not "
"intended to be valid, and may be removed in a future version. See <https://"
"github.com/rust-lang/rust/issues/60210> for more information."
msgstr "**참고**: 튜플 인덱스에는 특정 접미사가 포함될 수 있지만 이는 유효하도록 의도된 것이 아니며 향후 버전에서 제거될 수 있습니다. 자세한 내용은 <https://github.com/rust-lang/rust/issues/60210>을 참조하십시오."

#: src/tokens.md:707
msgid "Floating-point literals"
msgstr "부동 소수점 리터럴"

#: src/tokens.md:711
msgid ""
"**<sup>Lexer</sup>**  \n"
"FLOAT_LITERAL :  \n"
"      DEC_LITERAL `.` _(not immediately followed by `.`, `_` or an XID_Start "
"character)_  \n"
"   | DEC_LITERAL `.` DEC_LITERAL SUFFIX_NO_E<sup>?</sup>  \n"
"   | DEC_LITERAL (`.` DEC_LITERAL)<sup>?</sup> FLOAT_EXPONENT SUFFIX<sup>?</"
"sup>"
msgstr ""

#: src/tokens.md:718
msgid ""
"FLOAT_EXPONENT :  \n"
"   (`e`\\|`E`) (`+`\\|`-`)<sup>?</sup> (DEC_DIGIT|`_`)<sup>\\*</sup> "
"DEC_DIGIT (DEC_DIGIT|`_`)<sup>\\*</sup>"
msgstr ""

#: src/tokens.md:725
msgid "A _floating-point literal_ has one of two forms:"
msgstr "_부동 소수점 리터럴_은 두 가지 형태 중 하나를 갖습니다."

#: src/tokens.md:727
msgid ""
"A _decimal literal_ followed by a period character `U+002E` (`.`). This is "
"optionally followed by another decimal literal, with an optional _exponent_."
msgstr "_십진수 리터럴_ 뒤에 마침표 문자 `U+002E`(`.`)가 옵니다. 선택적으로 다른 십진수 리터럴과 선택적 _지수_가 뒤따를 수 있습니다."

#: src/tokens.md:729
msgid "A single _decimal literal_ followed by an _exponent_."
msgstr "단일 _십진수 리터럴_ 뒤에 _지수_가 옵니다."

#: src/tokens.md:733
msgid ""
"Like integer literals, a floating-point literal may be followed by a suffix, "
"so long as the pre-suffix part does not end with `U+002E` (`.`). The suffix "
"may not begin with `e` or `E` if the literal does not include an exponent. "
"See [Floating-point literal expressions](expressions/literal-"
"expr.md#floating-point-literal-expressions) for the effect of these suffixes."
msgstr "정수 리터럴과 마찬가지로 부동 소수점 리터럴 뒤에는 접미사가 올 수 있습니다. 단, 접미사 앞부분이 `U+002E`(`.`)로 끝나지 않아야 합니다. 리터럴에 지수가 포함되지 않은 경우 접미사는 `e` 또는 `E`로 시작할 수 없습니다. 이러한 접미사의 효과에 대해서는 [부동 소수점 리터럴 표현식](expressions/literal-expr.md#floating-point-literal-expressions)을 참조하십시오."

#: src/tokens.md:738
msgid ""
"Examples of floating-point literals which are accepted as literal "
"expressions:"
msgstr "리터럴 표현식으로 허용되는 부동 소수점 리터럴의 예:"

#: src/tokens.md:748
msgid ""
"This last example is different because it is not possible to use the suffix "
"syntax with a floating point literal end.token.ing in a period. `2.f64` "
"would attempt to call a method named `f64` on `2`."
msgstr "마지막 예는 마침표로 끝나는 부동 소수점 리터럴에 접미사 구문을 사용할 수 없기 때문에 다릅니다. `2.f64`는 `2`에서 `f64`라는 이름의 메서드를 호출하려고 시도합니다."

#: src/tokens.md:752
msgid ""
"Note that `-1.0`, for example, is analyzed as two tokens: `-` followed by "
"`1.0`."
msgstr "예를 들어 `-1.0`은 `-`와 `1.0`의 두 토큰으로 분석됩니다."

#: src/tokens.md:754
msgid ""
"Examples of floating-point literals which are not accepted as literal "
"expressions:"
msgstr "리터럴 표현식으로 허용되지 않는 부동 소수점 리터럴의 예:"

#: src/tokens.md:768
msgid "Reserved forms similar to number literals"
msgstr "숫자 리터럴과 유사한 예약된 형식"

#: src/tokens.md:771
msgid ""
"**<sup>Lexer</sup>**  \n"
"RESERVED_NUMBER :  \n"
"      BIN_LITERAL \\[`2`\\-`9`​\\]  \n"
"   | OCT_LITERAL \\[`8`\\-`9`​\\]  \n"
"   | ( BIN_LITERAL | OCT_LITERAL | HEX_LITERAL ) `.`   \n"
"         _(not immediately followed by `.`, `_` or an XID_Start "
"character)_  \n"
"   | ( BIN_LITERAL | OCT_LITERAL ) (`e`\\|`E`)  \n"
"   | `0b` `_`<sup>\\*</sup> _end of input or not BIN_DIGIT_  \n"
"   | `0o` `_`<sup>\\*</sup> _end of input or not OCT_DIGIT_  \n"
"   | `0x` `_`<sup>\\*</sup> _end of input or not HEX_DIGIT_  \n"
"   | DEC_LITERAL ( . DEC_LITERAL)<sup>?</sup> (`e`\\|`E`) (`+`\\|`-`)<sup>?</"
"sup> _end of input or not DEC_DIGIT_"
msgstr ""

#: src/tokens.md:785
msgid ""
"The following lexical forms similar to number literals are _reserved forms_. "
"Due to the possible ambiguity these raise, they are rejected by the "
"tokenizer instead of being interpreted as separate tokens."
msgstr "숫자 리터럴과 유사한 다음 어휘 형식은 _예약된 형식_입니다. 이들이 제기하는 모호성 때문에 토크나이저는 이를 별도의 토큰으로 해석하는 대신 거부합니다."

#: src/tokens.md:790
msgid ""
"An unsuffixed binary or octal literal followed, without intervening "
"whitespace, by a decimal digit out of the range for its radix."
msgstr "접미사가 없는 2진수 또는 8진수 리터럴 뒤에 공백 없이 해당 기수 범위를 벗어나는 10진수 숫자가 오는 경우."

#: src/tokens.md:794
msgid ""
"An unsuffixed binary, octal, or hexadecimal literal followed, without "
"intervening whitespace, by a period character (with the same restrictions on "
"what follows the period as for floating-point literals)."
msgstr "접미사가 없는 2진수, 8진수 또는 16진수 리터럴 뒤에 공백 없이 마침표 문자가 오는 경우(마침표 뒤에 오는 내용에 대한 제한은 부동 소수점 리터럴과 동일)."

#: src/tokens.md:798
msgid ""
"An unsuffixed binary or octal literal followed, without intervening "
"whitespace, by the character `e` or `E`."
msgstr "접미사가 없는 2진수 또는 8진수 리터럴 뒤에 공백 없이 `e` 또는 `E` 문자가 오는 경우."

#: src/tokens.md:802
msgid ""
"Input which begins with one of the radix prefixes but is not a valid binary, "
"octal, or hexadecimal literal (because it contains no digits)."
msgstr "기수 접두사 중 하나로 시작하지만 유효한 2진수, 8진수 또는 16진수 리터럴이 아닌 입력 (숫자를 포함하지 않기 때문에)."

#: src/tokens.md:806
msgid ""
"Input which has the form of a floating-point literal with no digits in the "
"exponent."
msgstr "지수에 숫자가 없는 부동 소수점 리터럴 형식을 갖는 입력."

#: src/tokens.md:808
msgid "Examples of reserved forms:"
msgstr "예약된 형식의 예:"

#: src/tokens.md:811
msgid "// this is not `0b010` followed by `2`\n"
msgstr "// 이것은 `0b010` 뒤에 `2`가 오는 것이 아닙니다\n"

#: src/tokens.md:812
msgid "// this is not `0o127` followed by `9`\n"
msgstr "// 이것은 `0o127` 뒤에 `9`가 오는 것이 아닙니다\n"

#: src/tokens.md:813
msgid "// this is not `0x80` followed by `.` and `0`\n"
msgstr "// 이것은 `0x80` 뒤에 `.`와 `0`이 오는 것이 아닙니다\n"

#: src/tokens.md:814
msgid "// this is not a suffixed literal, or `0b101` followed by `e`\n"
msgstr "// 이것은 접미사가 붙은 리터럴이 아니거나, `0b101` 뒤에 `e`가 오는 것이 아닙니다\n"

#: src/tokens.md:815
msgid "// this is not an integer literal, or `0` followed by `b`\n"
msgstr "// 이것은 정수 리터럴이 아니거나, `0` 뒤에 `b`가 오는 것이 아닙니다\n"

#: src/tokens.md:816
msgid "// this is not an integer literal, or `0` followed by `b_`\n"
msgstr "// 이것은 정수 리터럴이 아니거나, `0` 뒤에 `b_`가 오는 것이 아닙니다\n"

#: src/tokens.md:817
msgid "// this is not a floating-point literal, or `2` followed by `e`\n"
msgstr ""

#: src/tokens.md:818
msgid "// this is not a floating-point literal, or `2.0` followed by `e`\n"
msgstr "// 이것은 부동 소수점 리터럴이 아니거나, `2.0` 뒤에 `e`가 오는 것이 아닙니다\n"

#: src/tokens.md:819
msgid "// this is not a suffixed literal, or `2` followed by `em`\n"
msgstr "// 이것은 접미사가 붙은 리터럴이 아니거나, `2` 뒤에 `em`이 오는 것이 아닙니다\n"

#: src/tokens.md:820
msgid "// this is not a suffixed literal, or `2.0` followed by `em`\n"
msgstr "// 이것은 접미사가 붙은 리터럴이 아니거나, `2.0` 뒤에 `em`이 오는 것이 아닙니다\n"

#: src/tokens.md:825
msgid "Lifetimes and loop labels"
msgstr "라이프타임과 루프 레이블"

#: src/tokens.md:829
msgid ""
"**<sup>Lexer</sup>**  \n"
"LIFETIME_TOKEN :  \n"
"      `'` [IDENTIFIER_OR_KEYWORD](identifiers.md) _(not immediately followed "
"by `'`)_  \n"
"   | `'_` _(not immediately followed by `'`)_  \n"
"   | RAW_LIFETIME"
msgstr ""
"**<sup>렉서</sup>**  \n"
"LIFETIME_TOKEN :  \n"
"      `'` [IDENTIFIER_OR_KEYWORD](identifiers.md) _(`'`가 바로 뒤에 오지 않음)_  \n"
"   | `'_` _(`'`가 바로 뒤에 오지 않음)_  \n"
"   | RAW_LIFETIME"

#: src/tokens.md:837
msgid ""
"LIFETIME_OR_LABEL :  \n"
"      `'` [NON_KEYWORD_IDENTIFIER](identifiers.md) _(not immediately "
"followed by `'`)_  \n"
"   | RAW_LIFETIME"
msgstr ""
"LIFETIME_OR_LABEL :  \n"
"      `'` [NON_KEYWORD_IDENTIFIER](identifiers.md) _(`'`가 바로 뒤에 오지 않음)_  \n"
"   | RAW_LIFETIME"

#: src/tokens.md:842
msgid ""
"RAW_LIFETIME :  \n"
"   `\'r#` [IDENTIFIER_OR_KEYWORD](identifiers.md) <sub>_Except `crate`, "
"`self`, `super`, `Self`_</sub> _(not immediately followed by `'`)_"
msgstr ""
"RAW_LIFETIME :  \n"
"   `\'r#` [IDENTIFIER_OR_KEYWORD](identifiers.md) <sub>_`crate`, "
"`self`, `super`, `Self` 제외_</sub> _(`'`가 바로 뒤에 오지 않음)_"

#: src/tokens.md:846
msgid "RESERVED_RAW_LIFETIME : `\'r#_` _(not immediately followed by `'`)_"
msgstr "RESERVED_RAW_LIFETIME : `\'r#_` _(`'`가 바로 뒤에 오지 않음)_"

#: src/tokens.md:851
msgid ""
"Lifetime parameters and [loop labels](expressions/loop-expr.md) use "
"LIFETIME_OR_LABEL tokens. Any LIFETIME_TOKEN will be accepted by the lexer, "
"and for example, can be used in macros."
msgstr "라이프타임 매개변수와 [루프 레이블](expressions/loop-expr.md)은 LIFETIME_OR_LABEL 토큰을 사용합니다. 모든 LIFETIME_TOKEN은 렉서에 의해 허용되며, 예를 들어 매크로에서 사용될 수 있습니다."

#: src/tokens.md:857
msgid ""
"A raw lifetime is like a normal lifetime, but its identifier is prefixed by "
"`r#`. (Note that the `r#` prefix is not included as part of the actual "
"lifetime.)"
msgstr "원시 라이프타임은 일반 라이프타임과 같지만 식별자 앞에 `r#` 접두사가 붙습니다. (`r#` 접두사는 실제 라이프타임의 일부로 포함되지 않습니다.)"

#: src/tokens.md:861
msgid ""
"Unlike a normal lifetime, a raw lifetime may be any strict or reserved "
"keyword except the ones listed above for `RAW_LIFETIME`."
msgstr "일반 라이프타임과 달리 원시 라이프타임은 `RAW_LIFETIME`에 대해 위에 나열된 키워드를 제외한 모든 엄격하거나 예약된 키워드일 수 있습니다."

#: src/tokens.md:865
msgid ""
"It is an error to use the RESERVED_RAW_LIFETIME token `\'r#_` in order to "
"avoid confusion with the [placeholder lifetime](lifetime-elision.md)."
msgstr "[자리표시자 라이프타임](lifetime-elision.md)과의 혼동을 피하기 위해 RESERVED_RAW_LIFETIME 토큰 `\'r#_`를 사용하는 것은 오류입니다."

#: src/tokens.md:869
msgid ""
"**Edition differences**: Raw lifetimes are accepted in the 2021 edition or "
"later. In earlier additions the token `\'r#lt` is lexed as `\'r # lt`."
msgstr "**에디션 차이**: 원시 라이프타임은 2021 에디션 이상에서 허용됩니다. 이전 에디션에서는 `\'r#lt` 토큰이 `\'r # lt`로 어휘 분석됩니다."

#: src/tokens.md:874
msgid "Punctuation"
msgstr "구두점"

#: src/tokens.md:878
msgid ""
"Punctuation symbol tokens are listed here for completeness. Their individual "
"usages and meanings are defined in the linked pages."
msgstr "구두점 기호 토큰은 완전성을 위해 여기에 나열됩니다. 개별적인 사용법과 의미는 링크된 페이지에 정의되어 있습니다."

#: src/tokens.md:881 src/expressions/operator-expr.md:311
#: src/expressions/operator-expr.md:356 src/expressions/operator-expr.md:438
msgid "Symbol"
msgstr "기호"

#: src/tokens.md:881
msgid "Usage"
msgstr "용법"

#: src/tokens.md:883 src/expressions/operator-expr.md:358
msgid "`+`"
msgstr "`+`"

#: src/tokens.md:883
msgid "Plus"
msgstr "더하기"

#: src/tokens.md:883
msgid ""
"[Addition](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators), [Trait Bounds](trait-bounds.md), [Macro Kleene Matcher](macros-"
"by-example.md)"
msgstr "[더하기](expressions/operator-expr.md#arithmetic-and-logical-binary-operators), [트레이트 바운드](trait-bounds.md), [매크로 클리니 매처](macros-by-example.md)"

#: src/tokens.md:884 src/expressions/operator-expr.md:313
#: src/expressions/operator-expr.md:359
msgid "`-`"
msgstr "`-`"

#: src/tokens.md:884
msgid "Minus"
msgstr "빼기"

#: src/tokens.md:884
msgid ""
"[Subtraction](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators), [Negation](expressions/operator-expr.md#negation-operators)"
msgstr "[빼기](expressions/operator-expr.md#arithmetic-and-logical-binary-operators), [부정](expressions/operator-expr.md#negation-operators)"

#: src/tokens.md:885 src/expressions/operator-expr.md:360
msgid "`*`"
msgstr "`*`"

#: src/tokens.md:885
msgid "Star"
msgstr "별"

#: src/tokens.md:885
msgid ""
"[Multiplication](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators), [Dereference](expressions/operator-expr.md#the-dereference-"
"operator), [Raw Pointers](types/pointer.md#raw-pointers-const-and-mut), "
"[Macro Kleene Matcher](macros-by-example.md), [Use wildcards](items/use-"
"declarations.md)"
msgstr "[곱하기](expressions/operator-expr.md#arithmetic-and-logical-binary-operators), [역참조](expressions/operator-expr.md#the-dereference-operator), [원시 포인터](types/pointer.md#raw-pointers-const-and-mut), [매크로 클리니 매처](macros-by-example.md), [와일드카드 사용](items/use-declarations.md)"

#: src/tokens.md:886 src/expressions/operator-expr.md:361
msgid "`/`"
msgstr "`/`"

#: src/tokens.md:886
msgid "Slash"
msgstr "슬래시"

#: src/tokens.md:886
msgid ""
"[Division](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators)"
msgstr "[나누기](expressions/operator-expr.md#arithmetic-and-logical-binary-operators)"

#: src/tokens.md:887 src/expressions/operator-expr.md:362
msgid "`%`"
msgstr "`%`"

#: src/tokens.md:887
msgid "Percent"
msgstr "백분율"

#: src/tokens.md:887
msgid ""
"[Remainder](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators)"
msgstr "[나머지](expressions/operator-expr.md#arithmetic-and-logical-binary-operators)"

#: src/tokens.md:888 src/expressions.md:97 src/expressions/operator-expr.md:365
msgid "`^`"
msgstr "`^`"

#: src/tokens.md:888
msgid "Caret"
msgstr "캐럿"

#: src/tokens.md:888
msgid ""
"[Bitwise and Logical XOR](expressions/operator-expr.md#arithmetic-and-"
"logical-binary-operators)"
msgstr "[비트 및 논리 XOR](expressions/operator-expr.md#arithmetic-and-logical-binary-operators)"

#: src/tokens.md:889 src/attributes/testing.md:29
#: src/expressions/operator-expr.md:314
msgid "`!`"
msgstr "`!`"

#: src/tokens.md:889
msgid "Not"
msgstr "아님"

#: src/tokens.md:889
msgid ""
"[Bitwise and Logical NOT](expressions/operator-expr.md#negation-operators), "
"[Macro Calls](macros-by-example.md), [Inner Attributes](attributes.md), "
"[Never Type](types/never.md), [Negative impls](items/implementations.md)"
msgstr "[비트 및 논리 NOT](expressions/operator-expr.md#negation-operators), [매크로 호출](macros-by-example.md), [내부 속성](attributes.md), [Never 유형](types/never.md), [음수 impls](items/implementations.md)"

#: src/tokens.md:890 src/expressions.md:96 src/expressions/operator-expr.md:363
msgid "`&`"
msgstr "`&`"

#: src/tokens.md:890
msgid "And"
msgstr "그리고"

#: src/tokens.md:890
msgid ""
"[Bitwise and Logical AND](expressions/operator-expr.md#arithmetic-and-"
"logical-binary-operators), [Borrow](expressions/operator-expr.md#borrow-"
"operators), [References](types/pointer.md), [Reference patterns]"
"(patterns.md#reference-patterns)"
msgstr "[비트 및 논리 AND](expressions/operator-expr.md#arithmetic-and-logical-binary-operators), [차용](expressions/operator-expr.md#borrow-operators), [참조](types/pointer.md), [참조 패턴](patterns.md#reference-patterns)"

#: src/tokens.md:891 src/expressions.md:98 src/expressions/operator-expr.md:364
msgid "<code>\\|</code>"
msgstr ""

#: src/tokens.md:891
msgid "Or"
msgstr "또는"

#: src/tokens.md:891
msgid ""
"[Bitwise and Logical OR](expressions/operator-expr.md#arithmetic-and-logical-"
"binary-operators), [Closures](expressions/closure-expr.md), Patterns in "
"[match](expressions/match-expr.md), [if let](expressions/if-expr.md#if-let-"
"expressions), and [while let](expressions/loop-expr.md#predicate-pattern-"
"loops)"
msgstr "[비트 및 논리 OR](expressions/operator-expr.md#arithmetic-and-logical-binary-operators), [클로저](expressions/closure-expr.md), [match](expressions/match-expr.md), [if let](expressions/if-expr.md#if-let-expressions) 및 [while let](expressions/loop-expr.md#predicate-pattern-loops)의 패턴"

#: src/tokens.md:892 src/expressions.md:100
msgid "`&&`"
msgstr "`&&`"

#: src/tokens.md:892
msgid "AndAnd"
msgstr "그리고 그리고"

#: src/tokens.md:892
msgid ""
"[Lazy AND](expressions/operator-expr.md#lazy-boolean-operators), [Borrow]"
"(expressions/operator-expr.md#borrow-operators), [References](types/"
"pointer.md), [Reference patterns](patterns.md#reference-patterns)"
msgstr "[지연 AND](expressions/operator-expr.md#lazy-boolean-operators), [차용](expressions/operator-expr.md#borrow-operators), [참조](types/pointer.md), [참조 패턴](patterns.md#reference-patterns)"

#: src/tokens.md:893 src/expressions.md:101
msgid "<code>\\|\\|</code>"
msgstr "<code>\\|\\|</code>"

#: src/tokens.md:893
msgid "OrOr"
msgstr "또는 또는"

#: src/tokens.md:893
msgid ""
"[Lazy OR](expressions/operator-expr.md#lazy-boolean-operators), [Closures]"
"(expressions/closure-expr.md)"
msgstr "[지연 OR](expressions/operator-expr.md#lazy-boolean-operators), [클로저](expressions/closure-expr.md)"

#: src/tokens.md:894 src/expressions/operator-expr.md:366
msgid "`<<`"
msgstr "`<<`"

#: src/tokens.md:894
msgid "Shl"
msgstr "Shl"

#: src/tokens.md:894
msgid ""
"[Shift Left](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators), [Nested Generics](items/generics.md)"
msgstr "[왼쪽 시프트](expressions/operator-expr.md#arithmetic-and-logical-binary-operators), [중첩 제네릭](items/generics.md)"

#: src/tokens.md:895 src/expressions/operator-expr.md:367
msgid "`>>`"
msgstr "`>>`"

#: src/tokens.md:895
msgid "Shr"
msgstr "Shr"

#: src/tokens.md:895
msgid ""
"[Shift Right](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators), [Nested Generics](items/generics.md)"
msgstr "[오른쪽 시프트](expressions/operator-expr.md#arithmetic-and-logical-binary-operators), [중첩 제네릭](items/generics.md)"

#: src/tokens.md:896
msgid "`+=`"
msgstr "`+=`"

#: src/tokens.md:896
msgid "PlusEq"
msgstr "PlusEq"

#: src/tokens.md:896
msgid ""
"[Addition assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[덧셈 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:897
msgid "`-=`"
msgstr "`-=`"

#: src/tokens.md:897
msgid "MinusEq"
msgstr "MinusEq"

#: src/tokens.md:897
msgid ""
"[Subtraction assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[뺄셈 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:898
msgid "`*=`"
msgstr "`*=`"

#: src/tokens.md:898
msgid "StarEq"
msgstr "StarEq"

#: src/tokens.md:898
msgid ""
"[Multiplication assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[곱셈 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:899
msgid "`/=`"
msgstr "`/=`"

#: src/tokens.md:899
msgid "SlashEq"
msgstr "SlashEq"

#: src/tokens.md:899
msgid ""
"[Division assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[나눗셈 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:900
msgid "`%=`"
msgstr "`%=`"

#: src/tokens.md:900
msgid "PercentEq"
msgstr "PercentEq"

#: src/tokens.md:900
msgid ""
"[Remainder assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[나머지 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:901
msgid "`^=`"
msgstr "`^=`"

#: src/tokens.md:901
msgid "CaretEq"
msgstr "CaretEq"

#: src/tokens.md:901
msgid ""
"[Bitwise XOR assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[비트 XOR 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:902
msgid "`&=`"
msgstr "`&=`"

#: src/tokens.md:902
msgid "AndEq"
msgstr "AndEq"

#: src/tokens.md:902
msgid ""
"[Bitwise And assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[비트 And 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:903
msgid "<code>\\|=</code>"
msgstr ""

#: src/tokens.md:903
msgid "OrEq"
msgstr "OrEq"

#: src/tokens.md:903
msgid ""
"[Bitwise Or assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[비트 Or 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:904
msgid "`<<=`"
msgstr "`<<=`"

#: src/tokens.md:904
msgid "ShlEq"
msgstr "ShlEq"

#: src/tokens.md:904
msgid ""
"[Shift Left assignment](expressions/operator-expr.md#compound-assignment-"
"expressions)"
msgstr "[왼쪽 시프트 할당](expressions/operator-expr.md#compound-assignment-expressions)"

#: src/tokens.md:905
msgid "`>>=`"
msgstr "`>>=`"

#: src/tokens.md:905
msgid "ShrEq"
msgstr "ShrEq"

#: src/tokens.md:905
msgid ""
"[Shift Right assignment](expressions/operator-expr.md#compound-assignment-"
"expressions), [Nested Generics](items/generics.md)"
msgstr "[오른쪽 시프트 할당](expressions/operator-expr.md#compound-assignment-expressions), [중첩 제네릭](items/generics.md)"

#: src/tokens.md:906
msgid "`=`"
msgstr "`=`"

#: src/tokens.md:906
msgid "Eq"
msgstr "Eq"

#: src/tokens.md:906
msgid ""
"[Assignment](expressions/operator-expr.md#assignment-expressions), "
"[Attributes](attributes.md), Various type definitions"
msgstr "[할당](expressions/operator-expr.md#assignment-expressions), [속성](attributes.md), 다양한 유형 정의"

#: src/tokens.md:907 src/expressions/operator-expr.md:440
msgid "`==`"
msgstr "`==`"

#: src/tokens.md:907
msgid "EqEq"
msgstr "EqEq"

#: src/tokens.md:907
msgid "[Equal](expressions/operator-expr.md#comparison-operators)"
msgstr "[같음](expressions/operator-expr.md#comparison-operators)"

#: src/tokens.md:908 src/expressions/operator-expr.md:441
msgid "`!=`"
msgstr "`!=`"

#: src/tokens.md:908
msgid "Ne"
msgstr "Ne"

#: src/tokens.md:908
msgid "[Not Equal](expressions/operator-expr.md#comparison-operators)"
msgstr "[같지 않음](expressions/operator-expr.md#comparison-operators)"

#: src/tokens.md:909 src/expressions/operator-expr.md:442
msgid "`>`"
msgstr "`>`"

#: src/tokens.md:909
msgid "Gt"
msgstr "Gt"

#: src/tokens.md:909
msgid ""
"[Greater than](expressions/operator-expr.md#comparison-operators), [Generics]"
"(items/generics.md), [Paths](paths.md)"
msgstr "[보다 큼](expressions/operator-expr.md#comparison-operators), [제네릭](items/generics.md), [경로](paths.md)"

#: src/tokens.md:910 src/expressions/operator-expr.md:443
msgid "`<`"
msgstr "`<`"

#: src/tokens.md:910
msgid "Lt"
msgstr "Lt"

#: src/tokens.md:910
msgid ""
"[Less than](expressions/operator-expr.md#comparison-operators), [Generics]"
"(items/generics.md), [Paths](paths.md)"
msgstr "[보다 작음](expressions/operator-expr.md#comparison-operators), [제네릭](items/generics.md), [경로](paths.md)"

#: src/tokens.md:911 src/expressions/operator-expr.md:444
msgid "`>=`"
msgstr "`>=`"

#: src/tokens.md:911
msgid "Ge"
msgstr "Ge"

#: src/tokens.md:911
msgid ""
"[Greater than or equal to](expressions/operator-expr.md#comparison-"
"operators), [Generics](items/generics.md)"
msgstr "[크거나 같음](expressions/operator-expr.md#comparison-operators), [제네릭](items/generics.md)"

#: src/tokens.md:912 src/expressions/operator-expr.md:445
msgid "`<=`"
msgstr "`<=`"

#: src/tokens.md:912
msgid "Le"
msgstr "Le"

#: src/tokens.md:912
msgid ""
"[Less than or equal to](expressions/operator-expr.md#comparison-operators)"
msgstr "[작거나 같음](expressions/operator-expr.md#comparison-operators)"

#: src/tokens.md:913
msgid "`@`"
msgstr "`@`"

#: src/tokens.md:913
msgid "At"
msgstr "At"

#: src/tokens.md:913
msgid "[Subpattern binding](patterns.md#identifier-patterns)"
msgstr "[하위 패턴 바인딩](patterns.md#identifier-patterns)"

#: src/tokens.md:914
msgid "`_`"
msgstr "`_`"

#: src/tokens.md:914
msgid "Underscore"
msgstr "밑줄"

#: src/tokens.md:914
msgid ""
"[Wildcard patterns](patterns.md#wildcard-pattern), [Inferred types](types/"
"inferred.md), Unnamed items in [constants](items/constant-items.md), [extern "
"crates](items/extern-crates.md), [use declarations](items/use-"
"declarations.md), and [destructuring assignment](expressions/underscore-"
"expr.md)"
msgstr "[와일드카드 패턴](patterns.md#wildcard-pattern), [추론된 유형](types/inferred.md), [상수](items/constant-items.md)의 명명되지 않은 항목, [외부 상자](items/extern-crates.md), [사용 선언](items/use-declarations.md) 및 [구조 해체 할당](expressions/underscore-expr.md)"

#: src/tokens.md:915
msgid "`.`"
msgstr "`.`"

#: src/tokens.md:915
msgid "Dot"
msgstr "점"

#: src/tokens.md:915
msgid ""
"[Field access](expressions/field-expr.md), [Tuple index](expressions/tuple-"
"expr.md#tuple-indexing-expressions)"
msgstr "[필드 접근](expressions/field-expr.md), [튜플 인덱스](expressions/tuple-expr.md#tuple-indexing-expressions)"

#: src/tokens.md:916 src/expressions/range-expr.md:43
msgid "`..`"
msgstr "`..`"

#: src/tokens.md:916
msgid "DotDot"
msgstr "점점"

#: src/tokens.md:916
msgid ""
"[Range](expressions/range-expr.md), [Struct expressions](expressions/struct-"
"expr.md), [Patterns](patterns.md), [Range Patterns](patterns.md#range-"
"patterns)"
msgstr "[범위](expressions/range-expr.md), [구조체 표현식](expressions/struct-expr.md), [패턴](patterns.md), [범위 패턴](patterns.md#range-patterns)"

#: src/tokens.md:917
msgid "`...`"
msgstr "`...`"

#: src/tokens.md:917
msgid "DotDotDot"
msgstr "점점점"

#: src/tokens.md:917
msgid ""
"[Variadic functions](items/external-blocks.md), [Range patterns]"
"(patterns.md#range-patterns)"
msgstr "[가변 함수](items/external-blocks.md), [범위 패턴](patterns.md#range-patterns)"

#: src/tokens.md:918
msgid "`..=`"
msgstr "`..=`"

#: src/tokens.md:918
msgid "DotDotEq"
msgstr "DotDotEq"

#: src/tokens.md:918
msgid ""
"[Inclusive Range](expressions/range-expr.md), [Range patterns]"
"(patterns.md#range-patterns)"
msgstr "[포함 범위](expressions/range-expr.md), [범위 패턴](patterns.md#range-patterns)"

#: src/tokens.md:919
msgid "`,`"
msgstr "`,`"

#: src/tokens.md:919
msgid "Comma"
msgstr "쉼표"

#: src/tokens.md:919 src/tokens.md:921
msgid "Various separators"
msgstr "다양한 구분자"

#: src/tokens.md:920
msgid "`;`"
msgstr "`;`"

#: src/tokens.md:920
msgid "Semi"
msgstr "세미콜론"

#: src/tokens.md:920
msgid ""
"Terminator for various items and statements, [Array types](types/array.md)"
msgstr "다양한 항목 및 문의 종결자, [배열 유형](types/array.md)"

#: src/tokens.md:921
msgid "`:`"
msgstr "`:`"

#: src/tokens.md:921
msgid "Colon"
msgstr "콜론"

#: src/tokens.md:922 src/paths.md:205
msgid "`::`"
msgstr "`::`"

#: src/tokens.md:922
msgid "PathSep"
msgstr "PathSep"

#: src/tokens.md:922
msgid "[Path separator](paths.md)"
msgstr "[경로 구분자](paths.md)"

#: src/tokens.md:923
msgid "`->`"
msgstr "`->`"

#: src/tokens.md:923
msgid "RArrow"
msgstr "RArrow"

#: src/tokens.md:923
msgid ""
"[Function return type](items/functions.md), [Closure return type]"
"(expressions/closure-expr.md), [Function pointer type](types/function-"
"pointer.md)"
msgstr "[함수 반환 유형](items/functions.md), [클로저 반환 유형](expressions/closure-expr.md), [함수 포인터 유형](types/function-pointer.md)"

#: src/tokens.md:924
msgid "`=>`"
msgstr "`=>`"

#: src/tokens.md:924
msgid "FatArrow"
msgstr "FatArrow"

#: src/tokens.md:924
msgid "[Match arms](expressions/match-expr.md), [Macros](macros-by-example.md)"
msgstr "[일치 암](expressions/match-expr.md), [매크로](macros-by-example.md)"

#: src/tokens.md:925
msgid "`<-`"
msgstr "`<-`"

#: src/tokens.md:925
msgid "LArrow"
msgstr "LArrow"

#: src/tokens.md:925
msgid ""
"The left arrow symbol has been unused since before Rust 1.0, but it is still "
"treated as a single token"
msgstr "왼쪽 화살표 기호는 Rust 1.0 이전부터 사용되지 않았지만 여전히 단일 토큰으로 처리됩니다."

#: src/tokens.md:926
msgid "`#`"
msgstr "`#`"

#: src/tokens.md:926
msgid "Pound"
msgstr "파운드"

#: src/tokens.md:926
msgid "[Attributes](attributes.md)"
msgstr "[속성](attributes.md)"

#: src/tokens.md:927
msgid "`$`"
msgstr "`$`"

#: src/tokens.md:927
msgid "Dollar"
msgstr "달러"

#: src/tokens.md:927
msgid "[Macros](macros-by-example.md)"
msgstr "[매크로](macros-by-example.md)"

#: src/tokens.md:928 src/expressions.md:90
msgid "`?`"
msgstr "`?`"

#: src/tokens.md:928
msgid "Question"
msgstr "물음표"

#: src/tokens.md:928
msgid ""
"[Question mark operator](expressions/operator-expr.md#the-question-mark-"
"operator), [Questionably sized](trait-bounds.md#sized), [Macro Kleene "
"Matcher](macros-by-example.md)"
msgstr "[물음표 연산자](expressions/operator-expr.md#the-question-mark-operator), [크기가 의심스러운](trait-bounds.md#sized), [매크로 클리니 매처](macros-by-example.md)"

#: src/tokens.md:929
msgid "`~`"
msgstr "`~`"

#: src/tokens.md:929
msgid "Tilde"
msgstr "물결표"

#: src/tokens.md:929
msgid ""
"The tilde operator has been unused since before Rust 1.0, but its token may "
"still be used"
msgstr "물결 연산자는 Rust 1.0 이전부터 사용되지 않았지만 토큰은 여전히 사용될 수 있습니다."

#: src/tokens.md:933
msgid "Delimiters"
msgstr "구분자"

#: src/tokens.md:936
msgid ""
"Bracket punctuation is used in various parts of the grammar. An open bracket "
"must always be paired with a close bracket. Brackets and the tokens within "
"them are referred to as \"token trees\" in [macros](macros-by-example.md).  "
"The three types of brackets are:"
msgstr "대괄호 구두점은 문법의 다양한 부분에서 사용됩니다. 여는 대괄호는 항상 닫는 대괄호와 짝을 이루어야 합니다. 대괄호와 그 안의 토큰은 [매크로](macros-by-example.md)에서 \"토큰 트리\"라고 합니다. 세 가지 유형의 대괄호는 다음과 같습니다."

#: src/tokens.md:940
msgid "Bracket"
msgstr "대괄호"

#: src/tokens.md:940 src/expressions/tuple-expr.md:47
#: src/expressions/range-expr.md:38 src/types/numeric.md:13
#: src/types/numeric.md:25 src/type-layout.md:61 src/subtyping.md:79
msgid "Type"
msgstr "유형"

#: src/tokens.md:942
msgid "`{` `}`"
msgstr "`{` `}`"

#: src/tokens.md:942
msgid "Curly braces"
msgstr "중괄호"

#: src/tokens.md:943
msgid "`[` `]`"
msgstr "`[` `]`"

#: src/tokens.md:943
msgid "Square brackets"
msgstr "대괄호"

#: src/tokens.md:944
msgid "`(` `)`"
msgstr "`(` `)`"

#: src/tokens.md:944
msgid "Parentheses"
msgstr "괄호"

#: src/tokens.md:948
msgid "Reserved prefixes"
msgstr "예약된 접두사"

#: src/tokens.md:952
msgid ""
"**<sup>Lexer 2021+</sup>**  \n"
"RESERVED_TOKEN_DOUBLE_QUOTE : ( IDENTIFIER_OR_KEYWORD <sub>_Except `b` or "
"`c` or `r` or `br` or `cr`_</sub> | `_` ) `\"`  \n"
"RESERVED_TOKEN_SINGLE_QUOTE : ( IDENTIFIER_OR_KEYWORD <sub>_Except `b`_</"
"sub> | `_` ) `'`  \n"
"RESERVED_TOKEN_POUND : ( IDENTIFIER_OR_KEYWORD <sub>_Except `r` or `br` or "
"`cr`_</sub> | `_` ) `#`  \n"
"RESERVED_TOKEN_LIFETIME : `'` (IDENTIFIER_OR_KEYWORD <sub>_Except `r`_</sub> "
"| \\_) `#`"
msgstr ""

#: src/tokens.md:960
msgid ""
"Some lexical forms known as _reserved prefixes_ are reserved for future use."
msgstr ""

#: src/tokens.md:964
msgid ""
"Source input which would otherwise be lexically interpreted as a non-raw "
"identifier (or a keyword or `_`) which is immediately followed by a `#`, "
"`\'`, or `\\\"` character (without intervening whitespace) is identified as a "
"reserved prefix."
msgstr "그렇지 않으면 어휘적으로 비원시 식별자(또는 키워드 또는 `_`)로 해석될 소스 입력은 `#`, `\'` 또는 `\\\"` 문자가 바로 뒤에 오는(중간 공백 없이) 경우 예약된 접두사로 식별됩니다."

#: src/tokens.md:968
msgid ""
"Note that raw identifiers, raw string literals, and raw byte string literals "
"may contain a `#` character but are not interpreted as containing a reserved "
"prefix."
msgstr "원시 식별자, 원시 문자열 리터럴 및 원시 바이트 문자열 리터럴에는 `#` 문자가 포함될 수 있지만 예약된 접두사를 포함하는 것으로 해석되지 않습니다."

#: src/tokens.md:972
msgid ""
"Similarly the `r`, `b`, `br`, `c`, and `cr` prefixes used in raw string "
"literals, byte literals, byte string literals, raw byte string literals, C "
"string literals, and raw C string literals are not interpreted as reserved "
"prefixes."
msgstr "마찬가지로 원시 문자열 리터럴, 바이트 리터럴, 바이트 문자열 리터럴, 원시 바이트 문자열 리터럴, C 문자열 리터럴 및 원시 C 문자열 리터럴에 사용되는 `r`, `b`, `br`, `c` 및 `cr` 접두사는 예약된 접두사로 해석되지 않습니다."

#: src/tokens.md:976
msgid ""
"Source input which would otherwise be lexically interpreted as a non-raw "
"lifetime (or a keyword or `_`) which is immediately followed by a `#` "
"character (without intervening whitespace) is identified as a reserved "
"lifetime prefix."
msgstr "그렇지 않으면 어휘적으로 비원시 라이프타임(또는 키워드 또는 `_`)으로 해석될 소스 입력은 `#` 문자가 바로 뒤에 오는(중간 공백 없이) 경우 예약된 라이프타임 접두사로 식별됩니다."

#: src/tokens.md:980
msgid ""
"**Edition differences**: Starting with the 2021 edition, reserved prefixes "
"are reported as an error by the lexer (in particular, they cannot be passed "
"to macros)."
msgstr "**에디션 차이**: 2021 에디션부터 예약된 접두사는 렉서에 의해 오류로 보고됩니다(특히 매크로에 전달할 수 없음)."

#: src/tokens.md:982
msgid ""
"Before the 2021 edition, reserved prefixes are accepted by the lexer and "
"interpreted as multiple tokens (for example, one token for the identifier or "
"keyword, followed by a `#` token)."
msgstr "2021 에디션 이전에는 예약된 접두사가 렉서에 의해 허용되고 여러 토큰으로 해석됩니다(예: 식별자 또는 키워드에 대한 하나의 토큰 뒤에 `#` 토큰이 옴)."

#: src/tokens.md:984
msgid "Examples accepted in all editions:"
msgstr "모든 에디션에서 허용되는 예:"

#: src/tokens.md:989 src/tokens.md:999
msgid "\"...\""
msgstr "\"...\""

#: src/tokens.md:990
msgid "// three tokens: r#let # foo\n"
msgstr "// 세 개의 토큰: r#let # foo\n"

#: src/tokens.md:994
msgid "Examples accepted before the 2021 edition but rejected later:"
msgstr "2021 에디션 이전에는 허용되었지만 이후에는 거부된 예:"

#: src/tokens.md:1005
msgid "Reserved guards"
msgstr "예약된 가드"

#: src/tokens.md:1009
msgid ""
"**<sup>Lexer 2024+</sup>**  \n"
"RESERVED_GUARDED_STRING_LITERAL : `#`<sup>+</sup> [STRING_LITERAL]"
"(tokens.md#string-literals)  \n"
"RESERVED_POUNDS : `#`<sup>2..</sup>"
msgstr ""
"**<sup>Lexer 2024+</sup>**  \n"
"RESERVED_GUARDED_STRING_LITERAL : `#`<sup>+</sup> [STRING_LITERAL]"
"(tokens.md#string-literals)  \n"
"RESERVED_POUNDS : `#`<sup>2..</sup>"

#: src/tokens.md:1015
msgid ""
"The reserved guards are syntax reserved for future use, and will generate a "
"compile error if used."
msgstr "예약된 가드는 향후 사용을 위해 예약된 구문이며 사용하면 컴파일 오류가 발생합니다."

#: src/tokens.md:1019
msgid ""
"The _reserved guarded string literal_ is a token of one or more `U+0023` "
"(`#`) immediately followed by a [STRING_LITERAL](tokens.md#string-literals)."
msgstr "_예약된 보호된 문자열 리터럴_은 하나 이상의 `U+0023`(`#`) 토큰 바로 뒤에 [STRING_LITERAL](tokens.md#string-literals)이 오는 토큰입니다."

#: src/tokens.md:1023
msgid "The _reserved pounds_ is a token of two or more `U+0023` (`#`)."
msgstr "_예약된 파운드_는 두 개 이상의 `U+0023`(`#`) 토큰입니다."

#: src/tokens.md:1027
msgid ""
"**Edition differences**: Before the 2024 edition, reserved guards are "
"accepted by the lexer and interpreted as multiple tokens. For example, the "
"`#\"foo\"#` form is interpreted as three tokens. `##` is interpreted as two "
"tokens."
msgstr "**에디션 차이**: 2024 에디션 이전에는 예약된 가드가 렉서에 의해 허용되고 여러 토큰으로 해석됩니다. 예를 들어, `#\"foo\"#` 형식은 세 개의 토큰으로 해석됩니다. `##`은 두 개의 토큰으로 해석됩니다."

#: src/macros.md:7
msgid ""
"The functionality and syntax of Rust can be extended with custom definitions "
"called macros. They are given names, and invoked through a consistent "
"syntax: `some_extension!(...)`."
msgstr "Rust의 기능과 구문은 매크로라는 사용자 지정 정의로 확장할 수 있습니다. 이름이 주어지고 `some_extension!(...)`과 같은 일관된 구문을 통해 호출됩니다."

#: src/macros.md:11
msgid "There are two ways to define new macros:"
msgstr "새 매크로를 정의하는 두 가지 방법이 있습니다."

#: src/macros.md:13
msgid ""
"[Macros by Example](macros-by-example.md) define new syntax in a higher-"
"level, declarative way."
msgstr "[예제를 통한 매크로](macros-by-example.md)는 더 높은 수준의 선언적 방식으로 새로운 구문을 정의합니다."

#: src/macros.md:14
msgid ""
"[Procedural Macros](procedural-macros.md) define function-like macros, "
"custom derives, and custom attributes using functions that operate on input "
"tokens."
msgstr "[절차적 매크로](procedural-macros.md)는 입력 토큰에 대해 작동하는 함수를 사용하여 함수와 유사한 매크로, 사용자 지정 파생 및 사용자 지정 속성을 정의합니다."

#: src/macros.md:19
msgid "Macro Invocation"
msgstr "매크로 호출"

#: src/macros.md:23
msgid ""
"**<sup>Syntax</sup>**  \n"
"_MacroInvocation_ :  \n"
"   [_SimplePath_](paths.md#simple-paths) `!` _DelimTokenTree_"
msgstr ""
"**<sup>구문</sup>**  \n"
"_MacroInvocation_ :  \n"
"   [_SimplePath_](paths.md#simple-paths) `!` _DelimTokenTree_"

#: src/macros.md:27
msgid ""
"_DelimTokenTree_ :  \n"
"       `(` _TokenTree_<sup>\\*</sup> `)`  \n"
"   | `[` _TokenTree_<sup>\\*</sup> `]`  \n"
"   | `{` _TokenTree_<sup>\\*</sup> `}`"
msgstr ""

#: src/macros.md:32
msgid ""
"_TokenTree_ :  \n"
"   [_Token_](tokens.md)<sub>_except [delimiters](tokens.md#delimiters)_</"
"sub> | _DelimTokenTree_"
msgstr ""

#: src/macros.md:35
msgid ""
"_MacroInvocationSemi_ :  \n"
"      [_SimplePath_](paths.md#simple-paths) `!` `(` _TokenTree_<sup>\\*</"
"sup> `)` `;`  \n"
"   | [_SimplePath_](paths.md#simple-paths) `!` `[` _TokenTree_<sup>\\*</sup> "
"`]` `;`  \n"
"   | [_SimplePath_](paths.md#simple-paths) `!` `{` _TokenTree_<sup>\\*</sup> "
"`}`"
msgstr ""

#: src/macros.md:42
msgid ""
"A macro invocation expands a macro at compile time and replaces the "
"invocation with the result of the macro. Macros may be invoked in the "
"following situations:"
msgstr "매크로 호출은 컴파일 타임에 매크로를 확장하고 호출을 매크로의 결과로 바꿉니다. 다음과 같은 상황에서 매크로를 호출할 수 있습니다."

#: src/macros.md:48
msgid "[Expressions](expressions.md) and [statements](statements.md)"
msgstr "[표현식](expressions.md) 및 [문](statements.md)"

#: src/macros.md:52
msgid "[Patterns](patterns.md)"
msgstr "[패턴](patterns.md)"

#: src/macros.md:56
msgid "[Types](types.md)"
msgstr "[유형](types.md)"

#: src/macros.md:60
msgid ""
"[Items](items.md) including [associated items](items/associated-items.md)"
msgstr "[항목](items.md) 포함 [연관 항목](items/associated-items.md)"

#: src/macros.md:64
msgid "[`macro_rules`](macros-by-example.md) transcribers"
msgstr "[`macro_rules`](macros-by-example.md) 트랜스크라이버"

#: src/macros.md:68
msgid "[External blocks](items/external-blocks.md)"
msgstr "[외부 블록](items/external-blocks.md)"

#: src/macros.md:72
msgid ""
"When used as an item or a statement, the _MacroInvocationSemi_ form is used "
"where a semicolon is required at the end when not using curly braces. "
"[Visibility qualifiers](visibility-and-privacy.md) are never allowed before "
"a macro invocation or [`macro_rules`](macros-by-example.md) definition."
msgstr "항목 또는 문으로 사용될 때, _MacroInvocationSemi_ 형식은 중괄호를 사용하지 않을 때 끝에 세미콜론이 필요한 경우에 사용됩니다. [가시성 한정자](visibility-and-privacy.md)는 매크로 호출 또는 [`macro_rules`](macros-by-example.md) 정의 앞에 절대 허용되지 않습니다."

#: src/macros.md:78 src/items/generics.md:107
msgid "// Used as an expression.\n"
msgstr "// 표현식으로 사용됩니다.\n"

#: src/macros.md:80
msgid "// Used as a statement.\n"
msgstr "// 문으로 사용됩니다.\n"

#: src/macros.md:83
msgid "// Used in a pattern.\n"
msgstr "// 패턴에서 사용됩니다.\n"

#: src/macros.md:92
msgid "// Used in a type.\n"
msgstr "// 유형에서 사용됩니다.\n"

#: src/macros.md:99
msgid "// Used as an item.\n"
msgstr "// 항목으로 사용됩니다.\n"

#: src/macros.md:103
msgid "// Used as an associated item.\n"
msgstr "// 연관 항목으로 사용됩니다.\n"
#: src/macros.md:111
msgid "// Macro calls within macros.\n"
msgstr "// 매크로 내의 매크로 호출.\n"

#: src/macros.md:114
msgid "\"Macro call in a macro!\""
msgstr "\"매크로 내의 매크로 호출!\""

#: src/macros.md:115
msgid ""
"// Outer macro `example` is expanded, then inner macro `println` is "
"expanded.\n"
msgstr ""

#: src/macros-by-example.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_MacroRulesDefinition_ :  \n"
"   `macro_rules` `!` [IDENTIFIER](identifiers.md) _MacroRulesDef_"
msgstr ""
"**<sup>구문</sup>**  \n"
"_MacroRulesDefinition_ :  \n"
"   `macro_rules` `!` [IDENTIFIER](identifiers.md) _MacroRulesDef_"

#: src/macros-by-example.md:11
msgid ""
"_MacroRulesDef_ :  \n"
"      `(` _MacroRules_ `)` `;`  \n"
"   | `[` _MacroRules_ `]` `;`  \n"
"   | `{` _MacroRules_ `}`"
msgstr ""
"_MacroRulesDef_ :  \n"
"      `(` _MacroRules_ `)` `;`  \n"
"   | `[` _MacroRules_ `]` `;`  \n"
"   | `{` _MacroRules_ `}`"

#: src/macros-by-example.md:16
msgid ""
"_MacroRules_ :  \n"
"   _MacroRule_ ( `;` _MacroRule_ )<sup>\\*</sup> `;`<sup>?</sup>"
msgstr ""

msgid ""
"_MacroRule_ :  \n"
"   _MacroMatcher_ `=>` _MacroTranscriber_"
msgstr ""
"_MacroRule_ :  \n"
"   _MacroMatcher_ `=>` _MacroTranscriber_"

#: src/macros-by-example.md:22
msgid ""
"_MacroMatcher_ :  \n"
"      `(` _MacroMatch_<sup>\\*</sup> `)`  \n"
"   | `[` _MacroMatch_<sup>\\*</sup> `]`  \n"
"   | `{` _MacroMatch_<sup>\\*</sup> `}`"
msgstr ""

#: src/macros-by-example.md:27
msgid ""
"_MacroMatch_ :  \n"
"      [_Token_](tokens.md)<sub>_except `$` and [delimiters]"
"(tokens.md#delimiters)_</sub>  \n"
"   | _MacroMatcher_  \n"
"   | `$` ( [IDENTIFIER_OR_KEYWORD](identifiers.md) <sub>_except `crate`_</"
"sub> | [RAW_IDENTIFIER](identifiers.md) | `_` ) `:` _MacroFragSpec_  \n"
"   | `$` `(` _MacroMatch_<sup>+</sup> `)` _MacroRepSep_<sup>?</sup> "
"_MacroRepOp_"
msgstr ""

#: src/macros-by-example.md:33
msgid ""
"_MacroFragSpec_ :  \n"
"      `block` | `expr` | `expr_2021` | `ident` | `item` | `lifetime` | "
"`literal`  \n"
"   | `meta` | `pat` | `pat_param` | `path` | `stmt` | `tt` | `ty` | `vis`"
msgstr ""

#: src/macros-by-example.md:37
msgid ""
"_MacroRepSep_ :  \n"
"   [_Token_](tokens.md)<sub>_except [delimiters](tokens.md#delimiters) and "
"MacroRepOp_</sub>"
msgstr ""

#: src/macros-by-example.md:40
msgid ""
"_MacroRepOp_ :  \n"
"   `*` | `+` | `?`"
msgstr ""

#: src/macros-by-example.md:43
msgid ""
"_MacroTranscriber_ :  \n"
"   [_DelimTokenTree_](macros.md)"
msgstr ""

#: src/macros-by-example.md:48
msgid ""
"`macro_rules` allows users to define syntax extension in a declarative way.  "
"We call such extensions \"macros by example\" or simply \"macros\"."
msgstr ""

#: src/macros-by-example.md:51
msgid ""
"Each macro by example has a name, and one or more _rules_. Each rule has two "
"parts: a _matcher_, describing the syntax that it matches, and a "
"_transcriber_, describing the syntax that will replace a successfully "
"matched invocation. Both the matcher and the transcriber must be surrounded "
"by delimiters. Macros can expand to expressions, statements, items "
"(including traits, impls, and foreign items), types, or patterns."
msgstr ""

#: src/macros-by-example.md:60
msgid "Transcribing"
msgstr ""

#: src/macros-by-example.md:64
msgid ""
"When a macro is invoked, the macro expander looks up macro invocations by "
"name, and tries each macro rule in turn. It transcribes the first successful "
"match; if this results in an error, then future matches are not tried."
msgstr ""

#: src/macros-by-example.md:70
msgid ""
"When matching, no lookahead is performed; if the compiler cannot "
"unambiguously determine how to parse the macro invocation one token at a "
"time, then it is an error. In the following example, the compiler does not "
"look ahead past the identifier to see if the following token is a `)`, even "
"though that would allow it to parse the invocation unambiguously:"
msgstr ""

#: src/macros-by-example.md:81
msgid "// Error: local ambiguity\n"
msgstr ""

#: src/macros-by-example.md:86
msgid ""
"In both the matcher and the transcriber, the `$` token is used to invoke "
"special behaviours from the macro engine (described below in [Metavariables]"
"(#metavariables) and [Repetitions](#repetitions)). Tokens that aren't part "
"of such an invocation are matched and transcribed literally, with one "
"exception. The exception is that the outer delimiters for the matcher will "
"match any pair of delimiters. Thus, for instance, the matcher `(())` will "
"match `{()}` but not `{{}}`. The character `$` cannot be matched or "
"transcribed literally."
msgstr ""

#: src/macros-by-example.md:96
msgid "Forwarding a matched fragment"
msgstr ""

#: src/macros-by-example.md:99
msgid ""
"When forwarding a matched fragment to another macro-by-example, matchers in "
"the second macro will see an opaque AST of the fragment type. The second "
"macro can't use literal tokens to match the fragments in the matcher, only a "
"fragment specifier of the same type. The `ident`, `lifetime`, and `tt` "
"fragment types are an exception, and _can_ be matched by literal tokens. The "
"following illustrates this restriction:"
msgstr ""

#: src/macros-by-example.md:108
msgid "// ERROR:               ^^ no rules expected this token in macro call\n"
msgstr ""

#: src/macros-by-example.md:119
msgid ""
"The following illustrates how tokens can be directly matched after matching "
"a `tt` fragment:"
msgstr ""

#: src/macros-by-example.md:123
msgid "// compiles OK\n"
msgstr ""

#: src/macros-by-example.md:137
msgid "Metavariables"
msgstr ""

#: src/macros-by-example.md:141
msgid ""
"In the matcher, `$` _name_ `:` _fragment-specifier_ matches a Rust syntax "
"fragment of the kind specified and binds it to the metavariable `$`_name_."
msgstr ""

#: src/macros-by-example.md:146
msgid "Valid fragment specifiers are:"
msgstr ""

#: src/macros-by-example.md:148
msgid "`block`: a [_BlockExpression_](expressions/block-expr.md)"
msgstr ""

#: src/macros-by-example.md:149
msgid "`expr`: an [_Expression_](expressions.md)"
msgstr ""

#: src/macros-by-example.md:150
msgid ""
"`expr_2021`: an [_Expression_](expressions.md) except "
"[_UnderscoreExpression_](expressions/underscore-expr.md) and "
"[_ConstBlockExpression_](expressions/block-expr.md#const-blocks) (see "
"[macro.decl.meta.edition2024](macros-by-example.md#r-"
"macro.decl.meta.edition2024))"
msgstr ""

#: src/macros-by-example.md:151
msgid ""
"`ident`: an [IDENTIFIER_OR_KEYWORD](identifiers.md) or [RAW_IDENTIFIER]"
"(identifiers.md)"
msgstr ""

#: src/macros-by-example.md:152
msgid "`item`: an [_Item_](items.md)"
msgstr ""

#: src/macros-by-example.md:153
msgid "`lifetime`: a [LIFETIME_TOKEN](tokens.md#lifetimes-and-loop-labels)"
msgstr ""

#: src/macros-by-example.md:154
msgid ""
"`literal`: matches `-`<sup>?</sup>[_LiteralExpression_](expressions/literal-"
"expr.md)"
msgstr ""

#: src/macros-by-example.md:155
msgid "`meta`: an [_Attr_](attributes.md), the contents of an attribute"
msgstr ""

#: src/macros-by-example.md:156
msgid ""
"`pat`: a [_Pattern_](patterns.md) (see [macro.decl.meta.edition2021](macros-"
"by-example.md#r-macro.decl.meta.edition2021))"
msgstr ""

#: src/macros-by-example.md:157
msgid "`pat_param`: a [_PatternNoTopAlt_](patterns.md)"
msgstr ""

#: src/macros-by-example.md:158
msgid "`path`: a [_TypePath_](paths.md#paths-in-types) style path"
msgstr ""

#: src/macros-by-example.md:159
msgid ""
"`stmt`: a [_Statement_](statements.md) without the trailing semicolon "
"(except for item statements that require semicolons)"
msgstr ""

#: src/macros-by-example.md:160
msgid ""
"`tt`: a [_TokenTree_](macros.md#macro-invocation) (a single [token]"
"(tokens.md) or tokens in matching delimiters `()`, `[]`, or `{}`)"
msgstr ""

#: src/macros-by-example.md:161
msgid "`ty`: a [_Type_](types.md#type-expressions)"
msgstr ""

#: src/macros-by-example.md:162
msgid ""
"`vis`: a possibly empty [_Visibility_](visibility-and-privacy.md) qualifier"
msgstr ""

#: src/macros-by-example.md:166
msgid ""
"In the transcriber, metavariables are referred to simply by `$`_name_, since "
"the fragment kind is specified in the matcher. Metavariables are replaced "
"with the syntax element that matched them."
msgstr ""

#: src/macros-by-example.md:172
msgid ""
"The keyword metavariable `$crate` can be used to refer to the current crate; "
"see [Hygiene](#hygiene) below. Metavariables can be transcribed more than "
"once or not at all."
msgstr ""

#: src/macros-by-example.md:177
msgid ""
"**Edition differences**: Starting with the 2021 edition, `pat` fragment-"
"specifiers match top-level or-patterns (that is, they accept [_Pattern_]"
"(patterns.md))."
msgstr ""

#: src/macros-by-example.md:179
msgid ""
"Before the 2021 edition, they match exactly the same fragments as "
"`pat_param` (that is, they accept [_PatternNoTopAlt_](patterns.md))."
msgstr ""

#: src/macros-by-example.md:181
msgid ""
"The relevant edition is the one in effect for the `macro_rules!` definition."
msgstr ""

#: src/macros-by-example.md:185
msgid ""
"**Edition differences**: Before the 2024 edition, `expr` fragment specifiers "
"do not match [_UnderscoreExpression_](expressions/underscore-expr.md) or "
"[_ConstBlockExpression_](expressions/block-expr.md#const-blocks) at the top "
"level. They are allowed within subexpressions."
msgstr ""

#: src/macros-by-example.md:187
msgid ""
"The `expr_2021` fragment specifier exists to maintain backwards "
"compatibility with editions before 2024."
msgstr ""

#: src/macros-by-example.md:191
msgid "Repetitions"
msgstr ""

#: src/macros-by-example.md:195
msgid ""
"In both the matcher and transcriber, repetitions are indicated by placing "
"the tokens to be repeated inside `$(`…`)`, followed by a repetition "
"operator, optionally with a separator token between."
msgstr ""

#: src/macros-by-example.md:201
msgid ""
"The separator token can be any token other than a delimiter or one of the "
"repetition operators, but `;` and `,` are the most common. For instance, `$"
"( $i:ident ),*` represents any number of identifiers separated by commas. "
"Nested repetitions are permitted."
msgstr ""

#: src/macros-by-example.md:208
msgid "The repetition operators are:"
msgstr ""

#: src/macros-by-example.md:210
msgid "`*` --- indicates any number of repetitions."
msgstr ""

#: src/macros-by-example.md:211
msgid "`+` --- indicates any number but at least one."
msgstr ""

#: src/macros-by-example.md:212
msgid "`?` --- indicates an optional fragment with zero or one occurrence."
msgstr ""

#: src/macros-by-example.md:216
msgid ""
"Since `?` represents at most one occurrence, it cannot be used with a "
"separator."
msgstr ""

#: src/macros-by-example.md:221
msgid ""
"The repeated fragment both matches and transcribes to the specified number "
"of the fragment, separated by the separator token. Metavariables are matched "
"to every repetition of their corresponding fragment. For instance, the `$"
"( $i:ident ),*` example above matches `$i` to all of the identifiers in the "
"list."
msgstr ""

#: src/macros-by-example.md:226
msgid ""
"During transcription, additional restrictions apply to repetitions so that "
"the compiler knows how to expand them properly:"
msgstr ""

#: src/macros-by-example.md:229
msgid ""
"A metavariable must appear in exactly the same number, kind, and nesting "
"order of repetitions in the transcriber as it did in the matcher. So for the "
"matcher `$( $i:ident ),*`, the transcribers `=> { $i }`, `=> { $( $"
"( $i)* )* }`, and `=> { $( $i )+ }` are all illegal, but `=> { $( $i );* }` "
"is correct and replaces a comma-separated list of identifiers with a "
"semicolon-separated list."
msgstr ""

#: src/macros-by-example.md:235
msgid ""
"Each repetition in the transcriber must contain at least one metavariable to "
"decide how many times to expand it. If multiple metavariables appear in the "
"same repetition, they must be bound to the same number of fragments. For "
"instance, `( $( $i:ident ),* ; $( $j:ident ),* ) => (( $( ($i,$j) ),* ))` "
"must bind the same number of `$i` fragments as `$j` fragments. This means "
"that invoking the macro with `(a, b, c; d, e, f)` is legal and expands to "
"`((a,d), (b,e), (c,f))`, but `(a, b, c; d, e)` is illegal because it does "
"not have the same number. This requirement applies to every layer of nested "
"repetitions."
msgstr ""

#: src/macros-by-example.md:247
msgid "Scoping, Exporting, and Importing"
msgstr ""

#: src/macros-by-example.md:251
msgid ""
"For historical reasons, the scoping of macros by example does not work "
"entirely like items. Macros have two forms of scope: textual scope, and path-"
"based scope. Textual scope is based on the order that things appear in "
"source files, or even across multiple files, and is the default scoping. It "
"is explained further below. Path-based scope works exactly the same way that "
"item scoping does. The scoping, exporting, and importing of macros is "
"controlled largely by attributes."
msgstr ""

#: src/macros-by-example.md:260
msgid ""
"When a macro is invoked by an unqualified identifier (not part of a multi-"
"part path), it is first looked up in textual scoping. If this does not yield "
"any results, then it is looked up in path-based scoping. If the macro's name "
"is qualified with a path, then it is only looked up in path-based scoping."
msgstr ""

#: src/macros-by-example.md:267
msgid "// Path-based import.\n"
msgstr ""

#: src/macros-by-example.md:269
msgid "// Textual definition.\n"
msgstr ""

#: src/macros-by-example.md:273
msgid "// Textual lookup finds our macro first.\n"
msgstr ""

#: src/macros-by-example.md:274
msgid "// Path-based lookup ignores our macro, finds imported one.\n"
msgstr ""

#: src/macros-by-example.md:279
msgid "Textual Scope"
msgstr ""

#: src/macros-by-example.md:283
msgid ""
"Textual scope is based largely on the order that things appear in source "
"files, and works similarly to the scope of local variables declared with "
"`let` except it also applies at the module level. When `macro_rules!` is "
"used to define a macro, the macro enters the scope after the definition "
"(note that it can still be used recursively, since names are looked up from "
"the invocation site), up until its surrounding scope, typically a module, is "
"closed. This can enter child modules and even span across multiple files:"
msgstr ""

#: src/macros-by-example.md:293
msgid "//// src/lib.rs\n"
msgstr ""

#: src/macros-by-example.md:295 src/macros-by-example.md:304
msgid "// m!{} // Error: m is not in scope.\n"
msgstr ""

#: src/macros-by-example.md:300
msgid "// OK: appears after declaration of m.\n"
msgstr ""

#: src/macros-by-example.md:306
msgid "//// src/has_macro/uses_macro.rs\n"
msgstr ""

#: src/macros-by-example.md:309
msgid "// OK: appears after declaration of m in src/lib.rs\n"
msgstr ""

#: src/macros-by-example.md:314
msgid ""
"It is not an error to define a macro multiple times; the most recent "
"declaration will shadow the previous one unless it has gone out of scope."
msgstr ""

#: src/macros-by-example.md:330
msgid "// m!(1); // Error: no rule matches '1'\n"
msgstr ""

#: src/macros-by-example.md:342
msgid ""
"Macros can be declared and used locally inside functions as well, and work "
"similarly:"
msgstr ""

#: src/macros-by-example.md:347 src/macros-by-example.md:353
msgid "// m!(); // Error: m is not in scope.\n"
msgstr ""

#: src/macros-by-example.md:359
msgid "The `macro_use` attribute"
msgstr ""

#: src/macros-by-example.md:363
msgid ""
"The _`macro_use` attribute_ has two purposes. First, it can be used to make "
"a module's macro scope not end when the module is closed, by applying it to "
"a module:"
msgstr ""

#: src/macros-by-example.md:380
msgid ""
"Second, it can be used to import macros from another crate, by attaching it "
"to an `extern crate` declaration appearing in the crate's root module. "
"Macros imported this way are imported into the [`macro_use` prelude](names/"
"preludes.md#macro_use-prelude), not textually, which means that they can be "
"shadowed by any other name. While macros imported by `#[macro_use]` can be "
"used before the import statement, in case of a conflict, the last macro "
"imported wins. Optionally, a list of macros to import can be specified using "
"the [_MetaListIdents_](attributes.md#meta-item-attribute-syntax) syntax; "
"this is not supported when `#[macro_use]` is applied to a module."
msgstr ""

#: src/macros-by-example.md:391
msgid "// Or #[macro_use] to import all macros.\n"
msgstr ""

#: src/macros-by-example.md:394
msgid ""
"// self::lazy_static!{} // Error: lazy_static is not defined in `self`\n"
msgstr ""

#: src/macros-by-example.md:400
msgid ""
"Macros to be imported with `#[macro_use]` must be exported with "
"`#[macro_export]`, which is described below."
msgstr ""

#: src/macros-by-example.md:405
msgid "Path-Based Scope"
msgstr ""

#: src/macros-by-example.md:409
msgid ""
"By default, a macro has no path-based scope. However, if it has the "
"`#[macro_export]` attribute, then it is declared in the crate root scope and "
"can be referred to normally as such:"
msgstr ""

#: src/macros-by-example.md:415
msgid "// OK: Path-based lookup finds m in the current module.\n"
msgstr ""

#: src/macros-by-example.md:432
msgid ""
"Macros labeled with `#[macro_export]` are always `pub` and can be referred "
"to by other crates, either by path or by `#[macro_use]` as described above."
msgstr ""

#: src/macros-by-example.md:437
msgid "Hygiene"
msgstr ""

#: src/macros-by-example.md:441
msgid ""
"Macros by example have _mixed-site hygiene_. This means that [loop labels]"
"(expressions/loop-expr.md#loop-labels), [block labels](expressions/loop-"
"expr.md#labelled-block-expressions), and local variables are looked up at "
"the macro definition site while other symbols are looked up at the macro "
"invocation site. For example:"
msgstr ""

#: src/macros-by-example.md:446
msgid "\"this is never called\""
msgstr ""

#: src/macros-by-example.md:451
msgid "// Uses `x` from the definition site.\n"
msgstr ""

#: src/macros-by-example.md:452
msgid "// Uses `func` from the invocation site.\n"
msgstr ""

#: src/macros-by-example.md:458
msgid "/* does not panic */"
msgstr ""

#: src/macros-by-example.md:463
msgid ""
"Labels and local variables defined in macro expansion are not shared between "
"invocations, so this code doesn’t compile:"
msgstr ""

#: src/macros-by-example.md:481
msgid ""
"A special case is the `$crate` metavariable. It refers to the crate defining "
"the macro, and can be used at the start of the path to look up items or "
"macros which are not in scope at the invocation site."
msgstr ""

#: src/macros-by-example.md:485
msgid "//// Definitions in the `helper_macro` crate.\n"
msgstr ""

#: src/macros-by-example.md:488
msgid ""
"// () => { helper!() } // This might lead to an error due to 'helper' not "
"being in scope.\n"
msgstr ""

#: src/macros-by-example.md:496
msgid ""
"//// Usage in another crate.\n"
"// Note that `helper_macro::helper` is not imported!\n"
msgstr ""

#: src/macros-by-example.md:506
msgid ""
"Note that, because `$crate` refers to the current crate, it must be used "
"with a fully qualified module path when referring to non-macro items:"
msgstr ""

#: src/macros-by-example.md:522
msgid ""
"Additionally, even though `$crate` allows a macro to refer to items within "
"its own crate when expanding, its use has no effect on visibility. An item "
"or macro referred to must still be visible from the invocation site. In the "
"following example, any attempt to invoke `call_foo!()` from outside its "
"crate will fail because `foo()` is not public."
msgstr ""

#: src/macros-by-example.md:537
msgid ""
"**Version & Edition differences**: Prior to Rust 1.30, `$crate` and "
"`local_inner_macros` (below) were unsupported. They were added alongside "
"path-based imports of macros (described above), to ensure that helper macros "
"did not need to be manually imported by users of a macro-exporting crate. "
"Crates written for earlier versions of Rust that use helper macros need to "
"be modified to use `$crate` or `local_inner_macros` to work well with path-"
"based imports."
msgstr ""

#: src/macros-by-example.md:547
msgid ""
"When a macro is exported, the `#[macro_export]` attribute can have the "
"`local_inner_macros` keyword added to automatically prefix all contained "
"macro invocations with `$crate::`. This is intended primarily as a tool to "
"migrate code written before `$crate` was added to the language to work with "
"Rust 2018's path-based imports of macros. Its use is discouraged in new code."
msgstr ""

#: src/macros-by-example.md:556
msgid "// Automatically converted to $crate::helper!().\n"
msgstr ""

#: src/macros-by-example.md:567
msgid "Follow-set Ambiguity Restrictions"
msgstr ""

#: src/macros-by-example.md:571
msgid ""
"The parser used by the macro system is reasonably powerful, but it is "
"limited in order to prevent ambiguity in current or future versions of the "
"language."
msgstr ""

#: src/macros-by-example.md:576
msgid ""
"In particular, in addition to the rule about ambiguous expansions, a "
"nonterminal matched by a metavariable must be followed by a token which has "
"been decided can be safely used after that kind of match."
msgstr ""

#: src/macros-by-example.md:580
msgid ""
"As an example, a macro matcher like `$i:expr [ , ]` could in theory be "
"accepted in Rust today, since `[,]` cannot be part of a legal expression and "
"therefore the parse would always be unambiguous. However, because `[` can "
"start trailing expressions, `[` is not a character which can safely be ruled "
"out as coming after an expression. If `[,]` were accepted in a later version "
"of Rust, this matcher would become ambiguous or would misparse, breaking "
"working code. Matchers like `$i:expr,` or `$i:expr;` would be legal, "
"however, because `,` and `;` are legal expression separators. The specific "
"rules are:"
msgstr ""

#: src/macros-by-example.md:591
msgid "`expr` and `stmt` may only be followed by one of: `=>`, `,`, or `;`."
msgstr ""

#: src/macros-by-example.md:595
msgid ""
"`pat_param` may only be followed by one of: `=>`, `,`, `=`, `|`, `if`, or "
"`in`."
msgstr ""

#: src/macros-by-example.md:599
msgid "`pat` may only be followed by one of: `=>`, `,`, `=`, `if`, or `in`."
msgstr ""

#: src/macros-by-example.md:603
msgid ""
"`path` and `ty` may only be followed by one of: `=>`, `,`, `=`, `|`, `;`, "
"`:`, `>`, `>>`, `[`, `{`, `as`, `where`, or a macro variable of `block` "
"fragment specifier."
msgstr ""

#: src/macros-by-example.md:609
msgid ""
"`vis` may only be followed by one of: `,`, an identifier other than a non-"
"raw `priv`, any token that can begin a type, or a metavariable with a "
"`ident`, `ty`, or `path` fragment specifier."
msgstr ""

#: src/macros-by-example.md:615
msgid "All other fragment specifiers have no restrictions."
msgstr ""

#: src/macros-by-example.md:619
msgid ""
"**Edition differences**: Before the 2021 edition, `pat` may also be followed "
"by `|`."
msgstr ""

#: src/macros-by-example.md:623
msgid ""
"When repetitions are involved, then the rules apply to every possible number "
"of expansions, taking separators into account. This means:"
msgstr ""

#: src/macros-by-example.md:626
msgid ""
"If the repetition includes a separator, that separator must be able to "
"follow the contents of the repetition."
msgstr ""

#: src/macros-by-example.md:628
msgid ""
"If the repetition can repeat multiple times (`*` or `+`), then the contents "
"must be able to follow themselves."
msgstr ""

#: src/macros-by-example.md:630
msgid ""
"The contents of the repetition must be able to follow whatever comes before, "
"and whatever comes after must be able to follow the contents of the "
"repetition."
msgstr ""

#: src/macros-by-example.md:633
msgid ""
"If the repetition can match zero times (`*` or `?`), then whatever comes "
"after must be able to follow whatever comes before."
msgstr ""

#: src/macros-by-example.md:636
msgid "For more detail, see the [formal specification](macro-ambiguity.md)."
msgstr ""

#: src/procedural-macros.md:7
msgid ""
"_Procedural macros_ allow creating syntax extensions as execution of a "
"function. Procedural macros come in one of three flavors:"
msgstr ""

#: src/procedural-macros.md:10
msgid ""
"[Function-like macros](#function-like-procedural-macros) - `custom!(...)`"
msgstr ""

#: src/procedural-macros.md:11
msgid "[Derive macros](#derive-macros) - `#[derive(CustomDerive)]`"
msgstr ""

#: src/procedural-macros.md:12
msgid "[Attribute macros](#attribute-macros) - `#[CustomAttribute]`"
msgstr ""

#: src/procedural-macros.md:14
msgid ""
"Procedural macros allow you to run code at compile time that operates over "
"Rust syntax, both consuming and producing Rust syntax. You can sort of think "
"of procedural macros as functions from an AST to another AST."
msgstr ""

#: src/procedural-macros.md:20
msgid ""
"Procedural macros must be defined in the root of a crate with the [crate "
"type](linkage.md) of `proc-macro`. The macros may not be used from the crate "
"where they are defined, and can only be used when imported in another crate."
msgstr ""

#: src/procedural-macros.md:24
msgid ""
"**Note**: When using Cargo, Procedural macro crates are defined with the "
"`proc-macro` key in your manifest:"
msgstr ""

#: src/procedural-macros.md:34
msgid ""
"As functions, they must either return syntax, panic, or loop endlessly. "
"Returned syntax either replaces or adds the syntax depending on the kind of "
"procedural macro. Panics are caught by the compiler and are turned into a "
"compiler error. Endless loops are not caught by the compiler which hangs the "
"compiler."
msgstr ""

#: src/procedural-macros.md:39
msgid ""
"Procedural macros run during compilation, and thus have the same resources "
"that the compiler has. For example, standard input, error, and output are "
"the same that the compiler has access to. Similarly, file access is the "
"same. Because of this, procedural macros have the same security concerns "
"that [Cargo's build scripts](../cargo/reference/build-scripts.html) have."
msgstr ""

#: src/procedural-macros.md:47
msgid ""
"Procedural macros have two ways of reporting errors. The first is to panic. "
"The second is to emit a [`compile_error`](../core/macro.compile_error.html) "
"macro invocation."
msgstr ""

#: src/procedural-macros.md:52
msgid "The `proc_macro` crate"
msgstr ""

#: src/procedural-macros.md:56
msgid ""
"Procedural macro crates almost always will link to the compiler-provided "
"[`proc_macro` crate](../proc_macro/index.html). The `proc_macro` crate "
"provides types required for writing procedural macros and facilities to make "
"it easier."
msgstr ""

#: src/procedural-macros.md:62
msgid ""
"This crate primarily contains a [`TokenStream`](../proc_macro/"
"struct.TokenStream.html) type. Procedural macros operate over _token "
"streams_ instead of AST nodes, which is a far more stable interface over "
"time for both the compiler and for procedural macros to target. A _token "
"stream_ is roughly equivalent to `Vec<TokenTree>` where a `TokenTree` can "
"roughly be thought of as lexical token. For example `foo` is an `Ident` "
"token, `.` is a `Punct` token, and `1.2` is a `Literal` token. The "
"`TokenStream` type, unlike `Vec<TokenTree>`, is cheap to clone."
msgstr ""

#: src/procedural-macros.md:72
msgid ""
"All tokens have an associated `Span`. A `Span` is an opaque value that "
"cannot be modified but can be manufactured. `Span`s represent an extent of "
"source code within a program and are primarily used for error reporting. "
"While you cannot modify a `Span` itself, you can always change the `Span` "
"_associated_ with any token, such as through getting a `Span` from another "
"token."
msgstr ""

#: src/procedural-macros.md:80
msgid "Procedural macro hygiene"
msgstr ""

#: src/procedural-macros.md:83
msgid ""
"Procedural macros are _unhygienic_. This means they behave as if the output "
"token stream was simply written inline to the code it's next to. This means "
"that it's affected by external items and also affects external imports."
msgstr ""

#: src/procedural-macros.md:87
msgid ""
"Macro authors need to be careful to ensure their macros work in as many "
"contexts as possible given this limitation. This often includes using "
"absolute paths to items in libraries (for example, `::std::option::Option` "
"instead of `Option`) or by ensuring that generated functions have names that "
"are unlikely to clash with other functions (like `__internal_foo` instead of "
"`foo`)."
msgstr ""

#: src/procedural-macros.md:95
msgid "Function-like procedural macros"
msgstr ""

#: src/procedural-macros.md:99
msgid ""
"_Function-like procedural macros_ are procedural macros that are invoked "
"using the macro invocation operator (`!`)."
msgstr ""

#: src/procedural-macros.md:104
msgid ""
"These macros are defined by a [public](visibility-and-privacy.md) [function]"
"(items/functions.md) with the `proc_macro` [attribute](attributes.md) and a "
"signature of `(TokenStream) -> TokenStream`. The input [`TokenStream`](../"
"proc_macro/struct.TokenStream.html) is what is inside the delimiters of the "
"macro invocation and the output [`TokenStream`](../proc_macro/"
"struct.TokenStream.html) replaces the entire macro invocation."
msgstr ""

#: src/procedural-macros.md:111
msgid ""
"The `proc_macro` attribute defines the macro in the [macro namespace](names/"
"namespaces.md) in the root of the crate."
msgstr ""

#: src/procedural-macros.md:113
msgid ""
"For example, the following macro definition ignores its input and outputs a "
"function `answer` into its scope."
msgstr ""

#: src/procedural-macros.md:118 src/procedural-macros.md:180
#: src/procedural-macros.md:227 src/procedural-macros.md:277
msgid "\"proc-macro\""
msgstr ""

#: src/procedural-macros.md:124 src/procedural-macros.md:186
msgid "\"fn answer() -> u32 { 42 }\""
msgstr ""

#: src/procedural-macros.md:128
msgid ""
"And then we use it in a binary crate to print \"42\" to standard output."
msgstr ""

#: src/procedural-macros.md:138 src/items/unions.md:167
#: src/items/generics.md:108 src/attributes/codegen.md:457
#: src/attributes/codegen.md:474 src/attributes/codegen.md:487
#: src/attributes/codegen.md:491 src/attributes/codegen.md:506
#: src/attributes/codegen.md:510 src/attributes/codegen.md:515
#: src/expressions/loop-expr.md:164 src/expressions/range-expr.md:75
#: src/patterns.md:125 src/patterns.md:663 src/patterns.md:688
#: src/patterns.md:718 src/types/closure.md:17 src/types/closure.md:317
#: src/types/trait-object.md:104 src/type-layout.md:721 src/destructors.md:39
#: src/destructors.md:366 src/names/scopes.md:286 src/names/scopes.md:288
#: src/runtime.md:56
msgid "\"{}\""
msgstr ""

#: src/procedural-macros.md:144
msgid ""
"Function-like procedural macros may be invoked in any macro invocation "
"position, which includes [statements](statements.md), [expressions]"
"(expressions.md), [patterns](patterns.md), [type expressions](types.md#type-"
"expressions), [item](items.md) positions, including items in [`extern` "
"blocks](items/external-blocks.md), inherent and trait [implementations]"
"(items/implementations.md), and [trait definitions](items/traits.md)."
msgstr ""

#: src/procedural-macros.md:151
msgid "Derive macros"
msgstr ""

#: src/procedural-macros.md:155
msgid ""
"_Derive macros_ define new inputs for the [`derive` attribute](attributes/"
"derive.md). These macros can create new [items](items.md) given the token "
"stream of a [struct](items/structs.md), [enum](items/enumerations.md), or "
"[union](items/unions.md). They can also define [derive macro helper "
"attributes](#derive-macro-helper-attributes)."
msgstr ""

#: src/procedural-macros.md:161
msgid ""
"Custom derive macros are defined by a [public](visibility-and-privacy.md) "
"[function](items/functions.md) with the `proc_macro_derive` attribute and a "
"signature of `(TokenStream) -> TokenStream`."
msgstr ""

#: src/procedural-macros.md:166
msgid ""
"The `proc_macro_derive` attribute defines the custom derive in the [macro "
"namespace](names/namespaces.md) in the root of the crate."
msgstr ""

#: src/procedural-macros.md:170
msgid ""
"The input [`TokenStream`](../proc_macro/struct.TokenStream.html) is the "
"token stream of the item that has the `derive` attribute on it. The output "
"[`TokenStream`](../proc_macro/struct.TokenStream.html) must be a set of "
"items that are then appended to the [module](items/modules.md) or [block]"
"(expressions/block-expr.md) that the item from the input [`TokenStream`](../"
"proc_macro/struct.TokenStream.html) is in."
msgstr ""

#: src/procedural-macros.md:175
msgid ""
"The following is an example of a derive macro. Instead of doing anything "
"useful with its input, it just appends a function `answer`."
msgstr ""

#: src/procedural-macros.md:190
msgid "And then using said derive macro:"
msgstr ""

#: src/procedural-macros.md:207 src/names/scopes.md:341
msgid "Derive macro helper attributes"
msgstr ""

#: src/procedural-macros.md:211
msgid ""
"Derive macros can add additional [attributes](attributes.md) into the scope "
"of the [item](items.md) they are on. Said attributes are called _derive "
"macro helper attributes_. These attributes are [inert](attributes.md#active-"
"and-inert-attributes), and their only purpose is to be fed into the derive "
"macro that defined them. That said, they can be seen by all macros."
msgstr ""

#: src/procedural-macros.md:218
msgid ""
"The way to define helper attributes is to put an `attributes` key in the "
"`proc_macro_derive` macro with a comma separated list of identifiers that "
"are the names of the helper attributes."
msgstr ""

#: src/procedural-macros.md:222
msgid ""
"For example, the following derive macro defines a helper attribute `helper`, "
"but ultimately doesn't do anything with it."
msgstr ""

#: src/procedural-macros.md:237
msgid "And then usage on the derive macro on a struct:"
msgstr ""

#: src/procedural-macros.md:249
msgid "Attribute macros"
msgstr ""

#: src/procedural-macros.md:253
msgid ""
"_Attribute macros_ define new [outer attributes](attributes.md) which can be "
"attached to [items](items.md), including items in [`extern` blocks](items/"
"external-blocks.md), inherent and trait [implementations](items/"
"implementations.md), and [trait definitions](items/traits.md)."
msgstr ""

#: src/procedural-macros.md:259
msgid ""
"Attribute macros are defined by a [public](visibility-and-privacy.md) "
"[function](items/functions.md) with the `proc_macro_attribute` [attribute]"
"(attributes.md) that has a signature of `(TokenStream, TokenStream) -> "
"TokenStream`. The first [`TokenStream`](../proc_macro/"
"struct.TokenStream.html) is the delimited token tree following the "
"attribute's name, not including the outer delimiters. If the attribute is "
"written as a bare attribute name, the attribute [`TokenStream`](../"
"proc_macro/struct.TokenStream.html) is empty. The second [`TokenStream`](../"
"proc_macro/struct.TokenStream.html) is the rest of the [item](items.md) "
"including other [attributes](attributes.md) on the [item](items.md). The "
"returned [`TokenStream`](../proc_macro/struct.TokenStream.html) replaces the "
"[item](items.md) with an arbitrary number of [items](items.md)."
msgstr ""

#: src/procedural-macros.md:270
msgid ""
"The `proc_macro_attribute` attribute defines the attribute in the [macro "
"namespace](names/namespaces.md) in the root of the crate."
msgstr ""

#: src/procedural-macros.md:272
msgid ""
"For example, this attribute macro takes the input stream and returns it as "
"is, effectively being the no-op of attributes."
msgstr ""

#: src/procedural-macros.md:287
msgid ""
"This following example shows the stringified [`TokenStream`s](../proc_macro/"
"struct.TokenStream.html) that the attribute macros see. The output will show "
"in the output of the compiler. The output is shown in the comments after the "
"function prefixed with \"out:\"."
msgstr ""

#: src/procedural-macros.md:293
msgid "// my-macro/src/lib.rs\n"
msgstr ""

#: src/procedural-macros.md:299
msgid "\"attr: \\\"{attr}\\\"\""
msgstr ""

#: src/procedural-macros.md:300
msgid "\"item: \\\"{item}\\\"\""
msgstr ""

#: src/procedural-macros.md:307
msgid "// src/lib.rs\n"
msgstr ""

#: src/procedural-macros.md:311
msgid "// Example: Basic function\n"
msgstr ""

#: src/procedural-macros.md:314
msgid ""
"// out: attr: \"\"\n"
"// out: item: \"fn invoke1() {}\"\n"
msgstr ""

#: src/procedural-macros.md:317
msgid "// Example: Attribute with input\n"
msgstr ""

#: src/procedural-macros.md:320
msgid ""
"// out: attr: \"bar\"\n"
"// out: item: \"fn invoke2() {}\"\n"
msgstr ""

#: src/procedural-macros.md:323
msgid "// Example: Multiple tokens in the input\n"
msgstr ""

#: src/procedural-macros.md:326
msgid ""
"// out: attr: \"multiple => tokens\"\n"
"// out: item: \"fn invoke3() {}\"\n"
msgstr ""

#: src/procedural-macros.md:329
msgid "// Example:\n"
msgstr ""

#: src/procedural-macros.md:332
msgid ""
"// out: attr: \"delimiters\"\n"
"// out: item: \"fn invoke4() {}\"\n"
msgstr ""

#: src/procedural-macros.md:339
msgid "Declarative macro tokens and procedural macro tokens"
msgstr ""

#: src/procedural-macros.md:343
msgid ""
"Declarative `macro_rules` macros and procedural macros use similar, but "
"different definitions for tokens (or rather [`TokenTree`s](../proc_macro/"
"enum.TokenTree.html).)"
msgstr ""

#: src/procedural-macros.md:348
msgid ""
"Token trees in `macro_rules` (corresponding to `tt` matchers) are defined as"
msgstr ""

#: src/procedural-macros.md:349 src/procedural-macros.md:366
msgid "Delimited groups (`(...)`, `{...}`, etc)"
msgstr ""

#: src/procedural-macros.md:350
msgid ""
"All operators supported by the language, both single-character and multi-"
"character ones (`+`, `+=`)."
msgstr ""

#: src/procedural-macros.md:352
msgid "Note that this set doesn't include the single quote `'`."
msgstr ""

#: src/procedural-macros.md:353 src/procedural-macros.md:370
msgid "Literals (`\"string\"`, `1`, etc)"
msgstr ""

#: src/procedural-macros.md:354
msgid ""
"Note that negation (e.g. `-1`) is never a part of such literal tokens, but a "
"separate operator token."
msgstr ""

#: src/procedural-macros.md:356 src/procedural-macros.md:373
msgid "Identifiers, including keywords (`ident`, `r#ident`, `fn`)"
msgstr ""

#: src/procedural-macros.md:357
msgid "Lifetimes (`'ident`)"
msgstr ""

#: src/procedural-macros.md:358
msgid ""
"Metavariable substitutions in `macro_rules` (e.g. `$my_expr` in "
"`macro_rules! mac { ($my_expr: expr) => { $my_expr } }` after the `mac`'s "
"expansion, which will be considered a single token tree regardless of the "
"passed expression)"
msgstr ""

#: src/procedural-macros.md:365
msgid "Token trees in procedural macros are defined as"
msgstr ""

#: src/procedural-macros.md:367
msgid ""
"All punctuation characters used in operators supported by the language (`+`, "
"but not `+=`), and also the single quote `'` character (typically used in "
"lifetimes, see below for lifetime splitting and joining behavior)"
msgstr ""

#: src/procedural-macros.md:371
msgid ""
"Negation (e.g. `-1`) is supported as a part of integer and floating point "
"literals."
msgstr ""

#: src/procedural-macros.md:377
msgid ""
"Mismatches between these two definitions are accounted for when token "
"streams are passed to and from procedural macros.   \n"
"Note that the conversions below may happen lazily, so they might not happen "
"if the tokens are not actually inspected."
msgstr ""

#: src/procedural-macros.md:384
msgid "When passed to a proc-macro"
msgstr ""

#: src/procedural-macros.md:385
msgid "All multi-character operators are broken into single characters."
msgstr ""

#: src/procedural-macros.md:386
msgid "Lifetimes are broken into a `'` character and an identifier."
msgstr ""

#: src/procedural-macros.md:387
msgid ""
"All metavariable substitutions are represented as their underlying token "
"streams."
msgstr ""

#: src/procedural-macros.md:389
msgid ""
"Such token streams may be wrapped into delimited groups ([`Group`](../"
"proc_macro/struct.Group.html)) with implicit delimiters ([`Delimiter::None`]"
"(../proc_macro/enum.Delimiter.html#variant.None)) when it's necessary for "
"preserving parsing priorities."
msgstr ""

#: src/procedural-macros.md:392
msgid ""
"`tt` and `ident` substitutions are never wrapped into such groups and always "
"represented as their underlying token trees."
msgstr ""

#: src/procedural-macros.md:397
msgid "When emitted from a proc macro"
msgstr ""

#: src/procedural-macros.md:398
msgid ""
"Punctuation characters are glued into multi-character operators when "
"applicable."
msgstr ""

#: src/procedural-macros.md:400
msgid "Single quotes `'` joined with identifiers are glued into lifetimes."
msgstr ""

#: src/procedural-macros.md:401
msgid ""
"Negative literals are converted into two tokens (the `-` and the literal) "
"possibly wrapped into a delimited group ([`Group`](../proc_macro/"
"struct.Group.html)) with implicit delimiters ([`Delimiter::None`](../"
"proc_macro/enum.Delimiter.html#variant.None)) when it's necessary for "
"preserving parsing priorities."
msgstr ""

#: src/procedural-macros.md:407
msgid ""
"Note that neither declarative nor procedural macros support doc comment "
"tokens (e.g. `/// Doc`), so they are always converted to token streams "
"representing their equivalent `#[doc = r\"str\"]` attributes when passed to "
"macros."
msgstr ""

#: src/crates-and-source-files.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Crate_ :  \n"
"   [_InnerAttribute_](attributes.md)<sup>\\*</sup>  \n"
"   [_Item_](items.md)<sup>\\*</sup>"
msgstr ""

#: src/crates-and-source-files.md:12
msgid ""
"Note: Although Rust, like any other language, can be implemented by an "
"interpreter as well as a compiler, the only existing implementation is a "
"compiler, and the language has always been designed to be compiled. For "
"these reasons, this section assumes a compiler."
msgstr ""

#: src/crates-and-source-files.md:19
msgid ""
"Rust's semantics obey a _phase distinction_ between compile-time and run-"
"time.[^phase-distinction] Semantic rules that have a _static interpretation_ "
"govern the success or failure of compilation, while semantic rules that have "
"a _dynamic interpretation_ govern the behavior of the program at run-time."
msgstr ""

#: src/crates-and-source-files.md:27
msgid ""
"The compilation model centers on artifacts called _crates_. Each compilation "
"processes a single crate in source form, and if successful, produces a "
"single crate in binary form: either an executable or some sort of library."
"[^cratesourcefile]"
msgstr ""

#: src/crates-and-source-files.md:34
msgid ""
"A _crate_ is a unit of compilation and linking, as well as versioning, "
"distribution, and runtime loading. A crate contains a _tree_ of nested "
"[module](items/modules.md) scopes. The top level of this tree is a module "
"that is anonymous (from the point of view of paths within the module) and "
"any item within a crate has a canonical [module path](paths.md) denoting its "
"location within the crate's module tree."
msgstr ""

#: src/crates-and-source-files.md:43
msgid ""
"The Rust compiler is always invoked with a single source file as input, and "
"always produces a single output crate. The processing of that source file "
"may result in other source files being loaded as modules. Source files have "
"the extension `.rs`."
msgstr ""

#: src/crates-and-source-files.md:50
msgid ""
"A Rust source file describes a module, the name and location of which — in "
"the module tree of the current crate — are defined from outside the source "
"file: either by an explicit [_Module_](items/modules.md) item in a "
"referencing source file, or by the name of the crate itself."
msgstr ""

#: src/crates-and-source-files.md:57
msgid ""
"Every source file is a module, but not every module needs its own source "
"file: [module definitions](items/modules.md) can be nested within one file."
msgstr ""

#: src/crates-and-source-files.md:63
msgid ""
"Each source file contains a sequence of zero or more [_Item_](items.md) "
"definitions, and may optionally begin with any number of [attributes]"
"(attributes.md) that apply to the containing module, most of which influence "
"the behavior of the compiler."
msgstr ""

#: src/crates-and-source-files.md:70
msgid ""
"The anonymous crate module can have additional attributes that apply to the "
"crate as a whole."
msgstr ""

#: src/crates-and-source-files.md:73
msgid ""
"**Note**: The file's contents may be preceded by a [shebang](input-"
"format.md#shebang-removal)."
msgstr ""

#: src/crates-and-source-files.md:76
msgid "// Specify the crate name.\n"
msgstr ""

#: src/crates-and-source-files.md:77
msgid "\"projx\""
msgstr ""

#: src/crates-and-source-files.md:78
msgid "// Specify the type of output artifact.\n"
msgstr ""

#: src/crates-and-source-files.md:80 src/attributes.md:115
msgid "\"lib\""
msgstr ""

#: src/crates-and-source-files.md:81
msgid ""
"// Turn on a warning.\n"
"// This can be done in any module, not just the anonymous crate module.\n"
msgstr ""

#: src/crates-and-source-files.md:89
msgid "Main Functions"
msgstr ""

#: src/crates-and-source-files.md:93
msgid ""
"A crate that contains a `main` [function](items/functions.md) can be "
"compiled to an executable."
msgstr ""

#: src/crates-and-source-files.md:97
msgid ""
"If a `main` function is present, it must take no arguments, must not declare "
"any [trait or lifetime bounds](trait-bounds.md), must not have any [where "
"clauses](items/generics.md#where-clauses), and its return type must "
"implement the [`Termination`](../std/process/trait.Termination.html) trait."
msgstr ""

#: src/crates-and-source-files.md:117
msgid ""
"The `main` function may be an import, e.g. from an external crate or from "
"the current one."
msgstr ""

#: src/crates-and-source-files.md:122
msgid "\"Hello, world!\""
msgstr ""

#: src/crates-and-source-files.md:128
msgid ""
"**Note**: Types with implementations of [`Termination`](../std/process/"
"trait.Termination.html) in the standard library include:"
msgstr ""

#: src/crates-and-source-files.md:130 src/attributes/testing.md:27
#: src/expressions/tuple-expr.md:49
msgid "`()`"
msgstr ""

#: src/crates-and-source-files.md:131
msgid "[`!`](types/never.md)"
msgstr ""

#: src/crates-and-source-files.md:132
msgid "[`Infallible`](../core/convert/enum.Infallible.html)"
msgstr ""

#: src/crates-and-source-files.md:133
msgid "[`ExitCode`](../std/process/struct.ExitCode.html)"
msgstr ""

#: src/crates-and-source-files.md:134 src/attributes/testing.md:28
msgid "`Result<T, E> where T: Termination, E: Debug`"
msgstr ""

#: src/crates-and-source-files.md:141
msgid "The `no_main` attribute"
msgstr ""

#: src/crates-and-source-files.md:144
msgid ""
"The _`no_main` [attribute](attributes.md)_ may be applied at the crate level "
"to disable emitting the `main` symbol for an executable binary. This is "
"useful when some other object being linked to defines `main`."
msgstr ""

#: src/crates-and-source-files.md:150
msgid "The `crate_name` attribute"
msgstr ""

#: src/crates-and-source-files.md:154
msgid ""
"The _`crate_name` [attribute](attributes.md)_ may be applied at the crate "
"level to specify the name of the crate with the [_MetaNameValueStr_]"
"(attributes.md#meta-item-attribute-syntax) syntax."
msgstr ""

#: src/crates-and-source-files.md:158
msgid "\"mycrate\""
msgstr ""

#: src/crates-and-source-files.md:163
msgid ""
"The crate name must not be empty, and must only contain [Unicode "
"alphanumeric](../std/primitive.char.html#method.is_alphanumeric) or `_` "
"(U+005F) characters."
msgstr ""

#: src/crates-and-source-files.md:166
msgid ""
"This distinction would also exist in an interpreter. Static checks like "
"syntactic analysis, type checking, and lints should happen before the "
"program is executed regardless of when it is executed."
msgstr ""

#: src/crates-and-source-files.md:170
msgid ""
"A crate is somewhat analogous to an _assembly_ in the ECMA-335 CLI model, a "
"_library_ in the SML/NJ Compilation Manager, a _unit_ in the Owens and Flatt "
"module system, or a _configuration_ in Mesa."
msgstr ""

#: src/conditional-compilation.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ConfigurationPredicate_ :  \n"
"      _ConfigurationOption_  \n"
"   | _ConfigurationAll_  \n"
"   | _ConfigurationAny_  \n"
"   | _ConfigurationNot_"
msgstr ""

#: src/conditional-compilation.md:14
msgid ""
"_ConfigurationOption_ :  \n"
"   [IDENTIFIER](identifiers.md) (`=` ([STRING_LITERAL](tokens.md#string-"
"literals) | [RAW_STRING_LITERAL](tokens.md#raw-string-literals)))<sup>?</sup>"
msgstr ""

#: src/conditional-compilation.md:17
msgid ""
"_ConfigurationAll_  \n"
"   `all` `(` _ConfigurationPredicateList_<sup>?</sup> `)`"
msgstr ""

#: src/conditional-compilation.md:20
msgid ""
"_ConfigurationAny_  \n"
"   `any` `(` _ConfigurationPredicateList_<sup>?</sup> `)`"
msgstr ""

#: src/conditional-compilation.md:23
msgid ""
"_ConfigurationNot_  \n"
"   `not` `(` _ConfigurationPredicate_ `)`"
msgstr ""

#: src/conditional-compilation.md:26
msgid ""
"_ConfigurationPredicateList_  \n"
"   _ConfigurationPredicate_ (`,` _ConfigurationPredicate_)<sup>\\*</sup> "
"`,`<sup>?</sup>"
msgstr ""

#: src/conditional-compilation.md:31
msgid ""
"_Conditionally compiled source code_ is source code that is compiled only "
"under certain conditions."
msgstr ""

#: src/conditional-compilation.md:35
msgid ""
"Source code can be made conditionally compiled using the [`cfg`](#the-cfg-"
"attribute) and [`cfg_attr`](#the-cfg_attr-attribute) [attributes]"
"(attributes.md) and the built-in [`cfg` macro](#the-cfg-macro)."
msgstr ""

#: src/conditional-compilation.md:39
msgid ""
"Whether to compile can depend on the target architecture of the compiled "
"crate, arbitrary values passed to the compiler, and other things further "
"described below."
msgstr ""

#: src/conditional-compilation.md:43
msgid ""
"Each form of conditional compilation takes a _configuration predicate_ that "
"evaluates to true or false. The predicate is one of the following:"
msgstr ""

#: src/conditional-compilation.md:48
msgid ""
"A configuration option. The predicate is true if the option is set, and "
"false if it is unset."
msgstr ""

#: src/conditional-compilation.md:52
msgid ""
"`all()` with a comma-separated list of configuration predicates. It is true "
"if all of the given predicates are true, or if the list is empty."
msgstr ""

#: src/conditional-compilation.md:56
msgid ""
"`any()` with a comma-separated list of configuration predicates. It is true "
"if at least one of the given predicates is true. If there are no predicates, "
"it is false."
msgstr ""

#: src/conditional-compilation.md:60
msgid ""
"`not()` with a configuration predicate. It is true if its predicate is false "
"and false if its predicate is true."
msgstr ""

#: src/conditional-compilation.md:64
msgid ""
"_Configuration options_ are either names or key-value pairs, and are either "
"set or unset."
msgstr ""

#: src/conditional-compilation.md:68
msgid "Names are written as a single identifier, such as `unix`."
msgstr ""

#: src/conditional-compilation.md:72
msgid ""
"Key-value pairs are written as an identifier, `=`, and then a string, such "
"as `target_arch = \"x86_64\"`."
msgstr ""

#: src/conditional-compilation.md:74
msgid ""
"**Note**: Whitespace around the `=` is ignored, so `foo=\"bar\"` and `foo = "
"\"bar\"` are equivalent."
msgstr ""

#: src/conditional-compilation.md:78
msgid ""
"Keys do not need to be unique. For example, both `feature = \"std\"` and "
"`feature = \"serde\"` can be set at the same time."
msgstr ""

#: src/conditional-compilation.md:82
msgid "Set Configuration Options"
msgstr ""

#: src/conditional-compilation.md:86
msgid ""
"Which configuration options are set is determined statically during the "
"compilation of the crate."
msgstr ""

#: src/conditional-compilation.md:91
msgid "Some options are _compiler-set_ based on data about the compilation."
msgstr ""

#: src/conditional-compilation.md:95
msgid ""
"Other options are _arbitrarily-set_ based on input passed to the compiler "
"outside of the code."
msgstr ""

#: src/conditional-compilation.md:99
msgid ""
"It is not possible to set a configuration option from within the source code "
"of the crate being compiled."
msgstr ""

#: src/conditional-compilation.md:102
msgid ""
"**Note**: For `rustc`, arbitrary-set configuration options are set using the "
"[`--cfg`](../rustc/command-line-arguments.html#--cfg-configure-the-"
"compilation-environment) flag. Configuration values for a specified target "
"can be displayed with `rustc --print cfg --target $TARGET`."
msgstr ""

#: src/conditional-compilation.md:105
msgid ""
"**Note**: Configuration options with the key `feature` are a convention used "
"by [Cargo](../cargo/reference/features.html) for specifying compile-time "
"options and optional dependencies."
msgstr ""

#: src/conditional-compilation.md:111
msgid ""
"_**Warning:**_ Arbitrarily-set configuration options can clash with compiler-"
"set configuration options. For example, it is possible to do `rustc --cfg "
"\"unix\" program.rs` while compiling to a Windows target, and have both "
"`unix` and `windows` configuration options set at the same time. Doing this "
"would be unwise."
msgstr ""

#: src/conditional-compilation.md:119
msgid "`target_arch`"
msgstr ""

#: src/conditional-compilation.md:123
msgid ""
"Key-value option set once with the target's CPU architecture. The value is "
"similar to the first element of the platform's target triple, but not "
"identical."
msgstr ""

#: src/conditional-compilation.md:129 src/conditional-compilation.md:150
#: src/conditional-compilation.md:179 src/conditional-compilation.md:204
#: src/conditional-compilation.md:237 src/conditional-compilation.md:262
#: src/conditional-compilation.md:288 src/conditional-compilation.md:304
#: src/conditional-compilation.md:373
msgid "Example values:"
msgstr ""

#: src/conditional-compilation.md:131
msgid "`\"x86\"`"
msgstr ""

#: src/conditional-compilation.md:132
msgid "`\"x86_64\"`"
msgstr ""

#: src/conditional-compilation.md:133
msgid "`\"mips\"`"
msgstr ""

#: src/conditional-compilation.md:134
msgid "`\"powerpc\"`"
msgstr ""

#: src/conditional-compilation.md:135
msgid "`\"powerpc64\"`"
msgstr ""

#: src/conditional-compilation.md:136
msgid "`\"arm\"`"
msgstr ""

#: src/conditional-compilation.md:137
msgid "`\"aarch64\"`"
msgstr ""

#: src/conditional-compilation.md:141
msgid "`target_feature`"
msgstr ""

#: src/conditional-compilation.md:145
msgid ""
"Key-value option set for each platform feature available for the current "
"compilation target."
msgstr ""

#: src/conditional-compilation.md:152
msgid "`\"avx\"`"
msgstr ""

#: src/conditional-compilation.md:153
msgid "`\"avx2\"`"
msgstr ""

#: src/conditional-compilation.md:154
msgid "`\"crt-static\"`"
msgstr ""

#: src/conditional-compilation.md:155
msgid "`\"rdrand\"`"
msgstr ""

#: src/conditional-compilation.md:156
msgid "`\"sse\"`"
msgstr ""

#: src/conditional-compilation.md:157
msgid "`\"sse2\"`"
msgstr ""

#: src/conditional-compilation.md:158
msgid "`\"sse4.1\"`"
msgstr ""

#: src/conditional-compilation.md:160
msgid ""
"See the [`target_feature` attribute](attributes/codegen.md#the-"
"target_feature-attribute) for more details on the available features."
msgstr ""

#: src/conditional-compilation.md:165
msgid ""
"An additional feature of `crt-static` is available to the `target_feature` "
"option to indicate that a [static C runtime](linkage.md#static-and-dynamic-c-"
"runtimes) is available."
msgstr ""

#: src/conditional-compilation.md:170
msgid "`target_os`"
msgstr ""

#: src/conditional-compilation.md:174
msgid ""
"Key-value option set once with the target's operating system. This value is "
"similar to the second and third element of the platform's target triple."
msgstr ""

#: src/conditional-compilation.md:181 src/conditional-compilation.md:207
msgid "`\"windows\"`"
msgstr ""

#: src/conditional-compilation.md:182
msgid "`\"macos\"`"
msgstr ""

#: src/conditional-compilation.md:183
msgid "`\"ios\"`"
msgstr ""

#: src/conditional-compilation.md:184
msgid "`\"linux\"`"
msgstr ""

#: src/conditional-compilation.md:185
msgid "`\"android\"`"
msgstr ""

#: src/conditional-compilation.md:186
msgid "`\"freebsd\"`"
msgstr ""

#: src/conditional-compilation.md:187
msgid "`\"dragonfly\"`"
msgstr ""

#: src/conditional-compilation.md:188
msgid "`\"openbsd\"`"
msgstr ""

#: src/conditional-compilation.md:189
msgid "`\"netbsd\"`"
msgstr ""

#: src/conditional-compilation.md:190
msgid "`\"none\"` (typical for embedded targets)"
msgstr ""

#: src/conditional-compilation.md:194
msgid "`target_family`"
msgstr ""

#: src/conditional-compilation.md:198
msgid ""
"Key-value option providing a more generic description of a target, such as "
"the family of the operating systems or architectures that the target "
"generally falls into. Any number of `target_family` key-value pairs can be "
"set."
msgstr ""

#: src/conditional-compilation.md:206
msgid "`\"unix\"`"
msgstr ""

#: src/conditional-compilation.md:208
msgid "`\"wasm\"`"
msgstr ""

#: src/conditional-compilation.md:209
msgid "Both `\"unix\"` and `\"wasm\"`"
msgstr ""

#: src/conditional-compilation.md:213
msgid "`unix` and `windows`"
msgstr ""

#: src/conditional-compilation.md:215
msgid "`unix` is set if `target_family = \"unix\"` is set."
msgstr ""

#: src/conditional-compilation.md:219
msgid "`windows` is set if `target_family = \"windows\"` is set."
msgstr ""

#: src/conditional-compilation.md:223
msgid "`target_env`"
msgstr ""

#: src/conditional-compilation.md:227
msgid ""
"Key-value option set with further disambiguating information about the "
"target platform with information about the ABI or `libc` used. For "
"historical reasons, this value is only defined as not the empty-string when "
"actually needed for disambiguation. Thus, for example, on many GNU "
"platforms, this value will be empty. This value is similar to the fourth "
"element of the platform's target triple. One difference is that embedded "
"ABIs such as `gnueabihf` will simply define `target_env` as `\"gnu\"`."
msgstr ""

#: src/conditional-compilation.md:239 src/conditional-compilation.md:264
msgid "`\"\"`"
msgstr ""

#: src/conditional-compilation.md:240
msgid "`\"gnu\"`"
msgstr ""

#: src/conditional-compilation.md:241
msgid "`\"msvc\"`"
msgstr ""

#: src/conditional-compilation.md:242
msgid "`\"musl\"`"
msgstr ""

#: src/conditional-compilation.md:243
msgid "`\"sgx\"`"
msgstr ""

#: src/conditional-compilation.md:247
msgid "`target_abi`"
msgstr ""

#: src/conditional-compilation.md:251
msgid ""
"Key-value option set to further disambiguate the `target_env` with "
"information about the target ABI."
msgstr ""

#: src/conditional-compilation.md:256
msgid ""
"For historical reasons, this value is only defined as not the empty-string "
"when actually needed for disambiguation. Thus, for example, on many GNU "
"platforms, this value will be empty."
msgstr ""

#: src/conditional-compilation.md:265
msgid "`\"llvm\"`"
msgstr ""

#: src/conditional-compilation.md:266
msgid "`\"eabihf\"`"
msgstr ""

#: src/conditional-compilation.md:267
msgid "`\"abi64\"`"
msgstr ""

#: src/conditional-compilation.md:268
msgid "`\"sim\"`"
msgstr ""

#: src/conditional-compilation.md:269
msgid "`\"macabi\"`"
msgstr ""

#: src/conditional-compilation.md:273
msgid "`target_endian`"
msgstr ""

#: src/conditional-compilation.md:275
msgid ""
"Key-value option set once with either a value of \"little\" or \"big\" "
"depending on the endianness of the target's CPU."
msgstr ""

#: src/conditional-compilation.md:280
msgid "`target_pointer_width`"
msgstr ""

#: src/conditional-compilation.md:284
msgid "Key-value option set once with the target's pointer width in bits."
msgstr ""

#: src/conditional-compilation.md:290 src/conditional-compilation.md:331
msgid "`\"16\"`"
msgstr ""

#: src/conditional-compilation.md:291 src/conditional-compilation.md:332
msgid "`\"32\"`"
msgstr ""

#: src/conditional-compilation.md:292 src/conditional-compilation.md:333
msgid "`\"64\"`"
msgstr ""

#: src/conditional-compilation.md:296
msgid "`target_vendor`"
msgstr ""

#: src/conditional-compilation.md:300
msgid "Key-value option set once with the vendor of the target."
msgstr ""

#: src/conditional-compilation.md:306
msgid "`\"apple\"`"
msgstr ""

#: src/conditional-compilation.md:307
msgid "`\"fortanix\"`"
msgstr ""

#: src/conditional-compilation.md:308
msgid "`\"pc\"`"
msgstr ""

#: src/conditional-compilation.md:309
msgid "`\"unknown\"`"
msgstr ""

#: src/conditional-compilation.md:313
msgid "`target_has_atomic`"
msgstr ""

#: src/conditional-compilation.md:317
msgid ""
"Key-value option set for each bit width that the target supports atomic "
"loads, stores, and compare-and-swap operations."
msgstr ""

#: src/conditional-compilation.md:322
msgid ""
"When this cfg is present, all of the stable [`core::sync::atomic`](../core/"
"sync/atomic/index.html) APIs are available for the relevant atomic width."
msgstr ""

#: src/conditional-compilation.md:328
msgid "Possible values:"
msgstr ""

#: src/conditional-compilation.md:330
msgid "`\"8\"`"
msgstr ""

#: src/conditional-compilation.md:334
msgid "`\"128\"`"
msgstr ""

#: src/conditional-compilation.md:335
msgid "`\"ptr\"`"
msgstr ""

#: src/conditional-compilation.md:339
msgid "`test`"
msgstr ""

#: src/conditional-compilation.md:342
msgid ""
"Enabled when compiling the test harness. Done with `rustc` by using the [`--"
"test`](../rustc/command-line-arguments.html#--test-build-a-test-harness) "
"flag. See [Testing](attributes/testing.md) for more on testing support."
msgstr ""

#: src/conditional-compilation.md:347
msgid "`debug_assertions`"
msgstr ""

#: src/conditional-compilation.md:350
msgid ""
"Enabled by default when compiling without optimizations. This can be used to "
"enable extra debugging code in development but not in production.  For "
"example, it controls the behavior of the standard library's [`debug_assert!`]"
"(../core/macro.debug_assert.html) macro."
msgstr ""

#: src/conditional-compilation.md:357
msgid "`proc_macro`"
msgstr ""

#: src/conditional-compilation.md:360
msgid ""
"Set when the crate being compiled is being compiled with the `proc_macro` "
"[crate type](linkage.md)."
msgstr ""

#: src/conditional-compilation.md:365
msgid "`panic`"
msgstr ""

#: src/conditional-compilation.md:369
msgid ""
"Key-value option set depending on the panic strategy. Note that more values "
"may be added in the future."
msgstr ""

#: src/conditional-compilation.md:375
msgid "`\"abort\"`"
msgstr ""

#: src/conditional-compilation.md:376
msgid "`\"unwind\"`"
msgstr ""

#: src/conditional-compilation.md:378
msgid "Forms of conditional compilation"
msgstr ""

#: src/conditional-compilation.md:382
msgid "The `cfg` attribute"
msgstr ""

#: src/conditional-compilation.md:386
msgid ""
"**<sup>Syntax</sup>**  \n"
"_CfgAttrAttribute_ :  \n"
"   `cfg` `(` _ConfigurationPredicate_ `)`"
msgstr ""

#: src/conditional-compilation.md:394
msgid ""
"The `cfg` [attribute](attributes.md) conditionally includes the thing it is "
"attached to based on a configuration predicate."
msgstr ""

#: src/conditional-compilation.md:399
msgid ""
"It is written as `cfg`, `(`, a configuration predicate, and finally `)`."
msgstr ""

#: src/conditional-compilation.md:403
msgid ""
"If the predicate is true, the thing is rewritten to not have the `cfg` "
"attribute on it. If the predicate is false, the thing is removed from the "
"source code."
msgstr ""

#: src/conditional-compilation.md:408
msgid ""
"When a crate-level `cfg` has a false predicate, the behavior is slightly "
"different: any crate attributes preceding the `cfg` are kept, and any crate "
"attributes following the `cfg` are removed. This allows `#![no_std]` and `#!"
"[no_core]` crates to avoid linking `std`/`core` even if a `#![cfg(...)]` has "
"removed the entire crate."
msgstr ""

#: src/conditional-compilation.md:414
msgid "Some examples on functions:"
msgstr ""

#: src/conditional-compilation.md:417
msgid ""
"// The function is only included in the build when compiling for macOS\n"
msgstr ""

#: src/conditional-compilation.md:418
msgid "\"macos\""
msgstr ""

#: src/conditional-compilation.md:420 src/conditional-compilation.md:426
#: src/conditional-compilation.md:433 src/conditional-compilation.md:439
#: src/conditional-compilation.md:445 src/items/associated-items.md:215
#: src/items/associated-items.md:219 src/attributes/diagnostics.md:309
#: src/attributes/diagnostics.md:315 src/expressions.md:301
#: src/types/impl-trait.md:176 src/types/impl-trait.md:189
#: src/type-layout.md:605 src/type-layout.md:610 src/trait-bounds.md:178
#: src/names/scopes.md:251 src/paths.md:189
msgid "// ...\n"
msgstr ""

#: src/conditional-compilation.md:422
msgid "// This function is only included when either foo or bar is defined\n"
msgstr ""

#: src/conditional-compilation.md:428
msgid ""
"// This function is only included when compiling for a unixish OS with a 32-"
"bit\n"
"// architecture\n"
msgstr ""

#: src/conditional-compilation.md:431
msgid "\"32\""
msgstr ""

#: src/conditional-compilation.md:435
msgid "// This function is only included when foo is not defined\n"
msgstr ""

#: src/conditional-compilation.md:441
msgid ""
"// This function is only included when the panic strategy is set to unwind\n"
msgstr ""

#: src/conditional-compilation.md:443
msgid "\"unwind\""
msgstr ""

#: src/conditional-compilation.md:452
msgid "The `cfg` attribute is allowed anywhere attributes are allowed."
msgstr ""

#: src/conditional-compilation.md:456
msgid "The `cfg_attr` attribute"
msgstr ""

#: src/conditional-compilation.md:460
msgid ""
"**<sup>Syntax</sup>**  \n"
"_CfgAttrAttribute_ :  \n"
"   `cfg_attr` `(` _ConfigurationPredicate_ `,` _CfgAttrs_<sup>?</sup> `)`"
msgstr ""

#: src/conditional-compilation.md:464
msgid ""
"_CfgAttrs_ :  \n"
"   [_Attr_](attributes.md) (`,` [_Attr_](attributes.md))<sup>\\*</sup> "
"`,`<sup>?</sup>"
msgstr ""

#: src/conditional-compilation.md:469
msgid ""
"The `cfg_attr` [attribute](attributes.md) conditionally includes [attributes]"
"(attributes.md) based on a configuration predicate."
msgstr ""

#: src/conditional-compilation.md:474
msgid ""
"When the configuration predicate is true, this attribute expands out to the "
"attributes listed after the predicate. For example, the following module "
"will either be found at `linux.rs` or `windows.rs` based on the target."
msgstr ""

#: src/conditional-compilation.md:480 src/attributes.md:124
msgid "\"linux\""
msgstr ""

#: src/conditional-compilation.md:480
msgid "\"linux.rs\""
msgstr ""

#: src/conditional-compilation.md:481
msgid "\"windows.rs\""
msgstr ""

#: src/conditional-compilation.md:487
msgid ""
"Zero, one, or more attributes may be listed. Multiple attributes will each "
"be expanded into separate attributes. For example:"
msgstr ""

#: src/conditional-compilation.md:492
msgid "\"magic\""
msgstr ""

#: src/conditional-compilation.md:494
msgid ""
"// When the `magic` feature flag is enabled, the above will expand to:\n"
msgstr ""

#: src/conditional-compilation.md:501
msgid ""
"**Note**: The `cfg_attr` can expand to another `cfg_attr`. For example, "
"`#[cfg_attr(target_os = \"linux\", cfg_attr(feature = \"multithreaded\", "
"some_other_attribute))]` is valid. This example would be equivalent to "
"`#[cfg_attr(all(target_os = \"linux\", feature =\"multithreaded\"), "
"some_other_attribute)]`."
msgstr ""

#: src/conditional-compilation.md:508
msgid "The `cfg_attr` attribute is allowed anywhere attributes are allowed."
msgstr ""

#: src/conditional-compilation.md:510
msgid ""
"The [`crate_type`](linkage.md) and [`crate_name`](crates-and-source-"
"files.md#the-crate_name-attribute) attributes cannot be used with `cfg_attr`."
msgstr ""

#: src/conditional-compilation.md:514
msgid "The `cfg` macro"
msgstr ""

#: src/conditional-compilation.md:516
msgid ""
"The built-in `cfg` macro takes in a single configuration predicate and "
"evaluates to the `true` literal when the predicate is true and the `false` "
"literal when it is false."
msgstr ""

#: src/conditional-compilation.md:520 src/expressions/operator-expr.md:928
#: src/types/closure.md:121
msgid "For example:"
msgstr ""

#: src/conditional-compilation.md:524
msgid "\"unix\""
msgstr ""

#: src/conditional-compilation.md:526 src/attributes/diagnostics.md:145
#: src/runtime.md:108
msgid "\"windows\""
msgstr ""

#: src/conditional-compilation.md:528
msgid "\"unknown\""
msgstr ""

#: src/conditional-compilation.md:531
msgid "\"I'm running on a {} machine!\""
msgstr ""

#: src/items.md:7
msgid ""
"**<sup>Syntax:</sup>**  \n"
"_Item_:  \n"
"   [_OuterAttribute_](attributes.md)<sup>\\*</sup>  \n"
"      _VisItem_  \n"
"   | _MacroItem_"
msgstr ""

#: src/items.md:13
msgid ""
"_VisItem_:  \n"
"   [_Visibility_](visibility-and-privacy.md)<sup>?</sup>  \n"
"   (  \n"
"          [_Module_](items/modules.md)  \n"
"      | [_ExternCrate_](items/extern-crates.md)  \n"
"      | [_UseDeclaration_](items/use-declarations.md)  \n"
"      | [_Function_](items/functions.md)  \n"
"      | [_TypeAlias_](items/type-aliases.md)  \n"
"      | [_Struct_](items/structs.md)  \n"
"      | [_Enumeration_](items/enumerations.md)  \n"
"      | [_Union_](items/unions.md)  \n"
"      | [_ConstantItem_](items/constant-items.md)  \n"
"      | [_StaticItem_](items/static-items.md)  \n"
"      | [_Trait_](items/traits.md)  \n"
"      | [_Implementation_](items/implementations.md)  \n"
"      | [_ExternBlock_](items/external-blocks.md)  \n"
"   )"
msgstr ""

#: src/items.md:31
msgid ""
"_MacroItem_:  \n"
"      [_MacroInvocationSemi_](macros.md#macro-invocation)  \n"
"   | [_MacroRulesDefinition_](macros-by-example.md)"
msgstr ""

#: src/items.md:37
msgid ""
"An _item_ is a component of a crate. Items are organized within a crate by a "
"nested set of [modules](items/modules.md). Every crate has a single "
"\"outermost\" anonymous module; all further items within the crate have "
"[paths](paths.md) within the module tree of the crate."
msgstr ""

#: src/items.md:44
msgid ""
"Items are entirely determined at compile-time, generally remain fixed during "
"execution, and may reside in read-only memory."
msgstr ""

#: src/items.md:49
msgid "There are several kinds of items:"
msgstr ""

#: src/items.md:51
msgid "[modules](items/modules.md)"
msgstr ""

#: src/items.md:52
msgid "[`extern crate` declarations](items/extern-crates.md)"
msgstr ""

#: src/items.md:53
msgid "[`use` declarations](items/use-declarations.md)"
msgstr ""

#: src/items.md:54
msgid "[function definitions](items/functions.md)"
msgstr ""

#: src/items.md:55
msgid "[type definitions](items/type-aliases.md)"
msgstr ""

#: src/items.md:56
msgid "[struct definitions](items/structs.md)"
msgstr ""

#: src/items.md:57
msgid "[enumeration definitions](items/enumerations.md)"
msgstr ""

#: src/items.md:58
msgid "[union definitions](items/unions.md)"
msgstr ""

#: src/items.md:59
msgid "[constant items](items/constant-items.md)"
msgstr ""

#: src/items.md:60
msgid "[static items](items/static-items.md)"
msgstr ""

#: src/items.md:61
msgid "[trait definitions](items/traits.md)"
msgstr ""

#: src/items.md:62
msgid "[implementations](items/implementations.md)"
msgstr ""

#: src/items.md:63
msgid "[`extern` blocks](items/external-blocks.md)"
msgstr ""

#: src/items.md:67
msgid ""
"Items may be declared in the [root of the crate](crates-and-source-"
"files.md), a [module](items/modules.md), or a [block expression](expressions/"
"block-expr.md)."
msgstr ""

#: src/items.md:71
msgid ""
"A subset of items, called [associated items](items/associated-items.md), may "
"be declared in [traits](items/traits.md) and [implementations](items/"
"implementations.md)."
msgstr ""

#: src/items.md:75
msgid ""
"A subset of items, called external items, may be declared in [`extern` "
"blocks](items/external-blocks.md)."
msgstr ""

#: src/items.md:79
msgid ""
"Items may be defined in any order, with the exception of [`macro_rules`]"
"(macros-by-example.md) which has its own scoping behavior."
msgstr ""

#: src/items.md:83
msgid ""
"[Name resolution](names/name-resolution.md) of item names allows items to be "
"defined before or after where the item is referred to in the module or block."
msgstr ""

#: src/items.md:85
msgid ""
"See [item scopes](names/scopes.md#item-scopes) for information on the "
"scoping rules of items."
msgstr ""

#: src/items/modules.md:7
msgid ""
"**<sup>Syntax:</sup>**  \n"
"_Module_ :  \n"
"      `unsafe`<sup>?</sup> `mod` [IDENTIFIER](../identifiers.md) `;`  \n"
"   | `unsafe`<sup>?</sup> `mod` [IDENTIFIER](../identifiers.md) `{`  \n"
"        [_InnerAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"        [_Item_](../items.md)<sup>\\*</sup>  \n"
"      `}`"
msgstr ""

#: src/items/modules.md:17
msgid "A module is a container for zero or more [items](../items.md)."
msgstr ""

#: src/items/modules.md:21
msgid ""
"A _module item_ is a module, surrounded in braces, named, and prefixed with "
"the keyword `mod`. A module item introduces a new, named module into the "
"tree of modules making up a crate."
msgstr ""

#: src/items/modules.md:27
msgid "Modules can nest arbitrarily."
msgstr ""

#: src/items/modules.md:29
msgid "An example of a module:"
msgstr ""

#: src/items/modules.md:35 src/items/modules.md:39 src/items/modules.md:43
#: src/items/functions.md:218 src/items/implementations.md:234
#: src/items/implementations.md:266 src/items/implementations.md:269
#: src/items/implementations.md:272 src/items/implementations.md:276
#: src/items/implementations.md:280 src/items/implementations.md:290
#: src/items/implementations.md:293 src/items/implementations.md:297
#: src/items/implementations.md:301 src/attributes.md:120 src/attributes.md:126
msgid "/* ... */"
msgstr ""

#: src/items/modules.md:51
msgid ""
"Modules are defined in the [type namespace](../names/namespaces.md) of the "
"module or block where they are located."
msgstr ""

#: src/items/modules.md:55
msgid ""
"It is an error to define multiple items with the same name in the same "
"namespace within a module. See the [scopes chapter](../names/scopes.md) for "
"more details on restrictions and shadowing behavior."
msgstr ""

#: src/items/modules.md:60
msgid ""
"The `unsafe` keyword is syntactically allowed to appear before the `mod` "
"keyword, but it is rejected at a semantic level. This allows macros to "
"consume the syntax and make use of the `unsafe` keyword, before removing it "
"from the token stream."
msgstr ""

#: src/items/modules.md:67
msgid "Module Source Filenames"
msgstr ""

#: src/items/modules.md:71
msgid ""
"A module without a body is loaded from an external file. When the module "
"does not have a `path` attribute, the path to the file mirrors the logical "
"[module path](../paths.md)."
msgstr ""

#: src/items/modules.md:77
msgid ""
"Ancestor module path components are directories, and the module's contents "
"are in a file with the name of the module plus the `.rs` extension. For "
"example, the following module structure can have this corresponding "
"filesystem structure:"
msgstr ""

#: src/items/modules.md:82
msgid "Module Path"
msgstr ""

#: src/items/modules.md:82
msgid "Filesystem Path"
msgstr ""

#: src/items/modules.md:82
msgid "File Contents"
msgstr ""

#: src/items/modules.md:84 src/paths.md:395
msgid "`crate`"
msgstr ""

#: src/items/modules.md:84
msgid "`lib.rs`"
msgstr ""

#: src/items/modules.md:84
msgid "`mod util;`"
msgstr ""

#: src/items/modules.md:85
msgid "`crate::util`"
msgstr ""

#: src/items/modules.md:85
msgid "`util.rs`"
msgstr ""

#: src/items/modules.md:85
msgid "`mod config;`"
msgstr ""

#: src/items/modules.md:86
msgid "`crate::util::config`"
msgstr ""

#: src/items/modules.md:86
msgid "`util/config.rs`"
msgstr ""

#: src/items/modules.md:90
msgid ""
"Module filenames may also be the name of the module as a directory with the "
"contents in a file named `mod.rs` within that directory. The above example "
"can alternately be expressed with `crate::util`'s contents in a file named "
"`util/mod.rs`. It is not allowed to have both `util.rs` and `util/mod.rs`."
msgstr ""

#: src/items/modules.md:95
msgid ""
"**Note**: Prior to `rustc` 1.30, using `mod.rs` files was the way to load a "
"module with nested children. It is encouraged to use the new naming "
"convention as it is more consistent, and avoids having many files named "
"`mod.rs` within a project."
msgstr ""

#: src/items/modules.md:102
msgid "The `path` attribute"
msgstr ""

#: src/items/modules.md:106
msgid ""
"The directories and files used for loading external file modules can be "
"influenced with the `path` attribute."
msgstr ""

#: src/items/modules.md:111
msgid ""
"For `path` attributes on modules not inside inline module blocks, the file "
"path is relative to the directory the source file is located. For example, "
"the following code snippet would use the paths shown based on where it is "
"located:"
msgstr ""

#: src/items/modules.md:117
msgid "\"foo.rs\""
msgstr ""

#: src/items/modules.md:121 src/items/modules.md:147
msgid "Source File"
msgstr ""

#: src/items/modules.md:121
msgid "`c`'s File Location"
msgstr ""

#: src/items/modules.md:121
msgid "`c`'s Module Path"
msgstr ""

#: src/items/modules.md:123 src/items/modules.md:149
msgid "`src/a/b.rs`"
msgstr ""

#: src/items/modules.md:123 src/items/modules.md:124
msgid "`src/a/foo.rs`"
msgstr ""

#: src/items/modules.md:123
msgid "`crate::a::b::c`"
msgstr ""

#: src/items/modules.md:124 src/items/modules.md:150
msgid "`src/a/mod.rs`"
msgstr ""

#: src/items/modules.md:124
msgid "`crate::a::c`"
msgstr ""

#: src/items/modules.md:128
msgid ""
"For `path` attributes inside inline module blocks, the relative location of "
"the file path depends on the kind of source file the `path` attribute is "
"located in. \"mod-rs\" source files are root modules (such as `lib.rs` or "
"`main.rs`) and modules with files named `mod.rs`. \"non-mod-rs\" source "
"files are all other module files. Paths for `path` attributes inside inline "
"module blocks in a mod-rs file are relative to the directory of the mod-rs "
"file including the inline module components as directories. For non-mod-rs "
"files, it is the same except the path starts with a directory with the name "
"of the non-mod-rs module. For example, the following code snippet would use "
"the paths shown based on where it is located:"
msgstr ""

#: src/items/modules.md:142
msgid "\"other.rs\""
msgstr ""

#: src/items/modules.md:147
msgid "`inner`'s File Location"
msgstr ""

#: src/items/modules.md:147
msgid "`inner`'s Module Path"
msgstr ""

#: src/items/modules.md:149
msgid "`src/a/b/inline/other.rs`"
msgstr ""

#: src/items/modules.md:149
msgid "`crate::a::b::inline::inner`"
msgstr ""

#: src/items/modules.md:150
msgid "`src/a/inline/other.rs`"
msgstr ""

#: src/items/modules.md:150
msgid "`crate::a::inline::inner`"
msgstr ""

#: src/items/modules.md:152
msgid ""
"An example of combining the above rules of `path` attributes on inline "
"modules and nested modules within (applies to both mod-rs and non-mod-rs "
"files):"
msgstr ""

#: src/items/modules.md:157
msgid "\"thread_files\""
msgstr ""

#: src/items/modules.md:159
msgid ""
"// Load the `local_data` module from `thread_files/tls.rs` relative to\n"
"    // this source file's directory.\n"
msgstr ""

#: src/items/modules.md:161
msgid "\"tls.rs\""
msgstr ""

#: src/items/modules.md:168
msgid "Attributes on Modules"
msgstr ""

#: src/items/modules.md:172
msgid ""
"Modules, like all items, accept outer attributes. They also accept inner "
"attributes: either after `{` for a module with a body, or at the beginning "
"of the source file, after the optional BOM and shebang."
msgstr ""

#: src/items/modules.md:178
msgid ""
"The built-in attributes that have meaning on a module are [`cfg`](../"
"conditional-compilation.md), [`deprecated`](../attributes/diagnostics.md#the-"
"deprecated-attribute), [`doc`](../../rustdoc/the-doc-attribute.html), [the "
"lint check attributes](../attributes/diagnostics.md#lint-check-attributes), "
"[`path`](#the-path-attribute), and [`no_implicit_prelude`](../names/"
"preludes.md#the-no_implicit_prelude-attribute). Modules also accept macro "
"attributes."
msgstr ""

#: src/items/extern-crates.md:3
msgid "Extern crate declarations"
msgstr ""

#: src/items/extern-crates.md:7
msgid ""
"**<sup>Syntax:</sup>**  \n"
"_ExternCrate_ :  \n"
"   `extern` `crate` _CrateRef_ _AsClause_<sup>?</sup> `;`"
msgstr ""

#: src/items/extern-crates.md:11
msgid ""
"_CrateRef_ :  \n"
"   [IDENTIFIER](../identifiers.md) | `self`"
msgstr ""

#: src/items/extern-crates.md:14
msgid ""
"_AsClause_ :  \n"
"   `as` ( [IDENTIFIER](../identifiers.md) | `_` )"
msgstr ""

#: src/items/extern-crates.md:19
msgid ""
"An _`extern crate` declaration_ specifies a dependency on an external crate."
msgstr ""

#: src/items/extern-crates.md:23
msgid ""
"The external crate is then bound into the declaring scope as the given "
"[identifier](../identifiers.md) in the [type namespace](../names/"
"namespaces.md)."
msgstr ""

#: src/items/extern-crates.md:27
msgid ""
"Additionally, if the `extern crate` appears in the crate root, then the "
"crate name is also added to the [extern prelude](../names/preludes.md#extern-"
"prelude), making it automatically in scope in all modules."
msgstr ""

#: src/items/extern-crates.md:31
msgid ""
"The `as` clause can be used to bind the imported crate to a different name."
msgstr ""

#: src/items/extern-crates.md:35
msgid ""
"The external crate is resolved to a specific `soname` at compile time, and a "
"runtime linkage requirement to that `soname` is passed to the linker for "
"loading at runtime. The `soname` is resolved at compile time by scanning the "
"compiler's library path and matching the optional `crate_name` provided "
"against the [`crate_name` attributes](../crates-and-source-files.md#the-"
"crate_name-attribute) that were declared on the external crate when it was "
"compiled. If no `crate_name` is provided, a default `name` attribute is "
"assumed, equal to the [identifier](../identifiers.md) given in the `extern "
"crate` declaration."
msgstr ""

#: src/items/extern-crates.md:45
msgid ""
"The `self` crate may be imported which creates a binding to the current "
"crate. In this case the `as` clause must be used to specify the name to bind "
"it to."
msgstr ""

#: src/items/extern-crates.md:48
msgid "Three examples of `extern crate` declarations:"
msgstr ""

#: src/items/extern-crates.md:54
msgid "// equivalent to: extern crate std as std;\n"
msgstr ""

#: src/items/extern-crates.md:56
msgid "// linking to 'std' under another name\n"
msgstr ""

#: src/items/extern-crates.md:61
msgid ""
"When naming Rust crates, hyphens are disallowed. However, Cargo packages may "
"make use of them. In such case, when `Cargo.toml` doesn't specify a crate "
"name, Cargo will transparently replace `-` with `_` (Refer to [RFC 940]"
"(https://github.com/rust-lang/rfcs/blob/master/text/0940-hyphens-considered-"
"harmful.md) for more details)."
msgstr ""

#: src/items/extern-crates.md:66 src/attributes/diagnostics.md:358
msgid "Here is an example:"
msgstr ""

#: src/items/extern-crates.md:70
msgid "// Importing the Cargo package hello-world\n"
msgstr ""

#: src/items/extern-crates.md:71
msgid "// hyphen replaced with an underscore\n"
msgstr ""

#: src/items/extern-crates.md:76 src/items/use-declarations.md:348
msgid "Underscore Imports"
msgstr ""

#: src/items/extern-crates.md:80
msgid ""
"An external crate dependency can be declared without binding its name in "
"scope by using an underscore with the form `extern crate foo as _`. This may "
"be useful for crates that only need to be linked, but are never referenced, "
"and will avoid being reported as unused."
msgstr ""

#: src/items/extern-crates.md:87
msgid ""
"The [`macro_use` attribute](../macros-by-example.md#the-macro_use-attribute) "
"works as usual and imports the macro names into the [`macro_use` prelude](../"
"names/preludes.md#macro_use-prelude)."
msgstr ""

#: src/items/extern-crates.md:92
msgid "The `no_link` attribute"
msgstr ""

#: src/items/extern-crates.md:94
msgid ""
"The _`no_link` attribute_ may be specified on an `extern crate` item to "
"prevent linking the crate into the output. This is commonly used to load a "
"crate to access only its macros."
msgstr ""

#: src/items/use-declarations.md:7
msgid ""
"**<sup>Syntax:</sup>**  \n"
"_UseDeclaration_ :  \n"
"   `use` _UseTree_ `;`"
msgstr ""

#: src/items/use-declarations.md:11
msgid ""
"_UseTree_ :  \n"
"      ([_SimplePath_](../paths.md#simple-paths)<sup>?</sup> `::`)<sup>?</"
"sup> `*`  \n"
"   | ([_SimplePath_](../paths.md#simple-paths)<sup>?</sup> `::`)<sup>?</sup> "
"`{` (_UseTree_ ( `,`  _UseTree_ )<sup>\\*</sup> `,`<sup>?</sup>)<sup>?</sup> "
"`}`  \n"
"   | [_SimplePath_](../paths.md#simple-paths) ( `as` ( [IDENTIFIER](../"
"identifiers.md) | `_` ) )<sup>?</sup>"
msgstr ""

#: src/items/use-declarations.md:18
msgid ""
"A _use declaration_ creates one or more local name bindings synonymous with "
"some other [path](../paths.md). Usually a `use` declaration is used to "
"shorten the path required to refer to a module item. These declarations may "
"appear in [modules](modules.md) and [blocks](../expressions/block-expr.md), "
"usually at the top. A `use` declaration is also sometimes called an "
"_import_, or, if it is public, a _re-export_."
msgstr ""

#: src/items/use-declarations.md:30
msgid "Use declarations support a number of convenient shortcuts:"
msgstr ""

#: src/items/use-declarations.md:34
msgid ""
"Simultaneously binding a list of paths with a common prefix, using the brace "
"syntax `use a::b::{c, d, e::f, g::h::i};`"
msgstr ""

#: src/items/use-declarations.md:39
msgid ""
"Simultaneously binding a list of paths with a common prefix and their common "
"parent module, using the `self` keyword, such as `use a::b::{self, c, d::e};`"
msgstr ""

#: src/items/use-declarations.md:44
msgid ""
"Rebinding the target name as a new local name, using the syntax `use p::q::r "
"as x;`. This can also be used with the last two features: `use a::b::{self "
"as ab, c as abc}`."
msgstr ""

#: src/items/use-declarations.md:50
msgid ""
"Binding all paths matching a given prefix, using the asterisk wildcard "
"syntax `use a::b::*;`."
msgstr ""

#: src/items/use-declarations.md:55
msgid ""
"Nesting groups of the previous features multiple times, such as `use a::b::"
"{self as ab, c, d::{*, e::f}};`"
msgstr ""

#: src/items/use-declarations.md:58
msgid "An example of `use` declarations:"
msgstr ""

#: src/items/use-declarations.md:67
msgid "// use declarations can also exist inside of functions\n"
msgstr ""

#: src/items/use-declarations.md:70
msgid ""
"// Equivalent to 'foo(vec![std::option::Option::Some(1.0f64),\n"
"    // std::option::Option::None]);'\n"
msgstr ""

#: src/items/use-declarations.md:74
msgid "// Both `hash_map` and `HashMap` are in scope.\n"
msgstr ""

#: src/items/use-declarations.md:83
msgid "`use` Visibility"
msgstr ""

#: src/items/use-declarations.md:87
msgid ""
"Like items, `use` declarations are private to the containing module, by "
"default. Also like items, a `use` declaration can be public, if qualified by "
"the `pub` keyword. Such a `use` declaration serves to _re-export_ a name. A "
"public `use` declaration can therefore _redirect_ some public name to a "
"different target definition: even a definition with a private canonical "
"path, inside a different module."
msgstr ""

#: src/items/use-declarations.md:96
msgid ""
"If a sequence of such redirections form a cycle or cannot be resolved "
"unambiguously, they represent a compile-time error."
msgstr ""

#: src/items/use-declarations.md:99
msgid "An example of re-exporting:"
msgstr ""

#: src/items/use-declarations.md:116
msgid ""
"In this example, the module `quux` re-exports two public names defined in "
"`foo`."
msgstr ""

#: src/items/use-declarations.md:121
msgid "`use` Paths"
msgstr ""

#: src/items/use-declarations.md:125
msgid ""
"The [paths](../paths.md) that are allowed in a `use` item follow the "
"[_SimplePath_](../paths.md#simple-paths) grammar and are similar to the "
"paths that may be used in an expression. They may create bindings for:"
msgstr ""

#: src/items/use-declarations.md:128
msgid "Nameable [items](../items.md)"
msgstr ""

#: src/items/use-declarations.md:129
msgid "[Enum variants](enumerations.md)"
msgstr ""

#: src/items/use-declarations.md:130
msgid "[Built-in types](../types.md)"
msgstr ""

#: src/items/use-declarations.md:131
msgid "[Attributes](../attributes.md)"
msgstr ""

#: src/items/use-declarations.md:132 src/names/namespaces.md:51
msgid "[Derive macros](../procedural-macros.md#derive-macros)"
msgstr ""

#: src/items/use-declarations.md:136
msgid ""
"They cannot import [associated items](associated-items.md), [generic "
"parameters](generics.md), [local variables](../variables.md), paths with "
"[`Self`](../paths.md#self), or [tool attributes](../attributes.md#tool-"
"attributes). More restrictions are described below."
msgstr ""

#: src/items/use-declarations.md:140
msgid ""
"`use` will create bindings for all [namespaces](../names/namespaces.md) from "
"the imported entities, with the exception that a `self` import will only "
"import from the type namespace (as described below). For example, the "
"following illustrates creating bindings for the same name in two namespaces:"
msgstr ""

#: src/items/use-declarations.md:147
msgid "// Imports the `Foo` type and the `Foo` constructor.\n"
msgstr ""

#: src/items/use-declarations.md:152
msgid "// Uses `Foo` from the value namespace.\n"
msgstr ""

#: src/items/use-declarations.md:153
msgid "// Uses `Foo` From the type namespace.\n"
msgstr ""

#: src/items/use-declarations.md:159
msgid ""
"**Edition differences**: In the 2015 edition, `use` paths are relative to "
"the crate root. For example:"
msgstr ""

#: src/items/use-declarations.md:168
msgid "// Resolves `foo` from the crate root.\n"
msgstr ""

#: src/items/use-declarations.md:170
msgid "// The `::` prefix explicitly resolves `foo`\n"
msgstr ""

#: src/items/use-declarations.md:171
msgid "// from the crate root.\n"
msgstr ""

#: src/items/use-declarations.md:178
msgid ""
"The 2015 edition does not allow use declarations to reference the [extern "
"prelude](../names/preludes.md#extern-prelude). Thus, [`extern crate`](extern-"
"crates.md) declarations are still required in 2015 to reference an external "
"crate in a `use` declaration. Beginning with the 2018 edition, `use` "
"declarations can specify an external crate dependency the same way `extern "
"crate` can."
msgstr ""

#: src/items/use-declarations.md:184
msgid "`as` renames"
msgstr ""

#: src/items/use-declarations.md:186
msgid ""
"The `as` keyword can be used to change the name of an imported entity. For "
"example:"
msgstr ""

#: src/items/use-declarations.md:190
msgid "// Creates a non-public alias `bar` for the function `foo`.\n"
msgstr ""

#: src/items/use-declarations.md:200
msgid "Brace syntax"
msgstr ""

#: src/items/use-declarations.md:204
msgid ""
"Braces can be used in the last segment of the path to import multiple "
"entities from the previous segment, or, if there are no previous segments, "
"from the current scope. Braces can be nested, creating a tree of paths, "
"where each grouping of segments is logically combined with its parent to "
"create a full path."
msgstr ""

#: src/items/use-declarations.md:208
msgid ""
"// Creates bindings to:\n"
"// - `std::collections::BTreeSet`\n"
"// - `std::collections::hash_map`\n"
"// - `std::collections::hash_map::HashMap`\n"
msgstr ""

#: src/items/use-declarations.md:217
msgid ""
"An empty brace does not import anything, though the leading path is "
"validated that it is accessible."
msgstr ""

#: src/items/use-declarations.md:222
msgid ""
"**Edition differences**: In the 2015 edition, paths are relative to the "
"crate root, so an import such as `use {foo, bar};` will import the names "
"`foo` and `bar` from the crate root, whereas starting in 2018, those names "
"are relative to the current scope."
msgstr ""

#: src/items/use-declarations.md:226
msgid "`self` imports"
msgstr ""

#: src/items/use-declarations.md:230
msgid ""
"The keyword `self` may be used within [brace syntax](#brace-syntax) to "
"create a binding of the parent entity under its own name."
msgstr ""

#: src/items/use-declarations.md:238
msgid "// Creates a binding for `stuff` and `foo`.\n"
msgstr ""

#: src/items/use-declarations.md:250
msgid ""
"`self` only creates a binding from the [type namespace](../names/"
"namespaces.md) of the parent entity. For example, in the following, only the "
"`foo` mod is imported:"
msgstr ""

#: src/items/use-declarations.md:258
msgid ""
"// This only imports the module `foo`. The function `foo` lives in\n"
"// the value namespace and is not imported.\n"
msgstr ""

#: src/items/use-declarations.md:264
msgid "//~ ERROR `foo` is a module\n"
msgstr ""

#: src/items/use-declarations.md:268
msgid ""
"**Note**: `self` may also be used as the first segment of a path. The usage "
"of `self` as the first segment and inside a `use` brace is logically the "
"same; it means the current module of the parent segment, or the current "
"module if there is no parent segment. See [`self`](../paths.md#self) in the "
"paths chapter for more information on the meaning of a leading `self`."
msgstr ""

#: src/items/use-declarations.md:274
msgid "Glob imports"
msgstr ""

#: src/items/use-declarations.md:278
msgid ""
"The `*` character may be used as the last segment of a `use` path to import "
"all importable entities from the entity of the preceding segment. For "
"example:"
msgstr ""

#: src/items/use-declarations.md:282
msgid "// Creates a non-public alias to `bar`.\n"
msgstr ""

#: src/items/use-declarations.md:292
msgid ""
"// Creates local aliases to `V1` and `V2`\n"
"        // of the `Example` enum.\n"
msgstr ""

#: src/items/use-declarations.md:302
msgid ""
"Items and named imports are allowed to shadow names from glob imports in the "
"same [namespace](../names/namespaces.md). That is, if there is a name "
"already defined by another item in the same namespace, the glob import will "
"be shadowed. For example:"
msgstr ""

#: src/items/use-declarations.md:307
msgid ""
"// This creates a binding to the `clashing::Foo` tuple struct\n"
"// constructor, but does not import its type because that would\n"
"// conflict with the `Foo` struct defined here.\n"
"//\n"
"// Note that the order of definition here is unimportant.\n"
msgstr ""

#: src/items/use-declarations.md:318
msgid "// Uses the constructor from `clashing::Foo`.\n"
msgstr ""

#: src/items/use-declarations.md:320
msgid ""
"// The struct expression uses the type from\n"
"    // the `Foo` struct defined above.\n"
msgstr ""

#: src/items/use-declarations.md:323
msgid "// `Bar` is also in scope due to the glob import.\n"
msgstr ""

#: src/items/use-declarations.md:335
msgid "`*` cannot be used as the first or intermediate segments."
msgstr ""

#: src/items/use-declarations.md:339
msgid ""
"`*` cannot be used to import a module's contents into itself (such as `use "
"self::*;`)."
msgstr ""

#: src/items/use-declarations.md:343
msgid ""
"**Edition differences**: In the 2015 edition, paths are relative to the "
"crate root, so an import such as `use *;` is valid, and it means to import "
"everything from the crate root. This cannot be used in the crate root itself."
msgstr ""

#: src/items/use-declarations.md:352
msgid ""
"Items can be imported without binding to a name by using an underscore with "
"the form `use path as _`. This is particularly useful to import a trait so "
"that its methods may be used without importing the trait's symbol, for "
"example if the trait's symbol may conflict with another symbol. Another "
"example is to link an external crate without importing its name."
msgstr ""

#: src/items/use-declarations.md:360
msgid ""
"Asterisk glob imports will import items imported with `_` in their "
"unnameable form."
msgstr ""

#: src/items/use-declarations.md:373
msgid "// Underscore import avoids name conflict with this item.\n"
msgstr ""

#: src/items/use-declarations.md:383
msgid ""
"The unique, unnameable symbols are created after macro expansion so that "
"macros may safely emit multiple references to `_` imports. For example, the "
"following should not produce an error:"
msgstr ""

#: src/items/use-declarations.md:392
msgid ""
"// This expands to:\n"
"// use std as _;\n"
"// use std as _;\n"
msgstr ""

#: src/items/use-declarations.md:400 src/items/enumerations.md:207
msgid "Restrictions"
msgstr ""

#: src/items/use-declarations.md:402
msgid "The following are restrictions for valid `use` declarations:"
msgstr ""

#: src/items/use-declarations.md:406
msgid ""
"`use crate;` must use `as` to define the name to which to bind the crate "
"root."
msgstr ""

#: src/items/use-declarations.md:410
msgid ""
"`use {self};` is an error; there must be a leading segment when using `self`."
msgstr ""

#: src/items/use-declarations.md:414
msgid ""
"As with any item definition, `use` imports cannot create duplicate bindings "
"of the same name in the same namespace in a module or block."
msgstr ""

#: src/items/use-declarations.md:418
msgid ""
"`use` paths with `$crate` are not allowed in a [`macro_rules`](../macros-by-"
"example.md) expansion."
msgstr ""

#: src/items/use-declarations.md:422
msgid ""
"`use` paths cannot refer to enum variants through a [type alias](type-"
"aliases.md). For example:"
msgstr ""

#: src/items/use-declarations.md:429
msgid "//~ OK\n"
msgstr ""

#: src/items/use-declarations.md:430 src/patterns.md:379 src/patterns.md:380
#: src/patterns.md:381 src/patterns.md:393
msgid "//~ ERROR\n"
msgstr ""

#: src/items/use-declarations.md:435
msgid "Ambiguities"
msgstr ""

#: src/items/use-declarations.md:437
msgid "**Note**: This section is incomplete."
msgstr ""

#: src/items/use-declarations.md:441
msgid ""
"Some situations are an error when there is an ambiguity as to which name a "
"`use` declaration refers. This happens when there are two name candidates "
"that do not resolve to the same entity."
msgstr ""

#: src/items/use-declarations.md:445
msgid ""
"Glob imports are allowed to import conflicting names in the same namespace "
"as long as the name is not used. For example:"
msgstr ""

#: src/items/use-declarations.md:458
msgid "//~ OK, no name conflict.\n"
msgstr ""

#: src/items/use-declarations.md:461
msgid ""
"// This would be an error, due to the ambiguity.\n"
"    //let x = Qux;\n"
msgstr ""

#: src/items/use-declarations.md:466
msgid ""
"Multiple glob imports are allowed to import the same name, and that name is "
"allowed to be used, if the imports are of the same item (following re-"
"exports). The visibility of the name is the maximum visibility of the "
"imports. For example:"
msgstr ""

#: src/items/use-declarations.md:476
msgid ""
"// These both import the same `Qux`. The visibility of `Qux`\n"
"// is `pub` because that is the maximum visibility between\n"
"// these two `use` declarations.\n"
msgstr ""

#: src/items/functions.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Function_ :  \n"
"   _FunctionQualifiers_ `fn` [IDENTIFIER](../"
"identifiers.md) [_GenericParams_](generics.md)<sup>?</sup>  \n"
"      `(` _FunctionParameters_<sup>?</sup> `)`  \n"
"      _FunctionReturnType_<sup>?</sup> [_WhereClause_](generics.md#where-"
"clauses)<sup>?</sup>  \n"
"      ( [_BlockExpression_](../expressions/block-expr.md) | `;` )"
msgstr ""

#: src/items/functions.md:14
msgid ""
"_FunctionQualifiers_ :  \n"
"   `const`<sup>?</sup> `async`[^async-edition]<sup>?</sup> _ItemSafety_<sup>?"
"</sup>[^extern-qualifiers] (`extern` _Abi_<sup>?</sup>)<sup>?</sup>"
msgstr ""

#: src/items/functions.md:17
msgid ""
"_ItemSafety_ :  \n"
"   `safe`[^extern-safe] | `unsafe`"
msgstr ""

#: src/items/functions.md:20
msgid ""
"_Abi_ :  \n"
"   [STRING_LITERAL](../tokens.md#string-literals) | [RAW_STRING_LITERAL](../"
"tokens.md#raw-string-literals)"
msgstr ""

#: src/items/functions.md:23
msgid ""
"_FunctionParameters_ :  \n"
"      _SelfParam_ `,`<sup>?</sup>  \n"
"   | (_SelfParam_ `,`)<sup>?</sup> _FunctionParam_ (`,` "
"_FunctionParam_)<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/items/functions.md:27
msgid ""
"_SelfParam_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> ( _ShorthandSelf_ | "
"_TypedSelf_ )"
msgstr ""

#: src/items/functions.md:30
msgid ""
"_ShorthandSelf_ :  \n"
"    (`&` | `&` [_Lifetime_](../trait-bounds.md))<sup>?</sup> `mut`<sup>?</"
"sup> `self`"
msgstr ""

#: src/items/functions.md:33
msgid ""
"_TypedSelf_ :  \n"
"   `mut`<sup>?</sup> `self` `:` [_Type_](../types.md#type-expressions)"
msgstr ""

#: src/items/functions.md:36
msgid ""
"_FunctionParam_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> "
"( _FunctionParamPattern_ | `...` | [_Type_](../types.md#type-expressions) "
"[^fn-param-2015] )"
msgstr ""

#: src/items/functions.md:41
msgid ""
"_FunctionParamPattern_ :  \n"
"   [_PatternNoTopAlt_](../patterns.md) `:` ( [_Type_](../types.md#type-"
"expressions) | `...` )"
msgstr ""

#: src/items/functions.md:44
msgid ""
"_FunctionReturnType_ :  \n"
"   `->` [_Type_](../types.md#type-expressions)"
msgstr ""

#: src/items/functions.md:47 src/expressions/closure-expr.md:20
msgid "The `async` qualifier is not allowed in the 2015 edition."
msgstr ""

#: src/items/functions.md:49
msgid ""
"The `safe` function qualifier is only allowed semantically within `extern` "
"blocks."
msgstr ""

#: src/items/functions.md:52
msgid ""
"_Relevant to editions earlier than Rust 2024_: Within `extern` blocks, the "
"`safe` or `unsafe` function qualifier is only allowed when the `extern` is "
"qualified as `unsafe`."
msgstr ""

#: src/items/functions.md:56
msgid ""
"Function parameters with only a type are only allowed in an associated "
"function of a [trait item](traits.md) in the 2015 edition."
msgstr ""

#: src/items/functions.md:61
msgid ""
"A _function_ consists of a [block](../expressions/block-expr.md) (that's the "
"_body_ of the function), along with a name, a set of parameters, and an "
"output type. Other than a name, all these are optional."
msgstr ""

#: src/items/functions.md:67
msgid ""
"Functions are declared with the keyword `fn` which defines the given name in "
"the [value namespace](../names/namespaces.md) of the module or block where "
"it is located."
msgstr ""

#: src/items/functions.md:71
msgid ""
"Functions may declare a set of _input_ [_variables_](../variables.md) as "
"parameters, through which the caller passes arguments into the function, and "
"the _output_ [_type_](../types.md#type-expressions) of the value the "
"function will return to its caller on completion."
msgstr ""

#: src/items/functions.md:75
msgid ""
"If the output type is not explicitly stated, it is the [unit type](../types/"
"tuple.md)."
msgstr ""

#: src/items/functions.md:79
msgid ""
"When referred to, a _function_ yields a first-class _value_ of the "
"corresponding zero-sized [_function item type_](../types/function-item.md), "
"which when called evaluates to a direct call to the function."
msgstr ""

#: src/items/functions.md:81
msgid "For example, this is a simple function:"
msgstr ""

#: src/items/functions.md:90
msgid ""
"The `safe` function is semantically only allowed when used in an [`extern` "
"block](external-blocks.md)."
msgstr ""

#: src/items/functions.md:94
msgid "Function parameters"
msgstr ""

#: src/items/functions.md:98
msgid ""
"Function parameters are irrefutable [patterns](../patterns.md), so any "
"pattern that is valid in an else-less `let` binding is also valid as a "
"parameter:"
msgstr ""

#: src/items/functions.md:107
msgid ""
"If the first parameter is a _SelfParam_, this indicates that the function is "
"a [method](associated-items.md#methods)."
msgstr ""

#: src/items/functions.md:112
msgid ""
"Functions with a self parameter may only appear as an [associated function]"
"(associated-items.md#associated-functions-and-methods) in a [trait]"
"(traits.md) or [implementation](implementations.md)."
msgstr ""

#: src/items/functions.md:117
msgid ""
"A parameter with the `...` token indicates a [variadic function](external-"
"blocks.md#variadic-functions), and may only be used as the last parameter of "
"an [external block](external-blocks.md) function. The variadic parameter may "
"have an optional identifier, such as `args: ...`."
msgstr ""

#: src/items/functions.md:123
msgid "Function body"
msgstr ""

#: src/items/functions.md:127
msgid ""
"The body block of a function is conceptually wrapped in another block that "
"first binds the argument patterns and then `return`s the value of the "
"function's body. This means that the tail expression of the block, if "
"evaluated, ends up being returned to the caller. As usual, an explicit "
"return expression within the body of the function will short-cut that "
"implicit return, if reached."
msgstr ""

#: src/items/functions.md:133
msgid "For example, the function above behaves as if it was written as:"
msgstr ""

#: src/items/functions.md:137
msgid "// argument_0 is the actual first argument passed from the caller\n"
msgstr ""

#: src/items/functions.md:146
msgid ""
"Functions without a body block are terminated with a semicolon. This form "
"may only appear in a [trait](traits.md) or [external block](external-"
"blocks.md)."
msgstr ""

#: src/items/functions.md:151
msgid "Generic functions"
msgstr ""

#: src/items/functions.md:155
msgid ""
"A _generic function_ allows one or more _parameterized types_ to appear in "
"its signature. Each type parameter must be explicitly declared in an angle-"
"bracket-enclosed and comma-separated list, following the function name."
msgstr ""

#: src/items/functions.md:160
msgid "// foo is generic over A and B\n"
msgstr ""

#: src/items/functions.md:168
msgid ""
"Inside the function signature and body, the name of the type parameter can "
"be used as a type name."
msgstr ""

#: src/items/functions.md:173
msgid ""
"[Trait](traits.md) bounds can be specified for type parameters to allow "
"methods with that trait to be called on values of that type. This is "
"specified using the `where` syntax:"
msgstr ""

#: src/items/functions.md:185
msgid ""
"When a generic function is referenced, its type is instantiated based on the "
"context of the reference. For example, calling the `foo` function here:"
msgstr ""

#: src/items/functions.md:192
msgid "// details elided\n"
msgstr ""

#: src/items/functions.md:198
msgid "will instantiate type parameter `T` with `i32`."
msgstr ""

#: src/items/functions.md:202
msgid ""
"The type parameters can also be explicitly supplied in a trailing [path](../"
"paths.md) component after the function name. This might be necessary if "
"there is not sufficient context to determine the type parameters. For "
"example, `mem::size_of::<u32>() == 4`."
msgstr ""

#: src/items/functions.md:209
msgid "Extern function qualifier"
msgstr ""

#: src/items/functions.md:213
msgid ""
"The `extern` function qualifier allows providing function _definitions_ that "
"can be called with a particular ABI:"
msgstr ""

#: src/items/functions.md:218 src/items/functions.md:229
msgid "\"ABI\""
msgstr ""

#: src/items/functions.md:223
msgid ""
"These are often used in combination with [external block](external-"
"blocks.md) items which provide function _declarations_ that can be used to "
"call functions without providing their _definition_:"
msgstr ""

#: src/items/functions.md:230 src/items/functions.md:231
msgid "/* no body */"
msgstr ""

#: src/items/functions.md:239
msgid ""
"When `\"extern\" Abi?*` is omitted from `FunctionQualifiers` in function "
"items, the ABI `\"Rust\"` is assigned. For example:"
msgstr ""

#: src/items/functions.md:246 src/items/functions.md:277
#: src/expressions/block-expr.md:209
msgid "is equivalent to:"
msgstr ""

#: src/items/functions.md:249 src/expressions/call-expr.md:41
msgid "\"Rust\""
msgstr ""

#: src/items/functions.md:254
msgid ""
"Functions can be called by foreign code, and using an ABI that differs from "
"Rust allows, for example, to provide functions that can be called from other "
"programming languages like C:"
msgstr ""

#: src/items/functions.md:259
msgid "// Declares a function with the \"C\" ABI\n"
msgstr ""

#: src/items/functions.md:260 src/items/functions.md:280
#: src/items/functions.md:281 src/items/external-blocks.md:198
#: src/types/never.md:31 src/inline-assembly.md:354 src/inline-assembly.md:359
#: src/inline-assembly.md:494 src/inline-assembly.md:509
#: src/inline-assembly.md:916 src/inline-assembly.md:921
#: src/inline-assembly.md:946 src/inline-assembly.md:959
#: src/inline-assembly.md:969 src/abi.md:74
msgid "\"C\""
msgstr ""

#: src/items/functions.md:261
msgid "// Declares a function with the \"stdcall\" ABI\n"
msgstr ""

#: src/items/functions.md:263 src/items/external-blocks.md:125
#: src/items/external-blocks.md:495
msgid "\"x86\""
msgstr ""

#: src/items/functions.md:264 src/items/external-blocks.md:127
#: src/items/external-blocks.md:497
msgid "\"stdcall\""
msgstr ""

#: src/items/functions.md:269
msgid ""
"Just as with [external block](external-blocks.md), when the `extern` keyword "
"is used and the `\"ABI\"` is omitted, the ABI used defaults to `\"C\"`. That "
"is, this:"
msgstr ""

#: src/items/functions.md:286
msgid ""
"Functions with an ABI that differs from `\"Rust\"` do not support unwinding "
"in the exact same way that Rust does. Therefore, unwinding past the end of "
"functions with such ABIs causes the process to abort."
msgstr ""

#: src/items/functions.md:290
msgid ""
"**Note**: The LLVM backend of the `rustc` implementation aborts the process "
"by executing an illegal instruction."
msgstr ""

#: src/items/functions.md:295
msgid "Const functions"
msgstr ""

#: src/items/functions.md:299
msgid ""
"Functions qualified with the `const` keyword are [const functions](../"
"const_eval.md#const-functions), as are [tuple struct](structs.md) and [tuple "
"variant](enumerations.md) constructors. _Const functions_  can be called "
"from within [const contexts](../const_eval.md#const-context)."
msgstr ""

#: src/items/functions.md:305
msgid ""
"Const functions may use the [`extern`](#extern-function-qualifier) function "
"qualifier."
msgstr ""

#: src/items/functions.md:309
msgid "Const functions are not allowed to be [async](#async-functions)."
msgstr ""

#: src/items/functions.md:313
msgid "Async functions"
msgstr ""

#: src/items/functions.md:317
msgid ""
"Functions may be qualified as async, and this can also be combined with the "
"`unsafe` qualifier:"
msgstr ""

#: src/items/functions.md:327
msgid ""
"Async functions do no work when called: instead, they capture their "
"arguments into a future. When polled, that future will execute the "
"function's body."
msgstr ""

#: src/items/functions.md:333
msgid ""
"An async function is roughly equivalent to a function that returns [`impl "
"Future`](../types/impl-trait.md) and with an [`async move` block](../"
"expressions/block-expr.md#async-blocks) as its body:"
msgstr ""

#: src/items/functions.md:338
msgid "// Source\n"
msgstr ""

#: src/items/functions.md:344
msgid "is roughly equivalent to:"
msgstr ""

#: src/items/functions.md:347
msgid "// Desugared\n"
msgstr ""

#: src/items/functions.md:356
msgid "The actual desugaring is more complex:"
msgstr ""

#: src/items/functions.md:360
msgid ""
"The return type in the desugaring is assumed to capture all lifetime "
"parameters from the `async fn` declaration. This can be seen in the "
"desugared example above, which explicitly outlives, and hence captures, `'a`."
msgstr ""

#: src/items/functions.md:367
msgid ""
"The [`async move` block](../expressions/block-expr.md#async-blocks) in the "
"body captures all function parameters, including those that are unused or "
"bound to a `_` pattern. This ensures that function parameters are dropped in "
"the same order as they would be if the function were not async, except that "
"the drop occurs when the returned future has been fully awaited."
msgstr ""

#: src/items/functions.md:374
msgid ""
"For more information on the effect of async, see [`async` blocks](../"
"expressions/block-expr.md#async-blocks)."
msgstr ""

#: src/items/functions.md:381
msgid ""
"**Edition differences**: Async functions are only available beginning with "
"Rust 2018."
msgstr ""

#: src/items/functions.md:386
msgid "Combining `async` and `unsafe`"
msgstr ""

#: src/items/functions.md:390
msgid ""
"It is legal to declare a function that is both async and unsafe. The "
"resulting function is unsafe to call and (like any async function) returns a "
"future. This future is just an ordinary future and thus an `unsafe` context "
"is not required to \"await\" it:"
msgstr ""

#: src/items/functions.md:396
msgid ""
"// Returns a future that, when awaited, dereferences `x`.\n"
"//\n"
"// Soundness condition: `x` must be safe to dereference until\n"
"// the resulting future is complete.\n"
msgstr ""

#: src/items/functions.md:405
msgid "// An `unsafe` block is required to invoke the function initially:\n"
msgstr ""

#: src/items/functions.md:409
msgid ""
"// But no `unsafe` block required here. This will\n"
"    // read the value of `p`:\n"
msgstr ""

#: src/items/functions.md:415
msgid ""
"Note that this behavior is a consequence of the desugaring to a function "
"that returns an `impl Future` -- in this case, the function we desugar to is "
"an `unsafe` function, but the return value remains the same."
msgstr ""

#: src/items/functions.md:420
msgid ""
"Unsafe is used on an async function in precisely the same way that it is "
"used on other functions: it indicates that the function imposes some "
"additional obligations on its caller to ensure soundness. As in any other "
"unsafe function, these conditions may extend beyond the initial call itself "
"-- in the snippet above, for example, the `unsafe_example` function took a "
"pointer `x` as argument, and then (when awaited) dereferenced that pointer. "
"This implies that `x` would have to be valid until the future is finished "
"executing, and it is the caller's responsibility to ensure that."
msgstr ""

#: src/items/functions.md:432
msgid "Attributes on functions"
msgstr ""

#: src/items/functions.md:436
msgid ""
"[Outer attributes](../attributes.md) are allowed on functions. [Inner "
"attributes](../attributes.md) are allowed directly after the `{` inside its "
"body [block](../expressions/block-expr.md)."
msgstr ""

#: src/items/functions.md:439
msgid ""
"This example shows an inner attribute on a function. The function is "
"documented with just the word \"Example\"."
msgstr ""

#: src/items/functions.md:444
msgid "\"Example\""
msgstr ""

#: src/items/functions.md:448
msgid ""
"Note: Except for lints, it is idiomatic to only use outer attributes on "
"function items."
msgstr ""

#: src/items/functions.md:453
msgid ""
"The attributes that have meaning on a function are [`cfg`](../conditional-"
"compilation.md#the-cfg-attribute), [`cfg_attr`](../conditional-"
"compilation.md#the-cfg_attr-attribute), [`deprecated`](../attributes/"
"diagnostics.md#the-deprecated-attribute), [`doc`](../../rustdoc/the-doc-"
"attribute.html), [`export_name`](../abi.md#the-export_name-attribute), "
"[`link_section`](../abi.md#the-link_section-attribute), [`no_mangle`](../"
"abi.md#the-no_mangle-attribute), [the lint check attributes](../attributes/"
"diagnostics.md#lint-check-attributes), [`must_use`](../attributes/"
"diagnostics.md#the-must_use-attribute), [the procedural macro attributes](../"
"procedural-macros.md), [the testing attributes](../attributes/testing.md), "
"and [the optimization hint attributes](../attributes/codegen.md#optimization-"
"hints). Functions also accept attributes macros."
msgstr ""

#: src/items/functions.md:461 src/items/external-blocks.md:515
msgid "Attributes on function parameters"
msgstr ""

#: src/items/functions.md:465
msgid ""
"[Outer attributes](../attributes.md) are allowed on function parameters and "
"the permitted [built-in attributes](../attributes.md#built-in-attributes-"
"index) are restricted to `cfg`, `cfg_attr`, `allow`, `warn`, `deny`, and "
"`forbid`."
msgstr ""

#: src/items/functions.md:480
msgid ""
"Inert helper attributes used by procedural macro attributes applied to items "
"are also allowed but be careful to not include these inert attributes in "
"your final `TokenStream`."
msgstr ""

#: src/items/functions.md:483
msgid ""
"For example, the following code defines an inert `some_inert_attribute` "
"attribute that is not formally defined anywhere and the "
"`some_proc_macro_attribute` procedural macro is responsible for detecting "
"its presence and removing it from the output token stream."
msgstr ""

#: src/items/type-aliases.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TypeAlias_ :  \n"
"   `type` [IDENTIFIER](../identifiers.md) [_GenericParams_]"
"(generics.md)<sup>?</sup> ( `:` [_TypeParamBounds_](../trait-"
"bounds.md) )<sup>?</sup> [_WhereClause_](generics.md#where-clauses)<sup>?</"
"sup> ( `=` [_Type_](../types.md#type-expressions) [_WhereClause_]"
"(generics.md#where-clauses)<sup>?</sup>)<sup>?</sup> `;`"
msgstr ""

#: src/items/type-aliases.md:15
msgid ""
"A _type alias_ defines a new name for an existing [type](../types.md) in the "
"[type namespace](../names/namespaces.md) of the module or block where it is "
"located. Type aliases are declared with the keyword `type`. Every value has "
"a single, specific type, but may implement several different traits, and may "
"be compatible with several different type constraints."
msgstr ""

#: src/items/type-aliases.md:19
msgid ""
"For example, the following defines the type `Point` as a synonym for the "
"type `(u8, u8)`, the type of pairs of unsigned 8 bit integers:"
msgstr ""

#: src/items/type-aliases.md:29
msgid ""
"A type alias to a tuple-struct or unit-struct cannot be used to qualify that "
"type's constructor:"
msgstr ""

#: src/items/type-aliases.md:38
msgid "// Doesn't work\n"
msgstr ""

#: src/items/type-aliases.md:43
msgid ""
"A type alias, when not used as an [associated type](associated-"
"items.md#associated-types), must include a [_Type_](../types.md#type-"
"expressions) and may not include [_TypeParamBounds_](../trait-bounds.md)."
msgstr ""

#: src/items/type-aliases.md:48
msgid ""
"A type alias, when used as an [associated type](associated-"
"items.md#associated-types) in a [trait](traits.md), must not include a "
"[_Type_](../types.md#type-expressions) specification but may include "
"[_TypeParamBounds_](../trait-bounds.md)."
msgstr ""

#: src/items/type-aliases.md:53
msgid ""
"A type alias, when used as an [associated type](associated-"
"items.md#associated-types) in a [trait impl](implementations.md#trait-"
"implementations), must include a [_Type_](../types.md#type-expressions) "
"specification and may not include [_TypeParamBounds_](../trait-bounds.md)."
msgstr ""

#: src/items/type-aliases.md:58
msgid ""
"Where clauses before the equals sign on a type alias in a [trait impl]"
"(implementations.md#trait-implementations) (like `type TypeAlias<T> where T: "
"Foo = Bar<T>`) are deprecated. Where clauses after the equals sign (like "
"`type TypeAlias<T> = Bar<T> where T: Foo`) are preferred."
msgstr ""

#: src/items/structs.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Struct_ :  \n"
"      _StructStruct_  \n"
"   | _TupleStruct_"
msgstr ""

#: src/items/structs.md:12
msgid ""
"_StructStruct_ :  \n"
"   `struct` [IDENTIFIER](../identifiers.md)  [_GenericParams_]"
"(generics.md)<sup>?</sup> [_WhereClause_](generics.md#where-clauses)<sup>?</"
"sup> ( `{` _StructFields_<sup>?</sup> `}` | `;` )"
msgstr ""

#: src/items/structs.md:19
msgid ""
"_TupleStruct_ :  \n"
"   `struct` [IDENTIFIER](../identifiers.md)  [_GenericParams_]"
"(generics.md)<sup>?</sup> `(` _TupleFields_<sup>?</sup> `)` [_WhereClause_]"
"(generics.md#where-clauses)<sup>?</sup> `;`"
msgstr ""

#: src/items/structs.md:27
msgid ""
"_StructFields_ :  \n"
"   _StructField_ (`,` _StructField_)<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/items/structs.md:30
msgid ""
"_StructField_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"   [_Visibility_](../visibility-and-privacy.md)<sup>?</sup>  \n"
"   [IDENTIFIER](../identifiers.md) `:` [_Type_](../types.md#type-expressions)"
msgstr ""

#: src/items/structs.md:35
msgid ""
"_TupleFields_ :  \n"
"   _TupleField_ (`,` _TupleField_)<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/items/structs.md:38
msgid ""
"_TupleField_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"   [_Visibility_](../visibility-and-privacy.md)<sup>?</sup>  \n"
"   [_Type_](../types.md#type-expressions)"
msgstr ""

#: src/items/structs.md:45
msgid ""
"A _struct_ is a nominal [struct type](../types/struct.md) defined with the "
"keyword `struct`."
msgstr ""

#: src/items/structs.md:49
msgid ""
"A struct declaration defines the given name in the [type namespace](../names/"
"namespaces.md) of the module or block where it is located."
msgstr ""

#: src/items/structs.md:51
msgid "An example of a `struct` item and its use:"
msgstr ""

#: src/items/structs.md:61
msgid ""
"A _tuple struct_ is a nominal [tuple type](../types/tuple.md), and is also "
"defined with the keyword `struct`. In addition to defining a type, it also "
"defines a constructor of the same name in the [value namespace](../names/"
"namespaces.md). The constructor is a function which can be called to create "
"a new instance of the struct. For example:"
msgstr ""

#: src/items/structs.md:74
msgid ""
"A _unit-like struct_ is a struct without any fields, defined by leaving off "
"the list of fields entirely. Such a struct implicitly defines a [constant]"
"(constant-items.md) of its type with the same name. For example:"
msgstr ""

#: src/items/structs.md:83 src/expressions/loop-expr.md:143
#: src/expressions/loop-expr.md:223 src/expressions/if-expr.md:147
msgid "is equivalent to"
msgstr ""

#: src/items/structs.md:93
msgid ""
"The precise memory layout of a struct is not specified. One can specify a "
"particular layout using the [`repr` attribute](../type-"
"layout.md#representations)."
msgstr ""

#: src/items/enumerations.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Enumeration_ :  \n"
"   `enum` [IDENTIFIER](../identifiers.md)  [_GenericParams_]"
"(generics.md)<sup>?</sup> [_WhereClause_](generics.md#where-clauses)<sup>?</"
"sup> `{` _EnumItems_<sup>?</sup> `}`"
msgstr ""

#: src/items/enumerations.md:15
msgid ""
"_EnumItems_ :  \n"
"   _EnumItem_ ( `,` _EnumItem_ )<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/items/enumerations.md:18
msgid ""
"_EnumItem_ :  \n"
"   _OuterAttribute_<sup>\\*</sup> [_Visibility_](../visibility-and-"
"privacy.md)<sup>?</sup>  \n"
"   [IDENTIFIER](../identifiers.md) ( _EnumItemTuple_ | "
"_EnumItemStruct_ )<sup>?</sup> _EnumItemDiscriminant_<sup>?</sup>"
msgstr ""

#: src/items/enumerations.md:23
msgid ""
"_EnumItemTuple_ :  \n"
"   `(` [_TupleFields_](structs.md)<sup>?</sup> `)`"
msgstr ""

#: src/items/enumerations.md:26
msgid ""
"_EnumItemStruct_ :  \n"
"   `{` [_StructFields_](structs.md)<sup>?</sup> `}`"
msgstr ""

#: src/items/enumerations.md:29
msgid ""
"_EnumItemDiscriminant_ :  \n"
"   `=` [_Expression_](../expressions.md)"
msgstr ""

#: src/items/enumerations.md:34
msgid ""
"An _enumeration_, also referred to as an _enum_, is a simultaneous "
"definition of a nominal [enumerated type](../types/enum.md) as well as a set "
"of _constructors_, that can be used to create or pattern-match values of the "
"corresponding enumerated type."
msgstr ""

#: src/items/enumerations.md:40
msgid "Enumerations are declared with the keyword `enum`."
msgstr ""

#: src/items/enumerations.md:44
msgid ""
"The `enum` declaration defines the enumeration type in the [type namespace]"
"(../names/namespaces.md) of the module or block where it is located."
msgstr ""

#: src/items/enumerations.md:46
msgid "An example of an `enum` item and its use:"
msgstr ""

#: src/items/enumerations.md:60
msgid "Enum constructors can have either named or unnamed fields:"
msgstr ""

#: src/items/enumerations.md:68
msgid "\"Cocoa\""
msgstr ""

#: src/items/enumerations.md:69
msgid "\"Spotty\""
msgstr ""

#: src/items/enumerations.md:72
msgid ""
"In this example, `Cat` is a _struct-like enum variant_, whereas `Dog` is "
"simply called an enum variant."
msgstr ""

#: src/items/enumerations.md:77
msgid ""
"An enum where no constructors contain fields are called a _<span id=\"field-"
"less-enum\">field-less enum</span>_. For example, this is a fieldless enum:"
msgstr ""

#: src/items/enumerations.md:90
msgid ""
"If a field-less enum only contains unit variants, the enum is called an "
"_<span id=\"unit-only-enum\">unit-only enum</span>_. For example:"
msgstr ""

#: src/items/enumerations.md:103
msgid ""
"Variant constructors are similar to [struct](structs.md) definitions, and "
"can be referenced by a path from the enumeration name, including in [use "
"declarations](use-declarations.md)."
msgstr ""

#: src/items/enumerations.md:107
msgid ""
"Each variant defines its type in the [type namespace](../names/"
"namespaces.md), though that type cannot be used as a type specifier. Tuple-"
"like and unit-like variants also define a constructor in the [value "
"namespace](../names/namespaces.md)."
msgstr ""

#: src/items/enumerations.md:112
msgid ""
"A struct-like variant can be instantiated with a [struct expression](../"
"expressions/struct-expr.md)."
msgstr ""

#: src/items/enumerations.md:116
msgid ""
"A tuple-like variant can be instantiated with a [call expression](../"
"expressions/call-expr.md) or a [struct expression](../expressions/struct-"
"expr.md)."
msgstr ""

#: src/items/enumerations.md:120
msgid ""
"A unit-like variant can be instantiated with a [path expression](../"
"expressions/path-expr.md) or a [struct expression](../expressions/struct-"
"expr.md). For example:"
msgstr ""

#: src/items/enumerations.md:130
msgid "// Creates aliases to all variants.\n"
msgstr ""

#: src/items/enumerations.md:131
msgid "// Path expression of the const item.\n"
msgstr ""

#: src/items/enumerations.md:132 src/items/enumerations.md:135
msgid "// Struct expression.\n"
msgstr ""

#: src/items/enumerations.md:133
msgid "// Call expression.\n"
msgstr ""

#: src/items/enumerations.md:134
msgid "// Struct expression using integer field names.\n"
msgstr ""

#: src/items/enumerations.md:138
msgid ""
"<span id=\"custom-discriminant-values-for-fieldless-enumerations\"></span>"
msgstr ""

#: src/items/enumerations.md:141
msgid "Discriminants"
msgstr ""

#: src/items/enumerations.md:145
msgid ""
"Each enum instance has a _discriminant_: an integer logically associated to "
"it that is used to determine which variant it holds."
msgstr ""

#: src/items/enumerations.md:150
msgid ""
"Under the [`Rust` representation](../type-layout.md#the-rust-"
"representation), the discriminant is interpreted as an `isize` value. "
"However, the compiler is allowed to use a smaller type (or another means of "
"distinguishing variants) in its actual memory layout."
msgstr ""

#: src/items/enumerations.md:154
msgid "Assigning discriminant values"
msgstr ""

#: src/items/enumerations.md:158
msgid "Explicit discriminants"
msgstr ""

#: src/items/enumerations.md:162
msgid ""
"In two circumstances, the discriminant of a variant may be explicitly set by "
"following the variant name with `=` and a [constant expression](../"
"const_eval.md#constant-expressions):"
msgstr ""

#: src/items/enumerations.md:167
msgid "if the enumeration is \"[unit-only](#unit-only-enum)\"."
msgstr ""

#: src/items/enumerations.md:171
msgid ""
"if a [primitive representation](../type-layout.md#primitive-representations) "
"is used. For example:"
msgstr ""

#: src/items/enumerations.md:187
msgid "Implicit discriminants"
msgstr ""

#: src/items/enumerations.md:189
msgid ""
"If a discriminant for a variant is not specified, then it is set to one "
"higher than the discriminant of the previous variant in the declaration. If "
"the discriminant of the first variant in the declaration is unspecified, "
"then it is set to zero."
msgstr ""

#: src/items/enumerations.md:196 src/items/enumerations.md:220
msgid "// 0\n"
msgstr ""

#: src/items/enumerations.md:197
msgid "// 123\n"
msgstr ""

#: src/items/enumerations.md:198
msgid "// 124\n"
msgstr ""

#: src/items/enumerations.md:211
msgid "It is an error when two variants share the same discriminant."
msgstr ""

#: src/items/enumerations.md:221
msgid "// 1\n"
msgstr ""

#: src/items/enumerations.md:222
msgid "// 1 (collision with previous!)\n"
msgstr ""

#: src/items/enumerations.md:228
msgid ""
"It is also an error to have an unspecified discriminant where the previous "
"discriminant is the maximum value for the size of the discriminant."
msgstr ""

#: src/items/enumerations.md:235 src/items/enumerations.md:242
msgid "// Would be 256, but that overflows the enum.\n"
msgstr ""

#: src/items/enumerations.md:240
msgid "// 254\n"
msgstr ""

#: src/items/enumerations.md:241
msgid "// 255\n"
msgstr ""

#: src/items/enumerations.md:246
msgid "Accessing discriminant"
msgstr ""

#: src/items/enumerations.md:248
msgid "Via `mem::discriminant`"
msgstr ""

#: src/items/enumerations.md:253
msgid ""
"[`std::mem::discriminant`](../../core/mem/fn.discriminant.html) returns an "
"opaque reference to the discriminant of an enum value which can be compared. "
"This cannot be used to get the value of the discriminant."
msgstr ""

#: src/items/enumerations.md:259
msgid "Casting"
msgstr ""

#: src/items/enumerations.md:263
msgid ""
"If an enumeration is [unit-only](#unit-only-enum) (with no tuple and struct "
"variants), then its discriminant can be directly accessed with a [numeric "
"cast](../expressions/operator-expr.md#semantics); e.g.:"
msgstr ""

#: src/items/enumerations.md:280
msgid ""
"[Field-less enums](#field-less-enum) can be casted if they do not have "
"explicit discriminants, or where only unit variants are explicit."
msgstr ""

#: src/items/enumerations.md:309
msgid "Pointer casting"
msgstr ""

#: src/items/enumerations.md:314
msgid ""
"If the enumeration specifies a [primitive representation](../type-"
"layout.md#primitive-representations), then the discriminant may be reliably "
"accessed via unsafe pointer casting:"
msgstr ""

#: src/items/enumerations.md:342
msgid "Zero-variant enums"
msgstr ""

#: src/items/enumerations.md:346
msgid ""
"Enums with zero variants are known as _zero-variant enums_. As they have no "
"valid values, they cannot be instantiated."
msgstr ""

#: src/items/enumerations.md:355
msgid ""
"Zero-variant enums are equivalent to the [never type](../types/never.md), "
"but they cannot be coerced into other types."
msgstr ""

#: src/items/enumerations.md:361
msgid "// mismatched type error\n"
msgstr ""

#: src/items/enumerations.md:366
msgid "Variant visibility"
msgstr ""

#: src/items/enumerations.md:368
msgid ""
"Enum variants syntactically allow a [_Visibility_](../visibility-and-"
"privacy.md) annotation, but this is rejected when the enum is validated. "
"This allows items to be parsed with a unified syntax across different "
"contexts where they are used."
msgstr ""

#: src/items/enumerations.md:384 src/items/traits.md:377
msgid "// Empty `vis` is allowed.\n"
msgstr ""

#: src/items/enumerations.md:387
msgid "// This is allowed, since it is removed before being validated.\n"
msgstr ""

#: src/items/unions.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Union_ :  \n"
"   `union` [IDENTIFIER](../identifiers.md) [_GenericParams_]"
"(generics.md)<sup>?</sup> [_WhereClause_](generics.md#where-clauses)<sup>?</"
"sup> `{`[_StructFields_](structs.md)<sup>?</sup> `}`"
msgstr ""

#: src/items/unions.md:14
msgid ""
"A union declaration uses the same syntax as a struct declaration, except "
"with `union` in place of `struct`."
msgstr ""

#: src/items/unions.md:19
msgid ""
"A union declaration defines the given name in the [type namespace](../names/"
"namespaces.md) of the module or block where it is located."
msgstr ""

#: src/items/unions.md:31
msgid ""
"The key property of unions is that all fields of a union share common "
"storage. As a result, writes to one field of a union can overwrite its other "
"fields, and size of a union is determined by the size of its largest field."
msgstr ""

#: src/items/unions.md:37
msgid "Union field types are restricted to the following subset of types:"
msgstr ""

#: src/items/unions.md:41
msgid "`Copy` types"
msgstr ""

#: src/items/unions.md:45
msgid "References (`&T` and `&mut T` for arbitrary `T`)"
msgstr ""

#: src/items/unions.md:49
msgid "`ManuallyDrop<T>` (for arbitrary `T`)"
msgstr ""

#: src/items/unions.md:53
msgid "Tuples and arrays containing only allowed union field types"
msgstr ""

#: src/items/unions.md:57
msgid ""
"This restriction ensures, in particular, that union fields never need to be "
"dropped. Like for structs and enums, it is possible to `impl Drop` for a "
"union to manually define what happens when it gets dropped."
msgstr ""

#: src/items/unions.md:63
msgid ""
"Unions without any fields are not accepted by the compiler, but can be "
"accepted by macros."
msgstr ""

#: src/items/unions.md:67
msgid "Initialization of a union"
msgstr ""

#: src/items/unions.md:71
msgid ""
"A value of a union type can be created using the same syntax that is used "
"for struct types, except that it must specify exactly one field:"
msgstr ""

#: src/items/unions.md:82
msgid ""
"The expression above creates a value of type `MyUnion` and initializes the "
"storage using field `f1`. The union can be accessed using the same syntax as "
"struct fields:"
msgstr ""

#: src/items/unions.md:95
msgid "Reading and writing union fields"
msgstr ""

#: src/items/unions.md:99
msgid ""
"Unions have no notion of an \"active field\". Instead, every union access "
"just interprets the storage as the type of the field used for the access."
msgstr ""

#: src/items/unions.md:104
msgid "Reading a union field reads the bits of the union at the field's type."
msgstr ""

#: src/items/unions.md:108
msgid ""
"Fields might have a non-zero offset (except when [the C representation](../"
"type-layout.md#reprc-unions) is used); in that case the bits starting at the "
"offset of the fields are read"
msgstr ""

#: src/items/unions.md:113
msgid ""
"It is the programmer's responsibility to make sure that the data is valid at "
"the field's type. Failing to do so results in [undefined behavior](../"
"behavior-considered-undefined.md). For example, reading the value `3` from a "
"field of the [boolean type](../types/boolean.md) is undefined behavior. "
"Effectively, writing to and then reading from a union with [the C "
"representation](../type-layout.md#reprc-unions) is analogous to a "
"[`transmute`](../../core/intrinsics/fn.transmute.html) from the type used "
"for writing to the type used for reading."
msgstr ""

#: src/items/unions.md:122
msgid ""
"Consequently, all reads of union fields have to be placed in `unsafe` blocks:"
msgstr ""

#: src/items/unions.md:133
msgid ""
"Commonly, code using unions will provide safe wrappers around unsafe union "
"field accesses."
msgstr ""

#: src/items/unions.md:138
msgid ""
"In contrast, writes to union fields are safe, since they just overwrite "
"arbitrary data, but cannot cause undefined behavior. (Note that union field "
"types can never have drop glue, so a union field write will never implicitly "
"drop anything.)"
msgstr ""

#: src/items/unions.md:145
msgid "Pattern matching on unions"
msgstr ""

#: src/items/unions.md:149
msgid "Another way to access union fields is to use pattern matching."
msgstr ""

#: src/items/unions.md:153
msgid ""
"Pattern matching on union fields uses the same syntax as struct patterns, "
"except that the pattern must specify exactly one field."
msgstr ""

#: src/items/unions.md:158
msgid ""
"Since pattern matching is like reading the union with a particular field, it "
"has to be placed in `unsafe` blocks as well."
msgstr ""

#: src/items/unions.md:166 src/patterns.md:959 src/patterns.md:963
msgid "\"ten\""
msgstr ""

#: src/items/unions.md:175
msgid ""
"Pattern matching may match a union as a field of a larger structure. In "
"particular, when using a Rust union to implement a C tagged union via FFI, "
"this allows matching on the tag and the corresponding field simultaneously:"
msgstr ""

#: src/items/unions.md:208
msgid "References to union fields"
msgstr ""

#: src/items/unions.md:212
msgid ""
"Since union fields share common storage, gaining write access to one field "
"of a union can give write access to all its remaining fields."
msgstr ""

#: src/items/unions.md:217
msgid ""
"Borrow checking rules have to be adjusted to account for this fact. As a "
"result, if one field of a union is borrowed, all its remaining fields are "
"borrowed as well for the same lifetime."
msgstr ""

#: src/items/unions.md:222
msgid ""
"// ERROR: cannot borrow `u` (via `u.f2`) as mutable more than once at a "
"time\n"
msgstr ""

#: src/items/unions.md:227
msgid ""
"//                    ---- first mutable borrow occurs here (via `u.f1`)\n"
msgstr ""

#: src/items/unions.md:229
msgid ""
"//                    ^^^^ second mutable borrow occurs here (via `u.f2`)\n"
msgstr ""

#: src/items/unions.md:232
msgid "//  - first borrow ends here\n"
msgstr ""

#: src/items/unions.md:240
msgid ""
"As you could see, in many aspects (except for layouts, safety, and "
"ownership) unions behave exactly like structs, largely as a consequence of "
"inheriting their syntactic shape from structs. This is also true for many "
"unmentioned aspects of Rust language (such as privacy, name resolution, type "
"inference, generics, trait implementations, inherent implementations, "
"coherence, pattern checking, etc etc etc)."
msgstr ""

#: src/items/constant-items.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ConstantItem_ :  \n"
"   `const` ( [IDENTIFIER](../identifiers.md) | `_` ) `:` [_Type_](../"
"types.md#type-expressions) ( `=` [_Expression_](../expressions.md) )<sup>?</"
"sup> `;`"
msgstr ""

#: src/items/constant-items.md:13
msgid ""
"A _constant item_ is an optionally named _[constant value](../"
"const_eval.md#constant-expressions)_ which is not associated with a specific "
"memory location in the program."
msgstr ""

#: src/items/constant-items.md:18
msgid ""
"Constants are essentially inlined wherever they are used, meaning that they "
"are copied directly into the relevant context when used. This includes usage "
"of constants from external crates, and non-[`Copy`](../special-types-and-"
"traits.md#copy) types. References to the same constant are not necessarily "
"guaranteed to refer to the same memory address."
msgstr ""

#: src/items/constant-items.md:25
msgid ""
"The constant declaration defines the constant value in the [value namespace]"
"(../names/namespaces.md) of the module or block where it is located."
msgstr ""

#: src/items/constant-items.md:29
msgid ""
"Constants must be explicitly typed. The type must have a `'static` lifetime: "
"any references in the initializer must have `'static` lifetimes. References "
"in the type of a constant default to `'static` lifetime; see [static "
"lifetime elision](../lifetime-elision.md#const-and-static-elision)."
msgstr ""

#: src/items/constant-items.md:36
msgid ""
"A reference to a constant will have `'static` lifetime if the constant value "
"is eligible for [promotion](../destructors.md#constant-promotion); "
"otherwise, a temporary will be created."
msgstr ""

#: src/items/constant-items.md:44 src/lifetime-elision.md:218
msgid "\"bitstring\""
msgstr ""

#: src/items/constant-items.md:59
msgid ""
"The final value of a `const` item cannot contain references to anything "
"mutable."
msgstr ""

#: src/items/constant-items.md:63
msgid ""
"The constant expression may only be omitted in a [trait definition]"
"(traits.md)."
msgstr ""

#: src/items/constant-items.md:67
msgid "Constants with Destructors"
msgstr ""

#: src/items/constant-items.md:69
msgid ""
"Constants can contain destructors. Destructors are run when the value goes "
"out of scope."
msgstr ""

#: src/items/constant-items.md:77
msgid "\"Dropped. Held {}.\""
msgstr ""

#: src/items/constant-items.md:85
msgid ""
"// x gets dropped at end of function, calling drop.\n"
"    // prints \"Dropped. Held 0.\".\n"
msgstr ""

#: src/items/constant-items.md:92
msgid "Unnamed constant"
msgstr ""

#: src/items/constant-items.md:96
msgid ""
"Unlike an [associated constant](../items/associated-items.md#associated-"
"constants), a [free](../glossary.md#free-item) constant may be unnamed by "
"using an underscore instead of the name. For example:"
msgstr ""

#: src/items/constant-items.md:101
msgid "// OK although it is the same name as above:\n"
msgstr ""

#: src/items/constant-items.md:108
msgid ""
"As with [underscore imports](use-declarations.md#underscore-imports), macros "
"may safely emit the same unnamed constant in the same scope more than once. "
"For example, the following should not produce an error:"
msgstr ""

#: src/items/constant-items.md:116
msgid ""
"// This expands to:\n"
"// const _: () = ();\n"
"// const _: () = ();\n"
msgstr ""

#: src/items/constant-items.md:124
msgid "Evaluation"
msgstr ""

#: src/items/constant-items.md:126
msgid ""
"[Free](../glossary.md#free-item) constants are always [evaluated](../"
"const_eval.md) at compile-time to surface panics. This happens even within "
"an unused function:"
msgstr ""

#: src/items/constant-items.md:130
msgid "// Compile-time panic\n"
msgstr ""

#: src/items/constant-items.md:134
msgid "// A failing compile-time assertion\n"
msgstr ""

#: src/items/static-items.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_StaticItem_ :  \n"
"   [_ItemSafety_](functions.md)<sup>?</sup>[^extern-safety] `static` "
"`mut`<sup>?</sup> [IDENTIFIER](../identifiers.md) `:` [_Type_](../"
"types.md#type-expressions) ( `=` [_Expression_](../expressions.md) )<sup>?</"
"sup> `;`"
msgstr ""

#: src/items/static-items.md:12
msgid ""
"The `safe` and `unsafe` function qualifiers are only allowed semantically "
"within `extern` blocks."
msgstr ""

#: src/items/static-items.md:17
msgid ""
"A _static item_ is similar to a [constant](constant-items.md), except that "
"it represents an allocated object in the program that is initialized with "
"the initializer expression. All references and raw pointers to the static "
"refer to the same allocated object."
msgstr ""

#: src/items/static-items.md:23
msgid ""
"Static items have the `static` lifetime, which outlives all other lifetimes "
"in a Rust program. Static items do not call [`drop`](../destructors.md) at "
"the end of the program."
msgstr ""

#: src/items/static-items.md:28
msgid ""
"If the `static` has a size of at least 1 byte, this allocated object is "
"disjoint from all other such `static` objects as well as heap allocations "
"and stack-allocated variables. However, the storage of immutable `static` "
"items can overlap with objects that do not themselves have a unique address, "
"such as [promoteds](../destructors.md#constant-promotion) and [`const` items]"
"(constant-items.md)."
msgstr ""

#: src/items/static-items.md:35
msgid ""
"The static declaration defines a static value in the [value namespace](../"
"names/namespaces.md) of the module or block where it is located."
msgstr ""

#: src/items/static-items.md:39
msgid ""
"The static initializer is a [constant expression](../const_eval.md#constant-"
"expressions) evaluated at compile time. Static initializers may refer to and "
"read from other statics. When reading from mutable statics, they read the "
"initial value of that static."
msgstr ""

#: src/items/static-items.md:45
msgid ""
"Non-`mut` static items that contain a type that is not [interior mutable](../"
"interior-mutability.md) may be placed in read-only memory."
msgstr ""

#: src/items/static-items.md:50
msgid ""
"All access to a static is safe, but there are a number of restrictions on "
"statics:"
msgstr ""

#: src/items/static-items.md:55
msgid ""
"The type must have the [`Sync`](../../core/marker/trait.Sync.html) trait "
"bound to allow thread-safe access."
msgstr ""

#: src/items/static-items.md:59
msgid ""
"The initializer expression must be omitted in an [external block](external-"
"blocks.md), and must be provided for free static items."
msgstr ""

#: src/items/static-items.md:64
msgid ""
"The `safe` and `unsafe` qualifiers are semantically only allowed when used "
"in an [external block](external-blocks.md)."
msgstr ""

#: src/items/static-items.md:68
msgid "Statics & generics"
msgstr ""

#: src/items/static-items.md:70
msgid ""
"A static item defined in a generic scope (for example in a blanket or "
"default implementation) will result in exactly one static item being "
"defined, as if the static definition was pulled out of the current scope "
"into the module. There will _not_ be one item per monomorphization."
msgstr ""

#: src/items/static-items.md:75
msgid "This code:"
msgstr ""

#: src/items/static-items.md:83
msgid "\"default_impl: counter was {}\""
msgstr ""

#: src/items/static-items.md:95
msgid "\"blanket_impl: counter was {}\""
msgstr ""

#: src/items/static-items.md:107
msgid "prints"
msgstr ""

#: src/items/static-items.md:118
msgid "Mutable statics"
msgstr ""

#: src/items/static-items.md:122
msgid ""
"If a static item is declared with the `mut` keyword, then it is allowed to "
"be modified by the program. One of Rust's goals is to make concurrency bugs "
"hard to run into, and this is obviously a very large source of race "
"conditions or other bugs"
msgstr ""

#: src/items/static-items.md:129
msgid ""
"For this reason, an `unsafe` block is required when either reading or "
"writing a mutable static variable. Care should be taken to ensure that "
"modifications to a mutable static are safe with respect to other threads "
"running in the same process."
msgstr ""

#: src/items/static-items.md:136
msgid ""
"Mutable statics are still very useful, however. They can be used with C "
"libraries and can also be bound from C libraries in an `extern` block."
msgstr ""

#: src/items/static-items.md:143
msgid ""
"// This violates the idea of no shared state, and this doesn't internally\n"
"// protect against races, so this function is `unsafe`\n"
msgstr ""

#: src/items/static-items.md:153
msgid ""
"// As an alternative to `bump_levels_unsafe`, this function is safe, "
"assuming\n"
"// that we have an atomic_add function which returns the old value. This\n"
"// function is safe only if no other code accesses the static in a non-"
"atomic\n"
"// fashion. If such accesses are possible (such as in "
"`bump_levels_unsafe`),\n"
"// then this would need to be `unsafe` to indicate to the caller that they\n"
"// must still guard against concurrent access.\n"
msgstr ""

#: src/items/static-items.md:169
msgid ""
"Mutable statics have the same restrictions as normal statics, except that "
"the type does not have to implement the `Sync` trait."
msgstr ""

#: src/items/static-items.md:174
msgid "Using Statics or Consts"
msgstr ""

#: src/items/static-items.md:176
msgid ""
"It can be confusing whether or not you should use a constant item or a "
"static item. Constants should, in general, be preferred over statics unless "
"one of the following are true:"
msgstr ""

#: src/items/static-items.md:180
msgid "Large amounts of data are being stored."
msgstr ""

#: src/items/static-items.md:181
msgid "The single-address property of statics is required."
msgstr ""

#: src/items/static-items.md:182
msgid "Interior mutability is required."
msgstr ""

#: src/items/traits.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Trait_ :  \n"
"   `unsafe`<sup>?</sup> `trait` [IDENTIFIER](../identifiers.md)  "
"[_GenericParams_](generics.md)<sup>?</sup> ( `:` [_TypeParamBounds_](../"
"trait-bounds.md)<sup>?</sup> )<sup>?</sup> [_WhereClause_](generics.md#where-"
"clauses)<sup>?</sup> `{`  \n"
"     [_InnerAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"     [_AssociatedItem_](associated-items.md)<sup>\\*</sup>  \n"
"   `}`"
msgstr ""

#: src/items/traits.md:19
msgid ""
"A _trait_ describes an abstract interface that types can implement. This "
"interface consists of [associated items](associated-items.md), which come in "
"three varieties:"
msgstr ""

#: src/items/traits.md:22
msgid "[functions](associated-items.md#associated-functions-and-methods)"
msgstr ""

#: src/items/traits.md:23
msgid "[types](associated-items.md#associated-types)"
msgstr ""

#: src/items/traits.md:24
msgid "[constants](associated-items.md#associated-constants)"
msgstr ""

#: src/items/traits.md:28
msgid ""
"The trait declaration defines a trait in the [type namespace](../names/"
"namespaces.md) of the module or block where it is located."
msgstr ""

#: src/items/traits.md:32
msgid ""
"Associated items are defined as members of the trait within their respective "
"namespaces. Associated types are defined in the type namespace. Associated "
"constants and associated functions are defined in the value namespace."
msgstr ""

#: src/items/traits.md:36
msgid ""
"All traits define an implicit type parameter `Self` that refers to \"the "
"type that is implementing this interface\". Traits may also contain "
"additional type parameters. These type parameters, including `Self`, may be "
"constrained by other traits and so forth [as usual](generics.md)."
msgstr ""

#: src/items/traits.md:43
msgid ""
"Traits are implemented for specific types through separate [implementations]"
"(implementations.md)."
msgstr ""

#: src/items/traits.md:47
msgid ""
"Trait functions may omit the function body by replacing it with a semicolon. "
"This indicates that the implementation must define the function. If the "
"trait function defines a body, this definition acts as a default for any "
"implementation which does not override it. Similarly, associated constants "
"may omit the equals sign and expression to indicate implementations must "
"define the constant value. Associated types must never define the type, the "
"type may only be specified in an implementation."
msgstr ""

#: src/items/traits.md:56
msgid "// Examples of associated trait items with and without definitions.\n"
msgstr ""

#: src/items/traits.md:68
msgid ""
"Trait functions are not allowed to be [`const`](functions.md#const-"
"functions)."
msgstr ""

#: src/items/traits.md:72
msgid "Trait bounds"
msgstr ""

#: src/items/traits.md:74
msgid ""
"Generic items may use traits as [bounds](../trait-bounds.md) on their type "
"parameters."
msgstr ""

#: src/items/traits.md:78
msgid "Generic traits"
msgstr ""

#: src/items/traits.md:80
msgid ""
"Type parameters can be specified for a trait to make it generic. These "
"appear after the trait name, using the same syntax used in [generic "
"functions](functions.md#generic-functions)."
msgstr ""

#: src/items/traits.md:91
msgid "<a id=\"object-safety\"></a>"
msgstr ""

#: src/items/traits.md:94
msgid "Dyn compatibility"
msgstr ""

#: src/items/traits.md:98
msgid ""
"A dyn-compatible trait can be the base trait of a [trait object](../types/"
"trait-object.md). A trait is _dyn compatible_ if it has the following "
"qualities:"
msgstr ""

#: src/items/traits.md:103
msgid "All [supertraits](#supertraits) must also be dyn compatible."
msgstr ""

#: src/items/traits.md:107
msgid ""
"`Sized` must not be a [supertrait](#supertraits). In other words, it must "
"not require `Self: Sized`."
msgstr ""

#: src/items/traits.md:111
msgid "It must not have any associated constants."
msgstr ""

#: src/items/traits.md:115
msgid "It must not have any associated types with generics."
msgstr ""

#: src/items/traits.md:119
msgid ""
"All associated functions must either be dispatchable from a trait object or "
"be explicitly non-dispatchable:"
msgstr ""

#: src/items/traits.md:120
msgid "Dispatchable functions must:"
msgstr ""

#: src/items/traits.md:121
msgid ""
"Not have any type parameters (although lifetime parameters are allowed)."
msgstr ""

#: src/items/traits.md:122
msgid ""
"Be a [method](associated-items.md#methods) that does not use `Self` except "
"in the type of the receiver."
msgstr ""

#: src/items/traits.md:123
msgid "Have a receiver with one of the following types:"
msgstr ""

#: src/items/traits.md:124
msgid "`&Self` (i.e. `&self`)"
msgstr ""

#: src/items/traits.md:125
msgid "`&mut Self` (i.e `&mut self`)"
msgstr ""

#: src/items/traits.md:126
msgid "[`Box<Self>`](../special-types-and-traits.md#boxt)"
msgstr ""

#: src/items/traits.md:127
msgid "[`Rc<Self>`](../special-types-and-traits.md#rct)"
msgstr ""

#: src/items/traits.md:128
msgid "[`Arc<Self>`](../special-types-and-traits.md#arct)"
msgstr ""

#: src/items/traits.md:129
msgid ""
"[`Pin<P>`](../special-types-and-traits.md#pinp) where `P` is one of the "
"types above"
msgstr ""

#: src/items/traits.md:130
msgid "Not have an opaque return type; that is,"
msgstr ""

#: src/items/traits.md:131
msgid "Not be an `async fn` (which has a hidden `Future` type)."
msgstr ""

#: src/items/traits.md:132
msgid ""
"Not have a return position `impl Trait` type (`fn example(&self) -> impl "
"Trait`)."
msgstr ""

#: src/items/traits.md:133
msgid ""
"Not have a `where Self: Sized` bound (receiver type of `Self` (i.e. `self`) "
"implies this)."
msgstr ""

#: src/items/traits.md:134
msgid "Explicitly non-dispatchable functions require:"
msgstr ""

#: src/items/traits.md:135
msgid ""
"Have a `where Self: Sized` bound (receiver type of `Self` (i.e. `self`) "
"implies this)."
msgstr ""

#: src/items/traits.md:139
msgid ""
"The [`AsyncFn`](../../core/ops/async_function/trait.AsyncFn.html), "
"[`AsyncFnMut`](../../core/ops/async_function/trait.AsyncFnMut.html), and "
"[`AsyncFnOnce`](../../core/ops/async_function/trait.AsyncFnOnce.html) traits "
"are not dyn-compatible."
msgstr ""

#: src/items/traits.md:141
msgid "**Note**: This concept was formerly known as _object safety_."
msgstr ""

#: src/items/traits.md:146
msgid "// Examples of dyn compatible methods.\n"
msgstr ""

#: src/items/traits.md:164
msgid ""
"// This trait is dyn compatible, but these methods cannot be dispatched on a "
"trait object.\n"
msgstr ""

#: src/items/traits.md:166
msgid "// Non-methods cannot be dispatched.\n"
msgstr ""

#: src/items/traits.md:168
msgid "// Self type isn't known until runtime.\n"
msgstr ""

#: src/items/traits.md:170
msgid "// `other` may be a different concrete type of the receiver.\n"
msgstr ""

#: src/items/traits.md:172
msgid "// Generics are not compatible with vtables.\n"
msgstr ""

#: src/items/traits.md:181
msgid "// ERROR: cannot call with Self return\n"
msgstr ""

#: src/items/traits.md:182
msgid "// ERROR: cannot call with Self parameter\n"
msgstr ""

#: src/items/traits.md:183
msgid "// ERROR: cannot call with generic type\n"
msgstr ""

#: src/items/traits.md:187
msgid "// Examples of dyn-incompatible traits.\n"
msgstr ""

#: src/items/traits.md:190
msgid "// ERROR: cannot have associated const\n"
msgstr ""

#: src/items/traits.md:192
msgid "// ERROR: associated function without Sized\n"
msgstr ""

#: src/items/traits.md:193
msgid "// ERROR: Self in return type\n"
msgstr ""

#: src/items/traits.md:194
msgid "// ERROR: has generic type parameters\n"
msgstr ""

#: src/items/traits.md:195
msgid "// ERROR: nested receiver not yet supported\n"
msgstr ""

#: src/items/traits.md:202 src/items/traits.md:211 src/destructors.md:461
#: src/destructors.md:462
msgid "// ERROR\n"
msgstr ""

#: src/items/traits.md:206
msgid "// `Self: Sized` traits are dyn-incompatible.\n"
msgstr ""

#: src/items/traits.md:215
msgid "// Dyn-incompatible if `Self` is a type argument.\n"
msgstr ""

#: src/items/traits.md:222
msgid "// ERROR: cannot use `Self` type parameter\n"
msgstr ""

#: src/items/traits.md:227
msgid "Supertraits"
msgstr ""

#: src/items/traits.md:231
msgid ""
"**Supertraits** are traits that are required to be implemented for a type to "
"implement a specific trait. Furthermore, anywhere a [generic](generics.md) "
"or [trait object](../types/trait-object.md) is bounded by a trait, it has "
"access to the associated items of its supertraits."
msgstr ""

#: src/items/traits.md:237
msgid ""
"Supertraits are declared by trait bounds on the `Self` type of a trait and "
"transitively the supertraits of the traits declared in those trait bounds. "
"It is an error for a trait to be its own supertrait."
msgstr ""

#: src/items/traits.md:243
msgid "The trait with a supertrait is called a **subtrait** of its supertrait."
msgstr ""

#: src/items/traits.md:245
msgid ""
"The following is an example of declaring `Shape` to be a supertrait of "
"`Circle`."
msgstr ""

#: src/items/traits.md:252
msgid ""
"And the following is the same example, except using [where clauses]"
"(generics.md#where-clauses)."
msgstr ""

#: src/items/traits.md:259
msgid ""
"This next example gives `radius` a default implementation using the `area` "
"function from `Shape`."
msgstr ""

#: src/items/traits.md:266
msgid ""
"// A = pi * r^2\n"
"        // so algebraically,\n"
"        // r = sqrt(A / pi)\n"
msgstr ""

#: src/items/traits.md:274
msgid "This next example calls a supertrait method on a generic parameter."
msgstr ""

#: src/items/traits.md:280
msgid ""
"// Here we call the area method from the supertrait `Shape` of `Circle`.\n"
msgstr ""

#: src/items/traits.md:281
msgid "\"Area: {}\""
msgstr ""

#: src/items/traits.md:282
msgid "\"Radius: {}\""
msgstr ""

#: src/items/traits.md:286
msgid ""
"Similarly, here is an example of calling supertrait methods on trait objects."
msgstr ""

#: src/items/traits.md:301
msgid "Unsafe traits"
msgstr ""

#: src/items/traits.md:305
msgid ""
"Traits items that begin with the `unsafe` keyword indicate that "
"_implementing_ the trait may be [unsafe](../unsafety.md). It is safe to use "
"a correctly implemented unsafe trait. The [trait implementation]"
"(implementations.md#trait-implementations) must also begin with the `unsafe` "
"keyword."
msgstr ""

#: src/items/traits.md:309
msgid ""
"[`Sync`](../special-types-and-traits.md#sync) and [`Send`](../special-types-"
"and-traits.md#send) are examples of unsafe traits."
msgstr ""

#: src/items/traits.md:313
msgid "Parameter patterns"
msgstr ""

#: src/items/traits.md:317
msgid ""
"Function or method declarations without a body only allow [IDENTIFIER](../"
"identifiers.md) or `_` [wild card](../patterns.md#wildcard-pattern) "
"patterns. `mut` [IDENTIFIER](../identifiers.md) is currently allowed, but it "
"is deprecated and will become a hard error in the future."
msgstr ""

#: src/items/traits.md:324
msgid ""
"In the 2015 edition, the pattern for a trait function or method parameter is "
"optional:"
msgstr ""

#: src/items/traits.md:328 src/paths.md:233
msgid "// 2015 Edition\n"
msgstr ""

#: src/items/traits.md:330
msgid "// Parameter identifiers are not required.\n"
msgstr ""

#: src/items/traits.md:336
msgid ""
"The kinds of patterns for parameters is limited to one of the following:"
msgstr ""

#: src/items/traits.md:338
msgid "[IDENTIFIER](../identifiers.md)"
msgstr ""

#: src/items/traits.md:339
msgid "`mut` [IDENTIFIER](../identifiers.md)"
msgstr ""

#: src/items/traits.md:340
msgid "[`_`](../patterns.md#wildcard-pattern)"
msgstr ""

#: src/items/traits.md:341
msgid "`&` [IDENTIFIER](../identifiers.md)"
msgstr ""

#: src/items/traits.md:342
msgid "`&&` [IDENTIFIER](../identifiers.md)"
msgstr ""

#: src/items/traits.md:346
msgid ""
"Beginning in the 2018 edition, function or method parameter patterns are no "
"longer optional. Also, all irrefutable patterns are allowed as long as there "
"is a body. Without a body, the limitations listed above are still in effect."
msgstr ""

#: src/items/traits.md:353
msgid "// Cannot use tuple pattern without a body.\n"
msgstr ""

#: src/items/traits.md:359
msgid "Item visibility"
msgstr ""

#: src/items/traits.md:363
msgid ""
"Trait items syntactically allow a [_Visibility_](../visibility-and-"
"privacy.md) annotation, but this is rejected when the trait is validated. "
"This allows items to be parsed with a unified syntax across different "
"contexts where they are used. As an example, an empty `vis` macro fragment "
"specifier can be used for trait items, where the macro rule may be used in "
"other situations where visibility is allowed."
msgstr ""

#: src/items/traits.md:384
msgid "// Visibility is allowed here.\n"
msgstr ""

#: src/items/implementations.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Implementation_ :  \n"
"   _InherentImpl_ | _TraitImpl_"
msgstr ""

#: src/items/implementations.md:11
msgid ""
"_InherentImpl_ :  \n"
"   `impl` [_GenericParams_](generics.md)<sup>?</sup> [_Type_](../"
"types.md#type-expressions) [_WhereClause_](generics.md#where-clauses)<sup>?</"
"sup> `{`  \n"
"      [_InnerAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"      [_AssociatedItem_](associated-items.md)<sup>\\*</sup>  \n"
"   `}`"
msgstr ""

#: src/items/implementations.md:17
msgid ""
"_TraitImpl_ :  \n"
"   `unsafe`<sup>?</sup> `impl` [_GenericParams_](generics.md)<sup>?</sup> `!"
"`<sup>?</sup> [_TypePath_](../paths.md#paths-in-types) `for` [_Type_](../"
"types.md#type-expressions)  \n"
"   [_WhereClause_](generics.md#where-clauses)<sup>?</sup>  \n"
"   `{`  \n"
"      [_InnerAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"      [_AssociatedItem_](associated-items.md)<sup>\\*</sup>  \n"
"   `}`"
msgstr ""

#: src/items/implementations.md:28
msgid ""
"An _implementation_ is an item that associates items with an _implementing "
"type_. Implementations are defined with the keyword `impl` and contain "
"functions that belong to an instance of the type that is being implemented "
"or to the type statically."
msgstr ""

#: src/items/implementations.md:35
msgid "There are two types of implementations:"
msgstr ""

#: src/items/implementations.md:37
msgid "inherent implementations"
msgstr ""

#: src/items/implementations.md:38
msgid "[trait](traits.md) implementations"
msgstr ""

#: src/items/implementations.md:42
msgid "Inherent Implementations"
msgstr ""

#: src/items/implementations.md:46
msgid ""
"An inherent implementation is defined as the sequence of the `impl` keyword, "
"generic type declarations, a path to a nominal type, a where clause, and a "
"bracketed set of associable items."
msgstr ""

#: src/items/implementations.md:52
msgid ""
"The nominal type is called the _implementing type_ and the associable items "
"are the _associated items_ to the implementing type."
msgstr ""

#: src/items/implementations.md:57
msgid ""
"Inherent implementations associate the contained items to the implementing "
"type."
msgstr ""

#: src/items/implementations.md:62
msgid ""
"Inherent implementations can contain [associated functions](associated-"
"items.md#associated-functions-and-methods) (including [methods](associated-"
"items.md#methods)) and [associated constants](associated-items.md#associated-"
"constants)."
msgstr ""

#: src/items/implementations.md:66
msgid "They cannot contain associated type aliases."
msgstr ""

#: src/items/implementations.md:70
msgid ""
"The [path](../paths.md) to an associated item is any path to the "
"implementing type, followed by the associated item's identifier as the final "
"path component."
msgstr ""

#: src/items/implementations.md:76
msgid ""
"A type can also have multiple inherent implementations. An implementing type "
"must be defined within the same crate as the original type definition."
msgstr ""

#: src/items/implementations.md:99
msgid "// Actual path to the implementing type and impl in the same module.\n"
msgstr ""

#: src/items/implementations.md:102
msgid ""
"// Impl blocks in different modules are still accessed through a path to the "
"type.\n"
msgstr ""

#: src/items/implementations.md:105
msgid "// Re-exported paths to the implementing type also work.\n"
msgstr ""

#: src/items/implementations.md:108
msgid ""
"// Does not work, because use in `values` is not pub.\n"
"    // values::Color::red();\n"
msgstr ""

#: src/items/implementations.md:115
msgid "Trait Implementations"
msgstr ""

#: src/items/implementations.md:119
msgid ""
"A _trait implementation_ is defined like an inherent implementation except "
"that the optional generic type declarations are followed by a [trait]"
"(traits.md), followed by the keyword `for`, followed by a path to a nominal "
"type."
msgstr ""

#: src/items/implementations.md:127
msgid ""
"The trait is known as the _implemented trait_. The implementing type "
"implements the implemented trait."
msgstr ""

#: src/items/implementations.md:132
msgid ""
"A trait implementation must define all non-default associated items declared "
"by the implemented trait, may redefine default associated items defined by "
"the implemented trait, and cannot define any other items."
msgstr ""

#: src/items/implementations.md:138
msgid ""
"The path to the associated items is `<` followed by a path to the "
"implementing type followed by `as` followed by a path to the trait followed "
"by `>` as a path component followed by the associated item's path component."
msgstr ""

#: src/items/implementations.md:144
msgid ""
"[Unsafe traits](traits.md#unsafe-traits) require the trait implementation to "
"begin with the `unsafe` keyword."
msgstr ""

#: src/items/implementations.md:181
msgid "Trait Implementation Coherence"
msgstr ""

#: src/items/implementations.md:185
msgid ""
"A trait implementation is considered incoherent if either the orphan rules "
"check fails or there are overlapping implementation instances."
msgstr ""

#: src/items/implementations.md:190
msgid ""
"Two trait implementations overlap when there is a non-empty intersection of "
"the traits the implementation is for, the implementations can be "
"instantiated with the same type. <!-- This is probably wrong? Source: No two "
"implementations can\n"
"be instantiable with the same set of types for the input type parameters. -->"
msgstr ""

#: src/items/implementations.md:197
msgid "Orphan rules"
msgstr ""

#: src/items/implementations.md:201
msgid ""
"Given `impl<P1..=Pn> Trait<T1..=Tn> for T0`, an `impl` is valid only if at "
"least one of the following is true:"
msgstr ""

#: src/items/implementations.md:204
msgid "`Trait` is a [local trait](../glossary.md#local-trait)"
msgstr ""

#: src/items/implementations.md:205
msgid "All of"
msgstr ""

#: src/items/implementations.md:206
msgid ""
"At least one of the types `T0..=Tn` must be a [local type](../"
"glossary.md#local-type). Let `Ti` be the first such type."
msgstr ""

#: src/items/implementations.md:208
msgid ""
"No [uncovered type](../glossary.md#uncovered-type) parameters `P1..=Pn` may "
"appear in `T0..Ti` (excluding `Ti`)"
msgstr ""

#: src/items/implementations.md:213
msgid "Only the appearance of _uncovered_ type parameters is restricted."
msgstr ""

#: src/items/implementations.md:217
msgid ""
"Note that for the purposes of coherence, [fundamental types](../"
"glossary.md#fundamental-type-constructors) are special. The `T` in `Box<T>` "
"is not considered covered, and `Box<LocalType>` is considered local."
msgstr ""

#: src/items/implementations.md:223
msgid "Generic Implementations"
msgstr ""

#: src/items/implementations.md:227
msgid ""
"An implementation can take [generic parameters](generics.md), which can be "
"used in the rest of the implementation. Implementation parameters are "
"written directly after the `impl` keyword."
msgstr ""

#: src/items/implementations.md:237
msgid "/* Treat the integer as a sequence of bits */"
msgstr ""

#: src/items/implementations.md:243
msgid ""
"Generic parameters _constrain_ an implementation if the parameter appears at "
"least once in one of:"
msgstr ""

#: src/items/implementations.md:246
msgid "The implemented trait, if it has one"
msgstr ""

#: src/items/implementations.md:247
msgid "The implementing type"
msgstr ""

#: src/items/implementations.md:248
msgid ""
"As an [associated type](associated-items.md#associated-types) in the [bounds]"
"(../trait-bounds.md) of a type that contains another parameter that "
"constrains the implementation"
msgstr ""

#: src/items/implementations.md:253
msgid ""
"Type and const parameters must always constrain the implementation. "
"Lifetimes must constrain the implementation if the lifetime is used in an "
"associated type."
msgstr ""

#: src/items/implementations.md:256
msgid "Examples of constraining situations:"
msgstr ""

#: src/items/implementations.md:264
msgid "// T constrains by being an argument to GenericTrait.\n"
msgstr ""

#: src/items/implementations.md:267
msgid "// T constrains by being an argument to GenericStruct\n"
msgstr ""

#: src/items/implementations.md:270
msgid "// Likewise, N constrains by being an argument to ConstGenericStruct\n"
msgstr ""

#: src/items/implementations.md:273
msgid ""
"// T constrains by being in an associated type in a bound for type `U` which "
"is\n"
"// itself a generic parameter constraining the trait.\n"
msgstr ""

#: src/items/implementations.md:277
msgid ""
"// Like previous, except the type is `(U, isize)`. `U` appears inside the "
"type\n"
"// that includes `T`, and is not the type itself.\n"
msgstr ""

#: src/items/implementations.md:283
msgid "Examples of non-constraining situations:"
msgstr ""

#: src/items/implementations.md:286
msgid ""
"// The rest of these are errors, since they have type or const parameters "
"that\n"
"// do not constrain.\n"
msgstr ""

#: src/items/implementations.md:288
msgid "// T does not constrain since it does not appear at all.\n"
msgstr ""

#: src/items/implementations.md:291
msgid "// N does not constrain for the same reason.\n"
msgstr ""

#: src/items/implementations.md:294
msgid "// Usage of T inside the implementation does not constrain the impl.\n"
msgstr ""

#: src/items/implementations.md:299
msgid ""
"// T is used as an associated type in the bounds for U, but U does not "
"constrain.\n"
msgstr ""

#: src/items/implementations.md:302
msgid ""
"// T is used in the bounds, but not as an associated type, so it does not "
"constrain.\n"
msgstr ""

#: src/items/implementations.md:307
msgid "Example of an allowed unconstraining lifetime parameter:"
msgstr ""

#: src/items/implementations.md:314
msgid "Example of a disallowed unconstraining lifetime parameter:"
msgstr ""

#: src/items/implementations.md:326
msgid "Attributes on Implementations"
msgstr ""

#: src/items/implementations.md:328
msgid ""
"Implementations may contain outer [attributes](../attributes.md) before the "
"`impl` keyword and inner [attributes](../attributes.md) inside the brackets "
"that contain the associated items. Inner attributes must come before any "
"associated items. The attributes that have meaning here are [`cfg`](../"
"conditional-compilation.md), [`deprecated`](../attributes/diagnostics.md#the-"
"deprecated-attribute), [`doc`](../../rustdoc/the-doc-attribute.html), and "
"[the lint check attributes](../attributes/diagnostics.md#lint-check-"
"attributes)."
msgstr ""

#: src/items/external-blocks.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ExternBlock_ :  \n"
"   `unsafe`<sup>?</sup>[^unsafe-2024] `extern` [_Abi_](functions.md)<sup>?</"
"sup> `{`  \n"
"      [_InnerAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"      _ExternalItem_<sup>\\*</sup>  \n"
"   `}`"
msgstr ""

#: src/items/external-blocks.md:14
msgid ""
"_ExternalItem_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> (  \n"
"         [_MacroInvocationSemi_](../macros.md#macro-invocation)  \n"
"      | ( [_Visibility_](../visibility-and-privacy.md)<sup>?</sup> "
"( [_StaticItem_](static-items.md) | [_Function_](functions.md) ) )  \n"
"   )"
msgstr ""

#: src/items/external-blocks.md:20
msgid ""
"Starting with the 2024 Edition, the `unsafe` keyword is required "
"semantically."
msgstr ""

#: src/items/external-blocks.md:24
msgid ""
"External blocks provide _declarations_ of items that are not _defined_ in "
"the current crate and are the basis of Rust's foreign function interface. "
"These are akin to unchecked imports."
msgstr ""

#: src/items/external-blocks.md:30
msgid ""
"Two kinds of item _declarations_ are allowed in external blocks: [functions]"
"(functions.md) and [statics](static-items.md)."
msgstr ""

#: src/items/external-blocks.md:35
msgid ""
"Calling functions or accessing statics that are declared in external blocks "
"is only allowed in an `unsafe` context."
msgstr ""

#: src/items/external-blocks.md:39
msgid ""
"The external block defines its functions and statics in the [value namespace]"
"(../names/namespaces.md) of the module or block where it is located."
msgstr ""

#: src/items/external-blocks.md:43
msgid ""
"The `unsafe` keyword is semantically required to appear before the `extern` "
"keyword on external blocks."
msgstr ""

#: src/items/external-blocks.md:47
msgid ""
"**Edition differences**: Prior to the 2024 edition, the `unsafe` keyword is "
"optional. The `safe` and `unsafe` item qualifiers are only allowed if the "
"external block itself is marked as `unsafe`."
msgstr ""

#: src/items/external-blocks.md:55
msgid ""
"Functions within external blocks are declared in the same way as other Rust "
"functions, with the exception that they must not have a body and are instead "
"terminated by a semicolon."
msgstr ""

#: src/items/external-blocks.md:61
msgid ""
"Patterns are not allowed in parameters, only [IDENTIFIER](../identifiers.md) "
"or `_` may be used."
msgstr ""

#: src/items/external-blocks.md:65
msgid ""
"The `safe` and `unsafe` function qualifiers are allowed, but other function "
"qualifiers (e.g. `const`, `async`, `extern`) are not."
msgstr ""

#: src/items/external-blocks.md:71
msgid ""
"Functions within external blocks may be called by Rust code, just like "
"functions defined in Rust. The Rust compiler automatically translates "
"between the Rust ABI and the foreign ABI."
msgstr ""

#: src/items/external-blocks.md:77
msgid ""
"A function declared in an extern block is implicitly `unsafe` unless the "
"`safe` function qualifier is present."
msgstr ""

#: src/items/external-blocks.md:82
msgid ""
"When coerced to a function pointer, a function declared in an extern block "
"has type `extern \"abi\" for<'l1, ..., 'lm> fn(A1, ..., An) -> R`, where "
"`'l1`, ... `'lm` are its lifetime parameters, `A1`, ..., `An` are the "
"declared types of its parameters, `R` is the declared return type."
msgstr ""

#: src/items/external-blocks.md:89
msgid "Statics"
msgstr ""

#: src/items/external-blocks.md:93
msgid ""
"Statics within external blocks are declared in the same way as [statics]"
"(static-items.md) outside of external blocks, except that they do not have "
"an expression initializing their value."
msgstr ""

#: src/items/external-blocks.md:98
msgid ""
"Unless a static item declared in an extern block is qualified as `safe`, it "
"is `unsafe` to access that item, whether or not it's mutable, because there "
"is nothing guaranteeing that the bit pattern at the static's memory is valid "
"for the type it is declared with, since some arbitrary (e.g. C) code is in "
"charge of initializing the static."
msgstr ""

#: src/items/external-blocks.md:105
msgid ""
"Extern statics can be either immutable or mutable just like [statics](static-"
"items.md) outside of external blocks."
msgstr ""

#: src/items/external-blocks.md:109
msgid ""
"An immutable static _must_ be initialized before any Rust code is executed. "
"It is not enough for the static to be initialized before Rust code reads "
"from it. Once Rust code runs, mutating an immutable static (from inside or "
"outside Rust) is UB, except if the mutation happens to bytes inside of an "
"`UnsafeCell`."
msgstr ""

#: src/items/external-blocks.md:116
msgid "ABI"
msgstr ""

#: src/items/external-blocks.md:120
msgid ""
"By default external blocks assume that the library they are calling uses the "
"standard C ABI on the specific platform. Other ABIs may be specified using "
"an `abi` string, as shown here:"
msgstr ""

#: src/items/external-blocks.md:125
msgid "// Interface to the Windows API\n"
msgstr ""

#: src/items/external-blocks.md:132
msgid ""
"There are three ABI strings which are cross-platform, and which all "
"compilers are guaranteed to support:"
msgstr ""

#: src/items/external-blocks.md:137
msgid ""
"`unsafe extern \"Rust\"` -- The default ABI when you write a normal `fn "
"foo()` in any Rust code."
msgstr ""

#: src/items/external-blocks.md:142
msgid ""
"`unsafe extern \"C\"` -- This is the same as `extern fn foo()`; whatever the "
"default your C compiler supports."
msgstr ""

#: src/items/external-blocks.md:147
msgid ""
"`unsafe extern \"system\"` -- Usually the same as `extern \"C\"`, except on "
"Win32, in which case it's `\"stdcall\"`, or what you should use to link to "
"the Windows API itself"
msgstr ""

#: src/items/external-blocks.md:153
msgid "There are also some platform-specific ABI strings:"
msgstr ""

#: src/items/external-blocks.md:157
msgid "`unsafe extern \"cdecl\"` -- The default for x86\\_32 C code."
msgstr ""

#: src/items/external-blocks.md:161
msgid ""
"`unsafe extern \"stdcall\"` -- The default for the Win32 API on x86\\_32."
msgstr ""

#: src/items/external-blocks.md:165
msgid ""
"`unsafe extern \"win64\"` -- The default for C code on x86\\_64 Windows."
msgstr ""

#: src/items/external-blocks.md:169
msgid ""
"`unsafe extern \"sysv64\"` -- The default for C code on non-Windows x86\\_64."
msgstr ""

#: src/items/external-blocks.md:173
msgid "`unsafe extern \"aapcs\"` -- The default for ARM."
msgstr ""

#: src/items/external-blocks.md:177
msgid ""
"`unsafe extern \"fastcall\"` -- The `fastcall` ABI -- corresponds to MSVC's "
"`__fastcall` and GCC and clang's `__attribute__((fastcall))`"
msgstr ""

#: src/items/external-blocks.md:182
msgid ""
"`unsafe extern \"thiscall\"` -- The default for C++ member functions on MSVC "
"-- corresponds to MSVC's `__thiscall` and GCC and clang's "
"`__attribute__((thiscall))`"
msgstr ""

#: src/items/external-blocks.md:187
msgid ""
"`unsafe extern \"efiapi\"` -- The ABI used for [UEFI](https://uefi.org/"
"specifications) functions."
msgstr ""

#: src/items/external-blocks.md:191
msgid "Variadic functions"
msgstr ""

#: src/items/external-blocks.md:193
msgid ""
"Functions within external blocks may be variadic by specifying `...` as the "
"last argument. The variadic parameter may optionally be specified with an "
"identifier."
msgstr ""

#: src/items/external-blocks.md:207
msgid "Attributes on extern blocks"
msgstr ""

#: src/items/external-blocks.md:211
msgid ""
"The following [attributes](../attributes.md) control the behavior of "
"external blocks."
msgstr ""

#: src/items/external-blocks.md:215
msgid "The `link` attribute"
msgstr ""

#: src/items/external-blocks.md:219
msgid ""
"The _`link` attribute_ specifies the name of a native library that the "
"compiler should link with for the items within an `extern` block."
msgstr ""

#: src/items/external-blocks.md:224
msgid ""
"It uses the [_MetaListNameValueStr_](../attributes.md#meta-item-attribute-"
"syntax) syntax to specify its inputs. The `name` key is the name of the "
"native library to link. The `kind` key is an optional value which specifies "
"the kind of library with the following possible values:"
msgstr ""

#: src/items/external-blocks.md:230
msgid ""
"`dylib` --- Indicates a dynamic library. This is the default if `kind` is "
"not specified."
msgstr ""

#: src/items/external-blocks.md:235
msgid "`static` --- Indicates a static library."
msgstr ""

#: src/items/external-blocks.md:239
msgid ""
"`framework` --- Indicates a macOS framework. This is only valid for macOS "
"targets."
msgstr ""

#: src/items/external-blocks.md:244
msgid ""
"`raw-dylib` --- Indicates a dynamic library where the compiler will generate "
"an import library to link against (see [`dylib` versus `raw-dylib`](#dylib-"
"versus-raw-dylib) below for details). This is only valid for Windows targets."
msgstr ""

#: src/items/external-blocks.md:250
msgid "The `name` key must be included if `kind` is specified."
msgstr ""

#: src/items/external-blocks.md:254
msgid ""
"The optional `modifiers` argument is a way to specify linking modifiers for "
"the library to link."
msgstr ""

#: src/items/external-blocks.md:259
msgid ""
"Modifiers are specified as a comma-delimited string with each modifier "
"prefixed with either a `+` or `-` to indicate that the modifier is enabled "
"or disabled, respectively."
msgstr ""

#: src/items/external-blocks.md:265
msgid ""
"Specifying multiple `modifiers` arguments in a single `link` attribute, or "
"multiple identical modifiers in the same `modifiers` argument is not "
"currently supported.   \n"
"Example: `#[link(name = \"mylib\", kind = \"static\", modifiers = \"+whole-"
"archive\")]`."
msgstr ""

#: src/items/external-blocks.md:271
msgid ""
"The `wasm_import_module` key may be used to specify the [WebAssembly module]"
"(https://webassembly.github.io/spec/core/syntax/modules.html) name for the "
"items within an `extern` block when importing symbols from the host "
"environment. The default module name is `env` if `wasm_import_module` is not "
"specified."
msgstr ""

#: src/items/external-blocks.md:278
msgid "\"crypto\""
msgstr ""

#: src/items/external-blocks.md:280 src/items/external-blocks.md:285
#: src/items/external-blocks.md:290 src/attributes/testing.md:77
msgid "// …\n"
msgstr ""

#: src/items/external-blocks.md:283
msgid "\"CoreFoundation\""
msgstr ""

#: src/items/external-blocks.md:283
msgid "\"framework\""
msgstr ""

#: src/items/external-blocks.md:296
msgid ""
"It is valid to add the `link` attribute on an empty extern block. You can "
"use this to satisfy the linking requirements of extern blocks elsewhere in "
"your code (including upstream crates) instead of adding the attribute to "
"each extern block."
msgstr ""

#: src/items/external-blocks.md:303
msgid "Linking modifiers: `bundle`"
msgstr ""

#: src/items/external-blocks.md:307 src/items/external-blocks.md:342
msgid ""
"This modifier is only compatible with the `static` linking kind. Using any "
"other kind will result in a compiler error."
msgstr ""

#: src/items/external-blocks.md:312
msgid ""
"When building a rlib or staticlib `+bundle` means that the native static "
"library will be packed into the rlib or staticlib archive, and then "
"retrieved from there during linking of the final binary."
msgstr ""

#: src/items/external-blocks.md:318
msgid ""
"When building a rlib `-bundle` means that the native static library is "
"registered as a dependency of that rlib \"by name\", and object files from "
"it are included only during linking of the final binary, the file search by "
"that name is also performed during final linking.   \n"
"When building a staticlib `-bundle` means that the native static library is "
"simply not included into the archive and some higher level build system will "
"need to add it later during linking of the final binary."
msgstr ""

#: src/items/external-blocks.md:327
msgid ""
"This modifier has no effect when building other targets like executables or "
"dynamic libraries."
msgstr ""

#: src/items/external-blocks.md:331
msgid "The default for this modifier is `+bundle`."
msgstr ""

#: src/items/external-blocks.md:333
msgid ""
"More implementation details about this modifier can be found in [`bundle` "
"documentation for rustc](../../rustc/command-line-arguments.html#linking-"
"modifiers-bundle)."
msgstr ""

#: src/items/external-blocks.md:338
msgid "Linking modifiers: `whole-archive`"
msgstr ""

#: src/items/external-blocks.md:347
msgid ""
"`+whole-archive` means that the static library is linked as a whole archive "
"without throwing any object files away."
msgstr ""

#: src/items/external-blocks.md:352
msgid "The default for this modifier is `-whole-archive`."
msgstr ""

#: src/items/external-blocks.md:354
msgid ""
"More implementation details about this modifier can be found in [`whole-"
"archive` documentation for rustc](../../rustc/command-line-"
"arguments.html#linking-modifiers-whole-archive)."
msgstr ""

#: src/items/external-blocks.md:359
msgid "Linking modifiers: `verbatim`"
msgstr ""

#: src/items/external-blocks.md:363
msgid "This modifier is compatible with all linking kinds."
msgstr ""

#: src/items/external-blocks.md:367
msgid ""
"`+verbatim` means that rustc itself won't add any target-specified library "
"prefixes or suffixes (like `lib` or `.a`) to the library name, and will try "
"its best to ask for the same thing from the linker."
msgstr ""

#: src/items/external-blocks.md:373
msgid ""
"`-verbatim` means that rustc will either add a target-specific prefix and "
"suffix to the library name before passing it to linker, or won't prevent "
"linker from implicitly adding it."
msgstr ""

#: src/items/external-blocks.md:378
msgid "The default for this modifier is `-verbatim`."
msgstr ""

#: src/items/external-blocks.md:380
msgid ""
"More implementation details about this modifier can be found in [`verbatim` "
"documentation for rustc](../../rustc/command-line-arguments.html#linking-"
"modifiers-verbatim)."
msgstr ""

#: src/items/external-blocks.md:385
msgid "`dylib` versus `raw-dylib`"
msgstr ""

#: src/items/external-blocks.md:389
msgid ""
"On Windows, linking against a dynamic library requires that an import "
"library is provided to the linker: this is a special static library that "
"declares all of the symbols exported by the dynamic library in such a way "
"that the linker knows that they have to be dynamically loaded at runtime."
msgstr ""

#: src/items/external-blocks.md:396
msgid ""
"Specifying `kind = \"dylib\"` instructs the Rust compiler to link an import "
"library based on the `name` key. The linker will then use its normal library "
"resolution logic to find that import library. Alternatively, specifying "
"`kind = \"raw-dylib\"` instructs the compiler to generate an import library "
"during compilation and provide that to the linker instead."
msgstr ""

#: src/items/external-blocks.md:404
msgid ""
"`raw-dylib` is only supported on Windows. Using it when targeting other "
"platforms will result in a compiler error."
msgstr ""

#: src/items/external-blocks.md:409
msgid "The `import_name_type` key"
msgstr ""

#: src/items/external-blocks.md:413
msgid ""
"On x86 Windows, names of functions are \"decorated\" (i.e., have a specific "
"prefix and/or suffix added) to indicate their calling convention. For "
"example, a `stdcall` calling convention function with the name `fn1` that "
"has no arguments would be decorated as `_fn1@0`. However, the [PE Format]"
"(https://learn.microsoft.com/windows/win32/debug/pe-format#import-name-type) "
"does also permit names to have no prefix or be undecorated. Additionally, "
"the MSVC and GNU toolchains use different decorations for the same calling "
"conventions which means, by default, some Win32 functions cannot be called "
"using the `raw-dylib` link kind via the GNU toolchain."
msgstr ""

#: src/items/external-blocks.md:424
msgid ""
"To allow for these differences, when using the `raw-dylib` link kind you may "
"also specify the `import_name_type` key with one of the following values to "
"change how functions are named in the generated import library:"
msgstr ""

#: src/items/external-blocks.md:428
msgid ""
"`decorated`: The function name will be fully-decorated using the MSVC "
"toolchain format."
msgstr ""

#: src/items/external-blocks.md:430
msgid ""
"`noprefix`: The function name will be decorated using the MSVC toolchain "
"format, but skipping the leading `?`, `@`, or optionally `_`."
msgstr ""

#: src/items/external-blocks.md:432
msgid "`undecorated`: The function name will not be decorated."
msgstr ""

#: src/items/external-blocks.md:436
msgid ""
"If the `import_name_type` key is not specified, then the function name will "
"be fully-decorated using the target toolchain's format."
msgstr ""

#: src/items/external-blocks.md:441
msgid ""
"Variables are never decorated and so the `import_name_type` key has no "
"effect on how they are named in the generated import library."
msgstr ""

#: src/items/external-blocks.md:446
msgid ""
"The `import_name_type` key is only supported on x86 Windows. Using it when "
"targeting other platforms will result in a compiler error."
msgstr ""

#: src/items/external-blocks.md:451
msgid "The `link_name` attribute"
msgstr ""

#: src/items/external-blocks.md:455
msgid ""
"The _`link_name` attribute_ may be specified on declarations inside an "
"`extern` block to indicate the symbol to import for the given function or "
"static."
msgstr ""

#: src/items/external-blocks.md:460
msgid ""
"It uses the [_MetaNameValueStr_](../attributes.md#meta-item-attribute-"
"syntax) syntax to specify the name of the symbol."
msgstr ""

#: src/items/external-blocks.md:464
msgid "\"actual_symbol_name\""
msgstr ""

#: src/items/external-blocks.md:471
msgid ""
"Using this attribute with the `link_ordinal` attribute will result in a "
"compiler error."
msgstr ""

#: src/items/external-blocks.md:476
msgid "The `link_ordinal` attribute"
msgstr ""

#: src/items/external-blocks.md:480
msgid ""
"The _`link_ordinal` attribute_ can be applied on declarations inside an "
"`extern` block to indicate the numeric ordinal to use when generating the "
"import library to link against. An ordinal is a unique number per symbol "
"exported by a dynamic library on Windows and can be used when the library is "
"being loaded to find that symbol rather than having to look it up by name."
msgstr ""

#: src/items/external-blocks.md:488
msgid ""
"_**Warning:**_ `link_ordinal` should only be used in cases where the ordinal "
"of the symbol is known to be stable: if the ordinal of a symbol is not "
"explicitly set when its containing binary is built then one will be "
"automatically assigned to it, and that assigned ordinal may change between "
"builds of the binary."
msgstr ""

#: src/items/external-blocks.md:496
msgid "\"exporter\""
msgstr ""

#: src/items/external-blocks.md:496
msgid "\"raw-dylib\""
msgstr ""

#: src/items/external-blocks.md:505
msgid ""
"This attribute is only used with the `raw-dylib` linking kind. Using any "
"other kind will result in a compiler error."
msgstr ""

#: src/items/external-blocks.md:510
msgid ""
"Using this attribute with the `link_name` attribute will result in a "
"compiler error."
msgstr ""

#: src/items/external-blocks.md:517
msgid ""
"Attributes on extern function parameters follow the same rules and "
"restrictions as [regular function parameters](functions.md#attributes-on-"
"function-parameters)."
msgstr ""

#: src/items/generics.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_GenericParams_ :  \n"
"      `<` `>`  \n"
"    | `<` (_GenericParam_ `,`)<sup>\\*</sup> _GenericParam_ `,`<sup>?</sup> "
"`>`"
msgstr ""

#: src/items/generics.md:12
msgid ""
"_GenericParam_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> ( _LifetimeParam_ | "
"_TypeParam_ | _ConstParam_ )"
msgstr ""

#: src/items/generics.md:15
msgid ""
"_LifetimeParam_ :  \n"
"   [_Lifetime_](../trait-bounds.md) ( `:` [_LifetimeBounds_](../trait-"
"bounds.md) )<sup>?</sup>"
msgstr ""

#: src/items/generics.md:18
msgid ""
"_TypeParam_ :  \n"
"   [IDENTIFIER](../identifiers.md) ( `:` [_TypeParamBounds_](../trait-"
"bounds.md)<sup>?</sup> )<sup>?</sup> ( `=` [_Type_](../types.md#type-"
"expressions) )<sup>?</sup>"
msgstr ""

#: src/items/generics.md:21
msgid ""
"_ConstParam_:  \n"
"   `const` [IDENTIFIER](../identifiers.md) `:` [_Type_](../types.md#type-"
"expressions) ( `=` _[Block](../expressions/block-expr.md)_ | [IDENTIFIER](../"
"identifiers.md) | -<sup>?</sup>[LITERAL](../expressions/literal-"
"expr.md) )<sup>?</sup>"
msgstr ""

#: src/items/generics.md:26
msgid ""
"[Functions](functions.md), [type aliases](type-aliases.md), [structs]"
"(structs.md), [enumerations](enumerations.md), [unions](unions.md), [traits]"
"(traits.md), and [implementations](implementations.md) may be "
"_parameterized_ by types, constants, and lifetimes. These parameters are "
"listed in angle <span class=\"parenthetical\">brackets (`<...>`)</span>, "
"usually immediately after the name of the item and before its definition. "
"For implementations, which don't have a name, they come directly after "
"`impl`."
msgstr ""

#: src/items/generics.md:34
msgid ""
"The order of generic parameters is restricted to lifetime parameters and "
"then type and const parameters intermixed."
msgstr ""

#: src/items/generics.md:38
msgid ""
"The same parameter name may not be declared more than once in a "
"_GenericParams_ list."
msgstr ""

#: src/items/generics.md:40
msgid "Some examples of items with type, const, and lifetime parameters:"
msgstr ""

#: src/items/generics.md:52
msgid ""
"Generic parameters are in scope within the item definition where they are "
"declared. They are not in scope for items declared within the body of a "
"function as described in [item declarations](../statements.md#item-"
"declarations). See [generic parameter scopes](../names/scopes.md#generic-"
"parameter-scopes) for more details."
msgstr ""

#: src/items/generics.md:59
msgid ""
"[References](../types/pointer.md#shared-references-), [raw pointers](../"
"types/pointer.md#raw-pointers-const-and-mut), [arrays](../types/array.md), "
"[slices](../types/slice.md), [tuples](../types/tuple.md), and [function "
"pointers](../types/function-pointer.md) have lifetime or type parameters as "
"well, but are not referred to with path syntax."
msgstr ""

#: src/items/generics.md:65
msgid "`'_` and `'static` are not valid lifetime parameter names."
msgstr ""

#: src/items/generics.md:69
msgid "Const generics"
msgstr ""

#: src/items/generics.md:73
msgid ""
"_Const generic parameters_ allow items to be generic over constant values."
msgstr ""

#: src/items/generics.md:77
msgid ""
"The const identifier introduces a name in the [value namespace](../names/"
"namespaces.md) for the constant parameter, and all instances of the item "
"must be instantiated with a value of the given type."
msgstr ""

#: src/items/generics.md:81
msgid ""
"The only allowed types of const parameters are `u8`, `u16`, `u32`, `u64`, "
"`u128`, `usize`, `i8`, `i16`, `i32`, `i64`, `i128`, `isize`, `char` and "
"`bool`."
msgstr ""

#: src/items/generics.md:86
msgid ""
"Const parameters can be used anywhere a [const item](constant-items.md) can "
"be used, with the exception that when used in a [type](../types.md) or "
"[array repeat expression](../expressions/array-expr.md), it must be "
"standalone (as described below). That is, they are allowed in the following "
"places:"
msgstr ""

#: src/items/generics.md:91
msgid ""
"As an applied const to any type which forms a part of the signature of the "
"item in question."
msgstr ""

#: src/items/generics.md:93
msgid ""
"As part of a const expression used to define an [associated const]"
"(associated-items.md#associated-constants), or as a parameter to an "
"[associated type](associated-items.md#associated-types)."
msgstr ""

#: src/items/generics.md:95
msgid ""
"As a value in any runtime expression in the body of any functions in the "
"item."
msgstr ""

#: src/items/generics.md:97
msgid ""
"As a parameter to any type used in the body of any functions in the item."
msgstr ""

#: src/items/generics.md:98
msgid "As a part of the type of any fields in the item."
msgstr ""

#: src/items/generics.md:101
msgid "// Examples where const generic parameters can be used.\n"
msgstr ""

#: src/items/generics.md:102
msgid "// Used in the signature of the item itself.\n"
msgstr ""

#: src/items/generics.md:105
msgid "// Used as a type within a function body.\n"
msgstr ""

#: src/items/generics.md:110
msgid "// Used as a field of a struct.\n"
msgstr ""

#: src/items/generics.md:115
msgid "// Used as an associated constant.\n"
msgstr ""

#: src/items/generics.md:124
msgid "// Used as an associated type.\n"
msgstr ""

#: src/items/generics.md:130
msgid "// Examples where const generic parameters cannot be used.\n"
msgstr ""

#: src/items/generics.md:132
msgid "// Cannot use in item definitions within a function body.\n"
msgstr ""

#: src/items/generics.md:145
msgid ""
"As a further restriction, const parameters may only appear as a standalone "
"argument inside of a [type](../types.md) or [array repeat expression](../"
"expressions/array-expr.md). In those contexts, they may only be used as a "
"single segment [path expression](../expressions/path-expr.md), possibly "
"inside a [block](../expressions/block-expr.md) (such as `N` or `{N}`). That "
"is, they cannot be combined with other expressions."
msgstr ""

#: src/items/generics.md:152
msgid "// Examples where const parameters may not be used.\n"
msgstr ""

#: src/items/generics.md:153
msgid ""
"// Not allowed to combine in other expressions in types, such as the\n"
"// arithmetic expression in the return type here.\n"
msgstr ""

#: src/items/generics.md:157
msgid "// Similarly not allowed for array repeat expressions.\n"
msgstr ""

#: src/items/generics.md:164
msgid ""
"A const argument in a [path](../paths.md) specifies the const value to use "
"for that item."
msgstr ""

#: src/items/generics.md:168
msgid ""
"The argument must be a [const expression](../const_eval.md#constant-"
"expressions) of the type ascribed to the const parameter. The const "
"expression must be a [block expression](../expressions/block-expr.md) "
"(surrounded with braces) unless it is a single path segment (an [IDENTIFIER]"
"(../identifiers.md)) or a [literal](../expressions/literal-expr.md) (with a "
"possibly leading `-` token)."
msgstr ""

#: src/items/generics.md:173
msgid ""
"**Note**: This syntactic restriction is necessary to avoid requiring "
"infinite lookahead when parsing an expression inside of a type."
msgstr ""

#: src/items/generics.md:178
msgid "\"doubled: {}\""
msgstr ""

#: src/items/generics.md:184
msgid "// Example usage of a const argument.\n"
msgstr ""

#: src/items/generics.md:195
msgid ""
"When there is ambiguity if a generic argument could be resolved as either a "
"type or const argument, it is always resolved as a type. Placing the "
"argument in a block expression can force it to be interpreted as a const "
"argument."
msgstr ""

#: src/items/generics.md:205
msgid ""
"// The following is an error, because `N` is interpreted as the type alias "
"`N`.\n"
msgstr ""

#: src/items/generics.md:207
msgid ""
"// ERROR\n"
"// Can be fixed by wrapping in braces to force it to be interpreted as the "
"`N`\n"
"// const parameter:\n"
msgstr ""

#: src/items/generics.md:210 src/items/generics.md:220
msgid "// ok\n"
msgstr ""

#: src/items/generics.md:215
msgid ""
"Unlike type and lifetime parameters, const parameters can be declared "
"without being used inside of a parameterized item, with the exception of "
"implementations as described in [generic implementations]"
"(implementations.md#generic-implementations):"
msgstr ""

#: src/items/generics.md:223
msgid "// ERROR: unused parameter\n"
msgstr ""

#: src/items/generics.md:233
msgid ""
"When resolving a trait bound obligation, the exhaustiveness of all "
"implementations of const parameters is not considered when determining if "
"the bound is satisfied. For example, in the following, even though all "
"possible const values for the `bool` type are implemented, it is still an "
"error that the trait bound is not satisfied:"
msgstr ""

#: src/items/generics.md:248
msgid "// ERROR: trait bound `Foo<B>: Bar` is not satisfied\n"
msgstr ""

#: src/items/generics.md:254
msgid "Where clauses"
msgstr ""

#: src/items/generics.md:258
msgid ""
"**<sup>Syntax</sup>**  \n"
"_WhereClause_ :  \n"
"   `where` ( _WhereClauseItem_ `,` )<sup>\\*</sup> _WhereClauseItem_ <sup>?</"
"sup>"
msgstr ""

#: src/items/generics.md:262
msgid ""
"_WhereClauseItem_ :  \n"
"      _LifetimeWhereClauseItem_  \n"
"   | _TypeBoundWhereClauseItem_"
msgstr ""

#: src/items/generics.md:266
msgid ""
"_LifetimeWhereClauseItem_ :  \n"
"   [_Lifetime_](../trait-bounds.md) `:` [_LifetimeBounds_](../trait-"
"bounds.md)"
msgstr ""

#: src/items/generics.md:269
msgid ""
"_TypeBoundWhereClauseItem_ :  \n"
"   [_ForLifetimes_](../trait-bounds.md#higher-ranked-trait-bounds)<sup>?</"
"sup> [_Type_](../types.md#type-expressions) `:` [_TypeParamBounds_](../trait-"
"bounds.md)<sup>?</sup>"
msgstr ""

#: src/items/generics.md:274
msgid ""
"_Where clauses_ provide another way to specify bounds on type and lifetime "
"parameters as well as a way to specify bounds on types that aren't type "
"parameters."
msgstr ""

#: src/items/generics.md:280
msgid ""
"The `for` keyword can be used to introduce [higher-ranked lifetimes](../"
"trait-bounds.md#higher-ranked-trait-bounds). It only allows [_LifetimeParam_]"
"(#generic-parameters) parameters."
msgstr ""

#: src/items/generics.md:286
msgid "// Could use A<T: Iterator> instead\n"
msgstr ""

#: src/items/generics.md:287
msgid "// Bound on an associated type\n"
msgstr ""

#: src/items/generics.md:288
msgid "// Bound on `String`, using the type parameter\n"
msgstr ""

#: src/items/generics.md:289 src/trait-bounds.md:113
msgid "// Allowed, but not useful\n"
msgstr ""

#: src/items/generics.md:299
msgid ""
"Generic lifetime and type parameters allow [attributes](../attributes.md) on "
"them. There are no built-in attributes that do anything in this position, "
"although custom derive attributes may give meaning to it."
msgstr ""

#: src/items/generics.md:303
msgid ""
"This example shows using a custom derive attribute to modify the meaning of "
"a generic parameter."
msgstr ""

#: src/items/generics.md:308
msgid ""
"// Assume that the derive for MyFlexibleClone declared `my_flexible_clone` "
"as\n"
"// an attribute it understands.\n"
msgstr ""

#: src/items/associated-items.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_AssociatedItem_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> (  \n"
"         [_MacroInvocationSemi_](../macros.md#macro-invocation)  \n"
"      | ( [_Visibility_](../visibility-and-privacy.md)<sup>?</sup> "
"( [_TypeAlias_](type-aliases.md) | [_ConstantItem_](constant-items.md) | "
"[_Function_](functions.md) ) )  \n"
"   )"
msgstr ""

#: src/items/associated-items.md:16
msgid ""
"_Associated Items_ are the items declared in [traits](traits.md) or defined "
"in [implementations](implementations.md). They are called this because they "
"are defined on an associate type — the type in the implementation."
msgstr ""

#: src/items/associated-items.md:22
msgid ""
"They are a subset of the kinds of items you can declare in a module. "
"Specifically, there are [associated functions](#associated-functions-and-"
"methods) (including methods), [associated types](#associated-types), and "
"[associated constants](#associated-constants)."
msgstr ""

#: src/items/associated-items.md:31
msgid ""
"Associated items are useful when the associated item logically is related to "
"the associating item. For example, the `is_some` method on `Option` is "
"intrinsically related to Options, so should be associated."
msgstr ""

#: src/items/associated-items.md:37
msgid ""
"Every associated item kind comes in two varieties: definitions that contain "
"the actual implementation and declarations that declare signatures for "
"definitions."
msgstr ""

#: src/items/associated-items.md:43
msgid ""
"It is the declarations that make up the contract of traits and what is "
"available on generic types."
msgstr ""

#: src/items/associated-items.md:48
msgid "Associated functions and methods"
msgstr ""

#: src/items/associated-items.md:52
msgid ""
"_Associated functions_ are [functions](functions.md) associated with a type."
msgstr ""

#: src/items/associated-items.md:56
msgid ""
"An _associated function declaration_ declares a signature for an associated "
"function definition. It is written as a function item, except the function "
"body is replaced with a `;`."
msgstr ""

#: src/items/associated-items.md:62
msgid "The identifier is the name of the function."
msgstr ""

#: src/items/associated-items.md:66
msgid ""
"The generics, parameter list, return type, and where clause of the "
"associated function must be the same as the associated function "
"declarations's."
msgstr ""

#: src/items/associated-items.md:71
msgid ""
"An _associated function definition_ defines a function associated with "
"another type. It is written the same as a [function item](../types/function-"
"item.md)."
msgstr ""

#: src/items/associated-items.md:74
msgid ""
"An example of a common associated function is a `new` function that returns "
"a value of the type the associated function is associated with."
msgstr ""

#: src/items/associated-items.md:97
msgid ""
"When the associated function is declared on a trait, the function can also "
"be called with a [path](../paths.md) that is a path to the trait appended by "
"the name of the trait. When this happens, it is substituted for `<_ as "
"Trait>::function_name`."
msgstr ""

#: src/items/associated-items.md:109
msgid "// These 4 are all equivalent in this case.\n"
msgstr ""

#: src/items/associated-items.md:119
msgid "Methods"
msgstr ""

#: src/items/associated-items.md:123
msgid ""
"Associated functions whose first parameter is named `self` are called "
"_methods_ and may be invoked using the [method call operator](../expressions/"
"method-call-expr.md), for example, `x.foo()`, as well as the usual function "
"call notation."
msgstr ""

#: src/items/associated-items.md:129
msgid ""
"If the type of the `self` parameter is specified, it is limited to types "
"resolving to one generated by the following grammar (where `'lt` denotes "
"some arbitrary lifetime):"
msgstr ""

#: src/items/associated-items.md:138
msgid ""
"The `Self` terminal in this grammar denotes a type resolving to the "
"implementing type. This can also include the contextual type alias `Self`, "
"other type aliases, or associated type projections resolving to the "
"implementing type."
msgstr ""

#: src/items/associated-items.md:145
msgid "// Examples of methods implemented on struct `Example`.\n"
msgstr ""

#: src/items/associated-items.md:168
msgid ""
"Shorthand syntax can be used without specifying a type, which have the "
"following equivalents:"
msgstr ""

#: src/items/associated-items.md:171
msgid "Shorthand"
msgstr ""

#: src/items/associated-items.md:171
msgid "Equivalent"
msgstr ""

#: src/items/associated-items.md:173 src/paths.md:248
msgid "`self`"
msgstr ""

#: src/items/associated-items.md:173
msgid "`self: Self`"
msgstr ""

#: src/items/associated-items.md:174
msgid "`&'lifetime self`"
msgstr ""

#: src/items/associated-items.md:174
msgid "`self: &'lifetime Self`"
msgstr ""

#: src/items/associated-items.md:175
msgid "`&'lifetime mut self`"
msgstr ""

#: src/items/associated-items.md:175
msgid "`self: &'lifetime mut Self`"
msgstr ""

#: src/items/associated-items.md:177
msgid ""
"**Note**: Lifetimes can be, and usually are, elided with this shorthand."
msgstr ""

#: src/items/associated-items.md:181
msgid ""
"If the `self` parameter is prefixed with `mut`, it becomes a mutable "
"variable, similar to regular parameters using a `mut` [identifier pattern]"
"(../patterns.md#identifier-patterns). For example:"
msgstr ""

#: src/items/associated-items.md:191
msgid "As an example of methods on a trait, consider the following:"
msgstr ""

#: src/items/associated-items.md:202
msgid ""
"This defines a trait with two methods. All values that have [implementations]"
"(implementations.md) of this trait while the trait is in scope can have "
"their `draw` and `bounding_box` methods called."
msgstr ""

#: src/items/associated-items.md:234
msgid ""
"**Edition differences**: In the 2015 edition, it is possible to declare "
"trait methods with anonymous parameters (e.g. `fn foo(u8)`). This is "
"deprecated and an error as of the 2018 edition. All parameters must have an "
"argument name."
msgstr ""

#: src/items/associated-items.md:240
msgid "Attributes on method parameters"
msgstr ""

#: src/items/associated-items.md:242
msgid ""
"Attributes on method parameters follow the same rules and restrictions as "
"[regular function parameters](functions.md#attributes-on-function-"
"parameters)."
msgstr ""

#: src/items/associated-items.md:247
msgid "Associated Types"
msgstr ""

#: src/items/associated-items.md:251
msgid ""
"_Associated types_ are [type aliases](type-aliases.md) associated with "
"another type."
msgstr ""

#: src/items/associated-items.md:255
msgid ""
"Associated types cannot be defined in [inherent implementations]"
"(implementations.md#inherent-implementations) nor can they be given a "
"default implementation in traits."
msgstr ""

#: src/items/associated-items.md:260
msgid ""
"An _associated type declaration_ declares a signature for associated type "
"definitions. It is written in one of the following forms, where `Assoc` is "
"the name of the associated type, `Params` is a comma-separated list of type, "
"lifetime or const parameters, `Bounds` is a plus-separated list of trait "
"bounds that the associated type must meet, and `WhereBounds` is a comma-"
"separated list of bounds that the parameters must meet:"
msgstr ""

#: src/items/associated-items.md:279
msgid "The identifier is the name of the declared type alias."
msgstr ""

#: src/items/associated-items.md:283
msgid ""
"The optional trait bounds must be fulfilled by the implementations of the "
"type alias."
msgstr ""

#: src/items/associated-items.md:287
msgid ""
"There is an implicit [`Sized`](../special-types-and-traits.md#sized) bound "
"on associated types that can be relaxed using the special `?Sized` bound."
msgstr ""

#: src/items/associated-items.md:291
msgid ""
"An _associated type definition_ defines a type alias for the implementation "
"of a trait on a type"
msgstr ""

#: src/items/associated-items.md:296
msgid ""
"They are written similarly to an _associated type declaration_, but cannot "
"contain `Bounds`, but instead must contain a `Type`:"
msgstr ""

#: src/items/associated-items.md:301
msgid "// the type `Type` here may reference `Params`\n"
msgstr ""

#: src/items/associated-items.md:303
msgid "// deprecated, prefer the form above\n"
msgstr ""

#: src/items/associated-items.md:308
msgid ""
"If a type `Item` has an associated type `Assoc` from a trait `Trait`, then "
"`<Item as Trait>::Assoc` is a type that is an alias of the type specified in "
"the associated type definition"
msgstr ""

#: src/items/associated-items.md:314
msgid ""
"Furthermore, if `Item` is a type parameter, then `Item::Assoc` can be used "
"in type parameters."
msgstr ""

#: src/items/associated-items.md:318
msgid ""
"Associated types may include [generic parameters](generics.md) and [where "
"clauses](generics.md#where-clauses); these are often referred to as _generic "
"associated types_, or _GATs_. If the type `Thing` has an associated type "
"`Item` from a trait `Trait` with the generics `<'a>` , the type can be named "
"like `<Thing as Trait>::Item<'x>`, where `'x` is some lifetime in scope. In "
"this case, `'x` will be used wherever `'a` appears in the associated type "
"definitions on impls."
msgstr ""

#: src/items/associated-items.md:327
msgid "// Associated type declaration\n"
msgstr ""

#: src/items/associated-items.md:336
msgid "// Associated type definition\n"
msgstr ""

#: src/items/associated-items.md:347
msgid ""
"// Usage of the associated type to refer to OtherStruct as <Struct as "
"AssociatedType>::Assoc\n"
msgstr ""

#: src/items/associated-items.md:352
msgid "An example of associated types with generics and where clauses:"
msgstr ""

#: src/items/associated-items.md:358
msgid "// Generic associated type declaration\n"
msgstr ""

#: src/items/associated-items.md:364
msgid "// Generic associated type definition\n"
msgstr ""

#: src/items/associated-items.md:382
msgid "Associated Types Container Example"
msgstr ""

#: src/items/associated-items.md:384
msgid ""
"Consider the following example of a `Container` trait. Notice that the type "
"is available for use in the method signatures:"
msgstr ""

#: src/items/associated-items.md:395
msgid ""
"In order for a type to implement this trait, it must not only provide "
"implementations for every method, but it must specify the type `E`. Here's "
"an implementation of `Container` for the standard library type `Vec`:"
msgstr ""

#: src/items/associated-items.md:412
msgid "Relationship between `Bounds` and `WhereBounds`"
msgstr ""

#: src/items/associated-items.md:414 src/attributes/diagnostics.md:567
msgid "In this example:"
msgstr ""

#: src/items/associated-items.md:423
msgid ""
"Given a reference to the associated type like `<X as Example>::Output<Y>`, "
"the associated type itself must be `Ord`, and the type `Y` must be `Debug`."
msgstr ""

#: src/items/associated-items.md:427
msgid "Required where clauses on generic associated types"
msgstr ""

#: src/items/associated-items.md:431
msgid ""
"Generic associated type declarations on traits currently may require a list "
"of where clauses, dependent on functions in the trait and how the GAT is "
"used. These rules may be loosened in the future; updates can be found [on "
"the generic associated types initiative repository](https://rust-"
"lang.github.io/generic-associated-types-initiative/explainer/"
"required_bounds.html)."
msgstr ""

#: src/items/associated-items.md:438
msgid ""
"In a few words, these where clauses are required in order to maximize the "
"allowed definitions of the associated type in impls. To do this, any clauses "
"that _can be proven to hold_ on functions (using the parameters of the "
"function or trait) where a GAT appears as an input or output must also be "
"written on the GAT itself."
msgstr ""

#: src/items/associated-items.md:450
msgid ""
"In the above, on the `next` function, we can prove that `Self: 'a`, because "
"of the implied bounds from `&'a mut self`; therefore, we must write the "
"equivalent bound on the GAT itself: `where Self: 'x`."
msgstr ""

#: src/items/associated-items.md:456
msgid ""
"When there are multiple functions in a trait that use the GAT, then the "
"_intersection_ of the bounds from the different functions are used, rather "
"than the union."
msgstr ""

#: src/items/associated-items.md:468
msgid ""
"In this example, no bounds are required on the `type Checker<'a>;`. While we "
"know that `T: 'a` on `create_checker`, we do not know that on `do_check`. "
"However, if `do_check` was commented out, then the `where T: 'x` bound would "
"be required on `Checker`."
msgstr ""

#: src/items/associated-items.md:475
msgid "The bounds on associated types also propagate required where clauses."
msgstr ""

#: src/items/associated-items.md:485
msgid ""
"Here, `where Self: 'a` is required on `Item` because of `iter`. However, "
"`Item` is used in the bounds of `Iterator`, the `where Self: 'a` clause is "
"also required there."
msgstr ""

#: src/items/associated-items.md:491
msgid ""
"Finally, any explicit uses of `'static` on GATs in the trait do not count "
"towards the required bounds."
msgstr ""

#: src/items/associated-items.md:503
msgid "Associated Constants"
msgstr ""

#: src/items/associated-items.md:507
msgid ""
"_Associated constants_ are [constants](constant-items.md) associated with a "
"type."
msgstr ""

#: src/items/associated-items.md:511
msgid ""
"An _associated constant declaration_ declares a signature for associated "
"constant definitions. It is written as `const`, then an identifier, then "
"`:`, then a type, finished by a `;`."
msgstr ""

#: src/items/associated-items.md:517
msgid ""
"The identifier is the name of the constant used in the path. The type is the "
"type that the definition has to implement."
msgstr ""

#: src/items/associated-items.md:522
msgid ""
"An _associated constant definition_ defines a constant associated with a "
"type. It is written the same as a [constant item](constant-items.md)."
msgstr ""

#: src/items/associated-items.md:527
msgid ""
"Associated constant definitions undergo [constant evaluation](../"
"const_eval.md) only when referenced. Further, definitions that include "
"[generic parameters](generics.md) are evaluated after monomorphization."
msgstr ""

#: src/items/associated-items.md:536 src/items/associated-items.md:541
msgid "// Definition not immediately evaluated\n"
msgstr ""

#: src/items/associated-items.md:537
msgid "\"compile-time panic\""
msgstr ""

#: src/items/associated-items.md:543
msgid "\"contradiction\""
msgstr ""

#: src/items/associated-items.md:548
msgid "// Referencing Struct::PANIC causes compilation error\n"
msgstr ""

#: src/items/associated-items.md:551
msgid "// Fine, ID is not 0\n"
msgstr ""

#: src/items/associated-items.md:554
msgid "// Compilation error from evaluating NON_ZERO with ID=0\n"
msgstr ""

#: src/items/associated-items.md:559
msgid "Associated Constants Examples"
msgstr ""

#: src/items/associated-items.md:561
msgid "A basic example:"
msgstr ""

#: src/items/associated-items.md:579
msgid "Using default values:"
msgstr ""

#: src/attributes.md:34
msgid ""
"**<sup>Syntax</sup>**  \n"
"_InnerAttribute_ :  \n"
"   `#` `!` `[` _Attr_ `]`"
msgstr ""

#: src/attributes.md:38
msgid ""
"_OuterAttribute_ :  \n"
"   `#` `[` _Attr_ `]`"
msgstr ""

#: src/attributes.md:41
msgid ""
"_Attr_ :  \n"
"      [_SimplePath_](paths.md#simple-paths) _AttrInput_<sup>?</sup>  \n"
"   | `unsafe` `(` [_SimplePath_](paths.md#simple-paths) _AttrInput_<sup>?</"
"sup> `)`"
msgstr ""

#: src/attributes.md:45
msgid ""
"_AttrInput_ :  \n"
"      [_DelimTokenTree_](macros.md)  \n"
"   | `=` [_Expression_](expressions.md)"
msgstr ""

#: src/attributes.md:51
msgid ""
"An _attribute_ is a general, free-form metadatum that is interpreted "
"according to name, convention, language, and compiler version. Attributes "
"are modeled on Attributes in [ECMA-335](https://www.ecma-international.org/"
"publications-and-standards/standards/ecma-335/), with the syntax coming from "
"[ECMA-334](https://www.ecma-international.org/publications-and-standards/"
"standards/ecma-334/) (C#)."
msgstr ""

#: src/attributes.md:57
msgid ""
"_Inner attributes_, written with a bang (`!`) after the hash (`#`), apply to "
"the item that the attribute is declared within. _Outer attributes_, written "
"without the bang after the hash, apply to the thing that follows the "
"attribute."
msgstr ""

#: src/attributes.md:63
msgid ""
"The attribute consists of a path to the attribute, followed by an optional "
"delimited token tree whose interpretation is defined by the attribute. "
"Attributes other than macro attributes also allow the input to be an equals "
"sign (`=`) followed by an expression. See the [meta item syntax](#meta-item-"
"attribute-syntax) below for more details."
msgstr ""

#: src/attributes.md:71
msgid ""
"An attribute may be unsafe to apply. To avoid undefined behavior when using "
"these attributes, certain obligations that cannot be checked by the compiler "
"must be met.  To assert these have been, the attribute is wrapped in "
"`unsafe(..)`, e.g. `#[unsafe(no_mangle)]`."
msgstr ""

#: src/attributes.md:76
msgid "The following attributes are unsafe:"
msgstr ""

#: src/attributes.md:78
msgid "[`export_name`](abi.md#the-export_name-attribute)"
msgstr ""

#: src/attributes.md:79
msgid "[`link_section`](abi.md#the-link_section-attribute)"
msgstr ""

#: src/attributes.md:80
msgid "[`no_mangle`](abi.md#the-no_mangle-attribute)"
msgstr ""

#: src/attributes.md:84
msgid "Attributes can be classified into the following kinds:"
msgstr ""

#: src/attributes.md:86
msgid "[Built-in attributes](#built-in-attributes-index)"
msgstr ""

#: src/attributes.md:87
msgid "[Proc macro attributes](procedural-macros.md#attribute-macros)"
msgstr ""

#: src/attributes.md:88
msgid ""
"[Derive macro helper attributes](procedural-macros.md#derive-macro-helper-"
"attributes)"
msgstr ""

#: src/attributes.md:89
msgid "[Tool attributes](#tool-attributes)"
msgstr ""

#: src/attributes.md:93
msgid "Attributes may be applied to many things in the language:"
msgstr ""

#: src/attributes.md:95
msgid ""
"All [item declarations](items.md) accept outer attributes while [external "
"blocks](items/external-blocks.md), [functions](items/functions.md), "
"[implementations](items/implementations.md), and [modules](items/modules.md) "
"accept inner attributes."
msgstr ""

#: src/attributes.md:97
msgid ""
"Most [statements](statements.md) accept outer attributes (see [Expression "
"Attributes](expressions.md#expression-attributes) for limitations on "
"expression statements)."
msgstr ""

#: src/attributes.md:99
msgid ""
"[Block expressions](expressions/block-expr.md) accept outer and inner "
"attributes, but only when they are the outer expression of an [expression "
"statement](statements.md#expression-statements) or the final expression of "
"another block expression."
msgstr ""

#: src/attributes.md:102
msgid ""
"[Enum](items/enumerations.md) variants and [struct](items/structs.md) and "
"[union](items/unions.md) fields accept outer attributes."
msgstr ""

#: src/attributes.md:103
msgid ""
"[Match expression arms](expressions/match-expr.md) accept outer attributes."
msgstr ""

#: src/attributes.md:104
msgid ""
"[Generic lifetime or type parameter](items/generics.md) accept outer "
"attributes."
msgstr ""

#: src/attributes.md:105
msgid ""
"Expressions accept outer attributes in limited situations, see [Expression "
"Attributes](expressions.md#expression-attributes) for details."
msgstr ""

#: src/attributes.md:107
msgid ""
"[Function](items/functions.md), [closure](expressions/closure-expr.md) and "
"[function pointer](types/function-pointer.md) parameters accept outer "
"attributes. This includes attributes on variadic parameters denoted with "
"`...` in function pointers and [external blocks](items/external-"
"blocks.html#variadic-functions)."
msgstr ""

#: src/attributes.md:111
msgid "Some examples of attributes:"
msgstr ""

#: src/attributes.md:114
msgid "// General metadata applied to the enclosing module or crate.\n"
msgstr ""

#: src/attributes.md:116
msgid "// A function marked as a unit test\n"
msgstr ""

#: src/attributes.md:122
msgid "// A conditionally-compiled module\n"
msgstr ""

#: src/attributes.md:128
msgid "// A lint attribute used to suppress a warning/error\n"
msgstr ""

#: src/attributes.md:132
msgid "// Inner attribute applies to the entire function.\n"
msgstr ""

#: src/attributes.md:145
msgid "Meta Item Attribute Syntax"
msgstr ""

#: src/attributes.md:149
msgid ""
"A \"meta item\" is the syntax used for the _Attr_ rule by most [built-in "
"attributes](#built-in-attributes-index). It has the following grammar:"
msgstr ""

#: src/attributes.md:154
msgid ""
"**<sup>Syntax</sup>**  \n"
"_MetaItem_ :  \n"
"      [_SimplePath_](paths.md#simple-paths)  \n"
"   | [_SimplePath_](paths.md#simple-paths) `=` [_Expression_]"
"(expressions.md)  \n"
"   | [_SimplePath_](paths.md#simple-paths) `(` _MetaSeq_<sup>?</sup> `)`"
msgstr ""

#: src/attributes.md:160
msgid ""
"_MetaSeq_ :  \n"
"   _MetaItemInner_ ( `,` MetaItemInner )<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/attributes.md:163
msgid ""
"_MetaItemInner_ :  \n"
"      _MetaItem_  \n"
"   | [_Expression_](expressions.md)"
msgstr ""

#: src/attributes.md:169
msgid ""
"Expressions in meta items must macro-expand to literal expressions, which "
"must not include integer or float type suffixes. Expressions which are not "
"literal expressions will be syntactically accepted (and can be passed to "
"proc-macros), but will be rejected after parsing."
msgstr ""

#: src/attributes.md:175
msgid ""
"Note that if the attribute appears within another macro, it will be expanded "
"after that outer macro. For example, the following code will expand the "
"`Serialize` proc-macro first, which must preserve the `include_str!` call in "
"order for it to be expanded:"
msgstr ""

#: src/attributes.md:180
msgid ""
"```rust ignore\n"
"#[derive(Serialize)]\n"
"struct Foo {\n"
"    #[doc = include_str!(\"x.md\")]\n"
"    x: u32\n"
"}\n"
"```"
msgstr ""

#: src/attributes.md:190
msgid ""
"Additionally, macros in attributes will be expanded only after all other "
"attributes applied to the item:"
msgstr ""

#: src/attributes.md:192
msgid ""
"```rust ignore\n"
"#[macro_attr1] // expanded first\n"
"#[doc = mac!()] // `mac!` is expanded fourth.\n"
"#[macro_attr2] // expanded second\n"
"#[derive(MacroDerive1, MacroDerive2)] // expanded third\n"
"fn foo() {}\n"
"```"
msgstr ""

#: src/attributes.md:202
msgid ""
"Various built-in attributes use different subsets of the meta item syntax to "
"specify their inputs. The following grammar rules show some commonly used "
"forms:"
msgstr ""

#: src/attributes.md:206
msgid ""
"**<sup>Syntax</sup>**  \n"
"_MetaWord_:  \n"
"   [IDENTIFIER](identifiers.md)"
msgstr ""

#: src/attributes.md:210
msgid ""
"_MetaNameValueStr_:  \n"
"   [IDENTIFIER](identifiers.md) `=` ([STRING_LITERAL](tokens.md#string-"
"literals) | [RAW_STRING_LITERAL](tokens.md#raw-string-literals))"
msgstr ""

#: src/attributes.md:213
msgid ""
"_MetaListPaths_:  \n"
"   [IDENTIFIER](identifiers.md) `(` ( [_SimplePath_](paths.md#simple-paths) "
"(`,` [_SimplePath_](paths.md#simple-paths))\\* `,`<sup>?</sup> )<sup>?</sup> "
"`)`"
msgstr ""

#: src/attributes.md:216
msgid ""
"_MetaListIdents_:  \n"
"   [IDENTIFIER](identifiers.md) `(` ( [IDENTIFIER](identifiers.md) (`,` "
"[IDENTIFIER](identifiers.md))\\* `,`<sup>?</sup> )<sup>?</sup> `)`"
msgstr ""

#: src/attributes.md:219
msgid ""
"_MetaListNameValueStr_:  \n"
"   [IDENTIFIER](identifiers.md) `(` ( _MetaNameValueStr_ (`,` "
"_MetaNameValueStr_)\\* `,`<sup>?</sup> )<sup>?</sup> `)`"
msgstr ""

#: src/attributes.md:222
msgid "Some examples of meta items are:"
msgstr ""

#: src/attributes.md:224
msgid "Style"
msgstr ""

#: src/attributes.md:226
msgid "_MetaWord_"
msgstr ""

#: src/attributes.md:226
msgid "`no_std`"
msgstr ""

#: src/attributes.md:227
msgid "_MetaNameValueStr_"
msgstr ""

#: src/attributes.md:227
msgid "`doc = \"example\"`"
msgstr ""

#: src/attributes.md:228
msgid "_MetaListPaths_"
msgstr ""

#: src/attributes.md:228
msgid "`allow(unused, clippy::inline_always)`"
msgstr ""

#: src/attributes.md:229
msgid "_MetaListIdents_"
msgstr ""

#: src/attributes.md:229
msgid "`macro_use(foo, bar)`"
msgstr ""

#: src/attributes.md:230
msgid "_MetaListNameValueStr_"
msgstr ""

#: src/attributes.md:230
msgid "`link(name = \"CoreFoundation\", kind = \"framework\")`"
msgstr ""

#: src/attributes.md:234
msgid "Active and inert attributes"
msgstr ""

#: src/attributes.md:238
msgid ""
"An attribute is either active or inert. During attribute processing, _active "
"attributes_ remove themselves from the thing they are on while _inert "
"attributes_ stay on."
msgstr ""

#: src/attributes.md:242
msgid ""
"The [`cfg`](conditional-compilation.md#the-cfg-attribute) and [`cfg_attr`]"
"(conditional-compilation.md#the-cfg_attr-attribute) attributes are active. "
"[Attribute macros](procedural-macros.md#attribute-macros) are active. All "
"other attributes are inert."
msgstr ""

#: src/attributes.md:247
msgid "Tool attributes"
msgstr ""

#: src/attributes.md:251
msgid ""
"The compiler may allow attributes for external tools where each tool resides "
"in its own module in the [tool prelude](names/preludes.md#tool-prelude). The "
"first segment of the attribute path is the name of the tool, with one or "
"more additional segments whose interpretation is up to the tool."
msgstr ""

#: src/attributes.md:258
msgid ""
"When a tool is not in use, the tool's attributes are accepted without a "
"warning. When the tool is in use, the tool is responsible for processing and "
"interpretation of its attributes."
msgstr ""

#: src/attributes.md:264
msgid ""
"Tool attributes are not available if the [`no_implicit_prelude`](names/"
"preludes.md#the-no_implicit_prelude-attribute) attribute is used."
msgstr ""

#: src/attributes.md:268
msgid "// Tells the rustfmt tool to not format the following element.\n"
msgstr ""

#: src/attributes.md:272
msgid ""
"// Controls the \"cyclomatic complexity\" threshold for the clippy tool.\n"
msgstr ""

#: src/attributes.md:274
msgid "\"100\""
msgstr ""

#: src/attributes.md:278
msgid ""
"Note: `rustc` currently recognizes the tools \"clippy\", \"rustfmt\", "
"\"diagnostic\", \"miri\" and \"rust_analyzer\"."
msgstr ""

#: src/attributes.md:283
msgid "Built-in attributes index"
msgstr ""

#: src/attributes.md:285
msgid "The following is an index of all built-in attributes."
msgstr ""

#: src/attributes.md:288
msgid ""
"[`cfg`](conditional-compilation.md#the-cfg-attribute) --- Controls "
"conditional compilation."
msgstr ""

#: src/attributes.md:289
msgid ""
"[`cfg_attr`](conditional-compilation.md#the-cfg_attr-attribute) --- "
"Conditionally includes attributes."
msgstr ""

#: src/attributes.md:292
msgid ""
"[`test`](attributes/testing.md#the-test-attribute) --- Marks a function as a "
"test."
msgstr ""

#: src/attributes.md:293
msgid ""
"[`ignore`](attributes/testing.md#the-ignore-attribute) --- Disables a test "
"function."
msgstr ""

#: src/attributes.md:294
msgid ""
"[`should_panic`](attributes/testing.md#the-should_panic-attribute) --- "
"Indicates a test should generate a panic."
msgstr ""

#: src/attributes.md:297
msgid "[`derive`](attributes/derive.md) --- Automatic trait implementations."
msgstr ""

#: src/attributes.md:298
msgid ""
"[`automatically_derived`](attributes/derive.md#the-automatically_derived-"
"attribute) --- Marker for implementations created by `derive`."
msgstr ""

#: src/attributes.md:302
msgid ""
"[`macro_export`](macros-by-example.md#path-based-scope) --- Exports a "
"`macro_rules` macro for cross-crate usage."
msgstr ""

#: src/attributes.md:303
msgid ""
"[`macro_use`](macros-by-example.md#the-macro_use-attribute) --- Expands "
"macro visibility, or imports macros from other crates."
msgstr ""

#: src/attributes.md:305
msgid ""
"[`proc_macro`](procedural-macros.md#function-like-procedural-macros) --- "
"Defines a function-like macro."
msgstr ""

#: src/attributes.md:306
msgid ""
"[`proc_macro_derive`](procedural-macros.md#derive-macros) --- Defines a "
"derive macro."
msgstr ""

#: src/attributes.md:307
msgid ""
"[`proc_macro_attribute`](procedural-macros.md#attribute-macros) --- Defines "
"an attribute macro."
msgstr ""

#: src/attributes.md:310
msgid ""
"[`allow`](attributes/diagnostics.md#lint-check-attributes), [`expect`]"
"(attributes/diagnostics.md#lint-check-attributes), [`warn`](attributes/"
"diagnostics.md#lint-check-attributes), [`deny`](attributes/"
"diagnostics.md#lint-check-attributes), [`forbid`](attributes/"
"diagnostics.md#lint-check-attributes) --- Alters the default lint level."
msgstr ""

#: src/attributes.md:311
msgid ""
"[`deprecated`](attributes/diagnostics.md#the-deprecated-attribute) --- "
"Generates deprecation notices."
msgstr ""

#: src/attributes.md:312
msgid ""
"[`must_use`](attributes/diagnostics.md#the-must_use-attribute) --- Generates "
"a lint for unused values."
msgstr ""

#: src/attributes.md:313
msgid ""
"[`diagnostic::on_unimplemented`](attributes/diagnostics.md#the-"
"diagnosticon_unimplemented-attribute) --- Hints the compiler to emit a "
"certain error message if a trait is not implemented."
msgstr ""

#: src/attributes.md:315
msgid ""
"[`diagnostic::do_not_recommend`](attributes/diagnostics.md#the-"
"diagnosticdo_not_recommend-attribute) --- Hints the compiler to not show a "
"certain trait impl in error messages."
msgstr ""

#: src/attributes.md:317
msgid "ABI, linking, symbols, and FFI"
msgstr ""

#: src/attributes.md:318
msgid ""
"[`link`](items/external-blocks.md#the-link-attribute) --- Specifies a native "
"library to link with an `extern` block."
msgstr ""

#: src/attributes.md:319
msgid ""
"[`link_name`](items/external-blocks.md#the-link_name-attribute) --- "
"Specifies the name of the symbol for functions or statics in an `extern` "
"block."
msgstr ""

#: src/attributes.md:321
msgid ""
"[`link_ordinal`](items/external-blocks.md#the-link_ordinal-attribute) --- "
"Specifies the ordinal of the symbol for functions or statics in an `extern` "
"block."
msgstr ""

#: src/attributes.md:323
msgid ""
"[`no_link`](items/extern-crates.md#the-no_link-attribute) --- Prevents "
"linking an extern crate."
msgstr ""

#: src/attributes.md:324
msgid "[`repr`](type-layout.md#representations) --- Controls type layout."
msgstr ""

#: src/attributes.md:325
msgid ""
"[`crate_type`](linkage.md) --- Specifies the type of crate (library, "
"executable, etc.)."
msgstr ""

#: src/attributes.md:326
msgid ""
"[`no_main`](crates-and-source-files.md#the-no_main-attribute) --- Disables "
"emitting the `main` symbol."
msgstr ""

#: src/attributes.md:327
msgid ""
"[`export_name`](abi.md#the-export_name-attribute) --- Specifies the exported "
"symbol name for a function or static."
msgstr ""

#: src/attributes.md:329
msgid ""
"[`link_section`](abi.md#the-link_section-attribute) --- Specifies the "
"section of an object file to use for a function or static."
msgstr ""

#: src/attributes.md:331
msgid ""
"[`no_mangle`](abi.md#the-no_mangle-attribute) --- Disables symbol name "
"encoding."
msgstr ""

#: src/attributes.md:332
msgid ""
"[`used`](abi.md#the-used-attribute) --- Forces the compiler to keep a static "
"item in the output object file."
msgstr ""

#: src/attributes.md:334
msgid ""
"[`crate_name`](crates-and-source-files.md#the-crate_name-attribute) --- "
"Specifies the crate name."
msgstr ""

#: src/attributes.md:337
msgid ""
"[`inline`](attributes/codegen.md#the-inline-attribute) --- Hint to inline "
"code."
msgstr ""

#: src/attributes.md:338
msgid ""
"[`cold`](attributes/codegen.md#the-cold-attribute) --- Hint that a function "
"is unlikely to be called."
msgstr ""

#: src/attributes.md:339
msgid ""
"[`no_builtins`](attributes/codegen.md#the-no_builtins-attribute) --- "
"Disables use of certain built-in functions."
msgstr ""

#: src/attributes.md:340
msgid ""
"[`target_feature`](attributes/codegen.md#the-target_feature-attribute) --- "
"Configure platform-specific code generation."
msgstr ""

#: src/attributes.md:341
msgid ""
"[`track_caller`](attributes/codegen.md#the-track_caller-attribute) --- Pass "
"the parent call location to `std::panic::Location::caller()`."
msgstr ""

#: src/attributes.md:342
msgid ""
"[`instruction_set`](attributes/codegen.md#the-instruction_set-attribute) --- "
"Specify the instruction set used to generate a functions code"
msgstr ""

#: src/attributes.md:344
msgid "Documentation"
msgstr ""

#: src/attributes.md:345
msgid ""
"`doc` --- Specifies documentation. See [The Rustdoc Book](../rustdoc/the-doc-"
"attribute.html) for more information. [Doc comments](comments.md#doc-"
"comments) are transformed into `doc` attributes."
msgstr ""

#: src/attributes.md:349
msgid ""
"[`no_std`](names/preludes.md#the-no_std-attribute) --- Removes std from the "
"prelude."
msgstr ""

#: src/attributes.md:350
msgid ""
"[`no_implicit_prelude`](names/preludes.md#the-no_implicit_prelude-attribute) "
"--- Disables prelude lookups within a module."
msgstr ""

#: src/attributes.md:353
msgid ""
"[`path`](items/modules.md#the-path-attribute) --- Specifies the filename for "
"a module."
msgstr ""

#: src/attributes.md:356
msgid ""
"[`recursion_limit`](attributes/limits.md#the-recursion_limit-attribute) --- "
"Sets the maximum recursion limit for certain compile-time operations."
msgstr ""

#: src/attributes.md:358
msgid ""
"[`type_length_limit`](attributes/limits.md#the-type_length_limit-attribute) "
"--- Sets the maximum size of a polymorphic type."
msgstr ""

#: src/attributes.md:360
msgid "Runtime"
msgstr ""

#: src/attributes.md:361
msgid ""
"[`panic_handler`](runtime.md#the-panic_handler-attribute) --- Sets the "
"function to handle panics."
msgstr ""

#: src/attributes.md:362
msgid ""
"[`global_allocator`](runtime.md#the-global_allocator-attribute) --- Sets the "
"global memory allocator."
msgstr ""

#: src/attributes.md:363
msgid ""
"[`windows_subsystem`](runtime.md#the-windows_subsystem-attribute) --- "
"Specifies the windows subsystem to link with."
msgstr ""

#: src/attributes.md:365
msgid "Features"
msgstr ""

#: src/attributes.md:366
msgid ""
"`feature` --- Used to enable unstable or experimental compiler features. See "
"[The Unstable Book](../unstable-book/index.html) for features implemented in "
"`rustc`."
msgstr ""

#: src/attributes.md:370
msgid ""
"[`non_exhaustive`](attributes/type_system.md#the-non_exhaustive-attribute) "
"--- Indicate that a type will have more fields/variants added in future."
msgstr ""

#: src/attributes.md:374
msgid ""
"[`debugger_visualizer`](attributes/debugger.md#the-debugger_visualizer-"
"attribute) --- Embeds a file that specifies debugger output for a type."
msgstr ""

#: src/attributes.md:375
msgid ""
"[`collapse_debuginfo`](attributes/debugger.md#the-collapse_debuginfo-"
"attribute) --- Controls how macro invocations are encoded in debuginfo."
msgstr ""

#: src/attributes/testing.md:3
msgid "Testing attributes"
msgstr ""

#: src/attributes/testing.md:6
msgid ""
"The following [attributes](../attributes.md) are used for specifying "
"functions for performing tests. Compiling a crate in \"test\" mode enables "
"building the test functions along with a test harness for executing the "
"tests. Enabling the test mode also enables the [`test` conditional "
"compilation option](../conditional-compilation.md#test)."
msgstr ""

#: src/attributes/testing.md:13
msgid "The `test` attribute"
msgstr ""

#: src/attributes/testing.md:17
msgid "The _`test` attribute_ marks a function to be executed as a test."
msgstr ""

#: src/attributes/testing.md:21
msgid "These functions are only compiled when in test mode."
msgstr ""

#: src/attributes/testing.md:25
msgid ""
"Test functions must be free, monomorphic functions that take no arguments, "
"and the return type must implement the [`Termination`](../../std/process/"
"trait.Termination.html) trait, for example:"
msgstr ""

#: src/attributes/testing.md:34
msgid ""
"Note: The test mode is enabled by passing the `--test` argument to `rustc` "
"or using `cargo test`."
msgstr ""

#: src/attributes/testing.md:39
msgid ""
"The test harness calls the returned value's [`report`](../../std/process/"
"trait.Termination.html#tymethod.report) method, and classifies the test as "
"passed or failed depending on whether the resulting [`ExitCode`](../../std/"
"process/struct.ExitCode.html) represents successful termination. In "
"particular:"
msgstr ""

#: src/attributes/testing.md:41
msgid "Tests that return `()` pass as long as they terminate and do not panic."
msgstr ""

#: src/attributes/testing.md:42
msgid ""
"Tests that return a `Result<(), E>` pass as long as they return `Ok(())`."
msgstr ""

#: src/attributes/testing.md:43
msgid ""
"Tests that return `ExitCode::SUCCESS` pass, and tests that return "
"`ExitCode::FAILURE` fail."
msgstr ""

#: src/attributes/testing.md:44
msgid "Tests that do not terminate neither pass nor fail."
msgstr ""

#: src/attributes/testing.md:52 src/attributes/testing.md:53
msgid "// expected to succeed\n"
msgstr ""

#: src/attributes/testing.md:60
msgid "The `ignore` attribute"
msgstr ""

#: src/attributes/testing.md:64
msgid ""
"A function annotated with the `test` attribute can also be annotated with "
"the `ignore` attribute. The _`ignore` attribute_ tells the test harness to "
"not execute that function as a test. It will still be compiled when in test "
"mode."
msgstr ""

#: src/attributes/testing.md:70
msgid ""
"The `ignore` attribute may optionally be written with the "
"[_MetaNameValueStr_](../attributes.md#meta-item-attribute-syntax) syntax to "
"specify a reason why the test is ignored."
msgstr ""

#: src/attributes/testing.md:75
msgid "\"not yet implemented\""
msgstr ""

#: src/attributes/testing.md:81
msgid ""
"**Note**: The `rustc` test harness supports the `--include-ignored` flag to "
"force ignored tests to be run."
msgstr ""

#: src/attributes/testing.md:86
msgid "The `should_panic` attribute"
msgstr ""

#: src/attributes/testing.md:90
msgid ""
"A function annotated with the `test` attribute that returns `()` can also be "
"annotated with the `should_panic` attribute."
msgstr ""

#: src/attributes/testing.md:95
msgid ""
"The _`should_panic` attribute_ makes the test only pass if it actually "
"panics."
msgstr ""

#: src/attributes/testing.md:100
msgid ""
"The `should_panic` attribute may optionally take an input string that must "
"appear within the panic message. If the string is not found in the message, "
"then the test will fail. The string may be passed using the "
"[_MetaNameValueStr_](../attributes.md#meta-item-attribute-syntax) syntax or "
"the [_MetaListNameValueStr_](../attributes.md#meta-item-attribute-syntax) "
"syntax with an `expected` field."
msgstr ""

#: src/attributes/testing.md:108 src/attributes/testing.md:110
msgid "\"values don't match\""
msgstr ""

#: src/attributes/derive.md:7
msgid ""
"The _`derive` attribute_ allows new [items](../items.md) to be automatically "
"generated for data structures."
msgstr ""

#: src/attributes/derive.md:12
msgid ""
"It uses the [_MetaListPaths_](../attributes.md#meta-item-attribute-syntax) "
"syntax to specify a list of traits to implement or paths to [derive macros]"
"(../procedural-macros.md#derive-macros) to process."
msgstr ""

#: src/attributes/derive.md:15
msgid ""
"For example, the following will create an [`impl` item](../items/"
"implementations.md) for the [`PartialEq`](../../core/cmp/"
"trait.PartialEq.html) and [`Clone`](../../core/clone/trait.Clone.html) "
"traits for `Foo`, and the type parameter `T` will be given the `PartialEq` "
"or `Clone` constraints for the appropriate `impl`:"
msgstr ""

#: src/attributes/derive.md:27
msgid "The generated `impl` for `PartialEq` is equivalent to"
msgstr ""

#: src/attributes/derive.md:40
msgid ""
"You can implement `derive` for your own traits through [procedural macros]"
"(../procedural-macros.md#derive-macros)."
msgstr ""

#: src/attributes/derive.md:44
msgid "The `automatically_derived` attribute"
msgstr ""

#: src/attributes/derive.md:46
msgid ""
"The _`automatically_derived` attribute_ is automatically added to "
"[implementations](../items/implementations.md) created by the `derive` "
"attribute for built-in traits. It has no direct effect, but it may be used "
"by tools and diagnostic lints to detect these automatically generated "
"implementations."
msgstr ""

#: src/attributes/diagnostics.md:3
msgid "Diagnostic attributes"
msgstr ""

#: src/attributes/diagnostics.md:5
msgid ""
"The following [attributes](../attributes.md) are used for controlling or "
"generating diagnostic messages during compilation."
msgstr ""

#: src/attributes/diagnostics.md:10
msgid "Lint check attributes"
msgstr ""

#: src/attributes/diagnostics.md:12
msgid ""
"A lint check names a potentially undesirable coding pattern, such as "
"unreachable code or omitted documentation."
msgstr ""

#: src/attributes/diagnostics.md:17
msgid ""
"The lint attributes `allow`, `expect`, `warn`, `deny`, and `forbid` use the "
"[_MetaListPaths_](../attributes.md#meta-item-attribute-syntax) syntax to "
"specify a list of lint names to change the lint level for the entity to "
"which the attribute applies."
msgstr ""

#: src/attributes/diagnostics.md:22
msgid "For any lint check `C`:"
msgstr ""

#: src/attributes/diagnostics.md:26
msgid ""
"`#[allow(C)]` overrides the check for `C` so that violations will go "
"unreported."
msgstr ""

#: src/attributes/diagnostics.md:31
msgid ""
"`#[expect(C)]` indicates that lint `C` is expected to be emitted. The "
"attribute will suppress the emission of `C` or issue a warning, if the "
"expectation is unfulfilled."
msgstr ""

#: src/attributes/diagnostics.md:37
msgid "`#[warn(C)]` warns about violations of `C` but continues compilation."
msgstr ""

#: src/attributes/diagnostics.md:41
msgid "`#[deny(C)]` signals an error after encountering a violation of `C`,"
msgstr ""

#: src/attributes/diagnostics.md:45
msgid ""
"`#[forbid(C)]` is the same as `deny(C)`, but also forbids changing the lint "
"level afterwards,"
msgstr ""

#: src/attributes/diagnostics.md:48
msgid ""
"Note: The lint checks supported by `rustc` can be found via `rustc -W help`, "
"along with their default settings and are documented in the [rustc book]"
"(../../rustc/lints/index.html)."
msgstr ""

#: src/attributes/diagnostics.md:53 src/attributes/diagnostics.md:83
msgid "// Missing documentation is ignored here\n"
msgstr ""

#: src/attributes/diagnostics.md:57 src/attributes/diagnostics.md:92
msgid "// Missing documentation signals a warning here\n"
msgstr ""

#: src/attributes/diagnostics.md:61
msgid "// Missing documentation signals an error here\n"
msgstr ""

#: src/attributes/diagnostics.md:69
msgid ""
"Lint attributes can override the level specified from a previous attribute, "
"as long as the level does not attempt to change a forbidden lint (except for "
"`deny`, which is allowed inside a `forbid` context, but ignored). Previous "
"attributes are those from a higher level in the syntax tree, or from a "
"previous attribute on the same entity as listed in left-to-right source "
"order."
msgstr ""

#: src/attributes/diagnostics.md:75
msgid ""
"This example shows how one can use `allow` and `warn` to toggle a particular "
"check on and off:"
msgstr ""

#: src/attributes/diagnostics.md:86
msgid ""
"// Missing documentation signals a warning here,\n"
"        // despite the allow above.\n"
msgstr ""

#: src/attributes/diagnostics.md:97
msgid ""
"This example shows how one can use `forbid` to disallow uses of `allow` or "
"`expect` for that lint check:"
msgstr ""

#: src/attributes/diagnostics.md:103
msgid "// Attempting to toggle warning signals an error here\n"
msgstr ""

#: src/attributes/diagnostics.md:105
msgid "/// Returns 2.\n"
msgstr ""

#: src/attributes/diagnostics.md:110
msgid ""
"Note: `rustc` allows setting lint levels on the [command-line](../../rustc/"
"lints/levels.html#via-compiler-flag), and also supports [setting caps](../../"
"rustc/lints/levels.html#capping-lints) on the lints that are reported."
msgstr ""

#: src/attributes/diagnostics.md:116
msgid "Lint Reasons"
msgstr ""

#: src/attributes/diagnostics.md:118
msgid ""
"All lint attributes support an additional `reason` parameter, to give "
"context why a certain attribute was added. This reason will be displayed as "
"part of the lint message if the lint is emitted at the defined level."
msgstr ""

#: src/attributes/diagnostics.md:123
msgid ""
"// `keyword_idents` is allowed by default. Here we deny it to\n"
"// avoid migration of identifiers when we update the edition.\n"
msgstr ""

#: src/attributes/diagnostics.md:127
msgid "\"we want to avoid these idents to be future compatible\""
msgstr ""

#: src/attributes/diagnostics.md:129
msgid ""
"// This name was allowed in Rust's 2015 edition. We still aim to avoid\n"
"// this to be future compatible and not confuse end users.\n"
msgstr ""

#: src/attributes/diagnostics.md:135
msgid "Here is another example, where the lint is allowed with a reason:"
msgstr ""

#: src/attributes/diagnostics.md:141
msgid ""
"// The `reason` parameter on `allow` attributes acts as documentation for "
"the reader.\n"
msgstr ""

#: src/attributes/diagnostics.md:142
msgid "\"this is only modified on some platforms\""
msgstr ""

#: src/attributes/diagnostics.md:143
msgid "\"git\""
msgstr ""

#: src/attributes/diagnostics.md:146
msgid "\"exe\""
msgstr ""

#: src/attributes/diagnostics.md:154
msgid "The `#[expect]` attribute"
msgstr ""

#: src/attributes/diagnostics.md:158
msgid ""
"The `#[expect(C)]` attribute creates a lint expectation for lint `C`. The "
"expectation will be fulfilled, if a `#[warn(C)]` attribute at the same "
"location would result in a lint emission. If the expectation is unfulfilled, "
"because lint `C` would not be emitted, the `unfulfilled_lint_expectations` "
"lint will be emitted at the attribute."
msgstr ""

#: src/attributes/diagnostics.md:166
msgid ""
"// This `#[expect]` attribute creates a lint expectation, that the "
"`unused_variables`\n"
"    // lint would be emitted by the following statement. This expectation "
"is\n"
"    // unfulfilled, since the `question` variable is used by the `println!` "
"macro.\n"
"    // Therefore, the `unfulfilled_lint_expectations` lint will be emitted "
"at the\n"
"    // attribute.\n"
msgstr ""

#: src/attributes/diagnostics.md:172
msgid "\"who lives in a pineapple under the sea?\""
msgstr ""

#: src/attributes/diagnostics.md:173
msgid "\"{question}\""
msgstr ""

#: src/attributes/diagnostics.md:175
msgid ""
"// This `#[expect]` attribute creates a lint expectation that will be "
"fulfilled, since\n"
"    // the `answer` variable is never used. The `unused_variables` lint, "
"that would usually\n"
"    // be emitted, is suppressed. No warning will be issued for the "
"statement or attribute.\n"
msgstr ""

#: src/attributes/diagnostics.md:179
msgid "\"SpongeBob SquarePants!\""
msgstr ""

#: src/attributes/diagnostics.md:185
msgid ""
"The lint expectation is only fulfilled by lint emissions which have been "
"suppressed by the `expect` attribute. If the lint level is modified in the "
"scope with other level attributes like `allow` or `warn`, the lint emission "
"will be handled accordingly and the expectation will remain unfulfilled."
msgstr ""

#: src/attributes/diagnostics.md:193
msgid ""
"// This will emit the `unused_variables` lint at the warn level\n"
"    // as defined by the `warn` attribute. This will not fulfill the\n"
"    // expectation above the function.\n"
msgstr ""

#: src/attributes/diagnostics.md:197
msgid "\"Crab Rave\""
msgstr ""

#: src/attributes/diagnostics.md:199
msgid ""
"// The `allow` attribute suppresses the lint emission. This will not\n"
"    // fulfill the expectation as it has been suppressed by the `allow`\n"
"    // attribute and not the `expect` attribute above the function.\n"
msgstr ""

#: src/attributes/diagnostics.md:203
msgid "\"Noisestorm\""
msgstr ""

#: src/attributes/diagnostics.md:205
msgid ""
"// This `expect` attribute will suppress the `unused_variables` lint "
"emission\n"
"    // at the variable. The `expect` attribute above the function will still "
"not\n"
"    // be fulfilled, since this lint emission has been suppressed by the "
"local\n"
"    // expect attribute.\n"
msgstr ""

#: src/attributes/diagnostics.md:210
msgid "\"Monstercat Release\""
msgstr ""

#: src/attributes/diagnostics.md:216
msgid ""
"If the `expect` attribute contains several lints, each one is expected "
"separately. For a lint group it's enough if one lint inside the group has "
"been emitted:"
msgstr ""

#: src/attributes/diagnostics.md:220
msgid ""
"// This expectation will be fulfilled by the unused value inside the "
"function\n"
"// since the emitted `unused_variables` lint is inside the `unused` lint "
"group.\n"
msgstr ""

#: src/attributes/diagnostics.md:224
msgid "\"I'm running out of examples\""
msgstr ""

#: src/attributes/diagnostics.md:228
msgid ""
"// This attribute creates two lint expectations. The `unused_mut` lint will "
"be\n"
"    // suppressed and with that fulfill the first expectation. The "
"`unused_variables`\n"
"    // wouldn't be emitted, since the variable is used. That expectation "
"will therefore\n"
"    // be unsatisfied, and a warning will be emitted.\n"
msgstr ""

#: src/attributes/diagnostics.md:233
msgid "\"https://www.rust-lang.org/\""
msgstr ""

#: src/attributes/diagnostics.md:235
msgid "\"Welcome to our community: {link}\""
msgstr ""

#: src/attributes/diagnostics.md:239
msgid ""
"Note: The behavior of `#[expect(unfulfilled_lint_expectations)]` is "
"currently defined to always generate the `unfulfilled_lint_expectations` "
"lint."
msgstr ""

#: src/attributes/diagnostics.md:244
msgid "Lint groups"
msgstr ""

#: src/attributes/diagnostics.md:246
msgid ""
"Lints may be organized into named groups so that the level of related lints "
"can be adjusted together. Using a named group is equivalent to listing out "
"the lints within that group."
msgstr ""

#: src/attributes/diagnostics.md:251
msgid "// This allows all lints in the \"unused\" group.\n"
msgstr ""

#: src/attributes/diagnostics.md:252
msgid ""
"// This overrides the \"unused_must_use\" lint from the \"unused\"\n"
"// group to deny.\n"
msgstr ""

#: src/attributes/diagnostics.md:257
msgid ""
"// This does not generate a warning because the \"unused_variables\"\n"
"    // lint is in the \"unused\" group.\n"
msgstr ""

#: src/attributes/diagnostics.md:260
msgid ""
"// This generates an error because the result is unused and\n"
"    // \"unused_must_use\" is marked as \"deny\".\n"
msgstr ""

#: src/attributes/diagnostics.md:262
msgid "\"some_file\""
msgstr ""

#: src/attributes/diagnostics.md:262
msgid "// ERROR: unused `Result` that must be used\n"
msgstr ""

#: src/attributes/diagnostics.md:268
msgid ""
"There is a special group named \"warnings\" which includes all lints at the "
"\"warn\" level. The \"warnings\" group ignores attribute order and applies "
"to all lints that would otherwise warn within the entity."
msgstr ""

#: src/attributes/diagnostics.md:273
msgid "// The order of these two attributes does not matter.\n"
msgstr ""

#: src/attributes/diagnostics.md:275
msgid "// The unsafe_code lint is normally \"allow\" by default.\n"
msgstr ""

#: src/attributes/diagnostics.md:279
msgid ""
"// This is an error because the `unsafe_code` warning has\n"
"    // been lifted to \"deny\".\n"
msgstr ""

#: src/attributes/diagnostics.md:281
msgid "// ERROR: usage of `unsafe` block\n"
msgstr ""

#: src/attributes/diagnostics.md:287
msgid "Tool lint attributes"
msgstr ""

#: src/attributes/diagnostics.md:291
msgid ""
"Tool lints allows using scoped lints, to `allow`, `warn`, `deny` or `forbid` "
"lints of certain tools."
msgstr ""

#: src/attributes/diagnostics.md:296
msgid ""
"Tool lints only get checked when the associated tool is active. If a lint "
"attribute, such as `allow`, references a nonexistent tool lint, the compiler "
"will not warn about the nonexistent lint until you use the tool."
msgstr ""

#: src/attributes/diagnostics.md:300
msgid "Otherwise, they work just like regular lint attributes:"
msgstr ""

#: src/attributes/diagnostics.md:303
msgid "// set the entire `pedantic` clippy lint group to warn\n"
msgstr ""

#: src/attributes/diagnostics.md:304
msgid "// silence warnings from the `filter_map` clippy lint\n"
msgstr ""

#: src/attributes/diagnostics.md:311
msgid "// silence the `cmp_nan` clippy lint just for this function\n"
msgstr ""

#: src/attributes/diagnostics.md:319
msgid ""
"Note: `rustc` currently recognizes the tool lints for \"[clippy](https://"
"github.com/rust-lang/rust-clippy)\" and \"[rustdoc](../../rustdoc/lints.html)"
"\"."
msgstr ""

#: src/attributes/diagnostics.md:323
msgid "The `deprecated` attribute"
msgstr ""

#: src/attributes/diagnostics.md:327
msgid ""
"The _`deprecated` attribute_ marks an item as deprecated. `rustc` will issue "
"warnings on usage of `#[deprecated]` items. `rustdoc` will show item "
"deprecation, including the `since` version and `note`, if available."
msgstr ""

#: src/attributes/diagnostics.md:333
msgid "The `deprecated` attribute has several forms:"
msgstr ""

#: src/attributes/diagnostics.md:335
msgid "`deprecated` --- Issues a generic message."
msgstr ""

#: src/attributes/diagnostics.md:336
msgid ""
"`deprecated = \"message\"` --- Includes the given string in the deprecation "
"message."
msgstr ""

#: src/attributes/diagnostics.md:338
msgid ""
"[_MetaListNameValueStr_](../attributes.md#meta-item-attribute-syntax) syntax "
"with two optional fields:"
msgstr ""

#: src/attributes/diagnostics.md:339
msgid ""
"`since` --- Specifies a version number when the item was deprecated. `rustc` "
"does not currently interpret the string, but external tools like [Clippy]"
"(https://github.com/rust-lang/rust-clippy) may check the validity of the "
"value."
msgstr ""

#: src/attributes/diagnostics.md:342
msgid ""
"`note` --- Specifies a string that should be included in the deprecation "
"message. This is typically used to provide an explanation about the "
"deprecation and preferred alternatives."
msgstr ""

#: src/attributes/diagnostics.md:348
msgid ""
"The `deprecated` attribute may be applied to any [item](../items.md), [trait "
"item](../items/traits.md), [enum variant](../items/enumerations.md), [struct "
"field](../items/structs.md), [external block item](../items/external-"
"blocks.md), or [macro definition](../macros-by-example.md). It cannot be "
"applied to [trait implementation items](../items/implementations.md#trait-"
"implementations). When applied to an item containing other items, such as a "
"[module](../items/modules.md) or [implementation](../items/"
"implementations.md), all child items inherit the deprecation attribute."
msgstr ""

#: src/attributes/diagnostics.md:361
msgid "\"5.2.0\""
msgstr ""

#: src/attributes/diagnostics.md:361
msgid "\"foo was rarely used. Users should instead use bar\""
msgstr ""

#: src/attributes/diagnostics.md:367
msgid ""
"The [RFC](https://github.com/rust-lang/rfcs/blob/master/text/1270-"
"deprecation.md) contains motivations and more details."
msgstr ""

#: src/attributes/diagnostics.md:373
msgid "The `must_use` attribute"
msgstr ""

#: src/attributes/diagnostics.md:377
msgid ""
"The _`must_use` attribute_ is used to issue a diagnostic warning when a "
"value is not \"used\"."
msgstr ""

#: src/attributes/diagnostics.md:382
msgid ""
"The `must_use` attribute can be applied to user-defined composite types "
"([`struct`s](../items/structs.md), [`enum`s](../items/enumerations.md), and "
"[`union`s](../items/unions.md)), [functions](../items/functions.md), and "
"[traits](../items/traits.md)."
msgstr ""

#: src/attributes/diagnostics.md:388
msgid ""
"The `must_use` attribute may include a message by using the "
"[_MetaNameValueStr_](../attributes.md#meta-item-attribute-syntax) syntax "
"such as `#[must_use = \"example message\"]`. The message will be given "
"alongside the warning."
msgstr ""

#: src/attributes/diagnostics.md:394
msgid ""
"When used on user-defined composite types, if the [expression](../"
"expressions.md) of an [expression statement](../statements.md#expression-"
"statements) has that type, then the `unused_must_use` lint is violated."
msgstr ""

#: src/attributes/diagnostics.md:401
msgid "// some fields\n"
msgstr ""

#: src/attributes/diagnostics.md:407 src/attributes/diagnostics.md:440
#: src/attributes/diagnostics.md:459
msgid "// Violates the `unused_must_use` lint.\n"
msgstr ""

#: src/attributes/diagnostics.md:414
msgid ""
"When used on a function, if the [expression](../expressions.md) of an "
"[expression statement](../statements.md#expression-statements) is a [call "
"expression](../expressions/call-expr.md) to that function, then the "
"`unused_must_use` lint is violated."
msgstr ""

#: src/attributes/diagnostics.md:421
msgid "// Violates the unused_must_use lint.\n"
msgstr ""

#: src/attributes/diagnostics.md:428
msgid ""
"When used on a [trait declaration](../items/traits.md), a [call expression]"
"(../expressions/call-expr.md) of an [expression statement](../"
"statements.md#expression-statements) to a function that returns an [impl "
"trait](../types/impl-trait.md) or a [dyn trait](../types/trait-object.md) of "
"that trait violates the `unused_must_use` lint."
msgstr ""

#: src/attributes/diagnostics.md:447
msgid ""
"When used on a function in a trait declaration, then the behavior also "
"applies when the call expression is a function from an implementation of the "
"trait."
msgstr ""

#: src/attributes/diagnostics.md:466
msgid ""
"When used on a function in a trait implementation, the attribute does "
"nothing."
msgstr ""

#: src/attributes/diagnostics.md:468
msgid ""
"Note: Trivial no-op expressions containing the value will not violate the "
"lint. Examples include wrapping the value in a type that does not implement "
"[`Drop`](../special-types-and-traits.md#drop) and then not using that type "
"and being the final expression of a [block expression](../expressions/block-"
"expr.md) that is not used."
msgstr ""

#: src/attributes/diagnostics.md:477
msgid "// None of these violate the unused_must_use lint.\n"
msgstr ""

#: src/attributes/diagnostics.md:487
msgid ""
"Note: It is idiomatic to use a [let statement](../statements.md#let-"
"statements) with a pattern of `_` when a must-used value is purposely "
"discarded."
msgstr ""

#: src/attributes/diagnostics.md:494
msgid "// Does not violate the unused_must_use lint.\n"
msgstr ""

#: src/attributes/diagnostics.md:500
msgid "The `diagnostic` tool attribute namespace"
msgstr ""

#: src/attributes/diagnostics.md:504
msgid ""
"The `#[diagnostic]` attribute namespace is a home for attributes to "
"influence compile-time error messages. The hints provided by these "
"attributes are not guaranteed to be used."
msgstr ""

#: src/attributes/diagnostics.md:509
msgid ""
"Unknown attributes in this namespace are accepted, though they may emit "
"warnings for unused attributes. Additionally, invalid inputs to known "
"attributes will typically be a warning (see the attribute definitions for "
"details). This is meant to allow adding or discarding attributes and "
"changing inputs in the future to allow changes without the need to keep the "
"non-meaningful attributes or options working."
msgstr ""

#: src/attributes/diagnostics.md:515
msgid "The `diagnostic::on_unimplemented` attribute"
msgstr ""

#: src/attributes/diagnostics.md:519
msgid ""
"The `#[diagnostic::on_unimplemented]` attribute is a hint to the compiler to "
"supplement the error message that would normally be generated in scenarios "
"where a trait is required but not implemented on a type."
msgstr ""

#: src/attributes/diagnostics.md:523
msgid ""
"The attribute should be placed on a [trait declaration](../items/traits.md), "
"though it is not an error to be located in other positions."
msgstr ""

#: src/attributes/diagnostics.md:527
msgid ""
"The attribute uses the [_MetaListNameValueStr_](../attributes.md#meta-item-"
"attribute-syntax) syntax to specify its inputs, though any malformed input "
"to the attribute is not considered as an error to provide both forwards and "
"backwards compatibility."
msgstr ""

#: src/attributes/diagnostics.md:531
msgid "The following keys have the given meaning:"
msgstr ""

#: src/attributes/diagnostics.md:532
msgid "`message` --- The text for the top level error message."
msgstr ""

#: src/attributes/diagnostics.md:533
msgid ""
"`label` --- The text for the label shown inline in the broken code in the "
"error message."
msgstr ""

#: src/attributes/diagnostics.md:534
msgid "`note` --- Provides additional notes."
msgstr ""

#: src/attributes/diagnostics.md:538
msgid ""
"The `note` option can appear several times, which results in several note "
"messages being emitted."
msgstr ""

#: src/attributes/diagnostics.md:542
msgid ""
"If any of the other options appears several times the first occurrence of "
"the relevant option specifies the actually used value. Subsequent "
"occurrences generates a warning."
msgstr ""

#: src/attributes/diagnostics.md:546
msgid "A warning is generated for any unknown keys."
msgstr ""

#: src/attributes/diagnostics.md:550
msgid ""
"All three options accept a string as an argument, interpreted using the same "
"formatting as a [`std::fmt`](../../alloc/fmt/index.html) string."
msgstr ""

#: src/attributes/diagnostics.md:554
msgid ""
"Format parameters with the given named parameter will be replaced with the "
"following text:"
msgstr ""

#: src/attributes/diagnostics.md:555
msgid "`{Self}` --- The name of the type implementing the trait."
msgstr ""

#: src/attributes/diagnostics.md:556
msgid ""
"`{` _GenericParameterName_ `}` --- The name of the generic argument's type "
"for the given generic parameter."
msgstr ""

#: src/attributes/diagnostics.md:560
msgid ""
"Any other format parameter will generate a warning, but will otherwise be "
"included in the string as-is."
msgstr ""

#: src/attributes/diagnostics.md:564
msgid ""
"Invalid format strings may generate a warning, but are otherwise allowed, "
"but may not display as intended. Format specifiers may generate a warning, "
"but are otherwise ignored."
msgstr ""

#: src/attributes/diagnostics.md:571
msgid "\"My Message for `ImportantTrait<{A}>` implemented for `{Self}`\""
msgstr ""

#: src/attributes/diagnostics.md:572
msgid "\"My Label\""
msgstr ""

#: src/attributes/diagnostics.md:573
msgid "\"Note 1\""
msgstr ""

#: src/attributes/diagnostics.md:574
msgid "\"Note 2\""
msgstr ""

#: src/attributes/diagnostics.md:585
msgid "the compiler may generate an error message which looks like this:"
msgstr ""

#: src/attributes/diagnostics.md:601
msgid "The `diagnostic::do_not_recommend` attribute"
msgstr ""

#: src/attributes/diagnostics.md:608
msgid ""
"The `#[diagnostic::do_not_recommend]` attribute is a hint to the compiler to "
"not show the annotated trait implementation as part of a diagnostic message."
msgstr ""

#: src/attributes/diagnostics.md:610
msgid ""
"**Note**: Suppressing the recommendation can be useful if you know that the "
"recommendation would normally not be useful to the programmer. This often "
"occurs with broad, blanket impls. The recommendation may send the programmer "
"down the wrong path, or the trait implementation may be an internal detail "
"that you don't want to expose, or the bounds may not be able to be satisfied "
"by the programmer."
msgstr ""

#: src/attributes/diagnostics.md:612
msgid ""
"For example, in an error message about a type not implementing a required "
"trait, the compiler may find a trait implementation that would satisfy the "
"requirements if it weren't for specific bounds in the trait implementation. "
"The compiler may tell the user that there is an impl, but the problem is the "
"bounds in the trait implementation. The `#[diagnostic::do_not_recommend]` "
"attribute can be used to tell the compiler to _not_ tell the user about the "
"trait implementation, and instead simply tell the user the type doesn't "
"implement the required trait."
msgstr ""

#: src/attributes/diagnostics.md:616
msgid ""
"The attribute should be placed on a [trait implementation item](../items/"
"implementations.md#trait-implementations), though it is not an error to be "
"located in other positions."
msgstr ""

#: src/attributes/diagnostics.md:620
msgid ""
"The attribute does not accept any arguments, though unexpected arguments are "
"not considered as an error."
msgstr ""

#: src/attributes/diagnostics.md:622
msgid ""
"In the following example, there is a trait called `AsExpression` which is "
"used for casting arbitrary types to the `Expression` type used in an SQL "
"library. There is a method called `check` which takes an `AsExpression`."
msgstr ""

#: src/attributes/diagnostics.md:656
msgid ""
"// Uncomment this line to change the recommendation.\n"
"// #[diagnostic::do_not_recommend]\n"
msgstr ""

#: src/attributes/diagnostics.md:676 src/types/closure.md:296
#: src/types/closure.md:313 src/types/closure.md:647 src/types/closure.md:732
msgid "\"bar\""
msgstr ""

#: src/attributes/diagnostics.md:680
msgid ""
"The `SelectInt` type's `check` method is expecting an `Integer` type. "
"Calling it with an i32 type works, as it gets converted to an `Integer` by "
"the `AsExpression` trait. However, calling it with a string does not, and "
"generates a an error that may look like this:"
msgstr ""

#: src/attributes/diagnostics.md:682
msgid ""
"```text\n"
"error[E0277]: the trait bound `&str: Expression` is not satisfied\n"
"  --> src/main.rs:53:15\n"
"   |\n"
"53 |     SelectInt.check(\"bar\");\n"
"   |               ^^^^^ the trait `Expression` is not implemented for "
"`&str`\n"
"   |\n"
"   = help: the following other types implement trait `Expression`:\n"
"             Bound<T>\n"
"             SelectInt\n"
"note: required for `&str` to implement `AsExpression<Integer>`\n"
"  --> src/main.rs:45:13\n"
"   |\n"
"45 | impl<T, ST> AsExpression<ST> for T\n"
"   |             ^^^^^^^^^^^^^^^^     ^\n"
"46 | where\n"
"47 |     T: Expression<SqlType = ST>,\n"
"   |        ------------------------ unsatisfied trait bound introduced "
"here\n"
"```"
msgstr ""

#: src/attributes/diagnostics.md:702
msgid ""
"By adding the `#[diagnostic::do_no_recommend]` attribute to the blanket "
"`impl` for `AsExpression`, the message changes to:"
msgstr ""

#: src/attributes/diagnostics.md:704
msgid ""
"```text\n"
"error[E0277]: the trait bound `&str: AsExpression<Integer>` is not "
"satisfied\n"
"  --> src/main.rs:53:15\n"
"   |\n"
"53 |     SelectInt.check(\"bar\");\n"
"   |               ^^^^^ the trait `AsExpression<Integer>` is not "
"implemented for `&str`\n"
"   |\n"
"   = help: the trait `AsExpression<Integer>` is not implemented for `&str`\n"
"           but trait `AsExpression<Text>` is implemented for it\n"
"   = help: for that trait implementation, expected `Text`, found `Integer`\n"
"```"
msgstr ""

#: src/attributes/diagnostics.md:716
msgid ""
"The first error message includes a somewhat confusing error message about "
"the relationship of `&str` and `Expression`, as well as the unsatisfied "
"trait bound in the blanket impl. After adding "
"`#[diagnostic::do_no_recommend]`, it no longer considers the blanket impl "
"for the recommendation. The message should be a little clearer, with an "
"indication that a string cannot be converted to an `Integer`."
msgstr ""

#: src/attributes/codegen.md:3
msgid "Code generation attributes"
msgstr ""

#: src/attributes/codegen.md:6
msgid ""
"The following [attributes](../attributes.md) are used for controlling code "
"generation."
msgstr ""

#: src/attributes/codegen.md:10
msgid "Optimization hints"
msgstr ""

#: src/attributes/codegen.md:14
msgid ""
"The `cold` and `inline` [attributes](../attributes.md) give suggestions to "
"generate code in a way that may be faster than what it would do without the "
"hint. The attributes are only hints, and may be ignored."
msgstr ""

#: src/attributes/codegen.md:20
msgid ""
"Both attributes can be used on [functions](../items/functions.md). When "
"applied to a function in a [trait](../items/traits.md), they apply only to "
"that function when used as a default function for a trait implementation and "
"not to all trait implementations. The attributes have no effect on a trait "
"function without a body."
msgstr ""

#: src/attributes/codegen.md:27
msgid "The `inline` attribute"
msgstr ""

#: src/attributes/codegen.md:31
msgid ""
"The _`inline` [attribute](../attributes.md)_ suggests that a copy of the "
"attributed function should be placed in the caller, rather than generating "
"code to call the function where it is defined."
msgstr ""

#: src/attributes/codegen.md:35
msgid ""
"_**Note**_: The `rustc` compiler automatically inlines functions based on "
"internal heuristics. Incorrectly inlining functions can make the program "
"slower, so this attribute should be used with care."
msgstr ""

#: src/attributes/codegen.md:41
msgid "There are three ways to use the inline attribute:"
msgstr ""

#: src/attributes/codegen.md:43
msgid "`#[inline]` _suggests_ performing an inline expansion."
msgstr ""

#: src/attributes/codegen.md:44
msgid ""
"`#[inline(always)]` _suggests_ that an inline expansion should always be "
"performed."
msgstr ""

#: src/attributes/codegen.md:46
msgid ""
"`#[inline(never)]` _suggests_ that an inline expansion should never be "
"performed."
msgstr ""

#: src/attributes/codegen.md:49
msgid ""
"_**Note**_: `#[inline]` in every form is a hint, with no _requirements_ on "
"the language to place a copy of the attributed function in the caller."
msgstr ""

#: src/attributes/codegen.md:54
msgid "The `cold` attribute"
msgstr ""

#: src/attributes/codegen.md:57
msgid ""
"The _`cold` [attribute](../attributes.md)_ suggests that the attributed "
"function is unlikely to be called."
msgstr ""

#: src/attributes/codegen.md:62
msgid "The `no_builtins` attribute"
msgstr ""

#: src/attributes/codegen.md:65
msgid ""
"The _`no_builtins` [attribute](../attributes.md)_ may be applied at the "
"crate level to disable optimizing certain code patterns to invocations of "
"library functions that are assumed to exist."
msgstr ""

#: src/attributes/codegen.md:71
msgid "The `target_feature` attribute"
msgstr ""

#: src/attributes/codegen.md:75
msgid ""
"The _`target_feature` [attribute](../attributes.md)_ may be applied to a "
"function to enable code generation of that function for specific platform "
"architecture features. It uses the [_MetaListNameValueStr_](../"
"attributes.md#meta-item-attribute-syntax) syntax with a single key of "
"`enable` whose value is a string of comma-separated feature names to enable."
msgstr ""

#: src/attributes/codegen.md:81 src/attributes/codegen.md:82
msgid "\"avx2\""
msgstr ""

#: src/attributes/codegen.md:88
msgid ""
"Each [target architecture](../conditional-compilation.md#target_arch) has a "
"set of features that may be enabled. It is an error to specify a feature for "
"a target architecture that the crate is not being compiled for."
msgstr ""

#: src/attributes/codegen.md:94
msgid ""
"Closures defined within a `target_feature`\\-annotated function inherit the "
"attribute from the enclosing function."
msgstr ""

#: src/attributes/codegen.md:99
msgid ""
"It is [undefined behavior](../behavior-considered-undefined.md) to call a "
"function that is compiled with a feature that is not supported on the "
"current platform the code is running on, _except_ if the platform explicitly "
"documents this to be safe."
msgstr ""

#: src/attributes/codegen.md:105
msgid ""
"The following restrictions apply unless otherwise specified by the platform "
"rules below:"
msgstr ""

#: src/attributes/codegen.md:107
msgid ""
"Safe `#[target_feature]` functions (and closures that inherit the attribute) "
"can only be safely called within a caller that enables all the "
"`target_feature`s that the callee enables. This restriction does not apply "
"in an `unsafe` context."
msgstr ""

#: src/attributes/codegen.md:109
msgid ""
"Safe `#[target_feature]` functions (and closures that inherit the attribute) "
"can only be coerced to _safe_ function pointers in contexts that enable all "
"the `target_feature`s that the coercee enables. This restriction does not "
"apply to `unsafe` function pointers."
msgstr ""

#: src/attributes/codegen.md:112
msgid ""
"Implicitly enabled features are included in this rule. For example an `sse2` "
"function can call ones marked with `sse`."
msgstr ""

#: src/attributes/codegen.md:115 src/attributes/codegen.md:135
msgid "\"sse2\""
msgstr ""

#: src/attributes/codegen.md:116 src/attributes/codegen.md:128
msgid "\"sse\""
msgstr ""

#: src/attributes/codegen.md:120
msgid ""
"// Calling `foo_sse` here is unsafe, as we must ensure that SSE is\n"
"    // available first, even if `sse` is enabled by default on the target\n"
"    // platform or manually enabled as compiler flags.\n"
msgstr ""

#: src/attributes/codegen.md:130
msgid "// Calling `foo_sse` here is safe.\n"
msgstr ""

#: src/attributes/codegen.md:137
msgid "// Calling `foo_sse` here is safe because `sse2` implies `sse`.\n"
msgstr ""

#: src/attributes/codegen.md:145
msgid ""
"A function with a `#[target_feature]` attribute _never_ implements the `Fn` "
"family of traits, although closures inheriting features from the enclosing "
"function do."
msgstr ""

#: src/attributes/codegen.md:149
msgid ""
"The `#[target_feature]` attribute is not allowed on the following places:"
msgstr ""

#: src/attributes/codegen.md:151
msgid "[the `main` function](../crates-and-source-files.md#r-crate.main)"
msgstr ""

#: src/attributes/codegen.md:152
msgid "a [`panic_handler` function](../runtime.md#r-runtime.panic_handler)"
msgstr ""

#: src/attributes/codegen.md:153
msgid "safe trait methods"
msgstr ""

#: src/attributes/codegen.md:154
msgid "safe default functions in traits"
msgstr ""

#: src/attributes/codegen.md:158
msgid ""
"Functions marked with `target_feature` are not inlined into a context that "
"does not support the given features. The `#[inline(always)]` attribute may "
"not be used with a `target_feature` attribute."
msgstr ""

#: src/attributes/codegen.md:164
msgid "Available features"
msgstr ""

#: src/attributes/codegen.md:167
msgid "The following is a list of the available feature names."
msgstr ""

#: src/attributes/codegen.md:171
msgid "`x86` or `x86_64`"
msgstr ""

#: src/attributes/codegen.md:174
msgid ""
"Executing code with unsupported features is undefined behavior on this "
"platform. Hence on this platform usage of `#[target_feature]` functions "
"follows the [above restrictions](codegen.md#r-"
"attributes.codegen.target_feature.safety-restrictions)."
msgstr ""

#: src/attributes/codegen.md:178 src/attributes/codegen.md:258
#: src/attributes/codegen.md:320 src/attributes/codegen.md:379
msgid "Feature"
msgstr ""

#: src/attributes/codegen.md:178 src/attributes/codegen.md:258
#: src/attributes/codegen.md:320 src/attributes/codegen.md:379
msgid "Implicitly Enables"
msgstr ""

#: src/attributes/codegen.md:178 src/attributes/codegen.md:320
#: src/attributes/codegen.md:379
msgid "Description"
msgstr ""

#: src/attributes/codegen.md:180
msgid "`adx`"
msgstr ""

#: src/attributes/codegen.md:180
msgid ""
"[ADX](https://en.wikipedia.org/wiki/Intel_ADX) --- Multi-Precision Add-Carry "
"Instruction Extensions"
msgstr ""

#: src/attributes/codegen.md:181 src/attributes/codegen.md:260
msgid "`aes`"
msgstr ""

#: src/attributes/codegen.md:181 src/attributes/codegen.md:192
#: src/attributes/codegen.md:196 src/attributes/codegen.md:198
#: src/attributes/codegen.md:199
msgid "`sse2`"
msgstr ""

#: src/attributes/codegen.md:181
msgid ""
"[AES](https://en.wikipedia.org/wiki/AES_instruction_set) --- Advanced "
"Encryption Standard"
msgstr ""

#: src/attributes/codegen.md:182 src/attributes/codegen.md:183
#: src/attributes/codegen.md:187 src/attributes/codegen.md:188
#: src/inline-assembly.md:592
msgid "`avx`"
msgstr ""

#: src/attributes/codegen.md:182 src/attributes/codegen.md:201
msgid "`sse4.2`"
msgstr ""

#: src/attributes/codegen.md:182
msgid ""
"[AVX](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions) --- Advanced "
"Vector Extensions"
msgstr ""

#: src/attributes/codegen.md:183
msgid "`avx2`"
msgstr ""

#: src/attributes/codegen.md:183
msgid ""
"[AVX2](https://en.wikipedia.org/wiki/Advanced_Vector_Extensions#AVX2) --- "
"Advanced Vector Extensions 2"
msgstr ""

#: src/attributes/codegen.md:184
msgid "`bmi1`"
msgstr ""

#: src/attributes/codegen.md:184
msgid ""
"[BMI1](https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets) --- "
"Bit Manipulation Instruction Sets"
msgstr ""

#: src/attributes/codegen.md:185
msgid "`bmi2`"
msgstr ""

#: src/attributes/codegen.md:185
msgid ""
"[BMI2](https://en.wikipedia.org/wiki/Bit_Manipulation_Instruction_Sets#BMI2) "
"--- Bit Manipulation Instruction Sets 2"
msgstr ""

#: src/attributes/codegen.md:186
msgid "`cmpxchg16b`"
msgstr ""

#: src/attributes/codegen.md:186
msgid ""
"[`cmpxchg16b`](https://www.felixcloutier.com/x86/cmpxchg8b:cmpxchg16b) --- "
"Compares and exchange 16 bytes (128 bits) of data atomically"
msgstr ""

#: src/attributes/codegen.md:187
msgid "`f16c`"
msgstr ""

#: src/attributes/codegen.md:187
msgid ""
"[F16C](https://en.wikipedia.org/wiki/F16C) --- 16-bit floating point "
"conversion instructions"
msgstr ""

#: src/attributes/codegen.md:188
msgid "`fma`"
msgstr ""

#: src/attributes/codegen.md:188
msgid ""
"[FMA3](https://en.wikipedia.org/wiki/FMA_instruction_set) --- Three-operand "
"fused multiply-add"
msgstr ""

#: src/attributes/codegen.md:189
msgid "`fxsr`"
msgstr ""

#: src/attributes/codegen.md:189
msgid ""
"[`fxsave`](https://www.felixcloutier.com/x86/fxsave) and [`fxrstor`](https://"
"www.felixcloutier.com/x86/fxrstor) --- Save and restore x87 FPU, MMX "
"Technology, and SSE State"
msgstr ""

#: src/attributes/codegen.md:190
msgid "`lzcnt`"
msgstr ""

#: src/attributes/codegen.md:190
msgid ""
"[`lzcnt`](https://www.felixcloutier.com/x86/lzcnt) --- Leading zeros count"
msgstr ""

#: src/attributes/codegen.md:191
msgid "`movbe`"
msgstr ""

#: src/attributes/codegen.md:191
msgid ""
"[`movbe`](https://www.felixcloutier.com/x86/movbe) --- Move data after "
"swapping bytes"
msgstr ""

#: src/attributes/codegen.md:192
msgid "`pclmulqdq`"
msgstr ""

#: src/attributes/codegen.md:192
msgid ""
"[`pclmulqdq`](https://www.felixcloutier.com/x86/pclmulqdq) --- Packed carry-"
"less multiplication quadword"
msgstr ""

#: src/attributes/codegen.md:193
msgid "`popcnt`"
msgstr ""

#: src/attributes/codegen.md:193
msgid ""
"[`popcnt`](https://www.felixcloutier.com/x86/popcnt) --- Count of bits set "
"to 1"
msgstr ""

#: src/attributes/codegen.md:194
msgid "`rdrand`"
msgstr ""

#: src/attributes/codegen.md:194
msgid "[`rdrand`](https://en.wikipedia.org/wiki/RdRand) --- Read random number"
msgstr ""

#: src/attributes/codegen.md:195
msgid "`rdseed`"
msgstr ""

#: src/attributes/codegen.md:195
msgid "[`rdseed`](https://en.wikipedia.org/wiki/RdRand) --- Read random seed"
msgstr ""

#: src/attributes/codegen.md:196
msgid "`sha`"
msgstr ""

#: src/attributes/codegen.md:196
msgid ""
"[SHA](https://en.wikipedia.org/wiki/Intel_SHA_extensions) --- Secure Hash "
"Algorithm"
msgstr ""

#: src/attributes/codegen.md:197 src/attributes/codegen.md:198
#: src/inline-assembly.md:591
msgid "`sse`"
msgstr ""

#: src/attributes/codegen.md:197
msgid ""
"[SSE](https://en.wikipedia.org/wiki/Streaming_SIMD_Extensions) --- Streaming "
"<abbr title=\"Single Instruction Multiple Data\">SIMD</abbr> Extensions"
msgstr ""

#: src/attributes/codegen.md:198
msgid ""
"[SSE2](https://en.wikipedia.org/wiki/SSE2) --- Streaming SIMD Extensions 2"
msgstr ""

#: src/attributes/codegen.md:199 src/attributes/codegen.md:202
msgid "`sse3`"
msgstr ""

#: src/attributes/codegen.md:199
msgid ""
"[SSE3](https://en.wikipedia.org/wiki/SSE3) --- Streaming SIMD Extensions 3"
msgstr ""

#: src/attributes/codegen.md:200 src/attributes/codegen.md:201
msgid "`sse4.1`"
msgstr ""

#: src/attributes/codegen.md:200 src/attributes/codegen.md:202
msgid "`ssse3`"
msgstr ""

#: src/attributes/codegen.md:200
msgid ""
"[SSE4.1](https://en.wikipedia.org/wiki/SSE4#SSE4.1) --- Streaming SIMD "
"Extensions 4.1"
msgstr ""

#: src/attributes/codegen.md:201
msgid ""
"[SSE4.2](https://en.wikipedia.org/wiki/SSE4#SSE4.2) --- Streaming SIMD "
"Extensions 4.2"
msgstr ""

#: src/attributes/codegen.md:202
msgid ""
"[SSSE3](https://en.wikipedia.org/wiki/SSSE3) --- Supplemental Streaming SIMD "
"Extensions 3"
msgstr ""

#: src/attributes/codegen.md:203
msgid "`xsave`"
msgstr ""

#: src/attributes/codegen.md:203
msgid ""
"[`xsave`](https://www.felixcloutier.com/x86/xsave) --- Save processor "
"extended states"
msgstr ""

#: src/attributes/codegen.md:204
msgid "`xsavec`"
msgstr ""

#: src/attributes/codegen.md:204
msgid ""
"[`xsavec`](https://www.felixcloutier.com/x86/xsavec) --- Save processor "
"extended states with compaction"
msgstr ""

#: src/attributes/codegen.md:205
msgid "`xsaveopt`"
msgstr ""

#: src/attributes/codegen.md:205
msgid ""
"[`xsaveopt`](https://www.felixcloutier.com/x86/xsaveopt) --- Save processor "
"extended states optimized"
msgstr ""

#: src/attributes/codegen.md:206
msgid "`xsaves`"
msgstr ""

#: src/attributes/codegen.md:206
msgid ""
"[`xsaves`](https://www.felixcloutier.com/x86/xsaves) --- Save processor "
"extended states supervisor"
msgstr ""

#: src/attributes/codegen.md:241
msgid "`aarch64`"
msgstr ""

#: src/attributes/codegen.md:244 src/attributes/codegen.md:310
msgid ""
"On this platform the usage of `#[target_feature]` functions follows the "
"[above restrictions](codegen.md#r-attributes.codegen.target_feature.safety-"
"restrictions)."
msgstr ""

#: src/attributes/codegen.md:247
msgid ""
"Further documentation on these features can be found in the [ARM "
"Architecture Reference Manual](https://developer.arm.com/documentation/"
"ddi0487/latest), or elsewhere on [developer.arm.com](https://"
"developer.arm.com)."
msgstr ""

#: src/attributes/codegen.md:253
msgid ""
"_**Note**_: The following pairs of features should both be marked as enabled "
"or disabled together if used:"
msgstr ""

#: src/attributes/codegen.md:255
msgid "`paca` and `pacg`, which LLVM currently implements as one feature."
msgstr ""

#: src/attributes/codegen.md:258
msgid "Feature Name"
msgstr ""

#: src/attributes/codegen.md:260 src/attributes/codegen.md:270
#: src/attributes/codegen.md:273 src/attributes/codegen.md:276
#: src/attributes/codegen.md:280 src/attributes/codegen.md:291
#: src/attributes/codegen.md:293 src/inline-assembly.md:600
#: src/inline-assembly.md:603 src/inline-assembly.md:607
msgid "`neon`"
msgstr ""

#: src/attributes/codegen.md:260
msgid ""
"FEAT_AES & FEAT_PMULL --- Advanced <abbr title=\"Single Instruction Multiple "
"Data\">SIMD</abbr> AES & PMULL instructions"
msgstr ""

#: src/attributes/codegen.md:261
msgid "`bf16`"
msgstr ""

#: src/attributes/codegen.md:261
msgid "FEAT_BF16 --- BFloat16 instructions"
msgstr ""

#: src/attributes/codegen.md:262
msgid "`bti`"
msgstr ""

#: src/attributes/codegen.md:262
msgid "FEAT_BTI --- Branch Target Identification"
msgstr ""

#: src/attributes/codegen.md:263
msgid "`crc`"
msgstr ""

#: src/attributes/codegen.md:263
msgid "FEAT_CRC --- CRC32 checksum instructions"
msgstr ""

#: src/attributes/codegen.md:264
msgid "`dit`"
msgstr ""

#: src/attributes/codegen.md:264
msgid "FEAT_DIT --- Data Independent Timing instructions"
msgstr ""

#: src/attributes/codegen.md:265
msgid "`dotprod`"
msgstr ""

#: src/attributes/codegen.md:265
msgid "FEAT_DotProd --- Advanced SIMD Int8 dot product instructions"
msgstr ""

#: src/attributes/codegen.md:266
msgid "`dpb`"
msgstr ""

#: src/attributes/codegen.md:266
msgid "FEAT_DPB --- Data cache clean to point of persistence"
msgstr ""

#: src/attributes/codegen.md:267
msgid "`dpb2`"
msgstr ""

#: src/attributes/codegen.md:267
msgid "FEAT_DPB2 --- Data cache clean to point of deep persistence"
msgstr ""

#: src/attributes/codegen.md:268
msgid "`f32mm`"
msgstr ""

#: src/attributes/codegen.md:268 src/attributes/codegen.md:269
#: src/attributes/codegen.md:296 src/attributes/codegen.md:297
msgid "`sve`"
msgstr ""

#: src/attributes/codegen.md:268
msgid "FEAT_F32MM --- SVE single-precision FP matrix multiply instruction"
msgstr ""

#: src/attributes/codegen.md:269
msgid "`f64mm`"
msgstr ""

#: src/attributes/codegen.md:269
msgid "FEAT_F64MM --- SVE double-precision FP matrix multiply instruction"
msgstr ""

#: src/attributes/codegen.md:270
msgid "`fcma`"
msgstr ""

#: src/attributes/codegen.md:270
msgid "FEAT_FCMA --- Floating point complex number support"
msgstr ""

#: src/attributes/codegen.md:271
msgid "`fhm`"
msgstr ""

#: src/attributes/codegen.md:271 src/attributes/codegen.md:273
#: src/attributes/codegen.md:296
msgid "`fp16`"
msgstr ""

#: src/attributes/codegen.md:271
msgid "FEAT_FHM --- Half-precision FP FMLAL instructions"
msgstr ""

#: src/attributes/codegen.md:272
msgid "`flagm`"
msgstr ""

#: src/attributes/codegen.md:272
msgid "FEAT_FlagM --- Conditional flag manipulation"
msgstr ""

#: src/attributes/codegen.md:273
msgid "FEAT_FP16 --- Half-precision FP data processing"
msgstr ""

#: src/attributes/codegen.md:274
msgid "`frintts`"
msgstr ""

#: src/attributes/codegen.md:274
msgid "FEAT_FRINTTS --- Floating-point to int helper instructions"
msgstr ""

#: src/attributes/codegen.md:275
msgid "`i8mm`"
msgstr ""

#: src/attributes/codegen.md:275
msgid "FEAT_I8MM --- Int8 Matrix Multiplication"
msgstr ""

#: src/attributes/codegen.md:276
msgid "`jsconv`"
msgstr ""

#: src/attributes/codegen.md:276
msgid "FEAT_JSCVT --- JavaScript conversion instruction"
msgstr ""

#: src/attributes/codegen.md:277
msgid "`lse`"
msgstr ""

#: src/attributes/codegen.md:277
msgid "FEAT_LSE --- Large System Extension"
msgstr ""

#: src/attributes/codegen.md:278
msgid "`lor`"
msgstr ""

#: src/attributes/codegen.md:278
msgid "FEAT_LOR --- Limited Ordering Regions extension"
msgstr ""

#: src/attributes/codegen.md:279
msgid "`mte`"
msgstr ""

#: src/attributes/codegen.md:279
msgid "FEAT_MTE & FEAT_MTE2 --- Memory Tagging Extension"
msgstr ""

#: src/attributes/codegen.md:280
msgid "FEAT_FP & FEAT_AdvSIMD --- Floating Point and Advanced SIMD extension"
msgstr ""

#: src/attributes/codegen.md:281
msgid "`pan`"
msgstr ""

#: src/attributes/codegen.md:281
msgid "FEAT_PAN --- Privileged Access-Never extension"
msgstr ""

#: src/attributes/codegen.md:282
msgid "`paca`"
msgstr ""

#: src/attributes/codegen.md:282
msgid "FEAT_PAuth --- Pointer Authentication (address authentication)"
msgstr ""

#: src/attributes/codegen.md:283
msgid "`pacg`"
msgstr ""

#: src/attributes/codegen.md:283
msgid "FEAT_PAuth --- Pointer Authentication (generic authentication)"
msgstr ""

#: src/attributes/codegen.md:284
msgid "`pmuv3`"
msgstr ""

#: src/attributes/codegen.md:284
msgid "FEAT_PMUv3 --- Performance Monitors extension (v3)"
msgstr ""

#: src/attributes/codegen.md:285
msgid "`rand`"
msgstr ""

#: src/attributes/codegen.md:285
msgid "FEAT_RNG --- Random Number Generator"
msgstr ""

#: src/attributes/codegen.md:286
msgid "`ras`"
msgstr ""

#: src/attributes/codegen.md:286
msgid ""
"FEAT_RAS & FEAT_RASv1p1 --- Reliability, Availability and Serviceability "
"extension"
msgstr ""

#: src/attributes/codegen.md:287 src/attributes/codegen.md:288
msgid "`rcpc`"
msgstr ""

#: src/attributes/codegen.md:287
msgid "FEAT_LRCPC --- Release consistent Processor Consistent"
msgstr ""

#: src/attributes/codegen.md:288
msgid "`rcpc2`"
msgstr ""

#: src/attributes/codegen.md:288
msgid "FEAT_LRCPC2 --- RcPc with immediate offsets"
msgstr ""

#: src/attributes/codegen.md:289
msgid "`rdm`"
msgstr ""

#: src/attributes/codegen.md:289
msgid "FEAT_RDM --- Rounding Double Multiply accumulate"
msgstr ""

#: src/attributes/codegen.md:290
msgid "`sb`"
msgstr ""

#: src/attributes/codegen.md:290
msgid "FEAT_SB --- Speculation Barrier"
msgstr ""

#: src/attributes/codegen.md:291 src/attributes/codegen.md:292
msgid "`sha2`"
msgstr ""

#: src/attributes/codegen.md:291
msgid "FEAT_SHA1 & FEAT_SHA256 --- Advanced SIMD SHA instructions"
msgstr ""

#: src/attributes/codegen.md:292
msgid "`sha3`"
msgstr ""

#: src/attributes/codegen.md:292
msgid "FEAT_SHA512 & FEAT_SHA3 --- Advanced SIMD SHA instructions"
msgstr ""

#: src/attributes/codegen.md:293
msgid "`sm4`"
msgstr ""

#: src/attributes/codegen.md:293
msgid "FEAT_SM3 & FEAT_SM4 --- Advanced SIMD SM3/4 instructions"
msgstr ""

#: src/attributes/codegen.md:294
msgid "`spe`"
msgstr ""

#: src/attributes/codegen.md:294
msgid "FEAT_SPE --- Statistical Profiling Extension"
msgstr ""

#: src/attributes/codegen.md:295
msgid "`ssbs`"
msgstr ""

#: src/attributes/codegen.md:295
msgid "FEAT_SSBS & FEAT_SSBS2 --- Speculative Store Bypass Safe"
msgstr ""

#: src/attributes/codegen.md:296
msgid "FEAT_SVE --- Scalable Vector Extension"
msgstr ""

#: src/attributes/codegen.md:297 src/attributes/codegen.md:301
msgid "`sve2`"
msgstr ""

#: src/attributes/codegen.md:297
msgid "FEAT_SVE2 --- Scalable Vector Extension 2"
msgstr ""

#: src/attributes/codegen.md:298
msgid "`sve2-aes`"
msgstr ""

#: src/attributes/codegen.md:298
msgid "`sve2`, `aes`"
msgstr ""

#: src/attributes/codegen.md:298
msgid "FEAT_SVE_AES --- SVE AES instructions"
msgstr ""

#: src/attributes/codegen.md:299
msgid "`sve2-sm4`"
msgstr ""

#: src/attributes/codegen.md:299
msgid "`sve2`, `sm4`"
msgstr ""

#: src/attributes/codegen.md:299
msgid "FEAT_SVE_SM4 --- SVE SM4 instructions"
msgstr ""

#: src/attributes/codegen.md:300
msgid "`sve2-sha3`"
msgstr ""

#: src/attributes/codegen.md:300
msgid "`sve2`, `sha3`"
msgstr ""

#: src/attributes/codegen.md:300
msgid "FEAT_SVE_SHA3 --- SVE SHA3 instructions"
msgstr ""

#: src/attributes/codegen.md:301
msgid "`sve2-bitperm`"
msgstr ""

#: src/attributes/codegen.md:301
msgid "FEAT_SVE_BitPerm --- SVE Bit Permute"
msgstr ""

#: src/attributes/codegen.md:302
msgid "`tme`"
msgstr ""

#: src/attributes/codegen.md:302
msgid "FEAT_TME --- Transactional Memory Extension"
msgstr ""

#: src/attributes/codegen.md:303
msgid "`vh`"
msgstr ""

#: src/attributes/codegen.md:303
msgid "FEAT_VHE --- Virtualization Host Extensions"
msgstr ""

#: src/attributes/codegen.md:307
msgid "`riscv32` or `riscv64`"
msgstr ""

#: src/attributes/codegen.md:313
msgid ""
"Further documentation on these features can be found in their respective "
"specification. Many specifications are described in the [RISC-V ISA Manual]"
"(https://github.com/riscv/riscv-isa-manual) or in another manual hosted on "
"the [RISC-V GitHub Account](https://github.com/riscv)."
msgstr ""

#: src/attributes/codegen.md:322 src/types/boolean.md:77
#: src/types/boolean.md:88 src/types/boolean.md:99 src/types/boolean.md:112
#: src/types/boolean.md:121 src/inline-assembly.md:569
msgid "`a`"
msgstr ""

#: src/attributes/codegen.md:322
msgid ""
"[A](https://github.com/riscv/riscv-isa-manual/blob/"
"de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/a-st-ext.adoc) --- Atomic "
"instructions"
msgstr ""

#: src/attributes/codegen.md:323
msgid "`c`"
msgstr ""

#: src/attributes/codegen.md:323
msgid ""
"[C](https://github.com/riscv/riscv-isa-manual/blob/"
"de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/c-st-ext.adoc) --- Compressed "
"instructions"
msgstr ""

#: src/attributes/codegen.md:324
msgid "`m`"
msgstr ""

#: src/attributes/codegen.md:324
msgid ""
"[M](https://github.com/riscv/riscv-isa-manual/blob/"
"de46343a245c6ee1f7b1a40c92fe1a86bd4f4978/src/m-st-ext.adoc) --- Integer "
"Multiplication and Division instructions"
msgstr ""

#: src/attributes/codegen.md:325
msgid "`zb`"
msgstr ""

#: src/attributes/codegen.md:325
msgid "`zba`, `zbc`, `zbs`"
msgstr ""

#: src/attributes/codegen.md:325
msgid ""
"[Zb](https://github.com/riscv/riscv-bitmanip) --- Bit Manipulation "
"instructions"
msgstr ""

#: src/attributes/codegen.md:326
msgid "`zba`"
msgstr ""

#: src/attributes/codegen.md:326
msgid ""
"[Zba](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zba.adoc) "
"--- Address Generation instructions"
msgstr ""

#: src/attributes/codegen.md:327
msgid "`zbb`"
msgstr ""

#: src/attributes/codegen.md:327
msgid ""
"[Zbb](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbb.adoc) "
"--- Basic bit-manipulation"
msgstr ""

#: src/attributes/codegen.md:328
msgid "`zbc`"
msgstr ""

#: src/attributes/codegen.md:328
msgid ""
"[Zbc](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc) "
"--- Carry-less multiplication"
msgstr ""

#: src/attributes/codegen.md:329
msgid "`zbkb`"
msgstr ""

#: src/attributes/codegen.md:329
msgid ""
"[Zbkb](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkb.adoc) "
"--- Bit Manipulation Instructions for Cryptography"
msgstr ""

#: src/attributes/codegen.md:330
msgid "`zbkc`"
msgstr ""

#: src/attributes/codegen.md:330
msgid ""
"[Zbkc](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbc.adoc) "
"--- Carry-less multiplication for Cryptography"
msgstr ""

#: src/attributes/codegen.md:331
msgid "`zbkx`"
msgstr ""

#: src/attributes/codegen.md:331
msgid ""
"[Zbkx](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbkx.adoc) "
"--- Crossbar permutations"
msgstr ""

#: src/attributes/codegen.md:332
msgid "`zbs`"
msgstr ""

#: src/attributes/codegen.md:332
msgid ""
"[Zbs](https://github.com/riscv/riscv-bitmanip/blob/main/bitmanip/zbs.adoc) "
"--- Single-bit instructions"
msgstr ""

#: src/attributes/codegen.md:333
msgid "`zk`"
msgstr ""

#: src/attributes/codegen.md:333
msgid "`zkn`, `zkr`, `zks`, `zkt`, `zbkb`, `zbkc`, `zkbx`"
msgstr ""

#: src/attributes/codegen.md:333
msgid ""
"[Zk](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zk.adoc) --- Scalar Cryptography"
msgstr ""

#: src/attributes/codegen.md:334
msgid "`zkn`"
msgstr ""

#: src/attributes/codegen.md:334
msgid "`zknd`, `zkne`, `zknh`, `zbkb`, `zbkc`, `zkbx`"
msgstr ""

#: src/attributes/codegen.md:334
msgid ""
"[Zkn](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zkn.adoc) --- NIST Algorithm suite extension"
msgstr ""

#: src/attributes/codegen.md:335
msgid "`zknd`"
msgstr ""

#: src/attributes/codegen.md:335
msgid ""
"[Zknd](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zknd.adoc) --- NIST Suite: AES Decryption"
msgstr ""

#: src/attributes/codegen.md:336
msgid "`zkne`"
msgstr ""

#: src/attributes/codegen.md:336
msgid ""
"[Zkne](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zkne.adoc) --- NIST Suite: AES Encryption"
msgstr ""

#: src/attributes/codegen.md:337
msgid "`zknh`"
msgstr ""

#: src/attributes/codegen.md:337
msgid ""
"[Zknh](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zknh.adoc) --- NIST Suite: Hash Function Instructions"
msgstr ""

#: src/attributes/codegen.md:338
msgid "`zkr`"
msgstr ""

#: src/attributes/codegen.md:338
msgid ""
"[Zkr](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zkr.adoc) --- Entropy Source Extension"
msgstr ""

#: src/attributes/codegen.md:339
msgid "`zks`"
msgstr ""

#: src/attributes/codegen.md:339
msgid "`zksed`, `zksh`, `zbkb`, `zbkc`, `zkbx`"
msgstr ""

#: src/attributes/codegen.md:339
msgid ""
"[Zks](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zks.adoc) --- ShangMi Algorithm Suite"
msgstr ""

#: src/attributes/codegen.md:340
msgid "`zksed`"
msgstr ""

#: src/attributes/codegen.md:340
msgid ""
"[Zksed](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zksed.adoc) --- ShangMi Suite: SM4 Block Cipher Instructions"
msgstr ""

#: src/attributes/codegen.md:341
msgid "`zksh`"
msgstr ""

#: src/attributes/codegen.md:341
msgid ""
"[Zksh](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zksh.adoc) --- ShangMi Suite: SM3 Hash Function Instructions"
msgstr ""

#: src/attributes/codegen.md:342
msgid "`zkt`"
msgstr ""

#: src/attributes/codegen.md:342
msgid ""
"[Zkt](https://github.com/riscv/riscv-crypto/blob/"
"e2dd7d98b7f34d477e38cb5fd7a3af4379525189/doc/scalar/riscv-crypto-scalar-"
"zkt.adoc) --- Data Independent Execution Latency Subset"
msgstr ""

#: src/attributes/codegen.md:370
msgid "`wasm32` or `wasm64`"
msgstr ""

#: src/attributes/codegen.md:373
msgid ""
"Safe `#[target_feature]` functions may always be used in safe contexts on "
"Wasm platforms. It is impossible to cause undefined behavior via the "
"`#[target_feature]` attribute because attempting to use instructions "
"unsupported by the Wasm engine will fail at load time without the risk of "
"being interpreted in a way different from what the compiler expected."
msgstr ""

#: src/attributes/codegen.md:381
msgid "`bulk-memory`"
msgstr ""

#: src/attributes/codegen.md:381
msgid ""
"[WebAssembly bulk memory operations proposal](https://github.com/WebAssembly/"
"bulk-memory-operations)"
msgstr ""

#: src/attributes/codegen.md:382
msgid "`extended-const`"
msgstr ""

#: src/attributes/codegen.md:382
msgid ""
"[WebAssembly extended const expressions proposal](https://github.com/"
"WebAssembly/extended-const)"
msgstr ""

#: src/attributes/codegen.md:383
msgid "`mutable-globals`"
msgstr ""

#: src/attributes/codegen.md:383
msgid ""
"[WebAssembly mutable global proposal](https://github.com/WebAssembly/mutable-"
"global)"
msgstr ""

#: src/attributes/codegen.md:384
msgid "`nontrapping-fptoint`"
msgstr ""

#: src/attributes/codegen.md:384
msgid ""
"[WebAssembly non-trapping float-to-int conversion proposal](https://"
"github.com/WebAssembly/nontrapping-float-to-int-conversions)"
msgstr ""

#: src/attributes/codegen.md:385
msgid "`relaxed-simd`"
msgstr ""

#: src/attributes/codegen.md:385 src/attributes/codegen.md:387
msgid "`simd128`"
msgstr ""

#: src/attributes/codegen.md:385
msgid ""
"[WebAssembly relaxed simd proposal](https://github.com/WebAssembly/relaxed-"
"simd)"
msgstr ""

#: src/attributes/codegen.md:386
msgid "`sign-ext`"
msgstr ""

#: src/attributes/codegen.md:386
msgid ""
"[WebAssembly sign extension operators Proposal](https://github.com/"
"WebAssembly/sign-extension-ops)"
msgstr ""

#: src/attributes/codegen.md:387
msgid "[WebAssembly simd proposal](https://github.com/webassembly/simd)"
msgstr ""

#: src/attributes/codegen.md:388
msgid "`multivalue`"
msgstr ""

#: src/attributes/codegen.md:388
msgid ""
"[WebAssembly multivalue proposal](https://github.com/webassembly/multi-value)"
msgstr ""

#: src/attributes/codegen.md:389
msgid "`reference-types`"
msgstr ""

#: src/attributes/codegen.md:389
msgid ""
"[WebAssembly reference-types proposal](https://github.com/webassembly/"
"reference-types)"
msgstr ""

#: src/attributes/codegen.md:390
msgid "`tail-call`"
msgstr ""

#: src/attributes/codegen.md:390
msgid ""
"[WebAssembly tail-call proposal](https://github.com/webassembly/tail-call)"
msgstr ""

#: src/attributes/codegen.md:405
msgid "Additional information"
msgstr ""

#: src/attributes/codegen.md:409
msgid ""
"See the [`target_feature` conditional compilation option](../conditional-"
"compilation.md#target_feature) for selectively enabling or disabling "
"compilation of code based on compile-time settings. Note that this option is "
"not affected by the `target_feature` attribute, and is only driven by the "
"features enabled for the entire crate."
msgstr ""

#: src/attributes/codegen.md:416
msgid ""
"See the [`is_x86_feature_detected`](../../std/arch/"
"macro.is_x86_feature_detected.html) or [`is_aarch64_feature_detected`](../../"
"std/arch/macro.is_aarch64_feature_detected.html) macros in the standard "
"library for runtime feature detection on these platforms."
msgstr ""

#: src/attributes/codegen.md:419
msgid ""
"Note: `rustc` has a default set of features enabled for each target and CPU. "
"The CPU may be chosen with the [`-C target-cpu`](../../rustc/codegen-options/"
"index.html#target-cpu) flag. Individual features may be enabled or disabled "
"for an entire crate with the [`-C target-feature`](../../rustc/codegen-"
"options/index.html#target-feature) flag."
msgstr ""

#: src/attributes/codegen.md:426
msgid "The `track_caller` attribute"
msgstr ""

#: src/attributes/codegen.md:430
msgid ""
"The `track_caller` attribute may be applied to any function with [`\"Rust\"` "
"ABI](../items/external-blocks.md#abi) with the exception of the entry point "
"`fn main`."
msgstr ""

#: src/attributes/codegen.md:435
msgid ""
"When applied to functions and methods in trait declarations, the attribute "
"applies to all implementations. If the trait provides a default "
"implementation with the attribute, then the attribute also applies to "
"override implementations."
msgstr ""

#: src/attributes/codegen.md:440
msgid ""
"When applied to a function in an `extern` block the attribute must also be "
"applied to any linked implementations, otherwise undefined behavior results. "
"When applied to a function which is made available to an `extern` block, the "
"declaration in the `extern` block must also have the attribute, otherwise "
"undefined behavior results."
msgstr ""

#: src/attributes/codegen.md:447
msgid "Behavior"
msgstr ""

#: src/attributes/codegen.md:449
msgid ""
"Applying the attribute to a function `f` allows code within `f` to get a "
"hint of the [`Location`](../../core/panic/location/struct.Location.html) of "
"the \"topmost\" tracked call that led to `f`'s invocation. At the point of "
"observation, an implementation behaves as if it walks up the stack from "
"`f`'s frame to find the nearest frame of an _unattributed_ function `outer`, "
"and it returns the [`Location`](../../core/panic/location/"
"struct.Location.html) of the tracked call in `outer`."
msgstr ""

#: src/attributes/codegen.md:461
msgid ""
"Note: `core` provides [`core::panic::Location::caller`](../../core/panic/"
"location/struct.Location.html#method.caller) for observing caller locations. "
"It wraps the [`core::intrinsics::caller_location`](../../core/intrinsics/"
"fn.caller_location.html) intrinsic implemented by `rustc`."
msgstr ""

#: src/attributes/codegen.md:464
msgid ""
"Note: because the resulting `Location` is a hint, an implementation may halt "
"its walk up the stack early. See [Limitations](#limitations) for important "
"caveats."
msgstr ""

#: src/attributes/codegen.md:469
msgid ""
"When `f` is called directly by `calls_f`, code in `f` observes its callsite "
"within `calls_f`:"
msgstr ""

#: src/attributes/codegen.md:477
msgid "// <-- f() prints this location\n"
msgstr ""

#: src/attributes/codegen.md:481
msgid ""
"When `f` is called by another attributed function `g` which is in turn "
"called by `calls_g`, code in both `f` and `g` observes `g`'s callsite within "
"`calls_g`:"
msgstr ""

#: src/attributes/codegen.md:496
msgid "// <-- g() prints this location twice, once itself and once from f()\n"
msgstr ""

#: src/attributes/codegen.md:500
msgid ""
"When `g` is called by another attributed function `h` which is in turn "
"called by `calls_h`, all code in `f`, `g`, and `h` observes `h`'s callsite "
"within `calls_h`:"
msgstr ""

#: src/attributes/codegen.md:520
msgid ""
"// <-- prints this location three times, once itself, once from g(), once "
"from f()\n"
msgstr ""

#: src/attributes/codegen.md:524
msgid "And so on."
msgstr ""

#: src/attributes/codegen.md:528 src/types/impl-trait.md:198
msgid "Limitations"
msgstr ""

#: src/attributes/codegen.md:532
msgid ""
"This information is a hint and implementations are not required to preserve "
"it."
msgstr ""

#: src/attributes/codegen.md:536
msgid ""
"In particular, coercing a function with `#[track_caller]` to a function "
"pointer creates a shim which appears to observers to have been called at the "
"attributed function's definition site, losing actual caller information "
"across virtual calls. A common example of this coercion is the creation of a "
"trait object whose methods are attributed."
msgstr ""

#: src/attributes/codegen.md:541
msgid ""
"Note: The aforementioned shim for function pointers is necessary because "
"`rustc` implements `track_caller` in a codegen context by appending an "
"implicit parameter to the function ABI, but this would be unsound for an "
"indirect call because the parameter is not a part of the function's type and "
"a given function pointer type may or may not refer to a function with the "
"attribute. The creation of a shim hides the implicit parameter from callers "
"of the function pointer, preserving soundness."
msgstr ""

#: src/attributes/codegen.md:565
msgid "The `instruction_set` attribute"
msgstr ""

#: src/attributes/codegen.md:569
msgid ""
"The _`instruction_set` [attribute](../attributes.md)_ may be applied to a "
"function to control which instruction set the function will be generated for."
msgstr ""

#: src/attributes/codegen.md:573
msgid ""
"This allows mixing more than one instruction set in a single program on CPU "
"architectures that support it."
msgstr ""

#: src/attributes/codegen.md:577
msgid ""
"It uses the [_MetaListPath_](../attributes.md#meta-item-attribute-syntax) "
"syntax, and a path comprised of the architecture family name and instruction "
"set name."
msgstr ""

#: src/attributes/codegen.md:583
msgid ""
"It is a compilation error to use the `instruction_set` attribute on a target "
"that does not support it."
msgstr ""

#: src/attributes/codegen.md:587
msgid "On ARM"
msgstr ""

#: src/attributes/codegen.md:590
msgid ""
"For the `ARMv4T` and `ARMv5te` architectures, the following are supported:"
msgstr ""

#: src/attributes/codegen.md:591
msgid "`arm::a32` --- Generate the function as A32 \"ARM\" code."
msgstr ""

#: src/attributes/codegen.md:592
msgid "`arm::t32` --- Generate the function as T32 \"Thumb\" code."
msgstr ""

#: src/attributes/codegen.md:603
msgid "Using the `instruction_set` attribute has the following effects:"
msgstr ""

#: src/attributes/codegen.md:605
msgid ""
"If the address of the function is taken as a function pointer, the low bit "
"of the address will be set to 0 (arm) or 1 (thumb) depending on the "
"instruction set."
msgstr ""

#: src/attributes/codegen.md:606
msgid ""
"Any inline assembly in the function must use the specified instruction set "
"instead of the target default."
msgstr ""

#: src/attributes/limits.md:6
msgid ""
"The following [attributes](../attributes.md) affect compile-time limits."
msgstr ""

#: src/attributes/limits.md:10
msgid "The `recursion_limit` attribute"
msgstr ""

#: src/attributes/limits.md:14
msgid ""
"The _`recursion_limit` attribute_ may be applied at the [crate](../crates-"
"and-source-files.md) level to set the maximum depth for potentially "
"infinitely-recursive compile-time operations like macro expansion or auto-"
"dereference."
msgstr ""

#: src/attributes/limits.md:20
msgid ""
"It uses the [_MetaNameValueStr_](../attributes.md#meta-item-attribute-"
"syntax) syntax to specify the recursion depth."
msgstr ""

#: src/attributes/limits.md:23
msgid "Note: The default in `rustc` is 128."
msgstr ""

#: src/attributes/limits.md:26 src/attributes/limits.md:69
msgid "\"4\""
msgstr ""

#: src/attributes/limits.md:35
msgid ""
"// This fails to expand because it requires a recursion depth greater than "
"4.\n"
msgstr ""

#: src/attributes/limits.md:41 src/destructors.md:183
msgid "\"1\""
msgstr ""

#: src/attributes/limits.md:42
msgid ""
"// This fails because it requires two recursive steps to auto-dereference.\n"
msgstr ""

#: src/attributes/limits.md:49
msgid "The `type_length_limit` attribute"
msgstr ""

#: src/attributes/limits.md:52
msgid ""
"**Note**: This limit is only enforced when the nightly `-Zenforce-type-"
"length-limit` flag is active."
msgstr ""

#: src/attributes/limits.md:54
msgid ""
"For more information, see <https://github.com/rust-lang/rust/pull/127670>."
msgstr ""

#: src/attributes/limits.md:58
msgid ""
"The _`type_length_limit` attribute_ limits the maximum number of type "
"substitutions made when constructing a concrete type during monomorphization."
msgstr ""

#: src/attributes/limits.md:63
msgid ""
"It is applied at the [crate](../crates-and-source-files.md) level, and uses "
"the [_MetaNameValueStr_](../attributes.md#meta-item-attribute-syntax) syntax "
"to set the limit based on the number of type substitutions."
msgstr ""

#: src/attributes/limits.md:66
msgid "Note: The default in `rustc` is 1048576."
msgstr ""

#: src/attributes/limits.md:72
msgid ""
"// This fails to compile because monomorphizing to\n"
"// `f::<((((i32,), i32), i32), i32)>` requires more than 4 type elements.\n"
msgstr ""

#: src/attributes/type_system.md:3
msgid "Type system attributes"
msgstr ""

#: src/attributes/type_system.md:5
msgid ""
"The following [attributes](../attributes.md) are used for changing how a "
"type can be used."
msgstr ""

#: src/attributes/type_system.md:9
msgid "The `non_exhaustive` attribute"
msgstr ""

#: src/attributes/type_system.md:13
msgid ""
"The _`non_exhaustive` attribute_ indicates that a type or variant may have "
"more fields or variants added in the future."
msgstr ""

#: src/attributes/type_system.md:18
msgid ""
"It can be applied to [`struct`s](../items/structs.md), [`enum`s](../items/"
"enumerations.md), and `enum` variants."
msgstr ""

#: src/attributes/type_system.md:22
msgid ""
"The `non_exhaustive` attribute uses the [_MetaWord_](../attributes.md#meta-"
"item-attribute-syntax) syntax and thus does not take any inputs."
msgstr ""

#: src/attributes/type_system.md:27
msgid "Within the defining crate, `non_exhaustive` has no effect."
msgstr ""

#: src/attributes/type_system.md:53
msgid ""
"// Non-exhaustive structs can be constructed as normal within the defining "
"crate.\n"
msgstr ""

#: src/attributes/type_system.md:58
msgid ""
"// Non-exhaustive structs can be matched on exhaustively within the defining "
"crate.\n"
msgstr ""

#: src/attributes/type_system.md:66
msgid ""
"// Non-exhaustive enums can be matched on exhaustively within the defining "
"crate.\n"
msgstr ""

#: src/attributes/type_system.md:74
msgid ""
"// Non-exhaustive variants can be matched on exhaustively within the "
"defining crate.\n"
msgstr ""

#: src/attributes/type_system.md:83
msgid ""
"Outside of the defining crate, types annotated with `non_exhaustive` have "
"limitations that preserve backwards compatibility when new fields or "
"variants are added."
msgstr ""

#: src/attributes/type_system.md:88
msgid ""
"Non-exhaustive types cannot be constructed outside of the defining crate:"
msgstr ""

#: src/attributes/type_system.md:90
msgid ""
"Non-exhaustive variants ([`struct`](../items/structs.md) or [`enum` variant]"
"(../items/enumerations.md)) cannot be constructed with a [_StructExpression_]"
"(../expressions/struct-expr.md) (including with [functional update syntax]"
"(../expressions/struct-expr.md#functional-update-syntax))."
msgstr ""

#: src/attributes/type_system.md:92
msgid ""
"The implicitly defined same-named constant of a [unit-like struct](../items/"
"structs.md), or the same-named constructor function of a [tuple struct](../"
"items/structs.md), has a [visibility](../visibility-and-privacy.md) no "
"greater than `pub(crate)`. That is, if the struct’s visibility is `pub`, "
"then the constant or constructor’s visibility is `pub(crate)`, and otherwise "
"the visibility of the two items is the same (as is the case without "
"`#[non_exhaustive]`)."
msgstr ""

#: src/attributes/type_system.md:98
msgid "[`enum`](../items/enumerations.md) instances can be constructed."
msgstr ""

#: src/attributes/type_system.md:100
msgid ""
"The following examples of construction do not compile when outside the "
"defining crate:"
msgstr ""

#: src/attributes/type_system.md:104 src/attributes/type_system.md:153
msgid ""
"// These are types defined in an upstream crate that have been annotated as\n"
"// `#[non_exhaustive]`.\n"
msgstr ""

#: src/attributes/type_system.md:107
msgid ""
"// Cannot construct an instance of `Config`; if new fields were added in\n"
"// a new version of `upstream` then this would fail to compile, so it is\n"
"// disallowed.\n"
msgstr ""

#: src/attributes/type_system.md:112
msgid ""
"// Cannot construct an instance of `Token`; if new fields were added, then\n"
"// it would not be a unit-like struct any more, so the same-named constant\n"
"// created by it being a unit-like struct is not public outside the crate;\n"
"// this code fails to compile.\n"
msgstr ""

#: src/attributes/type_system.md:118
msgid ""
"// Cannot construct an instance of `Id`; if new fields were added, then\n"
"// its constructor function signature would change, so its constructor\n"
"// function is not public outside the crate; this code fails to compile.\n"
msgstr ""

#: src/attributes/type_system.md:123
msgid ""
"// Can construct an instance of `Error`; new variants being introduced "
"would\n"
"// not result in this failing to compile.\n"
msgstr ""

#: src/attributes/type_system.md:127
msgid ""
"// Cannot construct an instance of `Message::Send` or `Message::Reaction`;\n"
"// if new fields were added in a new version of `upstream` then this would\n"
"// fail to compile, so it is disallowed.\n"
msgstr ""

#: src/attributes/type_system.md:133
msgid ""
"// Cannot construct an instance of `Message::Quit`; if this were converted "
"to\n"
"// a tuple-variant `upstream` then this would fail to compile.\n"
msgstr ""

#: src/attributes/type_system.md:141
msgid ""
"There are limitations when matching on non-exhaustive types outside of the "
"defining crate:"
msgstr ""

#: src/attributes/type_system.md:143
msgid ""
"When pattern matching on a non-exhaustive variant ([`struct`](../items/"
"structs.md) or [`enum` variant](../items/enumerations.md)), a "
"[_StructPattern_](../patterns.md#struct-patterns) must be used which must "
"include a `..`. A tuple variant's constructor's [visibility](../visibility-"
"and-privacy.md) is reduced to be no greater than `pub(crate)`."
msgstr ""

#: src/attributes/type_system.md:146
msgid ""
"When pattern matching on a non-exhaustive [`enum`](../items/"
"enumerations.md), matching on a variant does not contribute towards the "
"exhaustiveness of the arms."
msgstr ""

#: src/attributes/type_system.md:149
msgid ""
"The following examples of matching do not compile when outside the defining "
"crate:"
msgstr ""

#: src/attributes/type_system.md:156
msgid ""
"// Cannot match on a non-exhaustive enum without including a wildcard arm.\n"
msgstr ""

#: src/attributes/type_system.md:161
msgid "// would compile with: `_ => {},`\n"
msgstr ""

#: src/attributes/type_system.md:163
msgid "// Cannot match on a non-exhaustive struct without a wildcard.\n"
msgstr ""

#: src/attributes/type_system.md:166
msgid "// would compile with: `..`\n"
msgstr ""

#: src/attributes/type_system.md:168
msgid ""
"// Cannot match a non-exhaustive unit-like or tuple struct except by using\n"
"// braced struct syntax with a wildcard.\n"
"// This would compile as `let Token { .. } = token;`\n"
msgstr ""

#: src/attributes/type_system.md:172
msgid "// This would compile as `let Id { 0: id_number, .. } = id;`\n"
msgstr ""

#: src/attributes/type_system.md:177
msgid ""
"// Cannot match on a non-exhaustive struct enum variant without including a "
"wildcard.\n"
msgstr ""

#: src/attributes/type_system.md:179
msgid "// Cannot match on a non-exhaustive tuple or unit enum variant.\n"
msgstr ""

#: src/attributes/type_system.md:185
msgid ""
"It's also not allowed to use numeric casts (`as`) on enums that contain any "
"non-exhaustive variants."
msgstr ""

#: src/attributes/type_system.md:187
msgid ""
"For example, the following enum can be cast because it doesn't contain any "
"non-exhaustive variants:"
msgstr ""

#: src/attributes/type_system.md:197
msgid ""
"However, if the enum contains even a single non-exhaustive variant, casting "
"will result in an error. Consider this modified version of the same enum:"
msgstr ""

#: src/attributes/type_system.md:211
msgid ""
"// Error: cannot cast an enum with a non-exhaustive variant when it's "
"defined in another crate\n"
msgstr ""

#: src/attributes/type_system.md:216
msgid ""
"Non-exhaustive types are always considered inhabited in downstream crates."
msgstr ""

#: src/attributes/debugger.md:3
msgid "Debugger attributes"
msgstr ""

#: src/attributes/debugger.md:6
msgid ""
"The following [attributes](../attributes.md) are used for enhancing the "
"debugging experience when using third-party debuggers like GDB or WinDbg."
msgstr ""

#: src/attributes/debugger.md:10
msgid "The `debugger_visualizer` attribute"
msgstr ""

#: src/attributes/debugger.md:14
msgid ""
"The _`debugger_visualizer` attribute_ can be used to embed a debugger "
"visualizer file into the debug information. This enables an improved "
"debugger experience for displaying values in the debugger."
msgstr ""

#: src/attributes/debugger.md:19
msgid ""
"It uses the [_MetaListNameValueStr_](../attributes.md#meta-item-attribute-"
"syntax) syntax to specify its inputs, and must be specified as a crate "
"attribute."
msgstr ""

#: src/attributes/debugger.md:23
msgid "Using `debugger_visualizer` with Natvis"
msgstr ""

#: src/attributes/debugger.md:27
msgid ""
"Natvis is an XML-based framework for Microsoft debuggers (such as Visual "
"Studio and WinDbg) that uses declarative rules to customize the display of "
"types. For detailed information on the Natvis format, refer to Microsoft's "
"[Natvis documentation](https://docs.microsoft.com/en-us/visualstudio/"
"debugger/create-custom-views-of-native-objects)."
msgstr ""

#: src/attributes/debugger.md:32
msgid ""
"This attribute only supports embedding Natvis files on `-windows-msvc` "
"targets."
msgstr ""

#: src/attributes/debugger.md:36
msgid ""
"The path to the Natvis file is specified with the `natvis_file` key, which "
"is a path relative to the crate source file:"
msgstr ""

#: src/attributes/debugger.md:39
msgid ""
"```rust ignore\n"
"#![debugger_visualizer(natvis_file = \"Rectangle.natvis\")]\n"
"\n"
"struct FancyRect {\n"
"    x: f32,\n"
"    y: f32,\n"
"    dx: f32,\n"
"    dy: f32,\n"
"}\n"
"\n"
"fn main() {\n"
"    let fancy_rect = FancyRect { x: 10.0, y: 10.0, dx: 5.0, dy: 5.0 };\n"
"    println!(\"set breakpoint here\");\n"
"}\n"
"```"
msgstr ""

#: src/attributes/debugger.md:55
msgid "and `Rectangle.natvis` contains:"
msgstr ""

#: src/attributes/debugger.md:58
msgid "\"1.0\""
msgstr ""

#: src/attributes/debugger.md:58
msgid "\"utf-8\""
msgstr ""

#: src/attributes/debugger.md:59
msgid "\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\""
msgstr ""

#: src/attributes/debugger.md:60
msgid "\"foo::FancyRect\""
msgstr ""

#: src/attributes/debugger.md:63
msgid "\"LowerLeft\""
msgstr ""

#: src/attributes/debugger.md:66
msgid "\"UpperLeft\""
msgstr ""

#: src/attributes/debugger.md:69
msgid "\"UpperRight\""
msgstr ""

#: src/attributes/debugger.md:72
msgid "\"LowerRight\""
msgstr ""

#: src/attributes/debugger.md:80
msgid ""
"When viewed under WinDbg, the `fancy_rect` variable would be shown as "
"follows:"
msgstr ""

#: src/attributes/debugger.md:93
msgid "Using `debugger_visualizer` with GDB"
msgstr ""

#: src/attributes/debugger.md:97
msgid ""
"GDB supports the use of a structured Python script, called a _pretty "
"printer_, that describes how a type should be visualized in the debugger "
"view. For detailed information on pretty printers, refer to GDB's [pretty "
"printing documentation](https://sourceware.org/gdb/onlinedocs/gdb/Pretty-"
"Printing.html)."
msgstr ""

#: src/attributes/debugger.md:100
msgid ""
"Embedded pretty printers are not automatically loaded when debugging a "
"binary under GDB. There are two ways to enable auto-loading embedded pretty "
"printers:"
msgstr ""

#: src/attributes/debugger.md:102
msgid ""
"Launch GDB with extra arguments to explicitly add a directory or binary to "
"the auto-load safe path: `gdb -iex \"add-auto-load-safe-path safe-path path/"
"to/binary\" path/to/binary` For more information, see GDB's [auto-loading "
"documentation](https://sourceware.org/gdb/onlinedocs/gdb/Auto_002dloading-"
"safe-path.html)."
msgstr ""

#: src/attributes/debugger.md:104
msgid ""
"Create a file named `gdbinit` under `$HOME/.config/gdb` (you may need to "
"create the directory if it doesn't already exist). Add the following line to "
"that file: `add-auto-load-safe-path path/to/binary`."
msgstr ""

#: src/attributes/debugger.md:108
msgid ""
"These scripts are embedded using the `gdb_script_file` key, which is a path "
"relative to the crate source file."
msgstr ""

#: src/attributes/debugger.md:111
msgid ""
"```rust ignore\n"
"#![debugger_visualizer(gdb_script_file = \"printer.py\")]\n"
"\n"
"struct Person {\n"
"    name: String,\n"
"    age: i32,\n"
"}\n"
"\n"
"fn main() {\n"
"    let bob = Person { name: String::from(\"Bob\"), age: 10 };\n"
"    println!(\"set breakpoint here\");\n"
"}\n"
"```"
msgstr ""

#: src/attributes/debugger.md:125
msgid "and `printer.py` contains:"
msgstr ""

#: src/attributes/debugger.md:131
msgid "\"Print a Person\""
msgstr ""

#: src/attributes/debugger.md:135
msgid "\"name\""
msgstr ""

#: src/attributes/debugger.md:136
msgid "\"age\""
msgstr ""

#: src/attributes/debugger.md:139
msgid "\"{} is {} years old.\""
msgstr ""

#: src/attributes/debugger.md:145
msgid "\"foo::Person\""
msgstr ""

#: src/attributes/debugger.md:153
msgid ""
"When the crate's debug executable is passed into GDB[^rust-gdb], `print bob` "
"will display:"
msgstr ""

#: src/attributes/debugger.md:155
msgid ""
"```text\n"
"\"Bob\" is 10 years old.\n"
"```"
msgstr ""

#: src/attributes/debugger.md:159
msgid ""
"Note: This assumes you are using the `rust-gdb` script which configures "
"pretty-printers for standard library types like `String`."
msgstr ""

#: src/attributes/debugger.md:169
msgid "The `collapse_debuginfo` attribute"
msgstr ""

#: src/attributes/debugger.md:173
msgid ""
"The _`collapse_debuginfo` [attribute](../attributes.md)_ controls whether "
"code locations from a macro definition are collapsed into a single location "
"associated with the macro's call site, when generating debuginfo for code "
"calling this macro."
msgstr ""

#: src/attributes/debugger.md:178
msgid ""
"The attribute uses the [_MetaListIdents_](../attributes.md#meta-item-"
"attribute-syntax) syntax to specify its inputs, and can only be applied to "
"macro definitions."
msgstr ""

#: src/attributes/debugger.md:182
msgid "Accepted options:"
msgstr ""

#: src/attributes/debugger.md:183
msgid ""
"`#[collapse_debuginfo(yes)]` --- code locations in debuginfo are collapsed."
msgstr ""

#: src/attributes/debugger.md:184
msgid ""
"`#[collapse_debuginfo(no)]` --- code locations in debuginfo are not "
"collapsed."
msgstr ""

#: src/attributes/debugger.md:185
msgid ""
"`#[collapse_debuginfo(external)]` --- code locations in debuginfo are "
"collapsed only if the macro comes from a different crate."
msgstr ""

#: src/attributes/debugger.md:189
msgid ""
"The `external` behavior is the default for macros that don't have this "
"attribute, unless they are built-in macros. For built-in macros the default "
"is `yes`."
msgstr ""

#: src/attributes/debugger.md:192
msgid ""
"**Note**: `rustc` has a `-C collapse-macro-debuginfo` CLI option to override "
"both the default collapsing behavior and `#[collapse_debuginfo]` attributes."
msgstr ""

#: src/attributes/debugger.md:198
msgid "\"hello!\""
msgstr ""

#: src/statements-and-expressions.md:6
msgid ""
"Rust is _primarily_ an expression language. This means that most forms of "
"value-producing or effect-causing evaluation are directed by the uniform "
"syntax category of _expressions_. Each kind of expression can typically "
"_nest_ within each other kind of expression, and rules for evaluation of "
"expressions involve specifying both the value produced by the expression and "
"the order in which its sub-expressions are themselves evaluated."
msgstr ""

#: src/statements-and-expressions.md:10
msgid ""
"In contrast, statements serve _mostly_ to contain and explicitly sequence "
"expression evaluation."
msgstr ""

#: src/statements.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Statement_ :  \n"
"      `;`  \n"
"   | [_Item_](items.md)  \n"
"   | [_LetStatement_](#let-statements)  \n"
"   | [_ExpressionStatement_](#expression-statements)  \n"
"   | [_MacroInvocationSemi_](macros.md#macro-invocation)"
msgstr ""

#: src/statements.md:17
msgid ""
"A _statement_ is a component of a [block](expressions/block-expr.md), which "
"is in turn a component of an outer [expression](expressions.md) or [function]"
"(items/functions.md)."
msgstr ""

#: src/statements.md:21
msgid ""
"Rust has two kinds of statement: [declaration statements](#declaration-"
"statements) and [expression statements](#expression-statements)."
msgstr ""

#: src/statements.md:25
msgid "Declaration statements"
msgstr ""

#: src/statements.md:28
msgid ""
"A _declaration statement_ is one that introduces one or more _names_ into "
"the enclosing statement block. The declared names may denote new variables "
"or new [items](items.md)."
msgstr ""

#: src/statements.md:31
msgid ""
"The two kinds of declaration statements are item declarations and `let` "
"statements."
msgstr ""

#: src/statements.md:35
msgid "Item declarations"
msgstr ""

#: src/statements.md:39
msgid ""
"An _item declaration statement_ has a syntactic form identical to an [item "
"declaration](items.md) within a [module](items/modules.md)."
msgstr ""

#: src/statements.md:43
msgid ""
"Declaring an item within a statement block restricts its [scope](names/"
"scopes.md) to the block containing the statement. The item is not given a "
"[canonical path](paths.md#canonical-paths) nor are any sub-items it may "
"declare."
msgstr ""

#: src/statements.md:48
msgid ""
"The exception to this is that associated items defined by [implementations]"
"(items/implementations.md) are still accessible in outer scopes as long as "
"the item and, if applicable, trait are accessible. It is otherwise identical "
"in meaning to declaring the item inside a module."
msgstr ""

#: src/statements.md:53
msgid ""
"There is no implicit capture of the containing function's generic "
"parameters, parameters, and local variables. For example, `inner` may not "
"access `outer_var`."
msgstr ""

#: src/statements.md:60
msgid "/* outer_var is not in scope here */"
msgstr ""

#: src/statements.md:68
msgid "`let` statements"
msgstr ""

#: src/statements.md:72
msgid ""
"**<sup>Syntax</sup>**  \n"
"_LetStatement_ :  \n"
"   [_OuterAttribute_](attributes.md)<sup>\\*</sup> `let` [_PatternNoTopAlt_]"
"(patterns.md) ( `:` [_Type_](types.md) )<sup>?</sup> (`=` [_Expression_]"
"(expressions.md) [†](#let-else-restriction) ( `else` [_BlockExpression_]"
"(expressions/block-expr.md)) <sup>?</sup> ) <sup>?</sup> `;`"
msgstr ""

#: src/statements.md:78
msgid ""
"<span id=\"let-else-restriction\">† When an `else` block is specified, the "
"_Expression_ must not be a [_LazyBooleanExpression_](expressions/operator-"
"expr.md#lazy-boolean-operators), or end with a `}`.</span>"
msgstr ""

#: src/statements.md:83
msgid ""
"A _`let` statement_ introduces a new set of [variables](variables.md), given "
"by a [pattern](patterns.md). The pattern is followed optionally by a type "
"annotation and then either ends, or is followed by an initializer expression "
"plus an optional `else` block."
msgstr ""

#: src/statements.md:88
msgid ""
"When no type annotation is given, the compiler will infer the type, or "
"signal an error if insufficient type information is available for definite "
"inference."
msgstr ""

#: src/statements.md:92
msgid ""
"Any variables introduced by a variable declaration are visible from the "
"point of declaration until the end of the enclosing block scope, except when "
"they are shadowed by another variable declaration."
msgstr ""

#: src/statements.md:96
msgid ""
"If an `else` block is not present, the pattern must be irrefutable. If an "
"`else` block is present, the pattern may be refutable."
msgstr ""

#: src/statements.md:101
msgid ""
"If the pattern does not match (this requires it to be refutable), the `else` "
"block is executed. The `else` block must always diverge (evaluate to the "
"[never type](types/never.md))."
msgstr ""

#: src/statements.md:105
msgid "// The bindings may be mut or const\n"
msgstr ""

#: src/statements.md:106
msgid "// Refutable patterns require an else block\n"
msgstr ""

#: src/statements.md:107
msgid "// The else block must diverge\n"
msgstr ""

#: src/statements.md:109
msgid ""
"// This pattern is irrefutable, so the compiler\n"
"                                 // will lint as the else block is "
"redundant.\n"
msgstr ""

#: src/statements.md:117
msgid "Expression statements"
msgstr ""

#: src/statements.md:121
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ExpressionStatement_ :  \n"
"      [_ExpressionWithoutBlock_](expressions.md) `;`  \n"
"   | [_ExpressionWithBlock_](expressions.md) `;`<sup>?</sup>"
msgstr ""

#: src/statements.md:128
msgid ""
"An _expression statement_ is one that evaluates an [expression]"
"(expressions.md) and ignores its result. As a rule, an expression "
"statement's purpose is to trigger the effects of evaluating its expression."
msgstr ""

#: src/statements.md:133
msgid ""
"An expression that consists of only a [block expression](expressions/block-"
"expr.md) or control flow expression, if used in a context where a statement "
"is permitted, can omit the trailing semicolon. This can cause an ambiguity "
"between it being parsed as a standalone statement and as a part of another "
"expression; in this case, it is parsed as a statement."
msgstr ""

#: src/statements.md:139
msgid ""
"The type of [_ExpressionWithBlock_](expressions.md) expressions when used as "
"statements must be the unit type."
msgstr ""

#: src/statements.md:143
msgid "// Ignore the element returned from pop\n"
msgstr ""

#: src/statements.md:148
msgid "// Semicolon can be omitted.\n"
msgstr ""

#: src/statements.md:149
msgid "// Separate expression statement, not an indexing expression.\n"
msgstr ""

#: src/statements.md:152
msgid "When the trailing semicolon is omitted, the result must be type `()`."
msgstr ""

#: src/statements.md:155
msgid ""
"// bad: the block's type is i32, not ()\n"
"// Error: expected `()` because of default return type\n"
"// if true {\n"
"//   1\n"
"// }\n"
msgstr ""

#: src/statements.md:160
msgid "// good: the block's type is i32\n"
msgstr ""

#: src/statements.md:171
msgid "Attributes on Statements"
msgstr ""

#: src/statements.md:174
msgid ""
"Statements accept [outer attributes](attributes.md). The attributes that "
"have meaning on a statement are [`cfg`](conditional-compilation.md), and "
"[the lint check attributes](attributes/diagnostics.md#lint-check-attributes)."
msgstr ""

#: src/expressions.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Expression_ :  \n"
"      _ExpressionWithoutBlock_  \n"
"   | _ExpressionWithBlock_"
msgstr ""

#: src/expressions.md:12
msgid ""
"_ExpressionWithoutBlock_ :  \n"
"   [_OuterAttribute_](attributes.md)<sup>\\*</sup>[†](#expression-"
"attributes)  \n"
"   (  \n"
"         [_LiteralExpression_](expressions/literal-expr.md)  \n"
"      | [_PathExpression_](expressions/path-expr.md)  \n"
"      | [_OperatorExpression_](expressions/operator-expr.md)  \n"
"      | [_GroupedExpression_](expressions/grouped-expr.md)  \n"
"      | [_ArrayExpression_](expressions/array-expr.md)  \n"
"      | [_AwaitExpression_](expressions/await-expr.md)  \n"
"      | [_IndexExpression_](expressions/array-expr.md#array-and-slice-"
"indexing-expressions)  \n"
"      | [_TupleExpression_](expressions/tuple-expr.md)  \n"
"      | [_TupleIndexingExpression_](expressions/tuple-expr.md#tuple-indexing-"
"expressions)  \n"
"      | [_StructExpression_](expressions/struct-expr.md)  \n"
"      | [_CallExpression_](expressions/call-expr.md)  \n"
"      | [_MethodCallExpression_](expressions/method-call-expr.md)  \n"
"      | [_FieldExpression_](expressions/field-expr.md)  \n"
"      | [_ClosureExpression_](expressions/closure-expr.md)  \n"
"      | [_AsyncBlockExpression_](expressions/block-expr.md#async-blocks)  \n"
"      | [_ContinueExpression_](expressions/loop-expr.md#continue-"
"expressions)  \n"
"      | [_BreakExpression_](expressions/loop-expr.md#break-expressions)  \n"
"      | [_RangeExpression_](expressions/range-expr.md)  \n"
"      | [_ReturnExpression_](expressions/return-expr.md)  \n"
"      | [_UnderscoreExpression_](expressions/underscore-expr.md)  \n"
"      | [_MacroInvocation_](macros.md#macro-invocation)  \n"
"   )"
msgstr ""

#: src/expressions.md:38
msgid ""
"_ExpressionWithBlock_ :  \n"
"   [_OuterAttribute_](attributes.md)<sup>\\*</sup>[†](#expression-"
"attributes)  \n"
"   (  \n"
"         [_BlockExpression_](expressions/block-expr.md)  \n"
"      | [_ConstBlockExpression_](expressions/block-expr.md#const-blocks)  \n"
"      | [_UnsafeBlockExpression_](expressions/block-expr.md#unsafe-"
"blocks)  \n"
"      | [_LoopExpression_](expressions/loop-expr.md)  \n"
"      | [_IfExpression_](expressions/if-expr.md#if-expressions)  \n"
"      | [_IfLetExpression_](expressions/if-expr.md#if-let-expressions)  \n"
"      | [_MatchExpression_](expressions/match-expr.md)  \n"
"   )"
msgstr ""

#: src/expressions.md:52
msgid ""
"An expression may have two roles: it always produces a _value_, and it may "
"have _effects_ (otherwise known as \"side effects\")."
msgstr ""

#: src/expressions.md:56
msgid ""
"An expression _evaluates to_ a value, and has effects during _evaluation_."
msgstr ""

#: src/expressions.md:60
msgid ""
"Many expressions contain sub-expressions, called the _operands_ of the "
"expression."
msgstr ""

#: src/expressions.md:64
msgid "The meaning of each kind of expression dictates several things:"
msgstr ""

#: src/expressions.md:66
msgid "Whether or not to evaluate the operands when evaluating the expression"
msgstr ""

#: src/expressions.md:67
msgid "The order in which to evaluate the operands"
msgstr ""

#: src/expressions.md:68
msgid ""
"How to combine the operands' values to obtain the value of the expression"
msgstr ""

#: src/expressions.md:72
msgid ""
"In this way, the structure of expressions dictates the structure of "
"execution. Blocks are just another kind of expression, so blocks, "
"statements, expressions, and blocks again can recursively nest inside each "
"other to an arbitrary depth."
msgstr ""

#: src/expressions.md:75
msgid ""
"**Note**: We give names to the operands of expressions so that we may "
"discuss them, but these names are not stable and may be changed."
msgstr ""

#: src/expressions.md:79
msgid "Expression precedence"
msgstr ""

#: src/expressions.md:81
msgid ""
"The precedence of Rust operators and expressions is ordered as follows, "
"going from strong to weak. Binary Operators at the same precedence level are "
"grouped in the order given by their associativity."
msgstr ""

#: src/expressions.md:84
msgid "Operator/Expression"
msgstr ""

#: src/expressions.md:84
msgid "Associativity"
msgstr ""

#: src/expressions.md:87
msgid "Method calls"
msgstr ""

#: src/expressions.md:88
msgid "Field expressions"
msgstr ""

#: src/expressions.md:88 src/expressions.md:92 src/expressions.md:93
#: src/expressions.md:94 src/expressions.md:95 src/expressions.md:96
#: src/expressions.md:97 src/expressions.md:98 src/expressions.md:100
#: src/expressions.md:101
msgid "left to right"
msgstr ""

#: src/expressions.md:89
msgid "Function calls, array indexing"
msgstr ""

#: src/expressions.md:91
msgid "Unary `-` `*` `!` `&` `&mut`"
msgstr ""

#: src/expressions.md:92
msgid "`as`"
msgstr ""

#: src/expressions.md:93
msgid "`*` `/` `%`"
msgstr ""

#: src/expressions.md:94
msgid "`+` `-`"
msgstr ""

#: src/expressions.md:95
msgid "`<<` `>>`"
msgstr ""

#: src/expressions.md:99
msgid "`==` `!=` `<` `>` `<=` `>=`"
msgstr ""

#: src/expressions.md:99 src/expressions.md:102
msgid "Require parentheses"
msgstr ""

#: src/expressions.md:102
msgid "`..` `..=`"
msgstr ""

#: src/expressions.md:103
msgid ""
"`=` `+=` `-=` `*=` `/=` `%=` <br> `&=` <code>\\|=</code> `^=` `<<=` `>>=`"
msgstr ""

#: src/expressions.md:103
msgid "right to left"
msgstr ""

#: src/expressions.md:104
msgid "`return` `break` closures"
msgstr ""

#: src/expressions.md:108
msgid "Evaluation order of operands"
msgstr ""

#: src/expressions.md:112
msgid ""
"The following list of expressions all evaluate their operands the same way, "
"as described after the list. Other expressions either don't take operands or "
"evaluate them conditionally as described on their respective pages."
msgstr ""

#: src/expressions.md:115
msgid "Dereference expression"
msgstr ""

#: src/expressions.md:116
msgid "Error propagation expression"
msgstr ""

#: src/expressions.md:117
msgid "Negation expression"
msgstr ""

#: src/expressions.md:118
msgid "Arithmetic and logical binary operators"
msgstr ""

#: src/expressions.md:119
msgid "Comparison operators"
msgstr ""

#: src/expressions.md:120
msgid "Type cast expression"
msgstr ""

#: src/expressions.md:121
msgid "Grouped expression"
msgstr ""

#: src/expressions.md:122
msgid "Array expression"
msgstr ""

#: src/expressions.md:123
msgid "Await expression"
msgstr ""

#: src/expressions.md:124
msgid "Index expression"
msgstr ""

#: src/expressions.md:125
msgid "Tuple expression"
msgstr ""

#: src/expressions.md:126
msgid "Tuple index expression"
msgstr ""

#: src/expressions.md:127
msgid "Struct expression"
msgstr ""

#: src/expressions.md:128
msgid "Call expression"
msgstr ""

#: src/expressions.md:129
msgid "Method call expression"
msgstr ""

#: src/expressions.md:130
msgid "Field expression"
msgstr ""

#: src/expressions.md:131
msgid "Break expression"
msgstr ""

#: src/expressions.md:132
msgid "Range expression"
msgstr ""

#: src/expressions.md:133
msgid "Return expression"
msgstr ""

#: src/expressions.md:137
msgid ""
"The operands of these expressions are evaluated prior to applying the "
"effects of the expression. Expressions taking multiple operands are "
"evaluated left to right as written in the source code."
msgstr ""

#: src/expressions.md:140
msgid ""
"**Note**: Which subexpressions are the operands of an expression is "
"determined by expression precedence as per the previous section."
msgstr ""

#: src/expressions.md:143
msgid ""
"For example, the two `next` method calls will always be called in the same "
"order:"
msgstr ""

#: src/expressions.md:146
msgid "// Using vec instead of array to avoid references\n"
msgstr ""

#: src/expressions.md:147
msgid "// since there is no stable owned array iterator\n"
msgstr ""

#: src/expressions.md:148
msgid "// at the time this example was written.\n"
msgstr ""

#: src/expressions.md:156
msgid ""
"**Note**: Since this is applied recursively, these expressions are also "
"evaluated from innermost to outermost, ignoring siblings until there are no "
"inner subexpressions."
msgstr ""

#: src/expressions.md:160
msgid "Place Expressions and Value Expressions"
msgstr ""

#: src/expressions.md:164
msgid ""
"Expressions are divided into two main categories: place expressions and "
"value expressions; there is also a third, minor category of expressions "
"called assignee expressions. Within each expression, operands may likewise "
"occur in either place context or value context. The evaluation of an "
"expression depends both on its own category and the context it occurs within."
msgstr ""

#: src/expressions.md:171
msgid ""
"A _place expression_ is an expression that represents a memory location."
msgstr ""

#: src/expressions.md:175
msgid ""
"These expressions are [paths](expressions/path-expr.md) which refer to local "
"variables, [static variables](items/static-items.md), [dereferences]"
"(expressions/operator-expr.md#the-dereference-operator) (`*expr`), [array "
"indexing](expressions/array-expr.md#array-and-slice-indexing-expressions) "
"expressions (`expr[expr]`), [field](expressions/field-expr.md) references "
"(`expr.f`) and parenthesized place expressions."
msgstr ""

#: src/expressions.md:179
msgid "All other expressions are value expressions."
msgstr ""

#: src/expressions.md:183
msgid "A _value expression_ is an expression that represents an actual value."
msgstr ""

#: src/expressions.md:187
msgid "The following contexts are _place expression_ contexts:"
msgstr ""

#: src/expressions.md:189
msgid ""
"The left operand of a [compound assignment](expressions/operator-"
"expr.md#compound-assignment-expressions) expression."
msgstr ""

#: src/expressions.md:190
msgid ""
"The operand of a unary [borrow](expressions/operator-expr.md#borrow-"
"operators), [raw borrow](expressions/operator-expr.md#raw-borrow-operators) "
"or [dereference](expressions/operator-expr.md#the-dereference-operator) "
"operator."
msgstr ""

#: src/expressions.md:191
msgid "The operand of a field expression."
msgstr ""

#: src/expressions.md:192
msgid "The indexed operand of an array indexing expression."
msgstr ""

#: src/expressions.md:193
msgid "The operand of any [implicit borrow](#implicit-borrows)."
msgstr ""

#: src/expressions.md:194
msgid "The initializer of a [let statement](statements.md#let-statements)."
msgstr ""

#: src/expressions.md:195
msgid ""
"The [scrutinee](glossary.md#scrutinee) of an [`if let`](expressions/if-"
"expr.md#if-let-expressions), [`match`](expressions/match-expr.md), or "
"[`while let`](expressions/loop-expr.md#predicate-pattern-loops) expression."
msgstr ""

#: src/expressions.md:197
msgid ""
"The base of a [functional update](expressions/struct-expr.md#functional-"
"update-syntax) struct expression."
msgstr ""

#: src/expressions.md:199
msgid ""
"Note: Historically, place expressions were called _lvalues_ and value "
"expressions were called _rvalues_."
msgstr ""

#: src/expressions.md:203
msgid ""
"An _assignee expression_ is an expression that appears in the left operand "
"of an [assignment](expressions/operator-expr.md#assignment-expressions) "
"expression. Explicitly, the assignee expressions are:"
msgstr ""

#: src/expressions.md:206
msgid "Place expressions."
msgstr ""

#: src/expressions.md:207
msgid "[Underscores](expressions/underscore-expr.md)."
msgstr ""

#: src/expressions.md:208
msgid "[Tuples](expressions/tuple-expr.md) of assignee expressions."
msgstr ""

#: src/expressions.md:209
msgid "[Slices](expressions/array-expr.md) of assignee expressions."
msgstr ""

#: src/expressions.md:210
msgid "[Tuple structs](expressions/struct-expr.md) of assignee expressions."
msgstr ""

#: src/expressions.md:211
msgid ""
"[Structs](expressions/struct-expr.md) of assignee expressions (with "
"optionally named fields)."
msgstr ""

#: src/expressions.md:213
msgid "[Unit structs](expressions/struct-expr.md)."
msgstr ""

#: src/expressions.md:217
msgid "Arbitrary parenthesisation is permitted inside assignee expressions."
msgstr ""

#: src/expressions.md:221
msgid "Moved and copied types"
msgstr ""

#: src/expressions.md:225
msgid ""
"When a place expression is evaluated in a value expression context, or is "
"bound by value in a pattern, it denotes the value held _in_ that memory "
"location."
msgstr ""

#: src/expressions.md:229
msgid ""
"If the type of that value implements [`Copy`](special-types-and-"
"traits.md#copy), then the value will be copied."
msgstr ""

#: src/expressions.md:233
msgid ""
"In the remaining situations, if that type is [`Sized`](special-types-and-"
"traits.md#sized), then it may be possible to move the value."
msgstr ""

#: src/expressions.md:237
msgid "Only the following place expressions may be moved out of:"
msgstr ""

#: src/expressions.md:239
msgid "[Variables](variables.md) which are not currently borrowed."
msgstr ""

#: src/expressions.md:240 src/expressions.md:268
msgid "[Temporary values](#temporaries)."
msgstr ""

#: src/expressions.md:241
msgid ""
"[Fields](expressions/field-expr.md) of a place expression which can be moved "
"out of and don't implement [`Drop`](special-types-and-traits.md#drop)."
msgstr ""

#: src/expressions.md:242
msgid ""
"The result of [dereferencing](expressions/operator-expr.md#the-dereference-"
"operator) an expression with type [`Box<T>`](../alloc/boxed/struct.Box.html) "
"and that can also be moved out of."
msgstr ""

#: src/expressions.md:246
msgid ""
"After moving out of a place expression that evaluates to a local variable, "
"the location is deinitialized and cannot be read from again until it is "
"reinitialized."
msgstr ""

#: src/expressions.md:250
msgid ""
"In all other cases, trying to use a place expression in a value expression "
"context is an error."
msgstr ""

#: src/expressions.md:254
msgid "Mutability"
msgstr ""

#: src/expressions.md:258
msgid ""
"For a place expression to be [assigned](expressions/operator-"
"expr.md#assignment-expressions) to, mutably [borrowed](expressions/operator-"
"expr.md#borrow-operators), [implicitly mutably borrowed](#implicit-borrows), "
"or bound to a pattern containing `ref mut`, it must be _mutable_. We call "
"these _mutable place expressions_. In contrast, other place expressions are "
"called _immutable place expressions_."
msgstr ""

#: src/expressions.md:264
msgid "The following expressions can be mutable place expression contexts:"
msgstr ""

#: src/expressions.md:266
msgid "Mutable [variables](variables.md) which are not currently borrowed."
msgstr ""

#: src/expressions.md:267
msgid "[Mutable `static` items](items/static-items.md#mutable-statics)."
msgstr ""

#: src/expressions.md:269
msgid ""
"[Fields](expressions/field-expr.md): this evaluates the subexpression in a "
"mutable place expression context."
msgstr ""

#: src/expressions.md:270
msgid ""
"[Dereferences](expressions/operator-expr.md#the-dereference-operator) of a "
"`*mut T` pointer."
msgstr ""

#: src/expressions.md:271
msgid ""
"Dereference of a variable, or field of a variable, with type `&mut T`. Note: "
"This is an exception to the requirement of the next rule."
msgstr ""

#: src/expressions.md:273
msgid ""
"Dereferences of a type that implements `DerefMut`: this then requires that "
"the value being dereferenced is evaluated in a mutable place expression "
"context."
msgstr ""

#: src/expressions.md:275
msgid ""
"[Array indexing](expressions/array-expr.md#array-and-slice-indexing-"
"expressions) of a type that implements `IndexMut`: this then evaluates the "
"value being indexed, but not the index, in mutable place expression context."
msgstr ""

#: src/expressions.md:280
msgid "Temporaries"
msgstr ""

#: src/expressions.md:282
msgid ""
"When using a value expression in most place expression contexts, a temporary "
"unnamed memory location is created and initialized to that value. The "
"expression evaluates to that location instead, except if [promoted]"
"(destructors.md#constant-promotion) to a `static`. The [drop scope]"
"(destructors.md#drop-scopes) of the temporary is usually the end of the "
"enclosing statement."
msgstr ""

#: src/expressions.md:288
msgid "Implicit Borrows"
msgstr ""

#: src/expressions.md:292
msgid ""
"Certain expressions will treat an expression as a place expression by "
"implicitly borrowing it. For example, it is possible to compare two unsized "
"[slices](types/slice.md) for equality directly, because the `==` operator "
"implicitly borrows its operands:"
msgstr ""

#: src/expressions.md:303
msgid "// Equivalent form:\n"
msgstr ""

#: src/expressions.md:310
msgid "Implicit borrows may be taken in the following expressions:"
msgstr ""

#: src/expressions.md:312
msgid ""
"Left operand in [method-call](expressions/method-call-expr.md) expressions."
msgstr ""

#: src/expressions.md:313
msgid "Left operand in [field](expressions/field-expr.md) expressions."
msgstr ""

#: src/expressions.md:314
msgid "Left operand in [call expressions](expressions/call-expr.md)."
msgstr ""

#: src/expressions.md:315
msgid ""
"Left operand in [array indexing](expressions/array-expr.md#array-and-slice-"
"indexing-expressions) expressions."
msgstr ""

#: src/expressions.md:316
msgid ""
"Operand of the [dereference operator](expressions/operator-expr.md#the-"
"dereference-operator) (`*`)."
msgstr ""

#: src/expressions.md:317
msgid ""
"Operands of [comparison](expressions/operator-expr.md#comparison-operators)."
msgstr ""

#: src/expressions.md:318
msgid ""
"Left operands of the [compound assignment](expressions/operator-"
"expr.md#compound-assignment-expressions)."
msgstr ""

#: src/expressions.md:322
msgid "Overloading Traits"
msgstr ""

#: src/expressions.md:324
msgid ""
"Many of the following operators and expressions can also be overloaded for "
"other types using traits in `std::ops` or `std::cmp`. These traits also "
"exist in `core::ops` and `core::cmp` with the same names."
msgstr ""

#: src/expressions.md:329
msgid "Expression Attributes"
msgstr ""

#: src/expressions.md:333
msgid ""
"[Outer attributes](attributes.md) before an expression are allowed only in a "
"few specific cases:"
msgstr ""

#: src/expressions.md:335
msgid "Before an expression used as a [statement](statements.md)."
msgstr ""

#: src/expressions.md:336
msgid ""
"Elements of [array expressions](expressions/array-expr.md), [tuple "
"expressions](expressions/tuple-expr.md), [call expressions](expressions/call-"
"expr.md), and tuple-style [struct](expressions/struct-expr.md) expressions."
msgstr ""

#: src/expressions.md:337
msgid "The tail expression of [block expressions](expressions/block-expr.md)."
msgstr ""

#: src/expressions.md:342
msgid "They are never allowed before:"
msgstr ""

#: src/expressions.md:343
msgid "[Range](expressions/range-expr.md) expressions."
msgstr ""

#: src/expressions.md:344
msgid ""
"Binary operator expressions ([_ArithmeticOrLogicalExpression_](expressions/"
"operator-expr.md#arithmetic-and-logical-binary-operators), "
"[_ComparisonExpression_](expressions/operator-expr.md#comparison-operators), "
"[_LazyBooleanExpression_](expressions/operator-expr.md#lazy-boolean-"
"operators), [_TypeCastExpression_](expressions/operator-expr.md#type-cast-"
"expressions), [_AssignmentExpression_](expressions/operator-"
"expr.md#assignment-expressions), [_CompoundAssignmentExpression_]"
"(expressions/operator-expr.md#compound-assignment-expressions))."
msgstr ""

#: src/expressions/literal-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_LiteralExpression_ :  \n"
"      [CHAR_LITERAL](../tokens.md#character-literals)  \n"
"   | [STRING_LITERAL](../tokens.md#string-literals)  \n"
"   | [RAW_STRING_LITERAL](../tokens.md#raw-string-literals)  \n"
"   | [BYTE_LITERAL](../tokens.md#byte-literals)  \n"
"   | [BYTE_STRING_LITERAL](../tokens.md#byte-string-literals)  \n"
"   | [RAW_BYTE_STRING_LITERAL](../tokens.md#raw-byte-string-literals)  \n"
"   | [C_STRING_LITERAL](../tokens.md#c-string-literals)  \n"
"   | [RAW_C_STRING_LITERAL](../tokens.md#raw-c-string-literals)  \n"
"   | [INTEGER_LITERAL](../tokens.md#integer-literals)  \n"
"   | [FLOAT_LITERAL](../tokens.md#floating-point-literals)  \n"
"   | `true` | `false`"
msgstr ""

#: src/expressions/literal-expr.md:23
msgid ""
"A _literal expression_ is an expression consisting of a single token, rather "
"than a sequence of tokens, that immediately and directly denotes the value "
"it evaluates to, rather than referring to it by name or some other "
"evaluation rule."
msgstr ""

#: src/expressions/literal-expr.md:27
msgid ""
"A literal is a form of [constant expression](../const_eval.md#constant-"
"expressions), so is evaluated (primarily) at compile time."
msgstr ""

#: src/expressions/literal-expr.md:31
msgid ""
"Each of the lexical [literal](../tokens.md#literals) forms described earlier "
"can make up a literal expression, as can the keywords `true` and `false`."
msgstr ""

#: src/expressions/literal-expr.md:34 src/expressions/loop-expr.md:94
#: src/types/closure.md:208
msgid "\"hello\""
msgstr ""

#: src/expressions/literal-expr.md:34
msgid ""
"// string type\n"
"'5'"
msgstr ""

#: src/expressions/literal-expr.md:35
msgid "// character type\n"
msgstr ""

#: src/expressions/literal-expr.md:36
msgid "// integer type\n"
msgstr ""

#: src/expressions/literal-expr.md:41
msgid ""
"In the descriptions below, the _string representation_ of a token is the "
"sequence of characters from the input which matched the token's production "
"in a _Lexer_ grammar snippet."
msgstr ""

#: src/expressions/literal-expr.md:43
msgid ""
"**Note**: this string representation never includes a character `U+000D` "
"(CR) immediately followed by `U+000A` (LF): this pair would have been "
"previously transformed into a single `U+000A` (LF)."
msgstr ""

#: src/expressions/literal-expr.md:51
msgid ""
"The descriptions of textual literal expressions below make use of several "
"forms of _escape_."
msgstr ""

#: src/expressions/literal-expr.md:55
msgid "Each form of escape is characterised by:"
msgstr ""

#: src/expressions/literal-expr.md:56
msgid ""
"an _escape sequence_: a sequence of characters, which always begins with "
"`U+005C` (`\\`)"
msgstr ""

#: src/expressions/literal-expr.md:57
msgid ""
"an _escaped value_: either a single character or an empty sequence of "
"characters"
msgstr ""

#: src/expressions/literal-expr.md:59
msgid "In the definitions of escapes below:"
msgstr ""

#: src/expressions/literal-expr.md:60
msgid "An _octal digit_ is any of the characters in the range \\[`0`\\-`7`\\]."
msgstr ""

#: src/expressions/literal-expr.md:61
msgid ""
"A _hexadecimal digit_ is any of the characters in the ranges \\[`0`\\-"
"`9`\\], \\[`a`\\-`f`\\], or \\[`A`\\-`F`\\]."
msgstr ""

#: src/expressions/literal-expr.md:65
msgid "Simple escapes"
msgstr ""

#: src/expressions/literal-expr.md:67
msgid ""
"Each sequence of characters occurring in the first column of the following "
"table is an escape sequence."
msgstr ""

#: src/expressions/literal-expr.md:69
msgid ""
"In each case, the escaped value is the character given in the corresponding "
"entry in the second column."
msgstr ""

#: src/expressions/literal-expr.md:71
msgid "Escape sequence"
msgstr ""

#: src/expressions/literal-expr.md:71
msgid "Escaped value"
msgstr ""

#: src/expressions/literal-expr.md:73
msgid "U+0000 (NUL)"
msgstr ""

#: src/expressions/literal-expr.md:74
msgid "U+0009 (HT)"
msgstr ""

#: src/expressions/literal-expr.md:75
msgid "U+000A (LF)"
msgstr ""

#: src/expressions/literal-expr.md:76
msgid "U+000D (CR)"
msgstr ""

#: src/expressions/literal-expr.md:77
msgid "U+0022 (QUOTATION MARK)"
msgstr ""

#: src/expressions/literal-expr.md:78
msgid "U+0027 (APOSTROPHE)"
msgstr ""

#: src/expressions/literal-expr.md:79
msgid "U+005C (REVERSE SOLIDUS)"
msgstr ""

#: src/expressions/literal-expr.md:83
msgid "8-bit escapes"
msgstr ""

#: src/expressions/literal-expr.md:85
msgid ""
"The escape sequence consists of `\\x` followed by two hexadecimal digits."
msgstr ""

#: src/expressions/literal-expr.md:87 src/expressions/literal-expr.md:97
msgid ""
"The escaped value is the character whose [Unicode scalar value](http://"
"www.unicode.org/glossary/#unicode_scalar_value) is the result of "
"interpreting the final two characters in the escape sequence as a "
"hexadecimal integer, as if by [`u8::from_str_radix`](../../std/"
"primitive.u8.html#method.from_str_radix) with radix 16."
msgstr ""

#: src/expressions/literal-expr.md:89
msgid ""
"**Note**: the escaped value therefore has a [Unicode scalar value](http://"
"www.unicode.org/glossary/#unicode_scalar_value) in the range of [`u8`](../"
"types/numeric.md)."
msgstr ""

#: src/expressions/literal-expr.md:93
msgid "7-bit escapes"
msgstr ""

#: src/expressions/literal-expr.md:95
msgid ""
"The escape sequence consists of `\\x` followed by an octal digit then a "
"hexadecimal digit."
msgstr ""

#: src/expressions/literal-expr.md:103
msgid ""
"The escape sequence consists of `\\u{`, followed by a sequence of characters "
"each of which is a hexadecimal digit or `_`, followed by `}`."
msgstr ""

#: src/expressions/literal-expr.md:105
msgid ""
"The escaped value is the character whose [Unicode scalar value](http://"
"www.unicode.org/glossary/#unicode_scalar_value) is the result of "
"interpreting the hexadecimal digits contained in the escape sequence as a "
"hexadecimal integer, as if by [`u32::from_str_radix`](../../std/"
"primitive.u32.html#method.from_str_radix) with radix 16."
msgstr ""

#: src/expressions/literal-expr.md:107
msgid ""
"**Note**: the permitted forms of a [CHAR_LITERAL](../tokens.md#character-"
"literals) or [STRING_LITERAL](../tokens.md#string-literals) token ensure "
"that there is such a character."
msgstr ""

#: src/expressions/literal-expr.md:111
msgid "String continuation escapes"
msgstr ""

#: src/expressions/literal-expr.md:113
msgid ""
"The escape sequence consists of `\\` followed immediately by `U+000A` (LF), "
"and all following whitespace characters before the next non-whitespace "
"character. For this purpose, the whitespace characters are `U+0009` (HT), "
"`U+000A` (LF), `U+000D` (CR), and `U+0020` (SPACE)."
msgstr ""

#: src/expressions/literal-expr.md:116
msgid "The escaped value is an empty sequence of characters."
msgstr ""

#: src/expressions/literal-expr.md:118
msgid ""
"**Note**: The effect of this form of escape is that a string continuation "
"skips following whitespace, including additional newlines. Thus `a`, `b` and "
"`c` are equal:"
msgstr ""

#: src/expressions/literal-expr.md:121
msgid "\"foobar\""
msgstr ""

#: src/expressions/literal-expr.md:122 src/expressions/literal-expr.md:124
msgid "\"foo\\\n"
msgstr ""

#: src/expressions/literal-expr.md:132
msgid ""
"Skipping additional newlines (as in example c) is potentially confusing and "
"unexpected. This behavior may be adjusted in the future. Until a decision is "
"made, it is recommended to avoid relying on skipping multiple newlines with "
"line continuations. See [this issue](https://github.com/rust-lang/reference/"
"pull/1042) for more information."
msgstr ""

#: src/expressions/literal-expr.md:139
msgid "Character literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:143
msgid ""
"A character literal expression consists of a single [CHAR_LITERAL](../"
"tokens.md#character-literals) token."
msgstr ""

#: src/expressions/literal-expr.md:147
msgid ""
"The expression's type is the primitive [`char`](../types/textual.md) type."
msgstr ""

#: src/expressions/literal-expr.md:151 src/expressions/literal-expr.md:202
#: src/expressions/literal-expr.md:258 src/expressions/literal-expr.md:308
#: src/expressions/literal-expr.md:366
msgid "The token must not have a suffix."
msgstr ""

#: src/expressions/literal-expr.md:155 src/expressions/literal-expr.md:262
msgid ""
"The token's _literal content_ is the sequence of characters following the "
"first `U+0027` (`'`) and preceding the last `U+0027` (`'`) in the string "
"representation of the token."
msgstr ""

#: src/expressions/literal-expr.md:159 src/expressions/literal-expr.md:266
msgid ""
"The literal expression's _represented character_ is derived from the literal "
"content as follows:"
msgstr ""

#: src/expressions/literal-expr.md:163 src/expressions/literal-expr.md:270
msgid ""
"If the literal content is one of the following forms of escape sequence, the "
"represented character is the escape sequence's escaped value:"
msgstr ""

#: src/expressions/literal-expr.md:164 src/expressions/literal-expr.md:215
#: src/expressions/literal-expr.md:271 src/expressions/literal-expr.md:321
msgid "[Simple escapes](#simple-escapes)"
msgstr ""

#: src/expressions/literal-expr.md:165 src/expressions/literal-expr.md:216
msgid "[7-bit escapes](#7-bit-escapes)"
msgstr ""

#: src/expressions/literal-expr.md:166 src/expressions/literal-expr.md:217
msgid "[Unicode escapes](#unicode-escapes)"
msgstr ""

#: src/expressions/literal-expr.md:170 src/expressions/literal-expr.md:276
msgid ""
"Otherwise the represented character is the single character that makes up "
"the literal content."
msgstr ""

#: src/expressions/literal-expr.md:174
msgid ""
"The expression's value is the [`char`](../types/textual.md) corresponding to "
"the represented character's [Unicode scalar value](http://www.unicode.org/"
"glossary/#unicode_scalar_value)."
msgstr ""

#: src/expressions/literal-expr.md:176
msgid ""
"**Note**: the permitted forms of a [CHAR_LITERAL](../tokens.md#character-"
"literals) token ensure that these rules always produce a single character."
msgstr ""

#: src/expressions/literal-expr.md:178
msgid "Examples of character literal expressions:"
msgstr ""

#: src/expressions/literal-expr.md:181
msgid "'R'"
msgstr ""

#: src/expressions/literal-expr.md:181
msgid ""
"// R\n"
"'\\''"
msgstr ""

#: src/expressions/literal-expr.md:182
msgid ""
"// '\n"
"'\\x52'"
msgstr ""

#: src/expressions/literal-expr.md:183
msgid ""
"// R\n"
"'\\u{00E6}'"
msgstr ""

#: src/expressions/literal-expr.md:189
msgid "String literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:193
msgid ""
"A string literal expression consists of a single [STRING_LITERAL](../"
"tokens.md#string-literals) or [RAW_STRING_LITERAL](../tokens.md#raw-string-"
"literals) token."
msgstr ""

#: src/expressions/literal-expr.md:197
msgid ""
"The expression's type is a shared reference (with `static` lifetime) to the "
"primitive [`str`](../types/textual.md) type. That is, the type is `&'static "
"str`."
msgstr ""

#: src/expressions/literal-expr.md:206 src/expressions/literal-expr.md:312
msgid ""
"The token's _literal content_ is the sequence of characters following the "
"first `U+0022` (`\"`) and preceding the last `U+0022` (`\"`) in the string "
"representation of the token."
msgstr ""

#: src/expressions/literal-expr.md:210 src/expressions/literal-expr.md:316
msgid ""
"The literal expression's _represented string_ is a sequence of characters "
"derived from the literal content as follows:"
msgstr ""

#: src/expressions/literal-expr.md:214
msgid ""
"If the token is a [STRING_LITERAL](../tokens.md#string-literals), each "
"escape sequence of any of the following forms occurring in the literal "
"content is replaced by the escape sequence's escaped value."
msgstr ""

#: src/expressions/literal-expr.md:218 src/expressions/literal-expr.md:323
msgid "[String continuation escapes](#string-continuation-escapes)"
msgstr ""

#: src/expressions/literal-expr.md:220
msgid ""
"These replacements take place in left-to-right order. For example, the token "
"`\"\\\\x41\"` is converted to the characters `\\` `x` `4` `1`."
msgstr ""

#: src/expressions/literal-expr.md:225
msgid ""
"If the token is a [RAW_STRING_LITERAL](../tokens.md#raw-string-literals), "
"the represented string is identical to the literal content."
msgstr ""

#: src/expressions/literal-expr.md:229
msgid ""
"The expression's value is a reference to a statically allocated [`str`](../"
"types/textual.md) containing the UTF-8 encoding of the represented string."
msgstr ""

#: src/expressions/literal-expr.md:231
msgid "Examples of string literal expressions:"
msgstr ""

#: src/expressions/literal-expr.md:246
msgid "Byte literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:250
msgid ""
"A byte literal expression consists of a single [BYTE_LITERAL](../"
"tokens.md#byte-literals) token."
msgstr ""

#: src/expressions/literal-expr.md:254
msgid ""
"The expression's type is the primitive [`u8`](../types/numeric.md) type."
msgstr ""

#: src/expressions/literal-expr.md:272 src/expressions/literal-expr.md:322
msgid "[8-bit escapes](#8-bit-escapes)"
msgstr ""

#: src/expressions/literal-expr.md:280
msgid ""
"The expression's value is the represented character's [Unicode scalar value]"
"(http://www.unicode.org/glossary/#unicode_scalar_value)."
msgstr ""

#: src/expressions/literal-expr.md:282
msgid ""
"**Note**: the permitted forms of a [BYTE_LITERAL](../tokens.md#byte-"
"literals) token ensure that these rules always produce a single character, "
"whose Unicode scalar value is in the range of [`u8`](../types/numeric.md)."
msgstr ""

#: src/expressions/literal-expr.md:284
msgid "Examples of byte literal expressions:"
msgstr ""

#: src/expressions/literal-expr.md:287
msgid "b'R'"
msgstr ""

#: src/expressions/literal-expr.md:287
msgid ""
"// 82\n"
"b'\\''"
msgstr ""

#: src/expressions/literal-expr.md:288
msgid ""
"// 39\n"
"b'\\x52'"
msgstr ""

#: src/expressions/literal-expr.md:289
msgid ""
"// 82\n"
"b'\\xA0'"
msgstr ""

#: src/expressions/literal-expr.md:290
msgid "// 160\n"
msgstr ""

#: src/expressions/literal-expr.md:295
msgid "Byte string literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:299
msgid ""
"A byte string literal expression consists of a single [BYTE_STRING_LITERAL]"
"(../tokens.md#byte-string-literals) or [RAW_BYTE_STRING_LITERAL](../"
"tokens.md#raw-byte-string-literals) token."
msgstr ""

#: src/expressions/literal-expr.md:303
msgid ""
"The expression's type is a shared reference (with `static` lifetime) to an "
"array whose element type is [`u8`](../types/numeric.md). That is, the type "
"is `&'static [u8; N]`, where `N` is the number of bytes in the represented "
"string described below."
msgstr ""

#: src/expressions/literal-expr.md:320
msgid ""
"If the token is a [BYTE_STRING_LITERAL](../tokens.md#byte-string-literals), "
"each escape sequence of any of the following forms occurring in the literal "
"content is replaced by the escape sequence's escaped value."
msgstr ""

#: src/expressions/literal-expr.md:325
msgid ""
"These replacements take place in left-to-right order. For example, the token "
"`b\"\\\\x41\"` is converted to the characters `\\` `x` `4` `1`."
msgstr ""

#: src/expressions/literal-expr.md:330
msgid ""
"If the token is a [RAW_BYTE_STRING_LITERAL](../tokens.md#raw-byte-string-"
"literals), the represented string is identical to the literal content."
msgstr ""

#: src/expressions/literal-expr.md:334
msgid ""
"The expression's value is a reference to a statically allocated array "
"containing the [Unicode scalar values](http://www.unicode.org/glossary/"
"#unicode_scalar_value) of the characters in the represented string, in the "
"same order."
msgstr ""

#: src/expressions/literal-expr.md:336
msgid ""
"**Note**: the permitted forms of [BYTE_STRING_LITERAL](../tokens.md#byte-"
"string-literals) and [RAW_BYTE_STRING_LITERAL](../tokens.md#raw-byte-string-"
"literals) tokens ensure that these rules always produce array element values "
"in the range of [`u8`](../types/numeric.md)."
msgstr ""

#: src/expressions/literal-expr.md:338
msgid "Examples of byte string literal expressions:"
msgstr ""

#: src/expressions/literal-expr.md:353
msgid "C string literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:357
msgid ""
"A C string literal expression consists of a single [C_STRING_LITERAL](../"
"tokens.md#c-string-literals) or [RAW_C_STRING_LITERAL](../tokens.md#raw-c-"
"string-literals) token."
msgstr ""

#: src/expressions/literal-expr.md:361
msgid ""
"The expression's type is a shared reference (with `static` lifetime) to the "
"standard library [CStr](../../core/ffi/c_str/struct.CStr.html) type. That "
"is, the type is `&'static core::ffi::CStr`."
msgstr ""

#: src/expressions/literal-expr.md:370
msgid ""
"The token's _literal content_ is the sequence of characters following the "
"first `\"` and preceding the last `\"` in the string representation of the "
"token."
msgstr ""

#: src/expressions/literal-expr.md:374
msgid ""
"The literal expression's _represented bytes_ are a sequence of bytes derived "
"from the literal content as follows:"
msgstr ""

#: src/expressions/literal-expr.md:378
msgid ""
"If the token is a [C_STRING_LITERAL](../tokens.md#c-string-literals), the "
"literal content is treated as a sequence of items, each of which is either a "
"single Unicode character other than `\\` or an [escape](#escapes). The "
"sequence of items is converted to a sequence of bytes as follows:"
msgstr ""

#: src/expressions/literal-expr.md:380
msgid "Each single Unicode character contributes its UTF-8 representation."
msgstr ""

#: src/expressions/literal-expr.md:381
msgid ""
"Each [simple escape](#simple-escapes) contributes the [Unicode scalar value]"
"(http://www.unicode.org/glossary/#unicode_scalar_value) of its escaped value."
msgstr ""

#: src/expressions/literal-expr.md:382
msgid ""
"Each [8-bit escape](#8-bit-escapes) contributes a single byte containing the "
"[Unicode scalar value](http://www.unicode.org/glossary/"
"#unicode_scalar_value) of its escaped value."
msgstr ""

#: src/expressions/literal-expr.md:383
msgid ""
"Each [unicode escape](#unicode-escapes) contributes the UTF-8 representation "
"of its escaped value."
msgstr ""

#: src/expressions/literal-expr.md:384
msgid ""
"Each [string continuation escape](#string-continuation-escapes) contributes "
"no bytes."
msgstr ""

#: src/expressions/literal-expr.md:388
msgid ""
"If the token is a [RAW_C_STRING_LITERAL](../tokens.md#raw-c-string-"
"literals), the represented bytes are the UTF-8 encoding of the literal "
"content."
msgstr ""

#: src/expressions/literal-expr.md:390
msgid ""
"**Note**: the permitted forms of [C_STRING_LITERAL](../tokens.md#c-string-"
"literals) and [RAW_C_STRING_LITERAL](../tokens.md#raw-c-string-literals) "
"tokens ensure that the represented bytes never include a null byte."
msgstr ""

#: src/expressions/literal-expr.md:394
msgid ""
"The expression's value is a reference to a statically allocated [CStr](../../"
"core/ffi/c_str/struct.CStr.html) whose array of bytes contains the "
"represented bytes followed by a null byte."
msgstr ""

#: src/expressions/literal-expr.md:396
msgid "Examples of C string literal expressions:"
msgstr ""

#: src/expressions/literal-expr.md:412
msgid "\"\\xE6\""
msgstr ""

#: src/expressions/literal-expr.md:412
msgid "// [230]\n"
msgstr ""

#: src/expressions/literal-expr.md:413
msgid "// [195, 166]\n"
msgstr ""

#: src/expressions/literal-expr.md:418
msgid "Integer literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:422
msgid ""
"An integer literal expression consists of a single [INTEGER_LITERAL](../"
"tokens.md#integer-literals) token."
msgstr ""

#: src/expressions/literal-expr.md:426
msgid ""
"If the token has a [suffix](../tokens.md#suffixes), the suffix must be the "
"name of one of the [primitive integer types](../types/numeric.md): `u8`, "
"`i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`, `u128`, `i128`, `usize`, or "
"`isize`, and the expression has that type."
msgstr ""

#: src/expressions/literal-expr.md:430 src/expressions/literal-expr.md:521
msgid ""
"If the token has no suffix, the expression's type is determined by type "
"inference:"
msgstr ""

#: src/expressions/literal-expr.md:434
msgid ""
"If an integer type can be _uniquely_ determined from the surrounding program "
"context, the expression has that type."
msgstr ""

#: src/expressions/literal-expr.md:438
msgid ""
"If the program context under-constrains the type, it defaults to the signed "
"32-bit integer `i32`."
msgstr ""

#: src/expressions/literal-expr.md:442 src/expressions/literal-expr.md:533
msgid ""
"If the program context over-constrains the type, it is considered a static "
"type error."
msgstr ""

#: src/expressions/literal-expr.md:444
msgid "Examples of integer literal expressions:"
msgstr ""

#: src/expressions/literal-expr.md:447 src/expressions/literal-expr.md:448
#: src/expressions/literal-expr.md:453 src/expressions/literal-expr.md:456
#: src/expressions/literal-expr.md:459
msgid "// type i32\n"
msgstr ""

#: src/expressions/literal-expr.md:449 src/expressions/literal-expr.md:450
msgid "// type u32\n"
msgstr ""

#: src/expressions/literal-expr.md:451
msgid "// type u64\n"
msgstr ""

#: src/expressions/literal-expr.md:454
msgid "// type u8\n"
msgstr ""

#: src/expressions/literal-expr.md:457
msgid "// type i16\n"
msgstr ""

#: src/expressions/literal-expr.md:460
msgid "// type i64\n"
msgstr ""

#: src/expressions/literal-expr.md:462
msgid "// type usize\n"
msgstr ""

#: src/expressions/literal-expr.md:467 src/expressions/literal-expr.md:548
msgid ""
"The value of the expression is determined from the string representation of "
"the token as follows:"
msgstr ""

#: src/expressions/literal-expr.md:471
msgid ""
"An integer radix is chosen by inspecting the first two characters of the "
"string, as follows:"
msgstr ""

#: src/expressions/literal-expr.md:473
msgid "`0b` indicates radix 2"
msgstr ""

#: src/expressions/literal-expr.md:474
msgid "`0o` indicates radix 8"
msgstr ""

#: src/expressions/literal-expr.md:475
msgid "`0x` indicates radix 16"
msgstr ""

#: src/expressions/literal-expr.md:476
msgid "otherwise the radix is 10."
msgstr ""

#: src/expressions/literal-expr.md:480
msgid ""
"If the radix is not 10, the first two characters are removed from the string."
msgstr ""

#: src/expressions/literal-expr.md:484 src/expressions/literal-expr.md:552
msgid "Any suffix is removed from the string."
msgstr ""

#: src/expressions/literal-expr.md:488 src/expressions/literal-expr.md:556
msgid "Any underscores are removed from the string."
msgstr ""

#: src/expressions/literal-expr.md:492
msgid ""
"The string is converted to a `u128` value as if by [`u128::from_str_radix`]"
"(../../std/primitive.u128.html#method.from_str_radix) with the chosen radix. "
"If the value does not fit in `u128`, it is a compiler error."
msgstr ""

#: src/expressions/literal-expr.md:497
msgid ""
"The `u128` value is converted to the expression's type via a [numeric cast]"
"(operator-expr.md#numeric-cast)."
msgstr ""

#: src/expressions/literal-expr.md:499
msgid ""
"**Note**: The final cast will truncate the value of the literal if it does "
"not fit in the expression's type. `rustc` includes a [lint check](../"
"attributes/diagnostics.md#lint-check-attributes) named "
"`overflowing_literals`, defaulting to `deny`, which rejects expressions "
"where this occurs."
msgstr ""

#: src/expressions/literal-expr.md:502
msgid ""
"**Note**: `-1i8`, for example, is an application of the [negation operator]"
"(operator-expr.md#negation-operators) to the literal expression `1i8`, not a "
"single integer literal expression. See [Overflow](operator-expr.md#overflow) "
"for notes on representing the most negative value for a signed type."
msgstr ""

#: src/expressions/literal-expr.md:507
msgid "Floating-point literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:511
msgid "A floating-point literal expression has one of two forms:"
msgstr ""

#: src/expressions/literal-expr.md:512
msgid "a single [FLOAT_LITERAL](../tokens.md#floating-point-literals) token"
msgstr ""

#: src/expressions/literal-expr.md:513
msgid ""
"a single [INTEGER_LITERAL](../tokens.md#integer-literals) token which has a "
"suffix and no radix indicator"
msgstr ""

#: src/expressions/literal-expr.md:517
msgid ""
"If the token has a [suffix](../tokens.md#suffixes), the suffix must be the "
"name of one of the [primitive floating-point types](../types/"
"numeric.md#floating-point-types): `f32` or `f64`, and the expression has "
"that type."
msgstr ""

#: src/expressions/literal-expr.md:525
msgid ""
"If a floating-point type can be _uniquely_ determined from the surrounding "
"program context, the expression has that type."
msgstr ""

#: src/expressions/literal-expr.md:529
msgid "If the program context under-constrains the type, it defaults to `f64`."
msgstr ""

#: src/expressions/literal-expr.md:535
msgid "Examples of floating-point literal expressions:"
msgstr ""

#: src/expressions/literal-expr.md:538 src/expressions/literal-expr.md:539
#: src/expressions/literal-expr.md:541 src/expressions/literal-expr.md:543
msgid "// type f64\n"
msgstr ""

#: src/expressions/literal-expr.md:540 src/expressions/literal-expr.md:542
msgid "// type f32\n"
msgstr ""

#: src/expressions/literal-expr.md:560
msgid ""
"The string is converted to the expression's type as if by [`f32::from_str`]"
"(../../core/primitive.f32.md#method.from_str) or [`f64::from_str`](../../"
"core/primitive.f64.md#method.from_str)."
msgstr ""

#: src/expressions/literal-expr.md:562
msgid ""
"**Note**: `-1.0`, for example, is an application of the [negation operator]"
"(operator-expr.md#negation-operators) to the literal expression `1.0`, not a "
"single floating-point literal expression."
msgstr ""

#: src/expressions/literal-expr.md:564
msgid ""
"**Note**: `inf` and `NaN` are not literal tokens. The [`f32::INFINITY`]"
"(../../std/primitive.f32.html#associatedconstant.INFINITY), [`f64::INFINITY`]"
"(../../std/primitive.f64.html#associatedconstant.INFINITY), [`f32::NAN`]"
"(../../std/primitive.f32.html#associatedconstant.NAN), and [`f64::NAN`]"
"(../../std/primitive.f64.html#associatedconstant.NAN) constants can be used "
"instead of literal expressions. In `rustc`, a literal large enough to be "
"evaluated as infinite will trigger the `overflowing_literals` lint check."
msgstr ""

#: src/expressions/literal-expr.md:570
msgid "Boolean literal expressions"
msgstr ""

#: src/expressions/literal-expr.md:574
msgid ""
"A boolean literal expression consists of one of the keywords `true` or "
"`false`."
msgstr ""

#: src/expressions/literal-expr.md:578
msgid ""
"The expression's type is the primitive [boolean type](../types/boolean.md), "
"and its value is:"
msgstr ""

#: src/expressions/literal-expr.md:579
msgid "true if the keyword is `true`"
msgstr ""

#: src/expressions/literal-expr.md:580
msgid "false if the keyword is `false`"
msgstr ""

#: src/expressions/path-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_PathExpression_ :  \n"
"      [_PathInExpression_](../paths.md#paths-in-expressions)  \n"
"   | [_QualifiedPathInExpression_](../paths.md#qualified-paths)"
msgstr ""

#: src/expressions/path-expr.md:14
msgid ""
"A [path](../paths.md) used as an expression context denotes either a local "
"variable or an item."
msgstr ""

#: src/expressions/path-expr.md:18
msgid ""
"Path expressions that resolve to local or static variables are [place "
"expressions](../expressions.md#place-expressions-and-value-expressions), "
"other paths are [value expressions](../expressions.md#place-expressions-and-"
"value-expressions)."
msgstr ""

#: src/expressions/path-expr.md:22
msgid ""
"Using a [`static mut`](../items/static-items.md#mutable-statics) variable "
"requires an [`unsafe` block](block-expr.md#unsafe-blocks)."
msgstr ""

#: src/expressions/path-expr.md:40
msgid ""
"Evaluation of associated constants is handled the same way as [`const` "
"blocks](block-expr.md#const-blocks)."
msgstr ""

#: src/expressions/block-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_BlockExpression_ :  \n"
"   `{`  \n"
"      [_InnerAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"      _Statements_<sup>?</sup>  \n"
"   `}`"
msgstr ""

#: src/expressions/block-expr.md:14
msgid ""
"_Statements_ :  \n"
"      [_Statement_](../statements.md)<sup>+</sup>  \n"
"   | [_Statement_](../statements.md)<sup>+</sup> [_ExpressionWithoutBlock_]"
"(../expressions.md)  \n"
"   | [_ExpressionWithoutBlock_](../expressions.md)"
msgstr ""

#: src/expressions/block-expr.md:21
msgid ""
"A _block expression_, or _block_, is a control flow expression and anonymous "
"namespace scope for items and variable declarations."
msgstr ""

#: src/expressions/block-expr.md:25
msgid ""
"As a control flow expression, a block sequentially executes its component "
"non-item declaration statements and then its final optional expression."
msgstr ""

#: src/expressions/block-expr.md:29
msgid ""
"As an anonymous namespace scope, item declarations are only in scope inside "
"the block itself and variables declared by `let` statements are in scope "
"from the next statement until the end of the block. See the [scopes](../"
"names/scopes.md) chapter for more details."
msgstr ""

#: src/expressions/block-expr.md:34
msgid ""
"The syntax for a block is `{`, then any [inner attributes](../"
"attributes.md), then any number of [statements](../statements.md), then an "
"optional expression, called the final operand, and finally a `}`."
msgstr ""

#: src/expressions/block-expr.md:38
msgid ""
"Statements are usually required to be followed by a semicolon, with two "
"exceptions:"
msgstr ""

#: src/expressions/block-expr.md:40
msgid "Item declaration statements do not need to be followed by a semicolon."
msgstr ""

#: src/expressions/block-expr.md:41
msgid ""
"Expression statements usually require a following semicolon except if its "
"outer expression is a flow control expression."
msgstr ""

#: src/expressions/block-expr.md:45
msgid ""
"Furthermore, extra semicolons between statements are allowed, but these "
"semicolons do not affect semantics."
msgstr ""

#: src/expressions/block-expr.md:49
msgid ""
"When evaluating a block expression, each statement, except for item "
"declaration statements, is executed sequentially."
msgstr ""

#: src/expressions/block-expr.md:53
msgid "Then the final operand is executed, if given."
msgstr ""

#: src/expressions/block-expr.md:57
msgid ""
"The type of a block is the type of the final operand, or `()` if the final "
"operand is omitted."
msgstr ""

#: src/expressions/block-expr.md:73
msgid ""
"Note: As a control flow expression, if a block expression is the outer "
"expression of an expression statement, the expected type is `()` unless it "
"is followed immediately by a semicolon."
msgstr ""

#: src/expressions/block-expr.md:77
msgid ""
"Blocks are always [value expressions](../expressions.md#place-expressions-"
"and-value-expressions) and evaluate the last operand in value expression "
"context."
msgstr ""

#: src/expressions/block-expr.md:79
msgid ""
"**Note**: This can be used to force moving a value if really needed. For "
"example, the following example fails on the call to `consume_self` because "
"the struct was moved out of `s` in the block expression."
msgstr ""

#: src/expressions/block-expr.md:93
msgid "// Move the value out of `s` in the block expression.\n"
msgstr ""

#: src/expressions/block-expr.md:96
msgid "// Fails to execute because `s` is moved out of.\n"
msgstr ""

#: src/expressions/block-expr.md:103
msgid "`async` blocks"
msgstr ""

#: src/expressions/block-expr.md:107
msgid ""
"**<sup>Syntax</sup>**  \n"
"_AsyncBlockExpression_ :  \n"
"   `async` `move`<sup>?</sup> _BlockExpression_"
msgstr ""

#: src/expressions/block-expr.md:113
msgid ""
"An _async block_ is a variant of a block expression which evaluates to a "
"future."
msgstr ""

#: src/expressions/block-expr.md:117
msgid ""
"The final expression of the block, if present, determines the result value "
"of the future."
msgstr ""

#: src/expressions/block-expr.md:121
msgid ""
"Executing an async block is similar to executing a closure expression: its "
"immediate effect is to produce and return an anonymous type."
msgstr ""

#: src/expressions/block-expr.md:126
msgid ""
"Whereas closures return a type that implements one or more of the "
"[`std::ops::Fn`](../../core/ops/function/trait.Fn.html) traits, however, the "
"type returned for an async block implements the [`std::future::Future`]"
"(../../core/future/future/trait.Future.html) trait."
msgstr ""

#: src/expressions/block-expr.md:130
msgid "The actual data format for this type is unspecified."
msgstr ""

#: src/expressions/block-expr.md:132
msgid ""
"**Note:** The future type that rustc generates is roughly equivalent to an "
"enum with one variant per `await` point, where each variant stores the data "
"needed to resume from its corresponding point."
msgstr ""

#: src/expressions/block-expr.md:134
msgid ""
"**Edition differences**: Async blocks are only available beginning with Rust "
"2018."
msgstr ""

#: src/expressions/block-expr.md:138 src/types/closure.md:66
msgid "Capture modes"
msgstr ""

#: src/expressions/block-expr.md:140
msgid ""
"Async blocks capture variables from their environment using the same "
"[capture modes](../types/closure.md#capture-modes) as closures. Like "
"closures, when written `async { .. }` the capture mode for each variable "
"will be inferred from the content of the block. `async move { .. }` blocks "
"however will move all referenced variables into the resulting future."
msgstr ""

#: src/expressions/block-expr.md:146
msgid "Async context"
msgstr ""

#: src/expressions/block-expr.md:148
msgid ""
"Because async blocks construct a future, they define an **async context** "
"which can in turn contain [`await` expressions](await-expr.md). Async "
"contexts are established by async blocks as well as the bodies of async "
"functions, whose semantics are defined in terms of async blocks."
msgstr ""

#: src/expressions/block-expr.md:153
msgid "Control-flow operators"
msgstr ""

#: src/expressions/block-expr.md:157
msgid "Async blocks act like a function boundary, much like closures."
msgstr ""

#: src/expressions/block-expr.md:161
msgid ""
"Therefore, the `?` operator and `return` expressions both affect the output "
"of the future, not the enclosing function or other context. That is, `return "
"<expr>` from within an async block will return the result of `<expr>` as the "
"output of the future. Similarly, if `<expr>?` propagates an error, that "
"error is propagated as the result of the future."
msgstr ""

#: src/expressions/block-expr.md:167
msgid ""
"Finally, the `break` and `continue` keywords cannot be used to branch out "
"from an async block. Therefore the following is illegal:"
msgstr ""

#: src/expressions/block-expr.md:173
msgid "// error[E0267]: `break` inside of an `async` block\n"
msgstr ""

#: src/expressions/block-expr.md:180
msgid "`const` blocks"
msgstr ""

#: src/expressions/block-expr.md:184
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ConstBlockExpression_ :  \n"
"   `const` _BlockExpression_"
msgstr ""

#: src/expressions/block-expr.md:190
msgid ""
"A _const block_ is a variant of a block expression whose body evaluates at "
"compile-time instead of at runtime."
msgstr ""

#: src/expressions/block-expr.md:194
msgid ""
"Const blocks allows you to define a constant value without having to define "
"new [constant items](../items/constant-items.md), and thus they are also "
"sometimes referred as _inline consts_. It also supports type inference so "
"there is no need to specify the type, unlike [constant items](../items/"
"constant-items.md)."
msgstr ""

#: src/expressions/block-expr.md:199
msgid ""
"Const blocks have the ability to reference generic parameters in scope, "
"unlike [free](../glossary.md#free-item) constant items. They are desugared "
"to constant items with generic parameters in scope (similar to associated "
"constants, but without a trait or type they are associated with). For "
"example, this code:"
msgstr ""

#: src/expressions/block-expr.md:226
msgid ""
"If the const block expression is executed at runtime, then the constant is "
"guaranteed to be evaluated, even if its return value is ignored:"
msgstr ""

#: src/expressions/block-expr.md:230
msgid ""
"// If this code ever gets executed, then the assertion has definitely\n"
"    // been evaluated at compile-time.\n"
msgstr ""

#: src/expressions/block-expr.md:233
msgid ""
"// Here we can have unsafe code relying on the type being non-zero-sized.\n"
"    /* ... */"
msgstr ""

#: src/expressions/block-expr.md:242
msgid ""
"If the const block expression is not executed at runtime, it may or may not "
"be evaluated:"
msgstr ""

#: src/expressions/block-expr.md:245
msgid "// The panic may or may not occur when the program is built.\n"
msgstr ""

#: src/expressions/block-expr.md:252
msgid "`unsafe` blocks"
msgstr ""

#: src/expressions/block-expr.md:254
msgid ""
"**<sup>Syntax</sup>**  \n"
"_UnsafeBlockExpression_ :  \n"
"   `unsafe` _BlockExpression_"
msgstr ""

#: src/expressions/block-expr.md:258
msgid ""
"_See [`unsafe` blocks](../unsafe-keyword.md#unsafe-blocks-unsafe-) for more "
"information on when to use `unsafe`_."
msgstr ""

#: src/expressions/block-expr.md:260
msgid ""
"A block of code can be prefixed with the `unsafe` keyword to permit [unsafe "
"operations](../unsafety.md). Examples:"
msgstr ""

#: src/expressions/block-expr.md:277 src/expressions/loop-expr.md:332
msgid "Labelled block expressions"
msgstr ""

#: src/expressions/block-expr.md:279
msgid ""
"Labelled block expressions are documented in the [Loops and other breakable "
"expressions](loop-expr.md#labelled-block-expressions) section."
msgstr ""

#: src/expressions/block-expr.md:283
msgid "Attributes on block expressions"
msgstr ""

#: src/expressions/block-expr.md:287
msgid ""
"[Inner attributes](../attributes.md) are allowed directly after the opening "
"brace of a block expression in the following situations:"
msgstr ""

#: src/expressions/block-expr.md:289
msgid ""
"[Function](../items/functions.md) and [method](../items/associated-"
"items.md#methods) bodies."
msgstr ""

#: src/expressions/block-expr.md:290
msgid ""
"Loop bodies ([`loop`](loop-expr.md#infinite-loops), [`while`](loop-"
"expr.md#predicate-loops), [`while let`](loop-expr.md#predicate-pattern-"
"loops), and [`for`](loop-expr.md#iterator-loops))."
msgstr ""

#: src/expressions/block-expr.md:291
msgid "Block expressions used as a [statement](../statements.md)."
msgstr ""

#: src/expressions/block-expr.md:292
msgid ""
"Block expressions as elements of [array expressions](array-expr.md), [tuple "
"expressions](tuple-expr.md), [call expressions](call-expr.md), and tuple-"
"style [struct](struct-expr.md) expressions."
msgstr ""

#: src/expressions/block-expr.md:294
msgid "A block expression as the tail expression of another block expression."
msgstr ""

#: src/expressions/block-expr.md:299
msgid ""
"The attributes that have meaning on a block expression are [`cfg`](../"
"conditional-compilation.md) and [the lint check attributes](../attributes/"
"diagnostics.md#lint-check-attributes)."
msgstr ""

#: src/expressions/block-expr.md:301
msgid ""
"For example, this function returns `true` on unix platforms and `false` on "
"other platforms."
msgstr ""

#: src/expressions/operator-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_OperatorExpression_ :  \n"
"      [_BorrowExpression_](#borrow-operators)  \n"
"   | [_DereferenceExpression_](#the-dereference-operator)  \n"
"   | [_ErrorPropagationExpression_](#the-question-mark-operator)  \n"
"   | [_NegationExpression_](#negation-operators)  \n"
"   | [_ArithmeticOrLogicalExpression_](#arithmetic-and-logical-binary-"
"operators)  \n"
"   | [_ComparisonExpression_](#comparison-operators)  \n"
"   | [_LazyBooleanExpression_](#lazy-boolean-operators)  \n"
"   | [_TypeCastExpression_](#type-cast-expressions)  \n"
"   | [_AssignmentExpression_](#assignment-expressions)  \n"
"   | [_CompoundAssignmentExpression_](#compound-assignment-expressions)"
msgstr ""

#: src/expressions/operator-expr.md:22
msgid "Operators are defined for built in types by the Rust language."
msgstr ""

#: src/expressions/operator-expr.md:26
msgid ""
"Many of the following operators can also be overloaded using traits in "
"`std::ops` or `std::cmp`."
msgstr ""

#: src/expressions/operator-expr.md:30
msgid "Overflow"
msgstr ""

#: src/expressions/operator-expr.md:34
msgid ""
"Integer operators will panic when they overflow when compiled in debug mode. "
"The `-C debug-assertions` and `-C overflow-checks` compiler flags can be "
"used to control this more directly. The following things are considered to "
"be overflow:"
msgstr ""

#: src/expressions/operator-expr.md:40
msgid ""
"When `+`, `*` or binary `-` create a value greater than the maximum value, "
"or less than the minimum value that can be stored."
msgstr ""

#: src/expressions/operator-expr.md:44
msgid ""
"Applying unary `-` to the most negative value of any signed integer type, "
"unless the operand is a [literal expression](literal-expr.md#integer-literal-"
"expressions) (or a literal expression standing alone inside one or more "
"[grouped expressions](grouped-expr.md))."
msgstr ""

#: src/expressions/operator-expr.md:48
msgid ""
"Using `/` or `%`, where the left-hand argument is the smallest integer of a "
"signed integer type and the right-hand argument is `-1`. These checks occur "
"even when `-C overflow-checks` is disabled, for legacy reasons."
msgstr ""

#: src/expressions/operator-expr.md:53
msgid ""
"Using `<<` or `>>` where the right-hand argument is greater than or equal to "
"the number of bits in the type of the left-hand argument, or is negative."
msgstr ""

#: src/expressions/operator-expr.md:55
msgid ""
"**Note**: The exception for literal expressions behind unary `-` means that "
"forms such as `-128_i8` or `let j: i8 = -(128)` never cause a panic and have "
"the expected value of -128."
msgstr ""

#: src/expressions/operator-expr.md:57
msgid ""
"In these cases, the literal expression already has the most negative value "
"for its type (for example, `128_i8` has the value -128) because integer "
"literals are truncated to their type per the description in [Integer literal "
"expressions](literal-expr.md#integer-literal-expressions)."
msgstr ""

#: src/expressions/operator-expr.md:59
msgid ""
"Negation of these most negative values leaves the value unchanged due to "
"two's complement overflow conventions."
msgstr ""

#: src/expressions/operator-expr.md:61
msgid ""
"In `rustc`, these most negative expressions are also ignored by the "
"`overflowing_literals` lint check."
msgstr ""

#: src/expressions/operator-expr.md:65
msgid "Borrow operators"
msgstr ""

#: src/expressions/operator-expr.md:67
msgid ""
"**<sup>Syntax</sup>**  \n"
"_BorrowExpression_ :  \n"
"      (`&`\\|`&&`) [_Expression_](../expressions.md)  \n"
"   | (`&`\\|`&&`) `mut` [_Expression_](../expressions.md)  \n"
"   | (`&`\\|`&&`) `raw` `const` [_Expression_](../expressions.md)  \n"
"   | (`&`\\|`&&`) `raw` `mut` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:76
msgid ""
"The `&` (shared borrow) and `&mut` (mutable borrow) operators are unary "
"prefix operators."
msgstr ""

#: src/expressions/operator-expr.md:80
msgid ""
"When applied to a [place expression](../expressions.md#place-expressions-and-"
"value-expressions), this expressions produces a reference (pointer) to the "
"location that the value refers to."
msgstr ""

#: src/expressions/operator-expr.md:84
msgid ""
"The memory location is also placed into a borrowed state for the duration of "
"the reference. For a shared borrow (`&`), this implies that the place may "
"not be mutated, but it may be read or shared again. For a mutable borrow "
"(`&mut`), the place may not be accessed in any way until the borrow expires."
msgstr ""

#: src/expressions/operator-expr.md:90
msgid "`&mut` evaluates its operand in a mutable place expression context."
msgstr ""

#: src/expressions/operator-expr.md:94
msgid ""
"If the `&` or `&mut` operators are applied to a [value expression](../"
"expressions.md#place-expressions-and-value-expressions), then a [temporary "
"value](../expressions.md#temporaries) is created."
msgstr ""

#: src/expressions/operator-expr.md:96
msgid "These operators cannot be overloaded."
msgstr ""

#: src/expressions/operator-expr.md:100
msgid "// a temporary with value 7 is created that lasts for this scope.\n"
msgstr ""

#: src/expressions/operator-expr.md:105
msgid ""
"// Mutably borrows `array` for this scope.\n"
"    // `array` may only be used through `mutable_reference`.\n"
msgstr ""

#: src/expressions/operator-expr.md:113
msgid ""
"Even though `&&` is a single token ([the lazy 'and' operator](#lazy-boolean-"
"operators)), when used in the context of borrow expressions it works as two "
"borrows:"
msgstr ""

#: src/expressions/operator-expr.md:116 src/expressions/operator-expr.md:119
msgid "// same meanings:\n"
msgstr ""

#: src/expressions/operator-expr.md:128
msgid "Raw borrow operators"
msgstr ""

#: src/expressions/operator-expr.md:132
msgid "`&raw const` and `&raw mut` are the _raw borrow operators_."
msgstr ""

#: src/expressions/operator-expr.md:136
msgid ""
"The operand expression of these operators is evaluated in place expression "
"context."
msgstr ""

#: src/expressions/operator-expr.md:140
msgid ""
"`&raw const expr` then creates a const raw pointer of type `*const T` to the "
"given place, and `&raw mut expr` creates a mutable raw pointer of type `*mut "
"T`."
msgstr ""

#: src/expressions/operator-expr.md:144
msgid ""
"The raw borrow operators must be used instead of a borrow operator whenever "
"the place expression could evaluate to a place that is not properly aligned "
"or does not store a valid value as determined by its type, or whenever "
"creating a reference would introduce incorrect aliasing assumptions. In "
"those situations, using a borrow operator would cause [undefined behavior]"
"(../behavior-considered-undefined.md) by creating an invalid reference, but "
"a raw pointer may still be constructed."
msgstr ""

#: src/expressions/operator-expr.md:147
msgid ""
"The following is an example of creating a raw pointer to an unaligned place "
"through a `packed` struct:"
msgstr ""

#: src/expressions/operator-expr.md:156
msgid ""
"// `&packed.f2` would create an unaligned reference, and thus be undefined "
"behavior!\n"
msgstr ""

#: src/expressions/operator-expr.md:162
msgid ""
"The following is an example of creating a raw pointer to a place that does "
"not contain a valid value:"
msgstr ""

#: src/expressions/operator-expr.md:171
msgid ""
"// `&uninit.as_mut().field` would create a reference to an uninitialized "
"`bool`,\n"
"// and thus be undefined behavior!\n"
msgstr ""

#: src/expressions/operator-expr.md:181
msgid "The dereference operator"
msgstr ""

#: src/expressions/operator-expr.md:185
msgid ""
"**<sup>Syntax</sup>**  \n"
"_DereferenceExpression_ :  \n"
"   `*` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:191
msgid "The `*` (dereference) operator is also a unary prefix operator."
msgstr ""

#: src/expressions/operator-expr.md:195
msgid ""
"When applied to a [pointer](../types/pointer.md) it denotes the pointed-to "
"location."
msgstr ""

#: src/expressions/operator-expr.md:199
msgid ""
"If the expression is of type `&mut T` or `*mut T`, and is either a local "
"variable, a (nested) field of a local variable or is a mutable [place "
"expression](../expressions.md#place-expressions-and-value-expressions), then "
"the resulting memory location can be assigned to."
msgstr ""

#: src/expressions/operator-expr.md:203
msgid "Dereferencing a raw pointer requires `unsafe`."
msgstr ""

#: src/expressions/operator-expr.md:207
msgid ""
"On non-pointer types `*x` is equivalent to `*std::ops::Deref::deref(&x)` in "
"an [immutable place expression context](../expressions.md#mutability) and "
"`*std::ops::DerefMut::deref_mut(&mut x)` in a mutable place expression "
"context."
msgstr ""

#: src/expressions/operator-expr.md:219
msgid "The question mark operator"
msgstr ""

#: src/expressions/operator-expr.md:223
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ErrorPropagationExpression_ :  \n"
"   [_Expression_](../expressions.md) `?`"
msgstr ""

#: src/expressions/operator-expr.md:229
msgid ""
"The question mark operator (`?`) unwraps valid values or returns erroneous "
"values, propagating them to the calling function."
msgstr ""

#: src/expressions/operator-expr.md:233
msgid ""
"It is a unary postfix operator that can only be applied to the types "
"`Result<T, E>` and `Option<T>`."
msgstr ""

#: src/expressions/operator-expr.md:237
msgid ""
"When applied to values of the `Result<T, E>` type, it propagates errors."
msgstr ""

#: src/expressions/operator-expr.md:241
msgid ""
"If the value is `Err(e)`, then it will return `Err(From::from(e))` from the "
"enclosing function or closure."
msgstr ""

#: src/expressions/operator-expr.md:245
msgid ""
"If applied to `Ok(x)`, then it will unwrap the value to evaluate to `x`."
msgstr ""

#: src/expressions/operator-expr.md:250 src/types/closure.md:299
msgid "\"123\""
msgstr ""

#: src/expressions/operator-expr.md:250
msgid "// x = 123\n"
msgstr ""

#: src/expressions/operator-expr.md:251
msgid "\"24a\""
msgstr ""

#: src/expressions/operator-expr.md:251
msgid "// returns an Err() immediately\n"
msgstr ""

#: src/expressions/operator-expr.md:252
msgid "// Doesn't run.\n"
msgstr ""

#: src/expressions/operator-expr.md:256 src/patterns.md:521
#: src/types/closure.md:28 src/types/closure.md:50 src/types/closure.md:161
#: src/types/closure.md:231 src/types/closure.md:250 src/types/closure.md:268
#: src/types/closure.md:676 src/destructors.md:379 src/paths.md:228
msgid "\"{:?}\""
msgstr ""

#: src/expressions/operator-expr.md:262
msgid "When applied to values of the `Option<T>` type, it propagates `None`s."
msgstr ""

#: src/expressions/operator-expr.md:266
msgid "If the value is `None`, then it will return `None`."
msgstr ""

#: src/expressions/operator-expr.md:270
msgid ""
"If applied to `Some(x)`, then it will unwrap the value to evaluate to `x`."
msgstr ""

#: src/expressions/operator-expr.md:288
msgid "`?` cannot be overloaded."
msgstr ""

#: src/expressions/operator-expr.md:292
msgid "Negation operators"
msgstr ""

#: src/expressions/operator-expr.md:296
msgid ""
"**<sup>Syntax</sup>**  \n"
"_NegationExpression_ :  \n"
"      `-` [_Expression_](../expressions.md)  \n"
"   | `!` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:303
msgid "These are the last two unary operators."
msgstr ""

#: src/expressions/operator-expr.md:307
msgid ""
"This table summarizes the behavior of them on primitive types and which "
"traits are used to overload these operators for other types. Remember that "
"signed integers are always represented using two's complement. The operands "
"of all of these operators are evaluated in [value expression context](../"
"expressions.md#place-expressions-and-value-expressions) so are moved or "
"copied."
msgstr ""

#: src/expressions/operator-expr.md:311 src/expressions/operator-expr.md:356
#: src/type-layout.md:63
msgid "`bool`"
msgstr ""

#: src/expressions/operator-expr.md:311 src/expressions/operator-expr.md:356
msgid "Floating Point"
msgstr ""

#: src/expressions/operator-expr.md:311 src/expressions/operator-expr.md:356
msgid "Overloading Trait"
msgstr ""

#: src/expressions/operator-expr.md:313
msgid "Negation\\*"
msgstr ""

#: src/expressions/operator-expr.md:313
msgid "Negation"
msgstr ""

#: src/expressions/operator-expr.md:313
msgid "`std::ops::Neg`"
msgstr ""

#: src/expressions/operator-expr.md:314
msgid "Bitwise NOT"
msgstr ""

#: src/expressions/operator-expr.md:314
msgid "[Logical NOT](../types/boolean.md#logical-not)"
msgstr ""

#: src/expressions/operator-expr.md:314
msgid "`std::ops::Not`"
msgstr ""

#: src/expressions/operator-expr.md:316
msgid "\\* Only for signed integer types."
msgstr ""

#: src/expressions/operator-expr.md:318
msgid "Here are some example of these operators"
msgstr ""

#: src/expressions/operator-expr.md:329
msgid "Arithmetic and Logical Binary Operators"
msgstr ""

#: src/expressions/operator-expr.md:333
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ArithmeticOrLogicalExpression_ :  \n"
"      [_Expression_](../expressions.md) `+` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `-` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `*` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `/` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `%` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `&` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `|` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `^` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `<<` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `>>` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:348
msgid "Binary operators expressions are all written with infix notation."
msgstr ""

#: src/expressions/operator-expr.md:352
msgid ""
"This table summarizes the behavior of arithmetic and logical binary "
"operators on primitive types and which traits are used to overload these "
"operators for other types. Remember that signed integers are always "
"represented using two's complement. The operands of all of these operators "
"are evaluated in [value expression context](../expressions.md#place-"
"expressions-and-value-expressions) so are moved or copied."
msgstr ""

#: src/expressions/operator-expr.md:356
msgid "Overloading Compound Assignment Trait"
msgstr ""

#: src/expressions/operator-expr.md:358
msgid "Addition"
msgstr ""

#: src/expressions/operator-expr.md:358
msgid "`std::ops::Add`"
msgstr ""

#: src/expressions/operator-expr.md:358
msgid "`std::ops::AddAssign`"
msgstr ""

#: src/expressions/operator-expr.md:359
msgid "Subtraction"
msgstr ""

#: src/expressions/operator-expr.md:359
msgid "`std::ops::Sub`"
msgstr ""

#: src/expressions/operator-expr.md:359
msgid "`std::ops::SubAssign`"
msgstr ""

#: src/expressions/operator-expr.md:360
msgid "Multiplication"
msgstr ""

#: src/expressions/operator-expr.md:360
msgid "`std::ops::Mul`"
msgstr ""

#: src/expressions/operator-expr.md:360
msgid "`std::ops::MulAssign`"
msgstr ""

#: src/expressions/operator-expr.md:361
msgid "Division\\*†"
msgstr ""

#: src/expressions/operator-expr.md:361
msgid "Division"
msgstr ""

#: src/expressions/operator-expr.md:361
msgid "`std::ops::Div`"
msgstr ""

#: src/expressions/operator-expr.md:361
msgid "`std::ops::DivAssign`"
msgstr ""

#: src/expressions/operator-expr.md:362
msgid "Remainder\\*\\*†"
msgstr ""

#: src/expressions/operator-expr.md:362
msgid "Remainder"
msgstr ""

#: src/expressions/operator-expr.md:362
msgid "`std::ops::Rem`"
msgstr ""

#: src/expressions/operator-expr.md:362
msgid "`std::ops::RemAssign`"
msgstr ""

#: src/expressions/operator-expr.md:363
msgid "Bitwise AND"
msgstr ""

#: src/expressions/operator-expr.md:363
msgid "[Logical AND](../types/boolean.md#logical-and)"
msgstr ""

#: src/expressions/operator-expr.md:363
msgid "`std::ops::BitAnd`"
msgstr ""

#: src/expressions/operator-expr.md:363
msgid "`std::ops::BitAndAssign`"
msgstr ""

#: src/expressions/operator-expr.md:364
msgid "Bitwise OR"
msgstr ""

#: src/expressions/operator-expr.md:364
msgid "[Logical OR](../types/boolean.md#logical-or)"
msgstr ""

#: src/expressions/operator-expr.md:364
msgid "`std::ops::BitOr`"
msgstr ""

#: src/expressions/operator-expr.md:364
msgid "`std::ops::BitOrAssign`"
msgstr ""

#: src/expressions/operator-expr.md:365
msgid "Bitwise XOR"
msgstr ""

#: src/expressions/operator-expr.md:365
msgid "[Logical XOR](../types/boolean.md#logical-xor)"
msgstr ""

#: src/expressions/operator-expr.md:365
msgid "`std::ops::BitXor`"
msgstr ""

#: src/expressions/operator-expr.md:365
msgid "`std::ops::BitXorAssign`"
msgstr ""

#: src/expressions/operator-expr.md:366
msgid "Left Shift"
msgstr ""

#: src/expressions/operator-expr.md:366
msgid "`std::ops::Shl`"
msgstr ""

#: src/expressions/operator-expr.md:366
msgid "`std::ops::ShlAssign`"
msgstr ""

#: src/expressions/operator-expr.md:367
msgid "Right Shift\\*\\*\\*"
msgstr ""

#: src/expressions/operator-expr.md:367
msgid "`std::ops::Shr`"
msgstr ""

#: src/expressions/operator-expr.md:367
msgid "`std::ops::ShrAssign`"
msgstr ""

#: src/expressions/operator-expr.md:369
msgid "\\* Integer division rounds towards zero."
msgstr ""

#: src/expressions/operator-expr.md:371
msgid ""
"\\*\\* Rust uses a remainder defined with [truncating division](https://"
"en.wikipedia.org/wiki/Modulo_operation#Variants_of_the_definition). Given "
"`remainder = dividend % divisor`, the remainder will have the same sign as "
"the dividend."
msgstr ""

#: src/expressions/operator-expr.md:373
msgid ""
"\\*\\*\\* Arithmetic right shift on signed integer types, logical right "
"shift on unsigned integer types."
msgstr ""

#: src/expressions/operator-expr.md:376
msgid "† For integer types, division by zero panics."
msgstr ""

#: src/expressions/operator-expr.md:378
msgid "Here are examples of these operators being used."
msgstr ""

#: src/expressions/operator-expr.md:395
msgid "Comparison Operators"
msgstr ""

#: src/expressions/operator-expr.md:399
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ComparisonExpression_ :  \n"
"      [_Expression_](../expressions.md) `==` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `!=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `>` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `<` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `>=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `<=` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:410
msgid ""
"Comparison operators are also defined both for primitive types and many "
"types in the standard library."
msgstr ""

#: src/expressions/operator-expr.md:414
msgid ""
"Parentheses are required when chaining comparison operators. For example, "
"the expression `a == b == c` is invalid and may be written as `(a == b) == "
"c`."
msgstr ""

#: src/expressions/operator-expr.md:418
msgid ""
"Unlike arithmetic and logical operators, the traits for overloading these "
"operators are used more generally to show how a type may be compared and "
"will likely be assumed to define actual comparisons by functions that use "
"these traits as bounds. Many functions and macros in the standard library "
"can then use that assumption (although not to ensure safety)."
msgstr ""

#: src/expressions/operator-expr.md:423
msgid ""
"Unlike the arithmetic and logical operators above, these operators "
"implicitly take shared borrows of their operands, evaluating them in [place "
"expression context](../expressions.md#place-expressions-and-value-"
"expressions):"
msgstr ""

#: src/expressions/operator-expr.md:428
msgid "// is equivalent to\n"
msgstr ""

#: src/expressions/operator-expr.md:433
msgid "This means that the operands don't have to be moved out of."
msgstr ""

#: src/expressions/operator-expr.md:438
msgid "Overloading method"
msgstr ""

#: src/expressions/operator-expr.md:440
msgid "Equal"
msgstr ""

#: src/expressions/operator-expr.md:440
msgid "`std::cmp::PartialEq::eq`"
msgstr ""

#: src/expressions/operator-expr.md:441
msgid "Not equal"
msgstr ""

#: src/expressions/operator-expr.md:441
msgid "`std::cmp::PartialEq::ne`"
msgstr ""

#: src/expressions/operator-expr.md:442
msgid "Greater than"
msgstr ""

#: src/expressions/operator-expr.md:442
msgid "`std::cmp::PartialOrd::gt`"
msgstr ""

#: src/expressions/operator-expr.md:443
msgid "Less than"
msgstr ""

#: src/expressions/operator-expr.md:443
msgid "`std::cmp::PartialOrd::lt`"
msgstr ""

#: src/expressions/operator-expr.md:444
msgid "Greater than or equal to"
msgstr ""

#: src/expressions/operator-expr.md:444
msgid "`std::cmp::PartialOrd::ge`"
msgstr ""

#: src/expressions/operator-expr.md:445
msgid "Less than or equal to"
msgstr ""

#: src/expressions/operator-expr.md:445
msgid "`std::cmp::PartialOrd::le`"
msgstr ""

#: src/expressions/operator-expr.md:447
msgid "Here are examples of the comparison operators being used."
msgstr ""

#: src/expressions/operator-expr.md:454 src/expressions/operator-expr.md:696
#: src/expressions/operator-expr.md:707 src/patterns.md:657
msgid "'A'"
msgstr ""

#: src/expressions/operator-expr.md:454
msgid "'B'"
msgstr ""

#: src/expressions/operator-expr.md:455
msgid "\"World\""
msgstr ""

#: src/expressions/operator-expr.md:455
msgid "\"Hello\""
msgstr ""

#: src/expressions/operator-expr.md:460
msgid "Lazy boolean operators"
msgstr ""

#: src/expressions/operator-expr.md:464
msgid ""
"**<sup>Syntax</sup>**  \n"
"_LazyBooleanExpression_ :  \n"
"      [_Expression_](../expressions.md) `||` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `&&` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:471
msgid ""
"The operators `||` and `&&` may be applied to operands of boolean type. The "
"`||` operator denotes logical 'or', and the `&&` operator denotes logical "
"'and'."
msgstr ""

#: src/expressions/operator-expr.md:476
msgid ""
"They differ from `|` and `&` in that the right-hand operand is only "
"evaluated when the left-hand operand does not already determine the result "
"of the expression. That is, `||` only evaluates its right-hand operand when "
"the left-hand operand evaluates to `false`, and `&&` only when it evaluates "
"to `true`."
msgstr ""

#: src/expressions/operator-expr.md:480
msgid "// true\n"
msgstr ""

#: src/expressions/operator-expr.md:481
msgid "// false, doesn't evaluate `panic!()`\n"
msgstr ""

#: src/expressions/operator-expr.md:486
msgid "Type cast expressions"
msgstr ""

#: src/expressions/operator-expr.md:490
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TypeCastExpression_ :  \n"
"   [_Expression_](../expressions.md) `as` [_TypeNoBounds_](../types.md#type-"
"expressions)"
msgstr ""

#: src/expressions/operator-expr.md:496
msgid "A type cast expression is denoted with the binary operator `as`."
msgstr ""

#: src/expressions/operator-expr.md:500
msgid ""
"Executing an `as` expression casts the value on the left-hand side to the "
"type on the right-hand side."
msgstr ""

#: src/expressions/operator-expr.md:502
msgid "An example of an `as` expression:"
msgstr ""

#: src/expressions/operator-expr.md:516
msgid ""
"`as` can be used to explicitly perform [coercions](../type-coercions.md), as "
"well as the following additional casts. Any cast that does not fit either a "
"coercion rule or an entry in the table is a compiler error. Here `*T` means "
"either `*const T` or `*mut T`. `m` stands for optional `mut` in reference "
"types and `mut` or `const` in pointer types."
msgstr ""

#: src/expressions/operator-expr.md:521
msgid "Type of `e`"
msgstr ""

#: src/expressions/operator-expr.md:521
msgid "`U`"
msgstr ""

#: src/expressions/operator-expr.md:521
msgid "Cast performed by `e as U`"
msgstr ""

#: src/expressions/operator-expr.md:523
msgid "Integer or Float type"
msgstr ""

#: src/expressions/operator-expr.md:523
msgid "[Numeric cast](operator-expr.md#r-expr.as.numeric)"
msgstr ""

#: src/expressions/operator-expr.md:524
msgid "Enumeration"
msgstr ""

#: src/expressions/operator-expr.md:524 src/expressions/operator-expr.md:525
#: src/expressions/operator-expr.md:528 src/expressions/operator-expr.md:529
msgid "Integer type"
msgstr ""

#: src/expressions/operator-expr.md:524
msgid "[Enum cast](operator-expr.md#r-expr.as.enum)"
msgstr ""

#: src/expressions/operator-expr.md:525
msgid "`bool` or `char`"
msgstr ""

#: src/expressions/operator-expr.md:525
msgid ""
"[Primitive to integer cast](operator-expr.md#r-expr.as.bool-char-as-int)"
msgstr ""

#: src/expressions/operator-expr.md:526 src/types/numeric.md:15
msgid "`u8`"
msgstr ""

#: src/expressions/operator-expr.md:526 src/type-layout.md:72
msgid "`char`"
msgstr ""

#: src/expressions/operator-expr.md:526
msgid "[`u8` to `char` cast](operator-expr.md#r-expr.as.u8-as-char)"
msgstr ""

#: src/expressions/operator-expr.md:527
msgid "`*T`"
msgstr ""

#: src/expressions/operator-expr.md:527
msgid "`*V` [^meta-compat]"
msgstr ""

#: src/expressions/operator-expr.md:527
msgid "[Pointer to pointer cast](operator-expr.md#r-expr.as.pointer)"
msgstr ""

#: src/expressions/operator-expr.md:528
msgid "`*T` where `T: Sized`"
msgstr ""

#: src/expressions/operator-expr.md:528
msgid "[Pointer to address cast](operator-expr.md#r-expr.as.pointer-as-int)"
msgstr ""

#: src/expressions/operator-expr.md:529 src/expressions/operator-expr.md:533
#: src/expressions/operator-expr.md:535
msgid "`*V` where `V: Sized`"
msgstr ""

#: src/expressions/operator-expr.md:529
msgid "[Address to pointer cast](operator-expr.md#r-expr.as.int-as-pointer)"
msgstr ""

#: src/expressions/operator-expr.md:530
msgid "`&m₁ [T; n]`"
msgstr ""

#: src/expressions/operator-expr.md:530 src/expressions/operator-expr.md:531
msgid "`*m₂ T` [^lessmut]"
msgstr ""

#: src/expressions/operator-expr.md:530 src/expressions/operator-expr.md:531
msgid "Array to pointer cast"
msgstr ""

#: src/expressions/operator-expr.md:531
msgid "`*m₁ [T; n]`"
msgstr ""

#: src/expressions/operator-expr.md:532 src/expressions/operator-expr.md:533
#: src/expressions/operator-expr.md:534
msgid "[Function item](../types/function-item.md)"
msgstr ""

#: src/expressions/operator-expr.md:532 src/expressions/operator-expr.md:535
#: src/expressions/operator-expr.md:536
msgid "[Function pointer](../types/function-pointer.md)"
msgstr ""

#: src/expressions/operator-expr.md:532
msgid "Function item to function pointer cast"
msgstr ""

#: src/expressions/operator-expr.md:533
msgid "Function item to pointer cast"
msgstr ""

#: src/expressions/operator-expr.md:534
msgid "Function item to address cast"
msgstr ""

#: src/expressions/operator-expr.md:535
msgid "Function pointer to pointer cast"
msgstr ""

#: src/expressions/operator-expr.md:536
msgid "Function pointer to address cast"
msgstr ""

#: src/expressions/operator-expr.md:537
msgid "Closure [^no-capture]"
msgstr ""

#: src/expressions/operator-expr.md:537
msgid "Function pointer"
msgstr ""

#: src/expressions/operator-expr.md:537
msgid "Closure to function pointer cast"
msgstr ""

#: src/expressions/operator-expr.md:539
msgid ""
"where `T` and `V` have compatible metadata: \\* `V: Sized`, or \\* Both "
"slice metadata (`*[u16]` -> `*[u8]`, `*str` -> `*(u8, [u32])`), or \\* Both "
"the same trait object metadata, modulo dropping auto traits (`*dyn Debug` -> "
"`*(u16, dyn Debug)`, `*dyn Debug + Send` -> `*dyn Debug`) \\* **Note**: "
"_adding_ auto traits is only allowed if the principal trait has the auto "
"trait as a super trait (given `trait T: Send {}`, `*dyn T` -> `*dyn T + "
"Send` is valid, but `*dyn Debug` -> `*dyn Debug + Send` is not) \\* "
"**Note**: Generics (including lifetimes) must match (`*dyn T<'a, A>` -> "
"`*dyn T<'b, B>` requires `'a = 'b` and `A = B`)"
msgstr ""

#: src/expressions/operator-expr.md:546
msgid ""
"only when `m₁` is `mut` or `m₂` is `const`. Casting `mut` reference/pointer "
"to `const` pointer is allowed."
msgstr ""

#: src/expressions/operator-expr.md:549
msgid ""
"only for closures that do not capture (close over) any local variables can "
"be casted to function pointers."
msgstr ""

#: src/expressions/operator-expr.md:551
msgid "Semantics"
msgstr ""

#: src/expressions/operator-expr.md:555
msgid "Numeric cast"
msgstr ""

#: src/expressions/operator-expr.md:559
msgid ""
"Casting between two integers of the same size (e.g. i32 -> u32) is a no-op "
"(Rust uses 2's complement for negative values of fixed integers)"
msgstr ""

#: src/expressions/operator-expr.md:571
msgid ""
"Casting from a larger integer to a smaller integer (e.g. u32 -> u8) will "
"truncate"
msgstr ""

#: src/expressions/operator-expr.md:586
msgid ""
"Casting from a smaller integer to a larger integer (e.g. u8 -> u32) will"
msgstr ""

#: src/expressions/operator-expr.md:587
msgid "zero-extend if the source is unsigned"
msgstr ""

#: src/expressions/operator-expr.md:588
msgid "sign-extend if the source is signed"
msgstr ""

#: src/expressions/operator-expr.md:593
msgid "\"Zero-extend\""
msgstr ""

#: src/expressions/operator-expr.md:594
msgid "\"Sign-extend 0\""
msgstr ""

#: src/expressions/operator-expr.md:595
msgid "\"Sign-extend 1\""
msgstr ""

#: src/expressions/operator-expr.md:600
msgid "Casting from a float to an integer will round the float towards zero"
msgstr ""

#: src/expressions/operator-expr.md:601
msgid "`NaN` will return `0`"
msgstr ""

#: src/expressions/operator-expr.md:602
msgid ""
"Values larger than the maximum integer value, including `INFINITY`, will "
"saturate to the maximum value of the integer type."
msgstr ""

#: src/expressions/operator-expr.md:603
msgid ""
"Values smaller than the minimum integer value, including `NEG_INFINITY`, "
"will saturate to the minimum value of the integer type."
msgstr ""

#: src/expressions/operator-expr.md:616
msgid ""
"Casting from an integer to float will produce the closest possible float \\*"
msgstr ""

#: src/expressions/operator-expr.md:617 src/expressions/operator-expr.md:641
msgid "if necessary, rounding is according to `roundTiesToEven` mode \\*\\*\\*"
msgstr ""

#: src/expressions/operator-expr.md:618 src/expressions/operator-expr.md:642
msgid "on overflow, infinity (of the same sign as the input) is produced"
msgstr ""

#: src/expressions/operator-expr.md:619
msgid ""
"note: with the current set of numeric types, overflow can only happen on "
"`u128 as f32` for values greater or equal to `f32::MAX + (0.5 ULP)`"
msgstr ""

#: src/expressions/operator-expr.md:624 src/expressions/operator-expr.md:646
msgid "\"Rounded\""
msgstr ""

#: src/expressions/operator-expr.md:630
msgid "Casting from an f32 to an f64 is perfect and lossless"
msgstr ""

#: src/expressions/operator-expr.md:640
msgid ""
"Casting from an f64 to an f32 will produce the closest possible f32 \\*\\*"
msgstr ""

#: src/expressions/operator-expr.md:651
msgid ""
"\\* if integer-to-float casts with this rounding mode and overflow behavior "
"are not supported natively by the hardware, these casts will likely be "
"slower than expected."
msgstr ""

#: src/expressions/operator-expr.md:655
msgid ""
"\\*\\* if f64-to-f32 casts with this rounding mode and overflow behavior are "
"not supported natively by the hardware, these casts will likely be slower "
"than expected."
msgstr ""

#: src/expressions/operator-expr.md:659
msgid ""
"\\*\\*\\* as defined in IEEE 754-2008 §4.3.1: pick the nearest floating "
"point number, preferring the one with an even least significant digit if "
"exactly halfway between two floating point numbers."
msgstr ""

#: src/expressions/operator-expr.md:665
msgid "Enum cast"
msgstr ""

#: src/expressions/operator-expr.md:669
msgid ""
"Casts an enum to its discriminant, then uses a numeric cast if needed. "
"Casting is limited to the following kinds of enumerations:"
msgstr ""

#: src/expressions/operator-expr.md:672
msgid "[Unit-only enums](../items/enumerations.md#unit-only-enum)"
msgstr ""

#: src/expressions/operator-expr.md:673
msgid ""
"[Field-less enums](../items/enumerations.md#field-less-enum) without "
"[explicit discriminants](../items/enumerations.md#explicit-discriminants), "
"or where only unit-variants have explicit discriminants"
msgstr ""

#: src/expressions/operator-expr.md:684
msgid ""
"Casting is not allowed if the enum implements [`Drop`](../../core/ops/drop/"
"trait.Drop.html)."
msgstr ""

#: src/expressions/operator-expr.md:688
msgid "Primitive to integer cast"
msgstr ""

#: src/expressions/operator-expr.md:690
msgid "`false` casts to `0`, `true` casts to `1`"
msgstr ""

#: src/expressions/operator-expr.md:691
msgid ""
"`char` casts to the value of the code point, then uses a numeric cast if "
"needed."
msgstr ""

#: src/expressions/operator-expr.md:697 src/expressions/operator-expr.md:708
msgid "'Ö'"
msgstr ""

#: src/expressions/operator-expr.md:702
msgid "`u8` to `char` cast"
msgstr ""

#: src/expressions/operator-expr.md:704
msgid "Casts to the `char` with the corresponding code point."
msgstr ""

#: src/expressions/operator-expr.md:713
msgid "Pointer to address cast"
msgstr ""

#: src/expressions/operator-expr.md:715
msgid ""
"Casting from a raw pointer to an integer produces the machine address of the "
"referenced memory. If the integer type is smaller than the pointer type, the "
"address may be truncated; using `usize` avoids this."
msgstr ""

#: src/expressions/operator-expr.md:720
msgid "Address to pointer cast"
msgstr ""

#: src/expressions/operator-expr.md:722
msgid ""
"Casting from an integer to a raw pointer interprets the integer as a memory "
"address and produces a pointer referencing that memory."
msgstr ""

#: src/expressions/operator-expr.md:726
msgid ""
"_**Warning:**_ This interacts with the Rust memory model, which is still "
"under development. A pointer obtained from this cast may suffer additional "
"restrictions even if it is bitwise equal to a valid pointer. Dereferencing "
"such a pointer may be [undefined behavior](../behavior-considered-"
"undefined.md) if aliasing rules are not followed."
msgstr ""

#: src/expressions/operator-expr.md:734
msgid "A trivial example of sound address arithmetic:"
msgstr ""

#: src/expressions/operator-expr.md:740
msgid "// 4 == size_of::<i32>()\n"
msgstr ""

#: src/expressions/operator-expr.md:750
msgid "Pointer-to-pointer cast"
msgstr ""

#: src/expressions/operator-expr.md:754
msgid ""
"`*const T` / `*mut T` can be cast to `*const U` / `*mut U` with the "
"following behavior:"
msgstr ""

#: src/expressions/operator-expr.md:758
msgid "If `T` and `U` are both sized, the pointer is returned unchanged."
msgstr ""

#: src/expressions/operator-expr.md:762
msgid ""
"If `T` and `U` are both unsized, the pointer is also returned unchanged. In "
"particular, the metadata is preserved exactly."
msgstr ""

#: src/expressions/operator-expr.md:765
msgid ""
"For instance, a cast from `*const [T]` to `*const [U]` preserves the number "
"of elements. Note that, as a consequence, such casts do not necessarily "
"preserve the size of the pointer's referent (e.g., casting `*const [u16]` to "
"`*const [u8]` will result in a raw pointer which refers to an object of half "
"the size of the original). The same holds for `str` and any compound type "
"whose unsized tail is a slice type, such as `struct Foo(i32, [u8])` or "
"`(u64, Foo)`."
msgstr ""

#: src/expressions/operator-expr.md:773
msgid ""
"If `T` is unsized and `U` is sized, the cast discards all metadata that "
"completes the wide pointer `T` and produces a thin pointer `U` consisting of "
"the data part of the unsized pointer."
msgstr ""

#: src/expressions/operator-expr.md:777
msgid "Assignment expressions"
msgstr ""

#: src/expressions/operator-expr.md:781
msgid ""
"**<sup>Syntax</sup>**  \n"
"_AssignmentExpression_ :  \n"
"   [_Expression_](../expressions.md) `=` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:787
msgid "An _assignment expression_ moves a value into a specified place."
msgstr ""

#: src/expressions/operator-expr.md:791
msgid ""
"An assignment expression consists of a [mutable](../"
"expressions.md#mutability) [assignee expression](../expressions.md#place-"
"expressions-and-value-expressions), the _assignee operand_, followed by an "
"equals sign (`=`) and a [value expression](../expressions.md#place-"
"expressions-and-value-expressions), the _assigned value operand_."
msgstr ""

#: src/expressions/operator-expr.md:795
msgid ""
"In its most basic form, an assignee expression is a [place expression](../"
"expressions.md#place-expressions-and-value-expressions), and we discuss this "
"case first."
msgstr ""

#: src/expressions/operator-expr.md:799
msgid ""
"The more general case of destructuring assignment is discussed below, but "
"this case always decomposes into sequential assignments to place "
"expressions, which may be considered the more fundamental case."
msgstr ""

#: src/expressions/operator-expr.md:803
msgid "Basic assignments"
msgstr ""

#: src/expressions/operator-expr.md:807
msgid ""
"Evaluating assignment expressions begins by evaluating its operands. The "
"assigned value operand is evaluated first, followed by the assignee "
"expression."
msgstr ""

#: src/expressions/operator-expr.md:812
msgid ""
"For destructuring assignment, subexpressions of the assignee expression are "
"evaluated left-to-right."
msgstr ""

#: src/expressions/operator-expr.md:814 src/expressions/operator-expr.md:955
msgid ""
"**Note**: This is different than other expressions in that the right operand "
"is evaluated before the left one."
msgstr ""

#: src/expressions/operator-expr.md:818
msgid ""
"It then has the effect of first [dropping](../destructors.md) the value at "
"the assigned place, unless the place is an uninitialized local variable or "
"an uninitialized field of a local variable."
msgstr ""

#: src/expressions/operator-expr.md:822
msgid ""
"Next it either [copies or moves](../expressions.md#moved-and-copied-types) "
"the assigned value to the assigned place."
msgstr ""

#: src/expressions/operator-expr.md:826
msgid ""
"An assignment expression always produces [the unit value](../types/tuple.md)."
msgstr ""

#: src/expressions/operator-expr.md:828 src/patterns.md:409
#: src/macro-ambiguity.md:48
msgid "Example:"
msgstr ""

#: src/expressions/operator-expr.md:838
msgid "Destructuring assignments"
msgstr ""

#: src/expressions/operator-expr.md:842
msgid ""
"Destructuring assignment is a counterpart to destructuring pattern matches "
"for variable declaration, permitting assignment to complex values, such as "
"tuples or structs. For instance, we may swap two mutable variables:"
msgstr ""

#: src/expressions/operator-expr.md:846
msgid "// Swap `a` and `b` using destructuring assignment.\n"
msgstr ""

#: src/expressions/operator-expr.md:853
msgid ""
"In contrast to destructuring declarations using `let`, patterns may not "
"appear on the left-hand side of an assignment due to syntactic ambiguities. "
"Instead, a group of expressions that correspond to patterns are designated "
"to be [assignee expressions](../expressions.md#place-expressions-and-value-"
"expressions), and permitted on the left-hand side of an assignment. Assignee "
"expressions are then desugared to pattern matches followed by sequential "
"assignment."
msgstr ""

#: src/expressions/operator-expr.md:859
msgid ""
"The desugared patterns must be irrefutable: in particular, this means that "
"only slice patterns whose length is known at compile-time, and the trivial "
"slice `[..]`, are permitted for destructuring assignment."
msgstr ""

#: src/expressions/operator-expr.md:861
msgid ""
"The desugaring method is straightforward, and is illustrated best by example."
msgstr ""

#: src/expressions/operator-expr.md:871
msgid "// desugars to:\n"
msgstr ""

#: src/expressions/operator-expr.md:895
msgid ""
"Identifiers are not forbidden from being used multiple times in a single "
"assignee expression."
msgstr ""

#: src/expressions/operator-expr.md:899
msgid ""
"[Underscore expressions](./underscore-expr.md) and empty [range expressions]"
"(./range-expr.md) may be used to ignore certain values, without binding them."
msgstr ""

#: src/expressions/operator-expr.md:903
msgid ""
"Note that default binding modes do not apply for the desugared expression."
msgstr ""

#: src/expressions/operator-expr.md:907
msgid "Compound assignment expressions"
msgstr ""

#: src/expressions/operator-expr.md:911
msgid ""
"**<sup>Syntax</sup>**  \n"
"_CompoundAssignmentExpression_ :  \n"
"      [_Expression_](../expressions.md) `+=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `-=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `*=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `/=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `%=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `&=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `|=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `^=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `<<=` [_Expression_](../"
"expressions.md)  \n"
"   | [_Expression_](../expressions.md) `>>=` [_Expression_](../"
"expressions.md)"
msgstr ""

#: src/expressions/operator-expr.md:926
msgid ""
"_Compound assignment expressions_ combine arithmetic and logical binary "
"operators with assignment expressions."
msgstr ""

#: src/expressions/operator-expr.md:936
msgid ""
"The syntax of compound assignment is a [mutable](../"
"expressions.md#mutability) [place expression](../expressions.md#place-"
"expressions-and-value-expressions), the _assigned operand_, then one of the "
"operators followed by an `=` as a single token (no whitespace), and then a "
"[value expression](../expressions.md#place-expressions-and-value-"
"expressions), the _modifying operand_."
msgstr ""

#: src/expressions/operator-expr.md:940
msgid ""
"Unlike other place operands, the assigned place operand must be a place "
"expression."
msgstr ""

#: src/expressions/operator-expr.md:944
msgid ""
"Attempting to use a value expression is a compiler error rather than "
"promoting it to a temporary."
msgstr ""

#: src/expressions/operator-expr.md:948
msgid ""
"Evaluation of compound assignment expressions depends on the types of the "
"operators."
msgstr ""

#: src/expressions/operator-expr.md:952
msgid ""
"If both types are primitives, then the modifying operand will be evaluated "
"first followed by the assigned operand. It will then set the value of the "
"assigned operand's place to the value of performing the operation of the "
"operator with the values of the assigned operand and modifying operand."
msgstr ""

#: src/expressions/operator-expr.md:959
msgid ""
"Otherwise, this expression is syntactic sugar for calling the function of "
"the overloading compound assignment trait of the operator (see the table "
"earlier in this chapter). A mutable borrow of the assigned operand is "
"automatically taken."
msgstr ""

#: src/expressions/operator-expr.md:962
msgid ""
"For example, the following expression statements in `example` are equivalent:"
msgstr ""

#: src/expressions/operator-expr.md:969
msgid "/* */"
msgstr ""

#: src/expressions/operator-expr.md:984
msgid ""
"Like assignment expressions, compound assignment expressions always produce "
"[the unit value](../types/tuple.md)."
msgstr ""

#: src/expressions/operator-expr.md:988
msgid ""
"_**Warning:**_ The evaluation order of operands swaps depending on the types "
"of the operands: with primitive types the right-hand side will get evaluated "
"first, while with non-primitive types the left-hand side will get evaluated "
"first. Try not to write code that depends on the evaluation order of "
"operands in compound assignment expressions. See [this test](https://"
"github.com/rust-lang/rust/blob/1.58.0/src/test/ui/expr/compound-assignment/"
"eval-order.rs) for an example of using this dependency."
msgstr ""

#: src/expressions/grouped-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_GroupedExpression_ :  \n"
"   `(` [_Expression_](../expressions.md) `)`"
msgstr ""

#: src/expressions/grouped-expr.md:13
msgid ""
"A _parenthesized expression_ wraps a single expression, evaluating to that "
"expression. The syntax for a parenthesized expression is a `(`, then an "
"expression, called the _enclosed operand_, and then a `)`."
msgstr ""

#: src/expressions/grouped-expr.md:18
msgid ""
"Parenthesized expressions evaluate to the value of the enclosed operand."
msgstr ""

#: src/expressions/grouped-expr.md:22
msgid ""
"Unlike other expressions, parenthesized expressions are both [place "
"expressions and value expressions](../expressions.md#place-expressions-and-"
"value-expressions). When the enclosed operand is a place expression, it is a "
"place expression and when the enclosed operand is a value expression, it is "
"a value expression."
msgstr ""

#: src/expressions/grouped-expr.md:27
msgid ""
"Parentheses can be used to explicitly modify the precedence order of "
"subexpressions within an expression."
msgstr ""

#: src/expressions/grouped-expr.md:29
msgid "An example of a parenthesized expression:"
msgstr ""

#: src/expressions/grouped-expr.md:32
msgid "// not parenthesized\n"
msgstr ""

#: src/expressions/grouped-expr.md:33
msgid "// parenthesized\n"
msgstr ""

#: src/expressions/grouped-expr.md:38
msgid ""
"An example of a necessary use of parentheses is when calling a function "
"pointer that is a member of a struct:"
msgstr ""

#: src/expressions/grouped-expr.md:46 src/expressions/grouped-expr.md:51
msgid "\"The method f\""
msgstr ""

#: src/expressions/grouped-expr.md:49 src/expressions/grouped-expr.md:52
msgid "\"The field f\""
msgstr ""

#: src/expressions/array-expr.md:3
msgid "Array and array index expressions"
msgstr ""

#: src/expressions/array-expr.md:5
msgid "Array expressions"
msgstr ""

#: src/expressions/array-expr.md:9
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ArrayExpression_ :  \n"
"   `[` _ArrayElements_<sup>?</sup> `]`"
msgstr ""

#: src/expressions/array-expr.md:13
msgid ""
"_ArrayElements_ :  \n"
"      [_Expression_](../expressions.md) ( `,` [_Expression_](../"
"expressions.md) )<sup>\\*</sup> `,`<sup>?</sup>  \n"
"   | [_Expression_](../expressions.md) `;` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/array-expr.md:19
msgid ""
"_Array expressions_ construct [arrays](../types/array.md). Array expressions "
"come in two forms."
msgstr ""

#: src/expressions/array-expr.md:24
msgid "The first form lists out every value in the array."
msgstr ""

#: src/expressions/array-expr.md:28
msgid ""
"The syntax for this form is a comma-separated list of expressions of uniform "
"type enclosed in square brackets."
msgstr ""

#: src/expressions/array-expr.md:32
msgid ""
"This produces an array containing each of these values in the order they are "
"written."
msgstr ""

#: src/expressions/array-expr.md:36
msgid ""
"The syntax for the second form is two expressions separated by a semicolon "
"(`;`) enclosed in square brackets."
msgstr ""

#: src/expressions/array-expr.md:40
msgid "The expression before the `;` is called the _repeat operand_."
msgstr ""

#: src/expressions/array-expr.md:44
msgid "The expression after the `;` is called the _length operand_."
msgstr ""

#: src/expressions/array-expr.md:48
msgid ""
"It must have type `usize` and be a [constant expression](../"
"const_eval.md#constant-expressions), such as a [literal](../"
"tokens.md#literals) or a [constant item](../items/constant-items.md)."
msgstr ""

#: src/expressions/array-expr.md:52
msgid ""
"An array expression of this form creates an array with the length of the "
"value of the length operand with each element being a copy of the repeat "
"operand. That is, `[a; b]` creates an array containing `b` copies of the "
"value of `a`."
msgstr ""

#: src/expressions/array-expr.md:57
msgid ""
"If the length operand has a value greater than 1 then this requires that the "
"type of the repeat operand is [`Copy`](../special-types-and-traits.md#copy) "
"or that it must be a [path](path-expr.md) to a constant item."
msgstr ""

#: src/expressions/array-expr.md:61
msgid ""
"When the repeat operand is a constant item, it is evaluated the length "
"operand's value times."
msgstr ""

#: src/expressions/array-expr.md:65
msgid "If that value is `0`, then the constant item is not evaluated at all."
msgstr ""

#: src/expressions/array-expr.md:69
msgid ""
"For expressions that are not a constant item, it is evaluated exactly once, "
"and then the result is copied the length operand's value times."
msgstr ""

#: src/expressions/array-expr.md:73 src/expressions/array-expr.md:117
#: src/expressions/array-expr.md:120 src/expressions/array-expr.md:122
#: src/patterns.md:500 src/patterns.md:516 src/types/closure.md:225
msgid "\"a\""
msgstr ""

#: src/expressions/array-expr.md:73 src/expressions/array-expr.md:117
#: src/expressions/array-expr.md:120 src/expressions/array-expr.md:122
#: src/patterns.md:500 src/types/closure.md:225
msgid "\"b\""
msgstr ""

#: src/expressions/array-expr.md:73 src/patterns.md:500
msgid "\"c\""
msgstr ""

#: src/expressions/array-expr.md:73
msgid "\"d\""
msgstr ""

#: src/expressions/array-expr.md:74
msgid "// array with 128 zeros\n"
msgstr ""

#: src/expressions/array-expr.md:76
msgid "// 2D array\n"
msgstr ""

#: src/expressions/array-expr.md:83
msgid "Array and slice indexing expressions"
msgstr ""

#: src/expressions/array-expr.md:85
msgid ""
"**<sup>Syntax</sup>**  \n"
"_IndexExpression_ :  \n"
"   [_Expression_](../expressions.md) `[` [_Expression_](../expressions.md) "
"`]`"
msgstr ""

#: src/expressions/array-expr.md:91
msgid ""
"[Array](../types/array.md) and [slice](../types/slice.md)\\-typed values can "
"be indexed by writing a square-bracket-enclosed expression of type `usize` "
"(the index) after them. When the array is mutable, the resulting [memory "
"location](../expressions.md#place-expressions-and-value-expressions) can be "
"assigned to."
msgstr ""

#: src/expressions/array-expr.md:96
msgid ""
"For other types an index expression `a[b]` is equivalent to "
"`*std::ops::Index::index(&a, b)`, or `*std::ops::IndexMut::index_mut(&mut a, "
"b)` in a mutable place expression context. Just as with methods, Rust will "
"also insert dereference operations on `a` repeatedly to find an "
"implementation."
msgstr ""

#: src/expressions/array-expr.md:101
msgid "Indices are zero-based for arrays and slices."
msgstr ""

#: src/expressions/array-expr.md:105
msgid ""
"Array access is a [constant expression](../const_eval.md#constant-"
"expressions), so bounds can be checked at compile-time with a constant index "
"value. Otherwise a check will be performed at run-time that will put the "
"thread in a _panicked state_ if it fails."
msgstr ""

#: src/expressions/array-expr.md:109
msgid "// lint is deny by default.\n"
msgstr ""

#: src/expressions/array-expr.md:112
msgid "// Evaluates to 3\n"
msgstr ""

#: src/expressions/array-expr.md:115
msgid "// multidimensional array indexing\n"
msgstr ""

#: src/expressions/array-expr.md:117 src/expressions/array-expr.md:123
msgid "// warning: index out of bounds\n"
msgstr ""

#: src/expressions/array-expr.md:120
msgid "// panics\n"
msgstr ""

#: src/expressions/array-expr.md:128
msgid ""
"The array index expression can be implemented for types other than arrays "
"and slices by implementing the [Index](../../core/ops/index/"
"trait.Index.html) and [IndexMut](../../core/ops/index/trait.IndexMut.html) "
"traits."
msgstr ""

#: src/expressions/tuple-expr.md:3
msgid "Tuple and tuple indexing expressions"
msgstr ""

#: src/expressions/tuple-expr.md:5
msgid "Tuple expressions"
msgstr ""

#: src/expressions/tuple-expr.md:9
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TupleExpression_ :  \n"
"   `(` _TupleElements_<sup>?</sup> `)`"
msgstr ""

#: src/expressions/tuple-expr.md:13
msgid ""
"_TupleElements_ :  \n"
"   ( [_Expression_](../expressions.md) `,` )<sup>+</sup> [_Expression_](../"
"expressions.md)<sup>?</sup>"
msgstr ""

#: src/expressions/tuple-expr.md:18
msgid "A _tuple expression_ constructs [tuple values](../types/tuple.md)."
msgstr ""

#: src/expressions/tuple-expr.md:22
msgid ""
"The syntax for tuple expressions is a parenthesized, comma separated list of "
"expressions, called the _tuple initializer operands_."
msgstr ""

#: src/expressions/tuple-expr.md:26
msgid ""
"1-ary tuple expressions require a comma after their tuple initializer "
"operand to be disambiguated with a [parenthetical expression](grouped-"
"expr.md)."
msgstr ""

#: src/expressions/tuple-expr.md:30
msgid ""
"Tuple expressions are a [value expression](../expressions.md#place-"
"expressions-and-value-expressions) that evaluate into a newly constructed "
"value of a tuple type."
msgstr ""

#: src/expressions/tuple-expr.md:34
msgid ""
"The number of tuple initializer operands is the arity of the constructed "
"tuple."
msgstr ""

#: src/expressions/tuple-expr.md:38
msgid ""
"Tuple expressions without any tuple initializer operands produce the unit "
"tuple."
msgstr ""

#: src/expressions/tuple-expr.md:42
msgid ""
"For other tuple expressions, the first written tuple initializer operand "
"initializes the field `0` and subsequent operands initializes the next "
"highest field. For example, in the tuple expression `('a', 'b', 'c')`, `'a'` "
"initializes the value of the field `0`, `'b'` field `1`, and `'c'` field `2`."
msgstr ""

#: src/expressions/tuple-expr.md:45
msgid "Examples of tuple expressions and their types:"
msgstr ""

#: src/expressions/tuple-expr.md:47 src/glossary.md:81
msgid "Expression"
msgstr ""

#: src/expressions/tuple-expr.md:49 src/types/tuple.md:44
msgid "`()` (unit)"
msgstr ""

#: src/expressions/tuple-expr.md:50
msgid "`(0.0, 4.5)`"
msgstr ""

#: src/expressions/tuple-expr.md:50 src/types/tuple.md:46
msgid "`(f64, f64)`"
msgstr ""

#: src/expressions/tuple-expr.md:51
msgid "`(\"x\".to_string(), )`"
msgstr ""

#: src/expressions/tuple-expr.md:51
msgid "`(String, )`"
msgstr ""

#: src/expressions/tuple-expr.md:52
msgid "`(\"a\", 4usize, true)`"
msgstr ""

#: src/expressions/tuple-expr.md:52
msgid "`(&'static str, usize, bool)`"
msgstr ""

#: src/expressions/tuple-expr.md:56
msgid "Tuple indexing expressions"
msgstr ""

#: src/expressions/tuple-expr.md:60
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TupleIndexingExpression_ :  \n"
"   [_Expression_](../expressions.md) `.` [TUPLE_INDEX](../tokens.md#tuple-"
"index)"
msgstr ""

#: src/expressions/tuple-expr.md:66
msgid ""
"A _tuple indexing expression_ accesses fields of [tuples](../types/tuple.md) "
"and [tuple structs](../types/struct.md)."
msgstr ""

#: src/expressions/tuple-expr.md:68
msgid ""
"The syntax for a tuple index expression is an expression, called the _tuple "
"operand_, then a `.`, then finally a tuple index."
msgstr ""

#: src/expressions/tuple-expr.md:72
msgid ""
"The syntax for the _tuple index_ is a [decimal literal](../tokens.md#integer-"
"literals) with no leading zeros, underscores, or suffix. For example `0` and "
"`2` are valid tuple indices but not `01`, `0_`, nor `0i32`."
msgstr ""

#: src/expressions/tuple-expr.md:77
msgid ""
"The type of the tuple operand must be a [tuple type](../types/tuple.md) or a "
"[tuple struct](../types/struct.md)."
msgstr ""

#: src/expressions/tuple-expr.md:81
msgid ""
"The tuple index must be a name of a field of the type of the tuple operand."
msgstr ""

#: src/expressions/tuple-expr.md:85
msgid ""
"Evaluation of tuple index expressions has no side effects beyond evaluation "
"of its tuple operand. As a [place expression](../expressions.md#place-"
"expressions-and-value-expressions), it evaluates to the location of the "
"field of the tuple operand with the same name as the tuple index."
msgstr ""

#: src/expressions/tuple-expr.md:88
msgid "Examples of tuple indexing expressions:"
msgstr ""

#: src/expressions/tuple-expr.md:91
msgid "// Indexing a tuple\n"
msgstr ""

#: src/expressions/tuple-expr.md:92
msgid "\"a string\""
msgstr ""

#: src/expressions/tuple-expr.md:94
msgid "// Indexing a tuple struct\n"
msgstr ""

#: src/expressions/tuple-expr.md:102
msgid ""
"**Note**: Unlike field access expressions, tuple index expressions can be "
"the function operand of a [call expression](./call-expr.md) as it cannot be "
"confused with a method call since method names cannot be numbers."
msgstr ""

#: src/expressions/tuple-expr.md:104
msgid ""
"**Note**: Although arrays and slices also have elements, you must use an "
"[array or slice indexing expression](array-expr.md#array-and-slice-indexing-"
"expressions) or a [slice pattern](../patterns.md#slice-patterns) to access "
"their elements."
msgstr ""

#: src/expressions/struct-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_StructExpression_ :  \n"
"      _StructExprStruct_  \n"
"   | _StructExprTuple_  \n"
"   | _StructExprUnit_"
msgstr ""

#: src/expressions/struct-expr.md:13
msgid ""
"_StructExprStruct_ :  \n"
"   [_PathInExpression_](../paths.md#paths-in-expressions) `{` "
"(_StructExprFields_ | _StructBase_)<sup>?</sup> `}`"
msgstr ""

#: src/expressions/struct-expr.md:16
msgid ""
"_StructExprFields_ :  \n"
"   _StructExprField_ (`,` _StructExprField_)<sup>\\*</sup> (`,` _StructBase_ "
"| `,`<sup>?</sup>)"
msgstr ""

#: src/expressions/struct-expr.md:19
msgid ""
"_StructExprField_ :  \n"
"   [_OuterAttribute_](../attributes.md) <sup>\\*</sup>  \n"
"   (  \n"
"         [IDENTIFIER](../identifiers.md)  \n"
"      | ([IDENTIFIER](../identifiers.md) | [TUPLE_INDEX](../tokens.md#tuple-"
"index)) `:` [_Expression_](../expressions.md)  \n"
"   )"
msgstr ""

#: src/expressions/struct-expr.md:26
msgid ""
"_StructBase_ :  \n"
"   `..` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/struct-expr.md:29
msgid ""
"_StructExprTuple_ :  \n"
"   [_PathInExpression_](../paths.md#paths-in-expressions) `(`  \n"
"      ( [_Expression_](../expressions.md) (`,` [_Expression_](../"
"expressions.md))<sup>\\*</sup> `,`<sup>?</sup> )<sup>?</sup>  \n"
"   `)`"
msgstr ""

#: src/expressions/struct-expr.md:34
msgid ""
"_StructExprUnit_ : [_PathInExpression_](../paths.md#paths-in-expressions)"
msgstr ""

#: src/expressions/struct-expr.md:38
msgid ""
"A _struct expression_ creates a struct, enum, or union value. It consists of "
"a path to a [struct](../items/structs.md), [enum variant](../items/"
"enumerations.md), or [union](../items/unions.md) item followed by the values "
"for the fields of the item. There are three forms of struct expressions: "
"struct, tuple, and unit."
msgstr ""

#: src/expressions/struct-expr.md:42
msgid "The following are examples of struct expressions:"
msgstr ""

#: src/expressions/struct-expr.md:53
msgid "// Results in the same value as the above line\n"
msgstr ""

#: src/expressions/struct-expr.md:54
msgid "\"Joe\""
msgstr ""

#: src/expressions/struct-expr.md:60
msgid "Field struct expression"
msgstr ""

#: src/expressions/struct-expr.md:64
msgid ""
"A struct expression with fields enclosed in curly braces allows you to "
"specify the value for each individual field in any order. The field name is "
"separated from its value with a colon."
msgstr ""

#: src/expressions/struct-expr.md:69
msgid ""
"A value of a [union](../items/unions.md) type can only be created using this "
"syntax, and it must specify exactly one field."
msgstr ""

#: src/expressions/struct-expr.md:73
msgid "Functional update syntax"
msgstr ""

#: src/expressions/struct-expr.md:77
msgid ""
"A struct expression that constructs a value of a struct type can terminate "
"with the syntax `..` followed by an expression to denote a functional update."
msgstr ""

#: src/expressions/struct-expr.md:81
msgid ""
"The expression following `..` (the base) must have the same struct type as "
"the new struct type being formed."
msgstr ""

#: src/expressions/struct-expr.md:85
msgid ""
"The entire expression uses the given values for the fields that were "
"specified and moves or copies the remaining fields from the base expression."
msgstr ""

#: src/expressions/struct-expr.md:89
msgid ""
"As with all struct expressions, all of the fields of the struct must be "
"[visible](../visibility-and-privacy.md), even those not explicitly named."
msgstr ""

#: src/expressions/struct-expr.md:95
msgid "// OK, only base.x is accessed\n"
msgstr ""

#: src/expressions/struct-expr.md:101
msgid ""
"Struct expressions with curly braces can't be used directly in a [loop](loop-"
"expr.md) or [if](if-expr.md#if-expressions) expression's head, or in the "
"[scrutinee](../glossary.md#scrutinee) of an [if let](if-expr.md#if-let-"
"expressions) or [match](match-expr.md) expression. However, struct "
"expressions can be used in these situations if they are within another "
"expression, for example inside [parentheses](grouped-expr.md)."
msgstr ""

#: src/expressions/struct-expr.md:106
msgid ""
"The field names can be decimal integer values to specify indices for "
"constructing tuple structs. This can be used with base structs to fill out "
"the remaining indices not specified:"
msgstr ""

#: src/expressions/struct-expr.md:111 src/expressions/struct-expr.md:142
msgid "// Typical way of creating a tuple struct.\n"
msgstr ""

#: src/expressions/struct-expr.md:112
msgid "// Specifying fields by index.\n"
msgstr ""

#: src/expressions/struct-expr.md:113
msgid "// Fill out all other fields using a base struct.\n"
msgstr ""

#: src/expressions/struct-expr.md:118
msgid "Struct field init shorthand"
msgstr ""

#: src/expressions/struct-expr.md:120
msgid ""
"When initializing a data structure (struct, enum, union) with named (but not "
"numbered) fields, it is allowed to write `fieldname` as a shorthand for "
"`fieldname: fieldname`. This allows a compact syntax with less duplication. "
"For example:"
msgstr ""

#: src/expressions/struct-expr.md:135
msgid "Tuple struct expression"
msgstr ""

#: src/expressions/struct-expr.md:137
msgid ""
"A struct expression with fields enclosed in parentheses constructs a tuple "
"struct. Though it is listed here as a specific expression for completeness, "
"it is equivalent to a [call expression](call-expr.md) to the tuple struct's "
"constructor. For example:"
msgstr ""

#: src/expressions/struct-expr.md:143
msgid "// `c` is a function that takes 3 arguments.\n"
msgstr ""

#: src/expressions/struct-expr.md:144
msgid "// Creates a `Position` value.\n"
msgstr ""

#: src/expressions/struct-expr.md:149
msgid "Unit struct expression"
msgstr ""

#: src/expressions/struct-expr.md:151
msgid ""
"A unit struct expression is just the path to a unit struct item. This refers "
"to the unit struct's implicit constant of its value. The unit struct value "
"can also be constructed with a fieldless struct expression. For example:"
msgstr ""

#: src/expressions/struct-expr.md:157
msgid "// Gamma unit value.\n"
msgstr ""

#: src/expressions/struct-expr.md:158
msgid "// Exact same value as `a`.\n"
msgstr ""

#: src/expressions/call-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_CallExpression_ :  \n"
"   [_Expression_](../expressions.md) `(` _CallParams_<sup>?</sup> `)`"
msgstr ""

#: src/expressions/call-expr.md:11
msgid ""
"_CallParams_ :  \n"
"   [_Expression_](../expressions.md) ( `,` [_Expression_](../"
"expressions.md) )<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/expressions/call-expr.md:16
msgid ""
"A _call expression_ calls a function. The syntax of a call expression is an "
"expression, called the _function operand_, followed by a parenthesized comma-"
"separated list of expression, called the _argument operands_."
msgstr ""

#: src/expressions/call-expr.md:21
msgid "If the function eventually returns, then the expression completes."
msgstr ""

#: src/expressions/call-expr.md:25
msgid ""
"For [non-function types](../types/function-item.md), the expression `f(...)` "
"uses the method on one of the following traits based on the function operand:"
msgstr ""

#: src/expressions/call-expr.md:27
msgid ""
"[`Fn`](../../core/ops/function/trait.Fn.html) or [`AsyncFn`](../../core/ops/"
"async_function/trait.AsyncFn.html) --- shared reference."
msgstr ""

#: src/expressions/call-expr.md:28
msgid ""
"[`FnMut`](../../core/ops/function/trait.FnMut.html) or [`AsyncFnMut`](../../"
"core/ops/async_function/trait.AsyncFnMut.html) --- mutable reference."
msgstr ""

#: src/expressions/call-expr.md:29
msgid ""
"[`FnOnce`](../../core/ops/function/trait.FnOnce.html) or [`AsyncFnOnce`]"
"(../../core/ops/async_function/trait.AsyncFnOnce.html) --- value."
msgstr ""

#: src/expressions/call-expr.md:33
msgid ""
"An automatic borrow will be taken if needed. The function operand will also "
"be [automatically dereferenced](field-expr.md#automatic-dereferencing) as "
"required."
msgstr ""

#: src/expressions/call-expr.md:36
msgid "Some examples of call expressions:"
msgstr ""

#: src/expressions/call-expr.md:46
msgid "Disambiguating Function Calls"
msgstr ""

#: src/expressions/call-expr.md:50
msgid ""
"All function calls are sugar for a more explicit [fully-qualified syntax](../"
"paths.md#qualified-paths)."
msgstr ""

#: src/expressions/call-expr.md:54
msgid ""
"Function calls may need to be fully qualified, depending on the ambiguity of "
"a call in light of in-scope items."
msgstr ""

#: src/expressions/call-expr.md:56
msgid ""
"**Note**: In the past, the terms \"Unambiguous Function Call Syntax\", "
"\"Universal Function Call Syntax\", or \"UFCS\", have been used in "
"documentation, issues, RFCs, and other community writings. However, these "
"terms lack descriptive power and potentially confuse the issue at hand. We "
"mention them here for searchability's sake."
msgstr ""

#: src/expressions/call-expr.md:62
msgid ""
"Several situations often occur which result in ambiguities about the "
"receiver or referent of method or associated function calls. These "
"situations may include:"
msgstr ""

#: src/expressions/call-expr.md:65
msgid ""
"Multiple in-scope traits define methods with the same name for the same types"
msgstr ""

#: src/expressions/call-expr.md:66
msgid ""
"Auto-`deref` is undesirable; for example, distinguishing between methods on "
"a smart pointer itself and the pointer's referent"
msgstr ""

#: src/expressions/call-expr.md:67
msgid ""
"Methods which take no arguments, like [`default()`](../../core/default/"
"trait.Default.html#tymethod.default), and return properties of a type, like "
"[`size_of()`](../../core/mem/fn.size_of.html)"
msgstr ""

#: src/expressions/call-expr.md:71
msgid ""
"To resolve the ambiguity, the programmer may refer to their desired method "
"or function using more specific paths, types, or traits."
msgstr ""

#: src/expressions/call-expr.md:73
msgid "For example,"
msgstr ""

#: src/expressions/call-expr.md:101
msgid ""
"// we can do this because we only have one item called `print` for `Foo`s\n"
msgstr ""

#: src/expressions/call-expr.md:103
msgid "// more explicit, and, in the case of `Foo`, not necessary\n"
msgstr ""

#: src/expressions/call-expr.md:105
msgid "// if you're not into the whole brevity thing\n"
msgstr ""

#: src/expressions/call-expr.md:108
msgid ""
"// b.print(); // Error: multiple 'print' found\n"
"    // Bar::print(&b); // Still an error: multiple `print` found\n"
msgstr ""

#: src/expressions/call-expr.md:111
msgid "// necessary because of in-scope items defining `print`\n"
msgstr ""

#: src/expressions/call-expr.md:116
msgid ""
"Refer to [RFC 132](https://github.com/rust-lang/rfcs/blob/master/text/0132-"
"ufcs.md) for further details and motivations."
msgstr ""

#: src/expressions/method-call-expr.md:3
msgid "Method-call expressions"
msgstr ""

#: src/expressions/method-call-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_MethodCallExpression_ :  \n"
"   [_Expression_](../expressions.md) `.` [_PathExprSegment_](../"
"paths.md#paths-in-expressions) `(`[_CallParams_](call-expr.md)<sup>?</sup> "
"`)`"
msgstr ""

#: src/expressions/method-call-expr.md:13
msgid ""
"A _method call_ consists of an expression (the _receiver_) followed by a "
"single dot, an expression path segment, and a parenthesized expression-list."
msgstr ""

#: src/expressions/method-call-expr.md:17
msgid ""
"Method calls are resolved to associated [methods](../items/associated-"
"items.md#methods) on specific traits, either statically dispatching to a "
"method if the exact `self`\\-type of the left-hand-side is known, or "
"dynamically dispatching if the left-hand-side expression is an indirect "
"[trait object](../types/trait-object.md)."
msgstr ""

#: src/expressions/method-call-expr.md:20
msgid "\"3.14\""
msgstr ""

#: src/expressions/method-call-expr.md:27
msgid ""
"When looking up a method call, the receiver may be automatically "
"dereferenced or borrowed in order to call a method. This requires a more "
"complex lookup process than for other functions, since there may be a number "
"of possible methods to call. The following procedure is used:"
msgstr ""

#: src/expressions/method-call-expr.md:33
msgid ""
"The first step is to build a list of candidate receiver types. Obtain these "
"by repeatedly [dereferencing](operator-expr.md#the-dereference-operator) the "
"receiver expression's type, adding each type encountered to the list, then "
"finally attempting an [unsized coercion](../type-coercions.md#unsized-"
"coercions) at the end, and adding the result type if that is successful."
msgstr ""

#: src/expressions/method-call-expr.md:38
msgid ""
"Then, for each candidate `T`, add `&T` and `&mut T` to the list immediately "
"after `T`."
msgstr ""

#: src/expressions/method-call-expr.md:40
msgid ""
"For instance, if the receiver has type `Box<[i32;2]>`, then the candidate "
"types will be `Box<[i32;2]>`, `&Box<[i32;2]>`, `&mut Box<[i32;2]>`, `[i32; "
"2]` (by dereferencing), `&[i32; 2]`, `&mut [i32; 2]`, `[i32]` (by unsized "
"coercion), `&[i32]`, and finally `&mut [i32]`."
msgstr ""

#: src/expressions/method-call-expr.md:44
msgid ""
"Then, for each candidate type `T`, search for a [visible](../visibility-and-"
"privacy.md) method with a receiver of that type in the following places:"
msgstr ""

#: src/expressions/method-call-expr.md:46
msgid "`T`'s inherent methods (methods implemented directly on `T`)."
msgstr ""

#: src/expressions/method-call-expr.md:47
msgid ""
"Any of the methods provided by a [visible](../visibility-and-privacy.md) "
"trait implemented by `T`. If `T` is a type parameter, methods provided by "
"trait bounds on `T` are looked up first. Then all remaining methods in scope "
"are looked up."
msgstr ""

#: src/expressions/method-call-expr.md:51
msgid ""
"Note: the lookup is done for each type in order, which can occasionally lead "
"to surprising results. The below code will print \"In trait impl!\", because "
"`&self` methods are looked up first, the trait method is found before the "
"struct's `&mut self` method is found."
msgstr ""

#: src/expressions/method-call-expr.md:63
msgid "\"In struct impl!\""
msgstr ""

#: src/expressions/method-call-expr.md:69
msgid "\"In trait impl!\""
msgstr ""

#: src/expressions/method-call-expr.md:81
msgid ""
"If this results in multiple possible candidates, then it is an error, and "
"the receiver must be [converted](call-expr.md#disambiguating-function-calls) "
"to an appropriate receiver type to make the method call."
msgstr ""

#: src/expressions/method-call-expr.md:85
msgid ""
"This process does not take into account the mutability or lifetime of the "
"receiver, or whether a method is `unsafe`. Once a method is looked up, if it "
"can't be called for one (or more) of those reasons, the result is a compiler "
"error."
msgstr ""

#: src/expressions/method-call-expr.md:90
msgid ""
"If a step is reached where there is more than one possible method, such as "
"where generic methods or traits are considered the same, then it is a "
"compiler error. These cases require a [disambiguating function call syntax]"
"(call-expr.md#disambiguating-function-calls) for method and function "
"invocation."
msgstr ""

#: src/expressions/method-call-expr.md:93
msgid ""
"**Edition differences**: Before the 2021 edition, during the search for "
"visible methods, if the candidate receiver type is an [array type](../types/"
"array.md), methods provided by the standard library [`IntoIterator`](../../"
"core/iter/traits/collect/trait.IntoIterator.html) trait are ignored."
msgstr ""

#: src/expressions/method-call-expr.md:95
msgid ""
"The edition used for this purpose is determined by the token representing "
"the method name."
msgstr ""

#: src/expressions/method-call-expr.md:97
msgid "This special case may be removed in the future."
msgstr ""

#: src/expressions/method-call-expr.md:101
msgid ""
"_**Warning:**_ For [trait objects](../types/trait-object.md), if there is an "
"inherent method of the same name as a trait method, it will give a compiler "
"error when trying to call the method in a method call expression. Instead, "
"you can call the method using [disambiguating function call syntax](call-"
"expr.md#disambiguating-function-calls), in which case it calls the trait "
"method, not the inherent method. There is no way to call the inherent "
"method. Just don't define inherent methods on trait objects with the same "
"name as a trait method and you'll be fine."
msgstr ""

#: src/expressions/field-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_FieldExpression_ :  \n"
"   [_Expression_](../expressions.md) `.` [IDENTIFIER](../identifiers.md)"
msgstr ""

#: src/expressions/field-expr.md:13
msgid ""
"A _field expression_ is a [place expression](../expressions.md#place-"
"expressions-and-value-expressions) that evaluates to the location of a field "
"of a [struct](../items/structs.md) or [union](../items/unions.md)."
msgstr ""

#: src/expressions/field-expr.md:17
msgid ""
"When the operand is [mutable](../expressions.md#mutability), the field "
"expression is also mutable."
msgstr ""

#: src/expressions/field-expr.md:21
msgid ""
"The syntax for a field expression is an expression, called the _container "
"operand_, then a `.`, and finally an [identifier](../identifiers.md)."
msgstr ""

#: src/expressions/field-expr.md:25
msgid ""
"Field expressions cannot be followed by a parenthetical comma-separated list "
"of expressions, as that is instead parsed as a [method call expression]"
"(method-call-expr.md). That is, they cannot be the function operand of a "
"[call expression](call-expr.md)."
msgstr ""

#: src/expressions/field-expr.md:28
msgid ""
"**Note**: Wrap the field expression in a [parenthesized expression](grouped-"
"expr.md) to use it in a call expression."
msgstr ""

#: src/expressions/field-expr.md:34
msgid "// Invalid: Parsed as calling the method \"callable\"\n"
msgstr ""

#: src/expressions/field-expr.md:35
msgid "// holds_callable.callable();\n"
msgstr ""

#: src/expressions/field-expr.md:37
msgid "// Valid\n"
msgstr ""

#: src/expressions/field-expr.md:41 src/expressions/range-expr.md:47
#: src/patterns.md:200 src/patterns.md:444 src/patterns.md:497
#: src/patterns.md:651 src/types/array.md:20 src/types/slice.md:25
#: src/type-coercions.md:311 src/lifetime-elision.md:48 src/glossary.md:263
msgid "Examples:"
msgstr ""

#: src/expressions/field-expr.md:48
msgid "// Call expression containing a field expression\n"
msgstr ""

#: src/expressions/field-expr.md:53
msgid "Automatic dereferencing"
msgstr ""

#: src/expressions/field-expr.md:55
msgid ""
"If the type of the container operand implements [`Deref`](../special-types-"
"and-traits.md#deref-and-derefmut) or [`DerefMut`](../special-types-and-"
"traits.md#deref-and-derefmut) depending on whether the operand is [mutable]"
"(../expressions.md#mutability), it is _automatically dereferenced_ as many "
"times as necessary to make the field access possible. This process is also "
"called _autoderef_ for short."
msgstr ""

#: src/expressions/field-expr.md:60
msgid "Borrowing"
msgstr ""

#: src/expressions/field-expr.md:62
msgid ""
"The fields of a struct or a reference to a struct are treated as separate "
"entities when borrowing. If the struct does not implement [`Drop`](../"
"special-types-and-traits.md#drop) and is stored in a local variable, this "
"also applies to moving out of each of its fields. This also does not apply "
"if automatic dereferencing is done though user-defined types other than "
"[`Box`](../special-types-and-traits.md#boxt)."
msgstr ""

#: src/expressions/field-expr.md:70
msgid "\"f1\""
msgstr ""

#: src/expressions/field-expr.md:71
msgid "\"f2\""
msgstr ""

#: src/expressions/field-expr.md:72
msgid "\"f3\""
msgstr ""

#: src/expressions/field-expr.md:74
msgid "// x.f1 borrowed mutably\n"
msgstr ""

#: src/expressions/field-expr.md:75
msgid "// x.f2 borrowed immutably\n"
msgstr ""

#: src/expressions/field-expr.md:76
msgid "// Can borrow again\n"
msgstr ""

#: src/expressions/field-expr.md:77
msgid "// Move out of x.f3\n"
msgstr ""

#: src/expressions/closure-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ClosureExpression_ :  \n"
"   `async`[^cl-async-edition]<sup>?</sup>  \n"
"   `move`<sup>?</sup>  \n"
"   ( `||` | `|` _ClosureParameters_<sup>?</sup> `|` )  \n"
"   ([_Expression_](../expressions.md) | `->` [_TypeNoBounds_](../"
"types.md#type-expressions) [_BlockExpression_](block-expr.md))"
msgstr ""

#: src/expressions/closure-expr.md:14
msgid ""
"_ClosureParameters_ :  \n"
"   _ClosureParam_ (`,` _ClosureParam_)<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/expressions/closure-expr.md:17
msgid ""
"_ClosureParam_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> [_PatternNoTopAlt_](../"
"patterns.md) ( `:` [_Type_](../types.md#type-expressions) )<sup>?</sup>"
msgstr ""

#: src/expressions/closure-expr.md:24
msgid ""
"A _closure expression_, also known as a lambda expression or a lambda, "
"defines a [closure type](../types/closure.md) and evaluates to a value of "
"that type. The syntax for a closure expression is an optional `async` "
"keyword, an optional `move` keyword, then a pipe-symbol-delimited (`|`) "
"comma-separated list of [patterns](../patterns.md), called the _closure "
"parameters_ each optionally followed by a `:` and a type, then an optional `-"
">` and type, called the _return type_, and then an expression, called the "
"_closure body operand_."
msgstr ""

#: src/expressions/closure-expr.md:29
msgid ""
"The optional type after each pattern is a type annotation for the pattern."
msgstr ""

#: src/expressions/closure-expr.md:33
msgid ""
"If there is a return type, the closure body must be a [block](block-expr.md)."
msgstr ""

#: src/expressions/closure-expr.md:37
msgid ""
"A closure expression denotes a function that maps a list of parameters onto "
"the expression that follows the parameters. Just like a [`let` binding](../"
"statements.md#let-statements), the closure parameters are irrefutable "
"[patterns](../patterns.md), whose type annotation is optional and will be "
"inferred from context if not given."
msgstr ""

#: src/expressions/closure-expr.md:42
msgid "Each closure expression has a unique, anonymous type."
msgstr ""

#: src/expressions/closure-expr.md:46
msgid ""
"Significantly, closure expressions _capture their environment_, which "
"regular [function definitions](../items/functions.md) do not."
msgstr ""

#: src/expressions/closure-expr.md:50
msgid ""
"Without the `move` keyword, the closure expression [infers how it captures "
"each variable from its environment](../types/closure.md#capture-modes), "
"preferring to capture by shared reference, effectively borrowing all outer "
"variables mentioned inside the closure's body."
msgstr ""

#: src/expressions/closure-expr.md:54
msgid ""
"If needed the compiler will infer that instead mutable references should be "
"taken, or that the values should be moved or copied (depending on their "
"type) from the environment."
msgstr ""

#: src/expressions/closure-expr.md:58
msgid ""
"A closure can be forced to capture its environment by copying or moving "
"values by prefixing it with the `move` keyword. This is often used to ensure "
"that the closure's lifetime is `'static`."
msgstr ""

#: src/expressions/closure-expr.md:63
msgid "Closure trait implementations"
msgstr ""

#: src/expressions/closure-expr.md:65
msgid ""
"Which traits the closure type implement depends on how variables are "
"captured, the types of the captured variables, and the presence of `async`. "
"See the [call traits and coercions](../types/closure.md#call-traits-and-"
"coercions) chapter for how and when a closure implements `Fn`, `FnMut`, and "
"`FnOnce`. The closure type implements [`Send`](../special-types-and-"
"traits.md#send) and [`Sync`](../special-types-and-traits.md#sync) if the "
"type of every captured variable also implements the trait."
msgstr ""

#: src/expressions/closure-expr.md:71
msgid "Async closures"
msgstr ""

#: src/expressions/closure-expr.md:75
msgid ""
"Closures marked with the `async` keyword indicate that they are asynchronous "
"in an analogous way to an [async function](../items/functions.md#r-"
"items.fn.async)."
msgstr ""

#: src/expressions/closure-expr.md:79
msgid ""
"Calling the async closure does not perform any work, but instead evaluates "
"to a value that implements [`Future`](../../core/future/future/"
"trait.Future.html) that corresponds to the computation of the body of the "
"closure."
msgstr ""

#: src/expressions/closure-expr.md:90
msgid "\"done with {i}.\""
msgstr ""

#: src/expressions/closure-expr.md:97
msgid ""
"**Edition differences**: Async closures are only available beginning with "
"Rust 2018."
msgstr ""

#: src/expressions/closure-expr.md:101
msgid ""
"In this example, we define a function `ten_times` that takes a higher-order "
"function argument, and we then call it with a closure expression as an "
"argument, followed by a closure expression that moves values from its "
"environment."
msgstr ""

#: src/expressions/closure-expr.md:110 src/expressions/closure-expr.md:112
msgid "\"hello, {}\""
msgstr ""

#: src/expressions/closure-expr.md:110
msgid "// With type annotations\n"
msgstr ""

#: src/expressions/closure-expr.md:114
msgid "\"konnichiwa\""
msgstr ""

#: src/expressions/closure-expr.md:115
msgid "\"{}, {}\""
msgstr ""

#: src/expressions/closure-expr.md:118
msgid "Attributes on closure parameters"
msgstr ""

#: src/expressions/closure-expr.md:122
msgid ""
"Attributes on closure parameters follow the same rules and restrictions as "
"[regular function parameters](../items/functions.md#attributes-on-function-"
"parameters)."
msgstr ""

#: src/expressions/loop-expr.md:3
msgid "Loops and other breakable expressions"
msgstr ""

#: src/expressions/loop-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_LoopExpression_ :  \n"
"   [_LoopLabel_](#loop-labels)<sup>?</sup> (  \n"
"         [_InfiniteLoopExpression_](#infinite-loops)  \n"
"      | [_PredicateLoopExpression_](#predicate-loops)  \n"
"      | [_PredicatePatternLoopExpression_](#predicate-pattern-loops)  \n"
"      | [_IteratorLoopExpression_](#iterator-loops)  \n"
"      | [_LabelBlockExpression_](#labelled-block-expressions)  \n"
"   )"
msgstr ""

#: src/expressions/loop-expr.md:26
msgid "Rust supports five loop expressions:"
msgstr ""

#: src/expressions/loop-expr.md:28
msgid "A [`loop` expression](#infinite-loops) denotes an infinite loop."
msgstr ""

#: src/expressions/loop-expr.md:29
msgid ""
"A [`while` expression](#predicate-loops) loops until a predicate is false."
msgstr ""

#: src/expressions/loop-expr.md:30
msgid "A [`while let` expression](#predicate-pattern-loops) tests a pattern."
msgstr ""

#: src/expressions/loop-expr.md:31
msgid ""
"A [`for` expression](#iterator-loops) extracts values from an iterator, "
"looping until the iterator is empty."
msgstr ""

#: src/expressions/loop-expr.md:32
msgid ""
"A [labelled block expression](#labelled-block-expressions) runs a loop "
"exactly once, but allows exiting the loop early with `break`."
msgstr ""

#: src/expressions/loop-expr.md:36
msgid ""
"All five types of loop support [`break` expressions](#break-expressions), "
"and [labels](#loop-labels)."
msgstr ""

#: src/expressions/loop-expr.md:40
msgid ""
"All except labelled block expressions support [`continue` expressions]"
"(#continue-expressions)."
msgstr ""

#: src/expressions/loop-expr.md:44
msgid ""
"Only `loop` and labelled block expressions support [evaluation to non-"
"trivial values](#break-and-loop-values)."
msgstr ""

#: src/expressions/loop-expr.md:48
msgid "Infinite loops"
msgstr ""

#: src/expressions/loop-expr.md:52
msgid ""
"**<sup>Syntax</sup>**  \n"
"_InfiniteLoopExpression_ :  \n"
"   `loop` [_BlockExpression_](block-expr.md)"
msgstr ""

#: src/expressions/loop-expr.md:58
msgid ""
"A `loop` expression repeats execution of its body continuously: `loop "
"{ println!(\"I live.\"); }`."
msgstr ""

#: src/expressions/loop-expr.md:63
msgid ""
"A `loop` expression without an associated `break` expression is diverging "
"and has type [`!`](../types/never.md)."
msgstr ""

#: src/expressions/loop-expr.md:67
msgid ""
"A `loop` expression containing associated [`break` expression(s)](#break-"
"expressions) may terminate, and must have type compatible with the value of "
"the `break` expression(s)."
msgstr ""

#: src/expressions/loop-expr.md:71
msgid "Predicate loops"
msgstr ""

#: src/expressions/loop-expr.md:75
msgid ""
"**<sup>Syntax</sup>**  \n"
"_PredicateLoopExpression_ :  \n"
"   `while` [_Expression_](../expressions.md)<sub>_except struct expression_</"
"sub> [_BlockExpression_](block-expr.md)"
msgstr ""

#: src/expressions/loop-expr.md:81
msgid ""
"A `while` loop begins by evaluating the [boolean](../types/boolean.md) loop "
"conditional operand."
msgstr ""

#: src/expressions/loop-expr.md:85
msgid ""
"If the loop conditional operand evaluates to `true`, the loop body block "
"executes, then control returns to the loop conditional operand. If the loop "
"conditional expression evaluates to `false`, the `while` expression "
"completes."
msgstr ""

#: src/expressions/loop-expr.md:88
msgid "An example:"
msgstr ""

#: src/expressions/loop-expr.md:101
msgid "Predicate pattern loops"
msgstr ""

#: src/expressions/loop-expr.md:105
msgid ""
"**<sup>Syntax</sup>**  \n"
"[_PredicatePatternLoopExpression_](#predicate-pattern-loops) :  \n"
"   `while` `let` [_Pattern_](../patterns.md) `=` [_Scrutinee_](match-"
"expr.md)<sub>_except lazy boolean operator expression_</sub> "
"[_BlockExpression_](block-expr.md)"
msgstr ""

#: src/expressions/loop-expr.md:112
msgid ""
"A `while let` loop is semantically similar to a `while` loop but in place of "
"a condition expression it expects the keyword `let` followed by a pattern, "
"an `=`, a [scrutinee](../glossary.md#scrutinee) expression and a block "
"expression."
msgstr ""

#: src/expressions/loop-expr.md:116
msgid ""
"If the value of the scrutinee matches the pattern, the loop body block "
"executes then control returns to the pattern matching statement. Otherwise, "
"the while expression completes."
msgstr ""

#: src/expressions/loop-expr.md:123
msgid "\"y = {}\""
msgstr ""

#: src/expressions/loop-expr.md:127 src/expressions/if-expr.md:112
msgid "\"Irrefutable patterns are always true\""
msgstr ""

#: src/expressions/loop-expr.md:134
msgid ""
"A `while let` loop is equivalent to a `loop` expression containing a "
"[`match` expression](match-expr.md) as follows."
msgstr ""

#: src/expressions/loop-expr.md:139 src/expressions/loop-expr.md:149
#: src/expressions/loop-expr.md:219 src/expressions/loop-expr.md:236
msgid "/* loop body */"
msgstr ""

#: src/expressions/loop-expr.md:157 src/expressions/if-expr.md:159
msgid ""
"Multiple patterns may be specified with the `|` operator. This has the same "
"semantics as with `|` in `match` expressions:"
msgstr ""

#: src/expressions/loop-expr.md:163
msgid "// Prints 2, 2, then 1\n"
msgstr ""

#: src/expressions/loop-expr.md:170
msgid ""
"As is the case in [`if let` expressions](if-expr.md#if-let-expressions), the "
"scrutinee cannot be a [lazy boolean operator expression](operator-"
"expr.md#lazy-boolean-operators)."
msgstr ""

#: src/expressions/loop-expr.md:174
msgid "Iterator loops"
msgstr ""

#: src/expressions/loop-expr.md:178
msgid ""
"**<sup>Syntax</sup>**  \n"
"_IteratorLoopExpression_ :  \n"
"   `for` [_Pattern_](../patterns.md) `in` [_Expression_](../"
"expressions.md)<sub>_except struct expression_</sub> [_BlockExpression_]"
"(block-expr.md)"
msgstr ""

#: src/expressions/loop-expr.md:185
msgid ""
"A `for` expression is a syntactic construct for looping over elements "
"provided by an implementation of `std::iter::IntoIterator`."
msgstr ""

#: src/expressions/loop-expr.md:189
msgid ""
"If the iterator yields a value, that value is matched against the "
"irrefutable pattern, the body of the loop is executed, and then control "
"returns to the head of the `for` loop. If the iterator is empty, the `for` "
"expression completes."
msgstr ""

#: src/expressions/loop-expr.md:192
msgid "An example of a `for` loop over the contents of an array:"
msgstr ""

#: src/expressions/loop-expr.md:195
msgid "\"apples\""
msgstr ""

#: src/expressions/loop-expr.md:195
msgid "\"cake\""
msgstr ""

#: src/expressions/loop-expr.md:195
msgid "\"coffee\""
msgstr ""

#: src/expressions/loop-expr.md:198
msgid "\"I like {}.\""
msgstr ""

#: src/expressions/loop-expr.md:202
msgid "An example of a for loop over a series of integers:"
msgstr ""

#: src/expressions/loop-expr.md:214
msgid ""
"A `for` loop is equivalent to a `loop` expression containing a [`match` "
"expression](match-expr.md) as follows:"
msgstr ""

#: src/expressions/loop-expr.md:245
msgid ""
"`IntoIterator`, `Iterator`, and `Option` are always the standard library "
"items here, not whatever those names resolve to in the current scope."
msgstr ""

#: src/expressions/loop-expr.md:247
msgid ""
"The variable names `next`, `iter`, and `val` are for exposition only, they "
"do not actually have names the user can type."
msgstr ""

#: src/expressions/loop-expr.md:249
msgid ""
"**Note**: that the outer `match` is used to ensure that any [temporary "
"values](../expressions.md#temporaries) in `iter_expr` don't get dropped "
"before the loop is finished. `next` is declared before being assigned "
"because it results in types being inferred correctly more often."
msgstr ""

#: src/expressions/loop-expr.md:254
msgid "Loop labels"
msgstr ""

#: src/expressions/loop-expr.md:258
msgid ""
"**<sup>Syntax</sup>**  \n"
"_LoopLabel_ :  \n"
"   [LIFETIME_OR_LABEL](../tokens.md#lifetimes-and-loop-labels) `:`"
msgstr ""

#: src/expressions/loop-expr.md:264
msgid ""
"A loop expression may optionally have a _label_. The label is written as a "
"lifetime preceding the loop expression, as in `'foo: loop { break 'foo; }`, "
"`'bar: while false {}`, `'humbug: for _ in 0..0 {}`."
msgstr ""

#: src/expressions/loop-expr.md:268
msgid ""
"If a label is present, then labeled `break` and `continue` expressions "
"nested within this loop may exit out of this loop or return control to its "
"head. See [break expressions](#break-expressions) and [continue expressions]"
"(#continue-expressions)."
msgstr ""

#: src/expressions/loop-expr.md:273
msgid ""
"Labels follow the hygiene and shadowing rules of local variables. For "
"example, this code will print \"outer loop\":"
msgstr ""

#: src/expressions/loop-expr.md:280
msgid "\"outer loop\""
msgstr ""

#: src/expressions/loop-expr.md:285
msgid "`'_` is not a valid loop label."
msgstr ""

#: src/expressions/loop-expr.md:289
msgid "`break` expressions"
msgstr ""

#: src/expressions/loop-expr.md:293
msgid ""
"**<sup>Syntax</sup>**  \n"
"_BreakExpression_ :  \n"
"   `break` [LIFETIME_OR_LABEL](../tokens.md#lifetimes-and-loop-labels)<sup>?"
"</sup> [_Expression_](../expressions.md)<sup>?</sup>"
msgstr ""

#: src/expressions/loop-expr.md:299
msgid ""
"When `break` is encountered, execution of the associated loop body is "
"immediately terminated, for example:"
msgstr ""

#: src/expressions/loop-expr.md:314
msgid ""
"A `break` expression is normally associated with the innermost `loop`, `for` "
"or `while` loop enclosing the `break` expression, but a [label](#loop-"
"labels) can be used to specify which enclosing loop is affected. Example:"
msgstr ""

#: src/expressions/loop-expr.md:328
msgid ""
"A `break` expression is only permitted in the body of a loop, and has one of "
"the forms `break`, `break 'label` or ([see below](#break-and-loop-values)) "
"`break EXPR` or `break 'label EXPR`."
msgstr ""

#: src/expressions/loop-expr.md:334
msgid ""
"**<sup>Syntax</sup>**  \n"
"_LabelBlockExpression_ :  \n"
"   [_BlockExpression_](block-expr.md)"
msgstr ""

#: src/expressions/loop-expr.md:340
msgid ""
"Labelled block expressions are exactly like block expressions, except that "
"they allow using `break` expressions within the block."
msgstr ""

#: src/expressions/loop-expr.md:344
msgid ""
"Unlike loops, `break` expressions within a labelled block expression _must_ "
"have a label (i.e. the label is not optional)."
msgstr ""

#: src/expressions/loop-expr.md:348
msgid "Similarly, labelled block expressions _must_ begin with a label."
msgstr ""

#: src/expressions/loop-expr.md:371
msgid "`continue` expressions"
msgstr ""

#: src/expressions/loop-expr.md:375
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ContinueExpression_ :  \n"
"   `continue` [LIFETIME_OR_LABEL](../tokens.md#lifetimes-and-loop-"
"labels)<sup>?</sup>"
msgstr ""

#: src/expressions/loop-expr.md:381
msgid ""
"When `continue` is encountered, the current iteration of the associated loop "
"body is immediately terminated, returning control to the loop _head_."
msgstr ""

#: src/expressions/loop-expr.md:385
msgid ""
"In the case of a `while` loop, the head is the conditional expression "
"controlling the loop."
msgstr ""

#: src/expressions/loop-expr.md:389
msgid ""
"In the case of a `for` loop, the head is the call-expression controlling the "
"loop."
msgstr ""

#: src/expressions/loop-expr.md:393
msgid ""
"Like `break`, `continue` is normally associated with the innermost enclosing "
"loop, but `continue 'label` may be used to specify the loop affected."
msgstr ""

#: src/expressions/loop-expr.md:397
msgid "A `continue` expression is only permitted in the body of a loop."
msgstr ""

#: src/expressions/loop-expr.md:401
msgid "`break` and loop values"
msgstr ""

#: src/expressions/loop-expr.md:405
msgid ""
"When associated with a `loop`, a break expression may be used to return a "
"value from that loop, via one of the forms `break EXPR` or `break 'label "
"EXPR`, where `EXPR` is an expression whose result is returned from the "
"`loop`. For example:"
msgstr ""

#: src/expressions/loop-expr.md:417
msgid "// first number in Fibonacci sequence over 10:\n"
msgstr ""

#: src/expressions/loop-expr.md:424
msgid ""
"In the case a `loop` has an associated `break`, it is not considered "
"diverging, and the `loop` must have a type compatible with each `break` "
"expression. `break` without an expression is considered identical to `break` "
"with expression `()`."
msgstr ""

#: src/expressions/range-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_RangeExpression_ :  \n"
"      _RangeExpr_  \n"
"   | _RangeFromExpr_  \n"
"   | _RangeToExpr_  \n"
"   | _RangeFullExpr_  \n"
"   | _RangeInclusiveExpr_  \n"
"   | _RangeToInclusiveExpr_"
msgstr ""

#: src/expressions/range-expr.md:16
msgid ""
"_RangeExpr_ :  \n"
"   [_Expression_](../expressions.md) `..` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/range-expr.md:19
msgid ""
"_RangeFromExpr_ :  \n"
"   [_Expression_](../expressions.md) `..`"
msgstr ""

#: src/expressions/range-expr.md:22
msgid ""
"_RangeToExpr_ :  \n"
"   `..` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/range-expr.md:25
msgid ""
"_RangeFullExpr_ :  \n"
"   `..`"
msgstr ""

#: src/expressions/range-expr.md:28
msgid ""
"_RangeInclusiveExpr_ :  \n"
"   [_Expression_](../expressions.md) `..=` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/range-expr.md:31
msgid ""
"_RangeToInclusiveExpr_ :  \n"
"   `..=` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/range-expr.md:36
msgid ""
"The `..` and `..=` operators will construct an object of one of the "
"`std::ops::Range` (or `core::ops::Range`) variants, according to the "
"following table:"
msgstr ""

#: src/expressions/range-expr.md:38
msgid "Production"
msgstr ""

#: src/expressions/range-expr.md:38 src/inline-assembly.md:51
msgid "Syntax"
msgstr ""

#: src/expressions/range-expr.md:38
msgid "Range"
msgstr ""

#: src/expressions/range-expr.md:40
msgid "_RangeExpr_"
msgstr ""

#: src/expressions/range-expr.md:40
msgid "start`..`end"
msgstr ""

#: src/expressions/range-expr.md:40
msgid "[std::ops::Range](https://doc.rust-lang.org/std/ops/struct.Range.html)"
msgstr ""

#: src/expressions/range-expr.md:40
msgid "start ≤ x \\< end"
msgstr ""

#: src/expressions/range-expr.md:41
msgid "_RangeFromExpr_"
msgstr ""

#: src/expressions/range-expr.md:41
msgid "start`..`"
msgstr ""

#: src/expressions/range-expr.md:41
msgid ""
"[std::ops::RangeFrom](https://doc.rust-lang.org/std/ops/"
"struct.RangeFrom.html)"
msgstr ""

#: src/expressions/range-expr.md:41
msgid "start ≤ x"
msgstr ""

#: src/expressions/range-expr.md:42
msgid "_RangeToExpr_"
msgstr ""

#: src/expressions/range-expr.md:42
msgid "`..`end"
msgstr ""

#: src/expressions/range-expr.md:42
msgid ""
"[std::ops::RangeTo](https://doc.rust-lang.org/std/ops/struct.RangeTo.html)"
msgstr ""

#: src/expressions/range-expr.md:42
msgid "x \\< end"
msgstr ""

#: src/expressions/range-expr.md:43
msgid "_RangeFullExpr_"
msgstr ""

#: src/expressions/range-expr.md:43
msgid ""
"[std::ops::RangeFull](https://doc.rust-lang.org/std/ops/"
"struct.RangeFull.html)"
msgstr ""

#: src/expressions/range-expr.md:43
msgid "\\-"
msgstr ""

#: src/expressions/range-expr.md:44
msgid "_RangeInclusiveExpr_"
msgstr ""

#: src/expressions/range-expr.md:44
msgid "start`..=`end"
msgstr ""

#: src/expressions/range-expr.md:44
msgid ""
"[std::ops::RangeInclusive](https://doc.rust-lang.org/std/ops/"
"struct.RangeInclusive.html)"
msgstr ""

#: src/expressions/range-expr.md:44
msgid "start ≤ x ≤ end"
msgstr ""

#: src/expressions/range-expr.md:45
msgid "_RangeToInclusiveExpr_"
msgstr ""

#: src/expressions/range-expr.md:45
msgid "`..=`end"
msgstr ""

#: src/expressions/range-expr.md:45
msgid ""
"[std::ops::RangeToInclusive](https://doc.rust-lang.org/std/ops/"
"struct.RangeToInclusive.html)"
msgstr ""

#: src/expressions/range-expr.md:45
msgid "x ≤ end"
msgstr ""

#: src/expressions/range-expr.md:50
msgid "// std::ops::Range\n"
msgstr ""

#: src/expressions/range-expr.md:51
msgid "// std::ops::RangeFrom\n"
msgstr ""

#: src/expressions/range-expr.md:52
msgid "// std::ops::RangeTo\n"
msgstr ""

#: src/expressions/range-expr.md:53
msgid "// std::ops::RangeFull\n"
msgstr ""

#: src/expressions/range-expr.md:54
msgid "// std::ops::RangeInclusive\n"
msgstr ""

#: src/expressions/range-expr.md:55
msgid "// std::ops::RangeToInclusive\n"
msgstr ""

#: src/expressions/range-expr.md:60
msgid "The following expressions are equivalent."
msgstr ""

#: src/expressions/range-expr.md:71
msgid "Ranges can be used in `for` loops:"
msgstr ""

#: src/expressions/if-expr.md:3
msgid "`if` and `if let` expressions"
msgstr ""

#: src/expressions/if-expr.md:5
msgid "`if` expressions"
msgstr ""

#: src/expressions/if-expr.md:9
msgid ""
"**<sup>Syntax</sup>**  \n"
"_IfExpression_ :  \n"
"   `if` [_Expression_](../expressions.md)<sub>_except struct expression_</"
"sub> [_BlockExpression_](block-expr.md)  \n"
"   (`else` ( [_BlockExpression_](block-expr.md) \\| _IfExpression_ \\| "
"_IfLetExpression_ ) )<sup>?</sup>"
msgstr ""

#: src/expressions/if-expr.md:19
msgid ""
"An `if` expression is a conditional branch in program control. The syntax of "
"an `if` expression is a condition operand, followed by a consequent block, "
"any number of `else if` conditions and blocks, and an optional trailing "
"`else` block."
msgstr ""

#: src/expressions/if-expr.md:24
msgid ""
"The condition operands must have the [boolean type](../types/boolean.md)."
msgstr ""

#: src/expressions/if-expr.md:28
msgid ""
"If a condition operand evaluates to `true`, the consequent block is executed "
"and any subsequent `else if` or `else` block is skipped."
msgstr ""

#: src/expressions/if-expr.md:32
msgid ""
"If a condition operand evaluates to `false`, the consequent block is skipped "
"and any subsequent `else if` condition is evaluated."
msgstr ""

#: src/expressions/if-expr.md:36
msgid ""
"If all `if` and `else if` conditions evaluate to `false` then any `else` "
"block is executed."
msgstr ""

#: src/expressions/if-expr.md:40
msgid ""
"An if expression evaluates to the same value as the executed block, or `()` "
"if no block is evaluated."
msgstr ""

#: src/expressions/if-expr.md:44
msgid "An `if` expression must have the same type in all situations."
msgstr ""

#: src/expressions/if-expr.md:49
msgid "\"x is four\""
msgstr ""

#: src/expressions/if-expr.md:51
msgid "\"x is three\""
msgstr ""

#: src/expressions/if-expr.md:53
msgid "\"x is something else\""
msgstr ""

#: src/expressions/if-expr.md:57 src/expressions/if-expr.md:61
msgid "\"Bigger\""
msgstr ""

#: src/expressions/if-expr.md:59
msgid "\"Smaller\""
msgstr ""

#: src/expressions/if-expr.md:66
msgid "`if let` expressions"
msgstr ""

#: src/expressions/if-expr.md:70
msgid ""
"**<sup>Syntax</sup>**  \n"
"_IfLetExpression_ :  \n"
"   `if` `let` [_Pattern_](../patterns.md) `=` [_Scrutinee_](match-"
"expr.md)<sub>_except lazy boolean operator expression_</sub> "
"[_BlockExpression_](block-expr.md)  \n"
"   (`else` ( [_BlockExpression_](block-expr.md) \\| _IfExpression_ \\| "
"_IfLetExpression_ ) )<sup>?</sup>"
msgstr ""

#: src/expressions/if-expr.md:81
msgid ""
"An `if let` expression is semantically similar to an `if` expression but in "
"place of a condition operand it expects the keyword `let` followed by a "
"pattern, an `=` and a [scrutinee](../glossary.md#scrutinee) operand."
msgstr ""

#: src/expressions/if-expr.md:85
msgid ""
"If the value of the scrutinee matches the pattern, the corresponding block "
"will execute."
msgstr ""

#: src/expressions/if-expr.md:89
msgid "Otherwise, flow proceeds to the following `else` block if it exists."
msgstr ""

#: src/expressions/if-expr.md:93
msgid ""
"Like `if` expressions, `if let` expressions have a value determined by the "
"block that is evaluated."
msgstr ""

#: src/expressions/if-expr.md:96 src/expressions/if-expr.md:107
msgid "\"Ham\""
msgstr ""

#: src/expressions/if-expr.md:96
msgid "\"Eggs\""
msgstr ""

#: src/expressions/if-expr.md:97
msgid "// this body will be skipped because the pattern is refuted\n"
msgstr ""

#: src/expressions/if-expr.md:99
msgid "\"Bacon\""
msgstr ""

#: src/expressions/if-expr.md:100
msgid "\"Bacon is served with {}\""
msgstr ""

#: src/expressions/if-expr.md:102
msgid "// This block is evaluated instead.\n"
msgstr ""

#: src/expressions/if-expr.md:103
msgid "\"No bacon will be served\""
msgstr ""

#: src/expressions/if-expr.md:105
msgid "// this body will execute\n"
msgstr ""

#: src/expressions/if-expr.md:108
msgid "\"Ham is served with {}\""
msgstr ""

#: src/expressions/if-expr.md:118
msgid "`if` and `if let` expressions can be intermixed:"
msgstr ""

#: src/expressions/if-expr.md:136
msgid ""
"An `if let` expression is equivalent to a [`match` expression](match-"
"expr.md) as follows:"
msgstr ""

#: src/expressions/if-expr.md:141 src/expressions/if-expr.md:152
msgid "/* body */"
msgstr ""

#: src/expressions/if-expr.md:143
msgid "/*else */"
msgstr ""

#: src/expressions/if-expr.md:153
msgid "/* else */"
msgstr ""

#: src/expressions/if-expr.md:153
msgid "// () if there is no else\n"
msgstr ""

#: src/expressions/if-expr.md:175
msgid ""
"The expression cannot be a [lazy boolean operator expression](operator-"
"expr.md#lazy-boolean-operators). Use of a lazy boolean operator is ambiguous "
"with a planned feature change of the language (the implementation of if-let "
"chains - see [eRFC 2947](https://github.com/rust-lang/rfcs/blob/master/text/"
"2497-if-let-chains.md#rollout-plan-and-transitioning-to-rust-2018)). When "
"lazy boolean operator expression is desired, this can be achieved by using "
"parenthesis as below:"
msgstr ""

#: src/expressions/if-expr.md:181 src/expressions/if-expr.md:186
msgid "// Before...\n"
msgstr ""

#: src/expressions/if-expr.md:183 src/expressions/if-expr.md:189
msgid "// After...\n"
msgstr ""

#: src/expressions/match-expr.md:3
msgid "`match` expressions"
msgstr ""

#: src/expressions/match-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_MatchExpression_ :  \n"
"   `match` _Scrutinee_ `{`  \n"
"      [_InnerAttribute_](../attributes.md)<sup>\\*</sup>  \n"
"      _MatchArms_<sup>?</sup>  \n"
"   `}`"
msgstr ""

#: src/expressions/match-expr.md:14
msgid ""
"_Scrutinee_ :  \n"
"   [_Expression_](../expressions.md)<sub>_except struct expression_</sub>"
msgstr ""

#: src/expressions/match-expr.md:17
msgid ""
"_MatchArms_ :  \n"
"   ( _MatchArm_ `=>` ( [_ExpressionWithoutBlock_](../expressions.md) `,` \\| "
"[_ExpressionWithBlock_](../expressions.md) `,`<sup>?</sup> ) )<sup>\\*</"
"sup>  \n"
"   _MatchArm_ `=>` [_Expression_](../expressions.md) `,`<sup>?</sup>"
msgstr ""

#: src/expressions/match-expr.md:24
msgid ""
"_MatchArm_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> [_Pattern_](../"
"patterns.md) _MatchArmGuard_<sup>?</sup>"
msgstr ""

#: src/expressions/match-expr.md:27
msgid ""
"_MatchArmGuard_ :  \n"
"   `if` [_Expression_](../expressions.md)"
msgstr ""

#: src/expressions/match-expr.md:32
msgid ""
"A _`match` expression_ branches on a pattern. The exact form of matching "
"that occurs depends on the [pattern](../patterns.md)."
msgstr ""

#: src/expressions/match-expr.md:37
msgid ""
"A `match` expression has a _[scrutinee](../glossary.md#scrutinee) "
"expression_, which is the value to compare to the patterns."
msgstr ""

#: src/expressions/match-expr.md:41
msgid "The scrutinee expression and the patterns must have the same type."
msgstr ""

#: src/expressions/match-expr.md:45
msgid ""
"A `match` behaves differently depending on whether or not the scrutinee "
"expression is a [place expression or value expression](../"
"expressions.md#place-expressions-and-value-expressions)."
msgstr ""

#: src/expressions/match-expr.md:49
msgid ""
"If the scrutinee expression is a [value expression](../expressions.md#place-"
"expressions-and-value-expressions), it is first evaluated into a temporary "
"location, and the resulting value is sequentially compared to the patterns "
"in the arms until a match is found. The first arm with a matching pattern is "
"chosen as the branch target of the `match`, any variables bound by the "
"pattern are assigned to local variables in the arm's block, and control "
"enters the block."
msgstr ""

#: src/expressions/match-expr.md:54
msgid ""
"When the scrutinee expression is a [place expression](../"
"expressions.md#place-expressions-and-value-expressions), the match does not "
"allocate a temporary location; however, a by-value binding may copy or move "
"from the memory location. When possible, it is preferable to match on place "
"expressions, as the lifetime of these matches inherits the lifetime of the "
"place expression rather than being restricted to the inside of the match."
msgstr ""

#: src/expressions/match-expr.md:58
msgid "An example of a `match` expression:"
msgstr ""

#: src/expressions/match-expr.md:64
msgid "\"one\""
msgstr ""

#: src/expressions/match-expr.md:65
msgid "\"two\""
msgstr ""

#: src/expressions/match-expr.md:66
msgid "\"three\""
msgstr ""

#: src/expressions/match-expr.md:67
msgid "\"four\""
msgstr ""

#: src/expressions/match-expr.md:68
msgid "\"five\""
msgstr ""

#: src/expressions/match-expr.md:69
msgid "\"something else\""
msgstr ""

#: src/expressions/match-expr.md:75
msgid ""
"Variables bound within the pattern are scoped to the match guard and the "
"arm's expression."
msgstr ""

#: src/expressions/match-expr.md:79
msgid ""
"The [binding mode](../patterns.md#binding-modes) (move, copy, or reference) "
"depends on the pattern."
msgstr ""

#: src/expressions/match-expr.md:83
msgid ""
"Multiple match patterns may be joined with the `|` operator. Each pattern "
"will be tested in left-to-right sequence until a successful match is found."
msgstr ""

#: src/expressions/match-expr.md:89
msgid "\"not many\""
msgstr ""

#: src/expressions/match-expr.md:90 src/expressions/match-expr.md:94
msgid "\"a few\""
msgstr ""

#: src/expressions/match-expr.md:91
msgid "\"lots\""
msgstr ""

#: src/expressions/match-expr.md:95
msgid "// Demonstration of pattern match order.\n"
msgstr ""

#: src/expressions/match-expr.md:105
msgid ""
"Note: The `2..=9` is a [Range Pattern](../patterns.md#range-patterns), not a "
"[Range Expression](range-expr.md). Thus, only those types of ranges "
"supported by range patterns can be used in match arms."
msgstr ""

#: src/expressions/match-expr.md:110
msgid ""
"Every binding in each `|` separated pattern must appear in all of the "
"patterns in the arm."
msgstr ""

#: src/expressions/match-expr.md:114
msgid ""
"Every binding of the same name must have the same type, and have the same "
"binding mode."
msgstr ""

#: src/expressions/match-expr.md:118
msgid "Match guards"
msgstr ""

#: src/expressions/match-expr.md:122
msgid ""
"Match arms can accept _match guards_ to further refine the criteria for "
"matching a case."
msgstr ""

#: src/expressions/match-expr.md:126
msgid ""
"Pattern guards appear after the pattern and consist of a `bool`\\-typed "
"expression following the `if` keyword."
msgstr ""

#: src/expressions/match-expr.md:130
msgid ""
"When the pattern matches successfully, the pattern guard expression is "
"executed. If the expression evaluates to true, the pattern is successfully "
"matched against."
msgstr ""

#: src/expressions/match-expr.md:135
msgid ""
"Otherwise, the next pattern, including other matches with the `|` operator "
"in the same arm, is tested."
msgstr ""

#: src/expressions/match-expr.md:148
msgid ""
"Note: Multiple matches using the `|` operator can cause the pattern guard "
"and the side effects it has to execute multiple times. For example:"
msgstr ""

#: src/expressions/match-expr.md:163
msgid ""
"A pattern guard may refer to the variables bound within the pattern they "
"follow."
msgstr ""

#: src/expressions/match-expr.md:167
msgid ""
"Before evaluating the guard, a shared reference is taken to the part of the "
"scrutinee the variable matches on. While evaluating the guard, this shared "
"reference is then used when accessing the variable."
msgstr ""

#: src/expressions/match-expr.md:172
msgid ""
"Only when the guard evaluates to true is the value moved, or copied, from "
"the scrutinee into the variable. This allows shared borrows to be used "
"inside guards without moving out of the scrutinee in case guard fails to "
"match."
msgstr ""

#: src/expressions/match-expr.md:177
msgid ""
"Moreover, by holding a shared reference while evaluating the guard, mutation "
"inside guards is also prevented."
msgstr ""

#: src/expressions/match-expr.md:181
msgid "Attributes on match arms"
msgstr ""

#: src/expressions/match-expr.md:185
msgid ""
"Outer attributes are allowed on match arms. The only attributes that have "
"meaning on match arms are [`cfg`](../conditional-compilation.md) and the "
"[lint check attributes](../attributes/diagnostics.md#lint-check-attributes)."
msgstr ""

#: src/expressions/match-expr.md:190
msgid ""
"[Inner attributes](../attributes.md) are allowed directly after the opening "
"brace of the match expression in the same expression contexts as [attributes "
"on block expressions](block-expr.md#attributes-on-block-expressions)."
msgstr ""

#: src/expressions/return-expr.md:3
msgid "`return` expressions"
msgstr ""

#: src/expressions/return-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ReturnExpression_ :  \n"
"   `return` [_Expression_](../expressions.md)<sup>?</sup>"
msgstr ""

#: src/expressions/return-expr.md:13
msgid "Return expressions are denoted with the keyword `return`."
msgstr ""

#: src/expressions/return-expr.md:17
msgid ""
"Evaluating a `return` expression moves its argument into the designated "
"output location for the current function call, destroys the current function "
"activation frame, and transfers control to the caller frame."
msgstr ""

#: src/expressions/return-expr.md:19
msgid "An example of a `return` expression:"
msgstr ""

#: src/expressions/await-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_AwaitExpression_ :  \n"
"   [_Expression_](../expressions.md) `.` `await`"
msgstr ""

#: src/expressions/await-expr.md:13
msgid ""
"An `await` expression is a syntactic construct for suspending a computation "
"provided by an implementation of `std::future::IntoFuture` until the given "
"future is ready to produce a value."
msgstr ""

#: src/expressions/await-expr.md:19
msgid ""
"The syntax for an await expression is an expression with a type that "
"implements the [`IntoFuture`](../../core/future/into_future/"
"trait.IntoFuture.html) trait, called the _future operand_, then the token "
"`.`, and then the `await` keyword."
msgstr ""

#: src/expressions/await-expr.md:23
msgid ""
"Await expressions are legal only within an [async context](../expressions/"
"block-expr.md#async-context), like an [`async fn`](../items/"
"functions.md#async-functions), [`async` closure](closure-expr.md#async-"
"closures), or [`async` block](block-expr.md#async-blocks)."
msgstr ""

#: src/expressions/await-expr.md:27
msgid "More specifically, an await expression has the following effect."
msgstr ""

#: src/expressions/await-expr.md:29
msgid ""
"Create a future by calling [`IntoFuture::into_future`](../../core/future/"
"into_future/trait.IntoFuture.html#tymethod.into_future) on the future "
"operand."
msgstr ""

#: src/expressions/await-expr.md:30
msgid ""
"Evaluate the future to a [future](../../core/future/future/"
"trait.Future.html) `tmp`;"
msgstr ""

#: src/expressions/await-expr.md:31
msgid ""
"Pin `tmp` using [`Pin::new_unchecked`](../../core/pin/"
"struct.Pin.html#method.new_unchecked);"
msgstr ""

#: src/expressions/await-expr.md:32
msgid ""
"This pinned future is then polled by calling the [`Future::poll`](../../core/"
"future/future/trait.Future.html#tymethod.poll) method and passing it the "
"current [task context](#task-context);"
msgstr ""

#: src/expressions/await-expr.md:33
msgid ""
"If the call to `poll` returns [`Poll::Pending`](../../core/task/poll/"
"enum.Poll.html#variant.Pending), then the future returns `Poll::Pending`, "
"suspending its state so that, when the surrounding async context is re-"
"polled,execution returns to step 3;"
msgstr ""

#: src/expressions/await-expr.md:34
msgid ""
"Otherwise the call to `poll` must have returned [`Poll::Ready`](../../core/"
"task/poll/enum.Poll.html#variant.Ready), in which case the value contained "
"in the [`Poll::Ready`](../../core/task/poll/enum.Poll.html#variant.Ready) "
"variant is used as the result of the `await` expression itself."
msgstr ""

#: src/expressions/await-expr.md:36
msgid ""
"**Edition differences**: Await expressions are only available beginning with "
"Rust 2018."
msgstr ""

#: src/expressions/await-expr.md:40
msgid "Task context"
msgstr ""

#: src/expressions/await-expr.md:42
msgid ""
"The task context refers to the [`Context`](../../core/task/wake/"
"struct.Context.html) which was supplied to the current [async context](../"
"expressions/block-expr.md#async-context) when the async context itself was "
"polled. Because `await` expressions are only legal in an async context, "
"there must be some task context available."
msgstr ""

#: src/expressions/await-expr.md:47
msgid "Approximate desugaring"
msgstr ""

#: src/expressions/await-expr.md:49
msgid ""
"Effectively, an await expression is roughly equivalent to the following non-"
"normative desugaring:"
msgstr ""

#: src/expressions/await-expr.md:64
msgid ""
"where the `yield` pseudo-code returns `Poll::Pending` and, when re-invoked, "
"resumes execution from that point. The variable `current_context` refers to "
"the context taken from the async environment."
msgstr ""

#: src/expressions/underscore-expr.md:3
msgid "`_` expressions"
msgstr ""

#: src/expressions/underscore-expr.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_UnderscoreExpression_ :  \n"
"   `_`"
msgstr ""

#: src/expressions/underscore-expr.md:13
msgid ""
"Underscore expressions, denoted with the symbol `_`, are used to signify a "
"placeholder in a destructuring assignment."
msgstr ""

#: src/expressions/underscore-expr.md:18
msgid "They may only appear in the left-hand side of an assignment."
msgstr ""

#: src/expressions/underscore-expr.md:22
msgid ""
"Note that this is distinct from the [wildcard pattern](../"
"patterns.md#wildcard-pattern)."
msgstr ""

#: src/expressions/underscore-expr.md:24
msgid "Examples of `_` expressions:"
msgstr ""

#: src/expressions/underscore-expr.md:37
msgid ""
"// unused result, assignment to `_` used to declare intent and remove a "
"warning\n"
msgstr ""

#: src/expressions/underscore-expr.md:39
msgid ""
"// triggers unused_must_use warning\n"
"// 2 + 2;\n"
msgstr ""

#: src/expressions/underscore-expr.md:42
msgid "// equivalent technique using a wildcard pattern in a let-binding\n"
msgstr ""

#: src/patterns.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Pattern_ :  \n"
"      `|`<sup>?</sup> _PatternNoTopAlt_  ( `|` _PatternNoTopAlt_ )<sup>\\*</"
"sup>"
msgstr ""

#: src/patterns.md:11
msgid ""
"_PatternNoTopAlt_ :  \n"
"      _PatternWithoutRange_  \n"
"   | [_RangePattern_](#range-patterns)"
msgstr ""

#: src/patterns.md:15
msgid ""
"_PatternWithoutRange_ :  \n"
"      [_LiteralPattern_](#literal-patterns)  \n"
"   | [_IdentifierPattern_](#identifier-patterns)  \n"
"   | [_WildcardPattern_](#wildcard-pattern)  \n"
"   | [_RestPattern_](#rest-patterns)  \n"
"   | [_ReferencePattern_](#reference-patterns)  \n"
"   | [_StructPattern_](#struct-patterns)  \n"
"   | [_TupleStructPattern_](#tuple-struct-patterns)  \n"
"   | [_TuplePattern_](#tuple-patterns)  \n"
"   | [_GroupedPattern_](#grouped-patterns)  \n"
"   | [_SlicePattern_](#slice-patterns)  \n"
"   | [_PathPattern_](#path-patterns)  \n"
"   | [_MacroInvocation_](macros.md#macro-invocation)"
msgstr ""

#: src/patterns.md:31
msgid ""
"Patterns are used to match values against structures and to, optionally, "
"bind variables to values inside these structures. They are also used in "
"variable declarations and parameters for functions and closures."
msgstr ""

#: src/patterns.md:34
msgid "The pattern in the following example does four things:"
msgstr ""

#: src/patterns.md:36
msgid "Tests if `person` has the `car` field filled with something."
msgstr ""

#: src/patterns.md:37
msgid ""
"Tests if the person's `age` field is between 13 and 19, and binds its value "
"to the `person_age` variable."
msgstr ""

#: src/patterns.md:38
msgid "Binds a reference to the `name` field to the variable `person_name`."
msgstr ""

#: src/patterns.md:39
msgid ""
"Ignores the rest of the fields of `person`. The remaining fields can have "
"any value and are not bound to any variables."
msgstr ""

#: src/patterns.md:52 src/patterns.md:293 src/patterns.md:304
#: src/patterns.md:416
msgid "\"John\""
msgstr ""

#: src/patterns.md:65
msgid "\"{} has a car and is {} years old.\""
msgstr ""

#: src/patterns.md:71
msgid "Patterns are used in:"
msgstr ""

#: src/patterns.md:75
msgid "[`let` declarations](statements.md#let-statements)"
msgstr ""

#: src/patterns.md:79
msgid ""
"[Function](items/functions.md) and [closure](expressions/closure-expr.md) "
"parameters"
msgstr ""

#: src/patterns.md:83
msgid "[`match` expressions](expressions/match-expr.md)"
msgstr ""

#: src/patterns.md:87
msgid "[`if let` expressions](expressions/if-expr.md)"
msgstr ""

#: src/patterns.md:91
msgid ""
"[`while let` expressions](expressions/loop-expr.md#predicate-pattern-loops)"
msgstr ""

#: src/patterns.md:95
msgid "[`for` expressions](expressions/loop-expr.md#iterator-loops)"
msgstr ""

#: src/patterns.md:99
msgid "Destructuring"
msgstr ""

#: src/patterns.md:103
msgid ""
"Patterns can be used to _destructure_ [structs](items/structs.md), [enums]"
"(items/enumerations.md), and [tuples](types/tuple.md). Destructuring breaks "
"up a value into its component pieces. The syntax used is almost the same as "
"when creating such values."
msgstr ""

#: src/patterns.md:109
msgid ""
"In a pattern whose [scrutinee](glossary.md#scrutinee) expression has a "
"`struct`, `enum` or `tuple` type, a placeholder (`_`) stands in for a "
"_single_ data field, whereas a wildcard `..`  stands in for _all_ the "
"remaining fields of a particular variant."
msgstr ""

#: src/patterns.md:113
msgid ""
"When destructuring a data structure with named (but not numbered) fields, it "
"is allowed to write `fieldname` as a shorthand for `fieldname: fieldname`."
msgstr ""

#: src/patterns.md:124
msgid "\"Quit\""
msgstr ""

#: src/patterns.md:126
msgid "\"move {} horizontally\""
msgstr ""

#: src/patterns.md:127
msgid "\"other move\""
msgstr ""

#: src/patterns.md:129
msgid "\"color change, red: {}, green: {}\""
msgstr ""

#: src/patterns.md:136
msgid "Refutability"
msgstr ""

#: src/patterns.md:138
msgid ""
"A pattern is said to be _refutable_ when it has the possibility of not being "
"matched by the value it is being matched against. _Irrefutable_ patterns, on "
"the other hand, always match the value they are being matched against. "
"Examples:"
msgstr ""

#: src/patterns.md:143
msgid "// \"(x, y)\" is an irrefutable pattern\n"
msgstr ""

#: src/patterns.md:145
msgid "// \"(a, 3)\" is refutable, and will not match\n"
msgstr ""

#: src/patterns.md:146
msgid "\"Shouldn't reach here\""
msgstr ""

#: src/patterns.md:147
msgid "// \"(a, 4)\" is refutable, and will match\n"
msgstr ""

#: src/patterns.md:148
msgid "\"Matched ({}, 4)\""
msgstr ""

#: src/patterns.md:154
msgid "Literal patterns"
msgstr ""

#: src/patterns.md:158
msgid ""
"**<sup>Syntax</sup>**  \n"
"_LiteralPattern_ :  \n"
"      `true` | `false`  \n"
"   | [CHAR_LITERAL](tokens.md#character-literals)  \n"
"   | [BYTE_LITERAL](tokens.md#byte-literals)  \n"
"   | [STRING_LITERAL](tokens.md#string-literals)  \n"
"   | [RAW_STRING_LITERAL](tokens.md#raw-string-literals)  \n"
"   | [BYTE_STRING_LITERAL](tokens.md#byte-string-literals)  \n"
"   | [RAW_BYTE_STRING_LITERAL](tokens.md#raw-byte-string-literals)  \n"
"   | [C_STRING_LITERAL](tokens.md#c-string-literals)  \n"
"   | [RAW_C_STRING_LITERAL](tokens.md#raw-c-string-literals)  \n"
"   | `-`<sup>?</sup> [INTEGER_LITERAL](tokens.md#integer-literals)  \n"
"   | `-`<sup>?</sup> [FLOAT_LITERAL](tokens.md#floating-point-literals)"
msgstr ""

#: src/patterns.md:185
msgid ""
"_Literal patterns_ match exactly the same value as what is created by the "
"literal. Since negative numbers are not [literals](expressions/literal-"
"expr.md), literal patterns also accept an optional minus sign before the "
"literal, which acts like the negation operator."
msgstr ""

#: src/patterns.md:190
msgid ""
"_**Warning:**_ C string and raw C string literals are accepted in literal "
"patterns, but `&CStr` doesn't implement structural equality (`#[derive(Eq, "
"PartialEq)]`) and therefore any such `match` on a `&CStr` will be rejected "
"with a type error."
msgstr ""

#: src/patterns.md:198
msgid "Literal patterns are always refutable."
msgstr ""

#: src/patterns.md:205
msgid "\"It's minus one\""
msgstr ""

#: src/patterns.md:206
msgid "\"It's a one\""
msgstr ""

#: src/patterns.md:207
msgid "\"It's either a two or a four\""
msgstr ""

#: src/patterns.md:208
msgid "\"Matched none of the arms\""
msgstr ""

#: src/patterns.md:215
msgid "Identifier patterns"
msgstr ""

#: src/patterns.md:219
msgid ""
"**<sup>Syntax</sup>**  \n"
"_IdentifierPattern_ :  \n"
"      `ref`<sup>?</sup> `mut`<sup>?</sup> [IDENTIFIER](identifiers.md) (`@` "
"[_PatternNoTopAlt_](#patterns) ) <sup>?</sup>"
msgstr ""

#: src/patterns.md:225
msgid ""
"Identifier patterns bind the value they match to a variable in the [value "
"namespace](names/namespaces.md)."
msgstr ""

#: src/patterns.md:229
msgid "The identifier must be unique within the pattern."
msgstr ""

#: src/patterns.md:233
msgid ""
"The variable will shadow any variables of the same name in scope. The [scope]"
"(names/scopes.md) of the new binding depends on the context of where the "
"pattern is used (such as a `let` binding or a `match` arm)."
msgstr ""

#: src/patterns.md:238
msgid ""
"Patterns that consist of only an identifier, possibly with a `mut`, match "
"any value and bind it to that identifier. This is the most commonly used "
"pattern in variable declarations and parameters for functions and closures."
msgstr ""

#: src/patterns.md:250
msgid ""
"To bind the matched value of a pattern to a variable, use the syntax "
"`variable @ subpattern`. For example, the following binds the value 2 to `e` "
"(not the entire range: the range here is a range subpattern)."
msgstr ""

#: src/patterns.md:257
msgid "\"got a range element {}\""
msgstr ""

#: src/patterns.md:258
msgid "\"anything\""
msgstr ""

#: src/patterns.md:264
msgid ""
"By default, identifier patterns bind a variable to a copy of or move from "
"the matched value depending on whether the matched value implements [`Copy`]"
"(special-types-and-traits.md#copy)."
msgstr ""

#: src/patterns.md:268
msgid ""
"This can be changed to bind to a reference by using the `ref` keyword, or to "
"a mutable reference using `ref mut`. For example:"
msgstr ""

#: src/patterns.md:283
msgid ""
"In the first match expression, the value is copied (or moved). In the second "
"match, a reference to the same memory location is bound to the variable "
"value. This syntax is needed because in destructuring subpatterns the `&` "
"operator can't be applied to the value's fields. For example, the following "
"is not valid:"
msgstr ""

#: src/patterns.md:297
msgid "To make it valid, write the following:"
msgstr ""

#: src/patterns.md:310
msgid ""
"Thus, `ref` is not something that is being matched against. Its objective is "
"exclusively to make the matched binding a reference, instead of potentially "
"copying or moving what was matched."
msgstr ""

#: src/patterns.md:315
msgid ""
"[Path patterns](#path-patterns) take precedence over identifier patterns."
msgstr ""

#: src/patterns.md:319
msgid ""
"It is an error if `ref` or `ref mut` is specified and the identifier shadows "
"a constant."
msgstr ""

#: src/patterns.md:323
msgid ""
"Identifier patterns are irrefutable if the `@` subpattern is irrefutable or "
"the subpattern is not specified."
msgstr ""

#: src/patterns.md:327
msgid "Binding modes"
msgstr ""

#: src/patterns.md:331
msgid ""
"To service better ergonomics, patterns operate in different _binding modes_ "
"in order to make it easier to bind references to values. When a reference "
"value is matched by a non-reference pattern, it will be automatically "
"treated as a `ref` or `ref mut` binding. Example:"
msgstr ""

#: src/patterns.md:338
msgid "// y was converted to `ref y` and its type is &i32\n"
msgstr ""

#: src/patterns.md:344
msgid ""
"_Non-reference patterns_ include all patterns except bindings, [wildcard "
"patterns](#wildcard-pattern) (`_`), [`const` patterns](#path-patterns) of "
"reference types, and [reference patterns](#reference-patterns)."
msgstr ""

#: src/patterns.md:348
msgid ""
"If a binding pattern does not explicitly have `ref`, `ref mut`, or `mut`, "
"then it uses the _default binding mode_ to determine how the variable is "
"bound."
msgstr ""

#: src/patterns.md:352
msgid ""
"The default binding mode starts in \"move\" mode which uses move semantics."
msgstr ""

#: src/patterns.md:356
msgid ""
"When matching a pattern, the compiler starts from the outside of the pattern "
"and works inwards."
msgstr ""

#: src/patterns.md:360
msgid ""
"Each time a reference is matched using a non-reference pattern, it will "
"automatically dereference the value and update the default binding mode."
msgstr ""

#: src/patterns.md:364
msgid "References will set the default binding mode to `ref`."
msgstr ""

#: src/patterns.md:368
msgid ""
"Mutable references will set the mode to `ref mut` unless the mode is already "
"`ref` in which case it remains `ref`."
msgstr ""

#: src/patterns.md:372
msgid ""
"If the automatically dereferenced value is still a reference, it is "
"dereferenced and this process repeats."
msgstr ""

#: src/patterns.md:376
msgid ""
"The binding pattern may only explicitly specify a `ref` or `ref mut` binding "
"mode, or specify mutability with `mut`, when the default binding mode is "
"\"move\". For example, these are not accepted:"
msgstr ""

#: src/patterns.md:386
msgid ""
"**Edition differences**: Before the 2024 edition, bindings could explicitly "
"specify a `ref` or `ref mut` binding mode even when the default binding mode "
"was not \"move\", and they could specify mutability on such bindings with "
"`mut`. In these editions, specifying `mut` on a binding set the binding mode "
"to \"move\" regardless of the current default binding mode."
msgstr ""

#: src/patterns.md:390
msgid ""
"Similarly, a reference pattern may only appear when the default binding mode "
"is \"move\". For example, this is not accepted:"
msgstr ""

#: src/patterns.md:398
msgid ""
"**Edition differences**: Before the 2024 edition, reference patterns could "
"appear even when the default binding mode was not \"move\", and had both the "
"effect of matching against the scrutinee and of causing the default binding "
"mode to be reset to \"move\"."
msgstr ""

#: src/patterns.md:402
msgid ""
"Move bindings and reference bindings can be mixed together in the same "
"pattern. Doing so will result in partial move of the object bound to and the "
"object cannot be used afterwards. This applies only if the type cannot be "
"copied."
msgstr ""

#: src/patterns.md:406
msgid ""
"In the example below, `name` is moved out of `person`. Trying to use "
"`person` as a whole or `person.name` would result in an error because of "
"_partial move_."
msgstr ""

#: src/patterns.md:416
msgid "// `name` is moved from person and `age` referenced\n"
msgstr ""

#: src/patterns.md:423
msgid "Wildcard pattern"
msgstr ""

#: src/patterns.md:427
msgid ""
"**<sup>Syntax</sup>**  \n"
"_WildcardPattern_ :  \n"
"   `_`"
msgstr ""

#: src/patterns.md:433
msgid ""
"The _wildcard pattern_ (an underscore symbol) matches any value. It is used "
"to ignore values when they don't matter."
msgstr ""

#: src/patterns.md:438
msgid ""
"Inside other patterns it matches a single data field (as opposed to the `..` "
"which matches the remaining fields)."
msgstr ""

#: src/patterns.md:442
msgid ""
"Unlike identifier patterns, it does not copy, move or borrow the value it "
"matches."
msgstr ""

#: src/patterns.md:448
msgid "// the x is always matched by _\n"
msgstr ""

#: src/patterns.md:450
msgid "// ignore a function/closure param\n"
msgstr ""

#: src/patterns.md:453
msgid "// ignore a field from a struct\n"
msgstr ""

#: src/patterns.md:466
msgid "// accept any Some, with any value\n"
msgstr ""

#: src/patterns.md:474
msgid "The wildcard pattern is always irrefutable."
msgstr ""

#: src/patterns.md:478
msgid "Rest patterns"
msgstr ""

#: src/patterns.md:480
msgid ""
"**<sup>Syntax</sup>**  \n"
"_RestPattern_ :  \n"
"   `..`"
msgstr ""

#: src/patterns.md:486
msgid ""
"The _rest pattern_ (the `..` token) acts as a variable-length pattern which "
"matches zero or more elements that haven't been matched already before and "
"after."
msgstr ""

#: src/patterns.md:490
msgid ""
"It may only be used in [tuple](#tuple-patterns), [tuple struct](#tuple-"
"struct-patterns), and [slice](#slice-patterns) patterns, and may only appear "
"once as one of the elements in those patterns. It is also allowed in an "
"[identifier pattern](#identifier-patterns) for [slice patterns](#slice-"
"patterns) only."
msgstr ""

#: src/patterns.md:495
msgid "The rest pattern is always irrefutable."
msgstr ""

#: src/patterns.md:503
msgid "\"slice is empty\""
msgstr ""

#: src/patterns.md:504
msgid "\"single element {}\""
msgstr ""

#: src/patterns.md:505
msgid "\"head={} tail={:?}\""
msgstr ""

#: src/patterns.md:509
msgid "// Ignore everything but the last element, which must be \"!\".\n"
msgstr ""

#: src/patterns.md:510
msgid "\"!\""
msgstr ""

#: src/patterns.md:510
msgid "\"!!!\""
msgstr ""

#: src/patterns.md:512
msgid ""
"// `start` is a slice of everything except the last element, which must be "
"\"z\".\n"
msgstr ""

#: src/patterns.md:513
msgid "\"z\""
msgstr ""

#: src/patterns.md:513
msgid "\"starts with: {:?}\""
msgstr ""

#: src/patterns.md:515
msgid ""
"// `end` is a slice of everything but the first element, which must be "
"\"a\".\n"
msgstr ""

#: src/patterns.md:516
msgid "\"ends with: {:?}\""
msgstr ""

#: src/patterns.md:518
msgid "// 'whole' is the entire slice and `last` is the final element\n"
msgstr ""

#: src/patterns.md:519
msgid "\"the last element of {:?} is {}\""
msgstr ""

#: src/patterns.md:525
msgid "\"next to last is {}\""
msgstr ""

#: src/patterns.md:528
msgid "// Rest patterns may also be used in tuple and tuple struct patterns.\n"
msgstr ""

#: src/patterns.md:531
msgid "\"y={} z={}\""
msgstr ""

#: src/patterns.md:532
msgid "\"tail must be 5\""
msgstr ""

#: src/patterns.md:533
msgid "\"matches everything else\""
msgstr ""

#: src/patterns.md:539
msgid "Range patterns"
msgstr ""

#: src/patterns.md:543
msgid ""
"**<sup>Syntax</sup>**  \n"
"_RangePattern_ :  \n"
"      _RangeInclusivePattern_  \n"
"   | _RangeFromPattern_  \n"
"   | _RangeToInclusivePattern_  \n"
"   | _ObsoleteRangePattern_"
msgstr ""

#: src/patterns.md:550
msgid ""
"_RangeExclusivePattern_ :  \n"
"      _RangePatternBound_ `..` _RangePatternBound_"
msgstr ""

#: src/patterns.md:553
msgid ""
"_RangeInclusivePattern_ :  \n"
"      _RangePatternBound_ `..=` _RangePatternBound_"
msgstr ""

#: src/patterns.md:556
msgid ""
"_RangeFromPattern_ :  \n"
"      _RangePatternBound_ `..`"
msgstr ""

#: src/patterns.md:559
msgid ""
"_RangeToInclusivePattern_ :  \n"
"      `..=` _RangePatternBound_"
msgstr ""

#: src/patterns.md:562
msgid ""
"_ObsoleteRangePattern_ :  \n"
"   _RangePatternBound_ `...` _RangePatternBound_"
msgstr ""

#: src/patterns.md:565
msgid ""
"_RangePatternBound_ :  \n"
"      [CHAR_LITERAL](tokens.md#character-literals)  \n"
"   | [BYTE_LITERAL](tokens.md#byte-literals)  \n"
"   | `-`<sup>?</sup> [INTEGER_LITERAL](tokens.md#integer-literals)  \n"
"   | `-`<sup>?</sup> [FLOAT_LITERAL](tokens.md#floating-point-literals)  \n"
"   | [_PathExpression_](expressions/path-expr.md)"
msgstr ""

#: src/patterns.md:574
msgid ""
"_Range patterns_ match scalar values within the range defined by their "
"bounds. They comprise a _sigil_ (one of `..`, `..=`, or `...`) and a bound "
"on one or both sides."
msgstr ""

#: src/patterns.md:579
msgid "A bound on the left of the sigil is a _lower bound_."
msgstr ""

#: src/patterns.md:583
msgid "A bound on the right is an _upper bound_."
msgstr ""

#: src/patterns.md:587
msgid ""
"A range pattern with both a lower and upper bound will match all values "
"between and including both of its bounds. It is written as its lower bound, "
"followed by `..` for end-exclusive or `..=` for end-inclusive, followed by "
"its upper bound."
msgstr ""

#: src/patterns.md:592
msgid ""
"The type of the range pattern is the type unification of its upper and lower "
"bounds."
msgstr ""

#: src/patterns.md:594
msgid ""
"For example, a pattern `'m'..='p'` will match only the values `'m'`, `'n'`, "
"`'o'`, and `'p'`. Similarly, `'m'..'p'` will match only `'m'`, `'n'` and "
"`'o'`, specifically **not** including `'p'`."
msgstr ""

#: src/patterns.md:599
msgid ""
"The lower bound cannot be greater than the upper bound. That is, in `a..=b`, "
"a ≤ b must be the case. For example, it is an error to have a range pattern "
"`10..=0`."
msgstr ""

#: src/patterns.md:605
msgid ""
"A range pattern with only a lower bound will match any value greater than or "
"equal to the lower bound. It is written as its lower bound followed by `..`, "
"and has the same type as its lower bound. For example, `1..` will match 1, "
"9, or 9001, or 9007199254740991 (if it is of an appropriate size), but not "
"0, and not negative numbers for signed integers."
msgstr ""

#: src/patterns.md:611
msgid ""
"A range pattern with only an upper bound matches any value less than or "
"equal to the upper bound. It is written as `..=` followed by its upper "
"bound, and has the same type as its upper bound. For example, `..=10` will "
"match 10, 1, 0, and for signed integer types, all negative values."
msgstr ""

#: src/patterns.md:617
msgid ""
"Range patterns with only one bound cannot be used as the top-level pattern "
"for subpatterns in [slice patterns](#slice-patterns)."
msgstr ""

#: src/patterns.md:621
msgid "The bounds is written as one of:"
msgstr ""

#: src/patterns.md:623
msgid "A character, byte, integer, or float literal."
msgstr ""

#: src/patterns.md:624
msgid "A `-` followed by an integer or float literal."
msgstr ""

#: src/patterns.md:625
msgid "A [path](expressions/path-expr.md)"
msgstr ""

#: src/patterns.md:629
msgid ""
"If the bounds is written as a path, after macro resolution, the path must "
"resolve to a constant item of the type `char`, an integer type, or a float "
"type."
msgstr ""

#: src/patterns.md:633
msgid ""
"The type and value of the bounds is dependent upon how it is written out."
msgstr ""

#: src/patterns.md:637
msgid ""
"If the bounds is a [path](expressions/path-expr.md), the pattern has the "
"type and value of the [constant](items/constant-items.md) the path resolves "
"to."
msgstr ""

#: src/patterns.md:641
msgid "For float range patterns, the constant may not be a `NaN`."
msgstr ""

#: src/patterns.md:645
msgid ""
"If it is a literal, it has the type and value of the corresponding [literal "
"expression](expressions/literal-expr.md)."
msgstr ""

#: src/patterns.md:649
msgid ""
"If is a literal preceded by a `-`, it has the same type as the corresponding "
"[literal expression](expressions/literal-expr.md) and the value of [negating]"
"(expressions/operator-expr.md#negation-operators) the value of the "
"corresponding literal expression."
msgstr ""

#: src/patterns.md:654
msgid "'f'"
msgstr ""

#: src/patterns.md:656
msgid "'a'"
msgstr ""

#: src/patterns.md:656
msgid "'z'"
msgstr ""

#: src/patterns.md:657
msgid "'Z'"
msgstr ""

#: src/patterns.md:658
msgid "'α'"
msgstr ""

#: src/patterns.md:658
msgid "'ω'"
msgstr ""

#: src/patterns.md:664
msgid "\"acid\""
msgstr ""

#: src/patterns.md:665
msgid "\"neutral\""
msgstr ""

#: src/patterns.md:666
msgid "\"base\""
msgstr ""

#: src/patterns.md:672
msgid "\"zero!\""
msgstr ""

#: src/patterns.md:673
msgid "\"positive number!\""
msgstr ""

#: src/patterns.md:675
msgid "// using paths to constants:\n"
msgstr ""

#: src/patterns.md:689
msgid "\"troposphere\""
msgstr ""

#: src/patterns.md:690
msgid "\"stratosphere\""
msgstr ""

#: src/patterns.md:691
msgid "\"mesosphere\""
msgstr ""

#: src/patterns.md:692
msgid "\"outer space, maybe\""
msgstr ""

#: src/patterns.md:702
msgid "\"It fits and occupies {} bytes\""
msgstr ""

#: src/patterns.md:716
msgid "// using qualified paths:\n"
msgstr ""

#: src/patterns.md:719
msgid "\"fits in a u8\""
msgstr ""

#: src/patterns.md:720
msgid "\"fits in a u16\""
msgstr ""

#: src/patterns.md:721
msgid "\"fits in a u32\""
msgstr ""

#: src/patterns.md:722
msgid "\"too big\""
msgstr ""

#: src/patterns.md:728
msgid ""
"Range patterns for fix-width integer and `char` types are irrefutable when "
"they span the entire set of possible values of a type. For example, "
"`0u8..=255u8` is irrefutable."
msgstr ""

#: src/patterns.md:733
msgid ""
"The range of values for an integer type is the closed range from its minimum "
"to maximum value."
msgstr ""

#: src/patterns.md:737
msgid ""
"The range of values for a `char` type are precisely those ranges containing "
"all Unicode Scalar Values: `'\\u{0000}'..='\\u{D7FF}'` and "
"`'\\u{E000}'..='\\u{10FFFF}'`."
msgstr ""

#: src/patterns.md:741
msgid ""
"**Edition differences**: Before the 2021 edition, range patterns with both a "
"lower and upper bound may also be written using `...` in place of `..=`, "
"with the same meaning."
msgstr ""

#: src/patterns.md:745
msgid "Reference patterns"
msgstr ""

#: src/patterns.md:749
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ReferencePattern_ :  \n"
"   (`&`\\|`&&`) `mut`<sup>?</sup> [_PatternWithoutRange_](#patterns)"
msgstr ""

#: src/patterns.md:755
msgid ""
"Reference patterns dereference the pointers that are being matched and, "
"thus, borrow them."
msgstr ""

#: src/patterns.md:757
msgid "For example, these two matches on `x: &i32` are equivalent:"
msgstr ""

#: src/patterns.md:762 src/patterns.md:763
msgid "\"zero\""
msgstr ""

#: src/patterns.md:762 src/patterns.md:763
msgid "\"some\""
msgstr ""

#: src/patterns.md:770
msgid ""
"The grammar production for reference patterns has to match the token `&&` to "
"match a reference to a reference because it is a token by itself, not two "
"`&` tokens."
msgstr ""

#: src/patterns.md:774
msgid ""
"Adding the `mut` keyword dereferences a mutable reference. The mutability "
"must match the mutability of the reference."
msgstr ""

#: src/patterns.md:778
msgid "Reference patterns are always irrefutable."
msgstr ""

#: src/patterns.md:782
msgid "Struct patterns"
msgstr ""

#: src/patterns.md:786
msgid ""
"**<sup>Syntax</sup>**  \n"
"_StructPattern_ :  \n"
"   [_PathInExpression_](paths.md#paths-in-expressions) `{`  \n"
"      _StructPatternElements_ <sup>?</sup>  \n"
"   `}`"
msgstr ""

#: src/patterns.md:792
msgid ""
"_StructPatternElements_ :  \n"
"      _StructPatternFields_ (`,` | `,` _StructPatternEtCetera_)<sup>?</"
"sup>  \n"
"   | _StructPatternEtCetera_"
msgstr ""

#: src/patterns.md:796
msgid ""
"_StructPatternFields_ :  \n"
"   _StructPatternField_ (`,` _StructPatternField_) <sup>\\*</sup>"
msgstr ""

#: src/patterns.md:799
msgid ""
"_StructPatternField_ :  \n"
"   [_OuterAttribute_](attributes.md) <sup>\\*</sup>  \n"
"   (  \n"
"         [TUPLE_INDEX](tokens.md#tuple-index) `:` [_Pattern_](#patterns)  \n"
"      | [IDENTIFIER](identifiers.md) `:` [_Pattern_](#patterns)  \n"
"      | `ref`<sup>?</sup> `mut`<sup>?</sup> [IDENTIFIER](identifiers.md)  \n"
"   )"
msgstr ""

#: src/patterns.md:807
msgid ""
"_StructPatternEtCetera_ :  \n"
"   `..`"
msgstr ""

#: src/patterns.md:815
msgid ""
"Struct patterns match struct, enum, and union values that match all criteria "
"defined by its subpatterns. They are also used to [destructure]"
"(#destructuring) a struct, enum, or union value."
msgstr ""

#: src/patterns.md:820
msgid ""
"On a struct pattern, the fields are referenced by name, index (in the case "
"of tuple structs) or ignored by use of `..`:"
msgstr ""

#: src/patterns.md:831 src/patterns.md:844
msgid "// order doesn't matter\n"
msgstr ""

#: src/patterns.md:864
msgid ""
"If `..` is not used, a struct pattern used to match a struct is required to "
"specify all fields:"
msgstr ""

#: src/patterns.md:872 src/patterns.md:875 src/patterns.md:876
#: src/patterns.md:877 src/patterns.md:878 src/patterns.md:897
msgid "'X'"
msgstr ""

#: src/patterns.md:885
msgid ""
"A struct pattern used to match a union must specify exactly one field (see "
"[Pattern matching on unions](items/unions.md#pattern-matching-on-unions))."
msgstr ""

#: src/patterns.md:889
msgid ""
"The `ref` and/or `mut` _IDENTIFIER_ syntax matches any value and binds it to "
"a variable with the same name as the given field."
msgstr ""

#: src/patterns.md:899
msgid "// destructure all fields\n"
msgstr ""

#: src/patterns.md:904
msgid ""
"A struct pattern is refutable if the _PathInExpression_ resolves to a "
"constructor of an enum with more than one variant, or one of its subpatterns "
"is refutable."
msgstr ""

#: src/patterns.md:908
msgid "Tuple struct patterns"
msgstr ""

#: src/patterns.md:912
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TupleStructPattern_ :  \n"
"   [_PathInExpression_](paths.md#paths-in-expressions) `(` "
"_TupleStructItems_<sup>?</sup> `)`"
msgstr ""

#: src/patterns.md:916
msgid ""
"_TupleStructItems_ :  \n"
"   [_Pattern_](#patterns) ( `,` [_Pattern_](#patterns) )<sup>\\*</sup> "
"`,`<sup>?</sup>"
msgstr ""

#: src/patterns.md:921
msgid ""
"Tuple struct patterns match tuple struct and enum values that match all "
"criteria defined by its subpatterns. They are also used to [destructure]"
"(#destructuring) a tuple struct or enum value."
msgstr ""

#: src/patterns.md:926
msgid ""
"A tuple struct pattern is refutable if the _PathInExpression_ resolves to a "
"constructor of an enum with more than one variant, or one of its subpatterns "
"is refutable."
msgstr ""

#: src/patterns.md:930
msgid "Tuple patterns"
msgstr ""

#: src/patterns.md:934
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TuplePattern_ :  \n"
"   `(` _TuplePatternItems_<sup>?</sup> `)`"
msgstr ""

#: src/patterns.md:938
msgid ""
"_TuplePatternItems_ :  \n"
"      [_Pattern_](#patterns) `,`  \n"
"   | [_RestPattern_](#rest-patterns)  \n"
"   | [_Pattern_](#patterns) (`,` [_Pattern_](#patterns))<sup>+</sup> "
"`,`<sup>?</sup>"
msgstr ""

#: src/patterns.md:945
msgid ""
"Tuple patterns match tuple values that match all criteria defined by its "
"subpatterns. They are also used to [destructure](#destructuring) a tuple."
msgstr ""

#: src/patterns.md:950
msgid ""
"The form `(..)` with a single [_RestPattern_](#rest-patterns) is a special "
"form that does not require a comma, and matches a tuple of any size."
msgstr ""

#: src/patterns.md:954
msgid ""
"The tuple pattern is refutable when one of its subpatterns is refutable."
msgstr ""

#: src/patterns.md:956
msgid "An example of using tuple patterns:"
msgstr ""

#: src/patterns.md:968
msgid "Grouped patterns"
msgstr ""

#: src/patterns.md:972
msgid ""
"**<sup>Syntax</sup>**  \n"
"_GroupedPattern_ :  \n"
"   `(` [_Pattern_](#patterns) `)`"
msgstr ""

#: src/patterns.md:978
msgid ""
"Enclosing a pattern in parentheses can be used to explicitly control the "
"precedence of compound patterns. For example, a reference pattern next to a "
"range pattern such as `&0..=5` is ambiguous and is not allowed, but can be "
"expressed with parentheses."
msgstr ""

#: src/patterns.md:991
msgid "Slice patterns"
msgstr ""

#: src/patterns.md:995
msgid ""
"**<sup>Syntax</sup>**  \n"
"_SlicePattern_ :  \n"
"   `[` _SlicePatternItems_<sup>?</sup> `]`"
msgstr ""

#: src/patterns.md:999
msgid ""
"_SlicePatternItems_ :  \n"
"   [_Pattern_](#patterns) (`,` [_Pattern_](#patterns))<sup>\\*</sup> "
"`,`<sup>?</sup>"
msgstr ""

#: src/patterns.md:1004
msgid ""
"Slice patterns can match both arrays of fixed size and slices of dynamic "
"size."
msgstr ""

#: src/patterns.md:1007
msgid "// Fixed size\n"
msgstr ""

#: src/patterns.md:1010
msgid "\"starts with one\""
msgstr ""

#: src/patterns.md:1011
msgid "\"starts with something else\""
msgstr ""

#: src/patterns.md:1015
msgid "// Dynamic size\n"
msgstr ""

#: src/patterns.md:1018
msgid "/* this arm will not apply because the length doesn't match */"
msgstr ""

#: src/patterns.md:1019
msgid "/* this arm will apply */"
msgstr ""

#: src/patterns.md:1020
msgid ""
"/* this wildcard is required, since the length is not known statically */"
msgstr ""

#: src/patterns.md:1026
msgid ""
"Slice patterns are irrefutable when matching an array as long as each "
"element is irrefutable."
msgstr ""

#: src/patterns.md:1030
msgid ""
"When matching a slice, it is irrefutable only in the form with a single `..` "
"[rest pattern](#rest-patterns) or [identifier pattern](#identifier-patterns) "
"with the `..` rest pattern as a subpattern."
msgstr ""

#: src/patterns.md:1034
msgid ""
"Within a slice, a range pattern without both lower and upper bound must be "
"enclosed in parentheses, as in `(a..)`, to clarify it is intended to match "
"against a single slice element. A range pattern with both lower and upper "
"bound, like `a..=b`, is not required to be enclosed in parentheses."
msgstr ""

#: src/patterns.md:1039
msgid "Path patterns"
msgstr ""

#: src/patterns.md:1043
msgid ""
"**<sup>Syntax</sup>**  \n"
"_PathPattern_ :  \n"
"      [_PathExpression_](expressions/path-expr.md)"
msgstr ""

#: src/patterns.md:1049
msgid ""
"_Path patterns_ are patterns that refer either to constant values or to "
"structs or enum variants that have no fields."
msgstr ""

#: src/patterns.md:1054
msgid "Unqualified path patterns can refer to:"
msgstr ""

#: src/patterns.md:1056
msgid "enum variants"
msgstr ""

#: src/patterns.md:1057
msgid "structs"
msgstr ""

#: src/patterns.md:1058
msgid "constants"
msgstr ""

#: src/patterns.md:1059
msgid "associated constants"
msgstr ""

#: src/patterns.md:1063
msgid "Qualified path patterns can only refer to associated constants."
msgstr ""

#: src/patterns.md:1067
msgid ""
"Path patterns are irrefutable when they refer to structs or an enum variant "
"when the enum has only one variant or a constant whose type is irrefutable. "
"They are refutable when they refer to refutable constants or enum variants "
"for enums with multiple variants."
msgstr ""

#: src/patterns.md:1072
msgid "Constant patterns"
msgstr ""

#: src/patterns.md:1076
msgid ""
"When a constant `C` of type `T` is used as a pattern, we first check that "
"`T: PartialEq`."
msgstr ""

#: src/patterns.md:1080
msgid ""
"Furthermore we require that the value of `C` _has (recursive) structural "
"equality_, which is defined recursively as follows:"
msgstr ""

#: src/patterns.md:1084
msgid ""
"Integers as well as `str`, `bool` and `char` values always have structural "
"equality."
msgstr ""

#: src/patterns.md:1088
msgid ""
"Tuples, arrays, and slices have structural equality if all their fields/"
"elements have structural equality. (In particular, `()` and `[]` always have "
"structural equality.)"
msgstr ""

#: src/patterns.md:1093
msgid ""
"References have structural equality if the value they point to has "
"structural equality."
msgstr ""

#: src/patterns.md:1097
msgid ""
"A value of `struct` or `enum` type has structural equality if its "
"`PartialEq` instance is derived via `#[derive(PartialEq)]`, and all fields "
"(for enums: of the active variant) have structural equality."
msgstr ""

#: src/patterns.md:1102
msgid ""
"A raw pointer has structural equality if it was defined as a constant "
"integer (and then cast/transmuted)."
msgstr ""

#: src/patterns.md:1106
msgid "A float value has structural equality if it is not a `NaN`."
msgstr ""

#: src/patterns.md:1110
msgid "Nothing else has structural equality."
msgstr ""

#: src/patterns.md:1114
msgid ""
"In particular, the value of `C` must be known at pattern-building time "
"(which is pre-monomorphization). This means that associated consts that "
"involve generic parameters cannot be used as patterns."
msgstr ""

#: src/patterns.md:1119
msgid ""
"After ensuring all conditions are met, the constant value is translated into "
"a pattern, and now behaves exactly as-if that pattern had been written "
"directly. In particular, it fully participates in exhaustiveness checking. "
"(For raw pointers, constants are the only way to write such patterns. Only "
"`_` is ever considered exhaustive for these types.)"
msgstr ""

#: src/patterns.md:1125
msgid "Or-patterns"
msgstr ""

#: src/patterns.md:1127
msgid ""
"_Or-patterns_ are patterns that match on one of two or more sub-patterns "
"(for example `A | B | C`). They can nest arbitrarily. Syntactically, or-"
"patterns are allowed in any of the places where other patterns are allowed "
"(represented by the _Pattern_ production), with the exceptions of `let`\\-"
"bindings and function and closure arguments (represented by the "
"_PatternNoTopAlt_ production)."
msgstr ""

#: src/patterns.md:1133
msgid "Static semantics"
msgstr ""

#: src/patterns.md:1137
msgid ""
"Given a pattern `p | q` at some depth for some arbitrary patterns `p` and "
"`q`, the pattern is considered ill-formed if:"
msgstr ""

#: src/patterns.md:1139
msgid ""
"the type inferred for `p` does not unify with the type inferred for `q`, or"
msgstr ""

#: src/patterns.md:1140
msgid "the same set of bindings are not introduced in `p` and `q`, or"
msgstr ""

#: src/patterns.md:1141
msgid ""
"the type of any two bindings with the same name in `p` and `q` do not unify "
"with respect to types or binding modes."
msgstr ""

#: src/patterns.md:1143
msgid ""
"Unification of types is in all instances aforementioned exact and implicit "
"[type coercions](type-coercions.md) do not apply."
msgstr ""

#: src/patterns.md:1147
msgid ""
"When type checking an expression `match e_s { a_1 => e_1, ... a_n => e_n }`, "
"for each match arm `a_i` which contains a pattern of form `p_i | q_i`, the "
"pattern `p_i | q_i` is considered ill formed if, at the depth `d` where it "
"exists the fragment of `e_s` at depth `d`, the type of the expression "
"fragment does not unify with `p_i | q_i`."
msgstr ""

#: src/patterns.md:1155
msgid ""
"With respect to exhaustiveness checking, a pattern `p | q` is considered to "
"cover `p` as well as `q`. For some constructor `c(x, ..)` the distributive "
"law applies such that `c(p | q, ..rest)` covers the same set of value as "
"`c(p, ..rest) | c(q, ..rest)` does. This can be applied recursively until "
"there are no more nested patterns of form `p | q` other than those that "
"exist at the top level."
msgstr ""

#: src/patterns.md:1159
msgid ""
"Note that by _\"constructor\"_ we do not refer to tuple struct patterns, but "
"rather we refer to a pattern for any product type. This includes enum "
"variants, tuple structs, structs with named fields, arrays, tuples, and "
"slices."
msgstr ""

#: src/patterns.md:1164
msgid "Dynamic semantics"
msgstr ""

#: src/patterns.md:1168
msgid ""
"The dynamic semantics of pattern matching a scrutinee expression `e_s` "
"against a pattern `c(p | q, ..rest)` at depth `d` where `c` is some "
"constructor, `p` and `q` are arbitrary patterns, and `rest` is optionally "
"any remaining potential factors in `c`, is defined as being the same as that "
"of `c(p, ..rest) | c(q, ..rest)`."
msgstr ""

#: src/patterns.md:1175
msgid "Precedence with other undelimited patterns"
msgstr ""

#: src/patterns.md:1177
msgid ""
"As shown elsewhere in this chapter, there are several types of patterns that "
"are syntactically undelimited, including identifier patterns, reference "
"patterns, and or-patterns. Or-patterns always have the lowest-precedence. "
"This allows us to reserve syntactic space for a possible future type "
"ascription feature and also to reduce ambiguity. For example, `x @ A(..) | "
"B(..)` will result in an error that `x` is not bound in all patterns. `&A(x) "
"| B(x)` will result in a type mismatch between `x` in the different "
"subpatterns."
msgstr ""

#: src/types.md:50
msgid ""
"Every variable, item, and value in a Rust program has a type. The _type_ of "
"a _value_ defines the interpretation of the memory holding it and the "
"operations that may be performed on the value."
msgstr ""

#: src/types.md:56
msgid ""
"Built-in types are tightly integrated into the language, in nontrivial ways "
"that are not possible to emulate in user-defined types."
msgstr ""

#: src/types.md:61
msgid "User-defined types have limited capabilities."
msgstr ""

#: src/types.md:65
msgid "The list of types is:"
msgstr ""

#: src/types.md:67
msgid "Primitive types:"
msgstr ""

#: src/types.md:68
msgid "[Boolean](types/boolean.md) --- `bool`"
msgstr ""

#: src/types.md:69
msgid "[Numeric](types/numeric.md) --- integer and float"
msgstr ""

#: src/types.md:70
msgid "[Textual](types/textual.md) --- `char` and `str`"
msgstr ""

#: src/types.md:71
msgid "[Never](types/never.md) --- `!` --- a type with no values"
msgstr ""

#: src/types.md:72
msgid "Sequence types:"
msgstr ""

#: src/types.md:73
msgid "[Tuple](types/tuple.md)"
msgstr ""

#: src/types.md:74
msgid "[Array](types/array.md)"
msgstr ""

#: src/types.md:75
msgid "[Slice](types/slice.md)"
msgstr ""

#: src/types.md:76
msgid "User-defined types:"
msgstr ""

#: src/types.md:77
msgid "[Struct](types/struct.md)"
msgstr ""

#: src/types.md:78
msgid "[Enum](types/enum.md)"
msgstr ""

#: src/types.md:79
msgid "[Union](types/union.md)"
msgstr ""

#: src/types.md:80
msgid "Function types:"
msgstr ""

#: src/types.md:81
msgid "[Functions](types/function-item.md)"
msgstr ""

#: src/types.md:82
msgid "[Closures](types/closure.md)"
msgstr ""

#: src/types.md:83
msgid "Pointer types:"
msgstr ""

#: src/types.md:84
msgid "[References](types/pointer.md#shared-references-)"
msgstr ""

#: src/types.md:85
msgid "[Raw pointers](types/pointer.md#raw-pointers-const-and-mut)"
msgstr ""

#: src/types.md:86 src/special-types-and-traits.md:132
msgid "[Function pointers](types/function-pointer.md)"
msgstr ""

#: src/types.md:87
msgid "Trait types:"
msgstr ""

#: src/types.md:88
msgid "[Trait objects](types/trait-object.md)"
msgstr ""

#: src/types.md:89
msgid "[Impl trait](types/impl-trait.md)"
msgstr ""

#: src/types.md:93
msgid "Type expressions"
msgstr ""

#: src/types.md:97
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Type_ :  \n"
"      _TypeNoBounds_  \n"
"   | [_ImplTraitType_](types/impl-trait.md)  \n"
"   | [_TraitObjectType_](types/trait-object.md)"
msgstr ""

#: src/types.md:103
msgid ""
"_TypeNoBounds_ :  \n"
"      [_ParenthesizedType_](types.md#parenthesized-types)  \n"
"   | [_ImplTraitTypeOneBound_](types/impl-trait.md)  \n"
"   | [_TraitObjectTypeOneBound_](types/trait-object.md)  \n"
"   | [_TypePath_](paths.md#paths-in-types)  \n"
"   | [_TupleType_](types/tuple.md#tuple-types)  \n"
"   | [_NeverType_](types/never.md)  \n"
"   | [_RawPointerType_](types/pointer.md#raw-pointers-const-and-mut)  \n"
"   | [_ReferenceType_](types/pointer.md#shared-references-)  \n"
"   | [_ArrayType_](types/array.md)  \n"
"   | [_SliceType_](types/slice.md)  \n"
"   | [_InferredType_](types/inferred.md)  \n"
"   | [_QualifiedPathInType_](paths.md#qualified-paths)  \n"
"   | [_BareFunctionType_](types/function-pointer.md)  \n"
"   | [_MacroInvocation_](macros.md#macro-invocation)"
msgstr ""

#: src/types.md:121
msgid ""
"A _type expression_ as defined in the _Type_ grammar rule above is the "
"syntax for referring to a type. It may refer to:"
msgstr ""

#: src/types.md:126
msgid ""
"Sequence types ([tuple](types/tuple.md), [array](types/array.md), [slice]"
"(types/slice.md))."
msgstr ""

#: src/types.md:130
msgid "[Type paths](paths.md#paths-in-types) which can reference:"
msgstr ""

#: src/types.md:131
msgid ""
"Primitive types ([boolean](types/boolean.md), [numeric](types/numeric.md), "
"[textual](types/textual.md))."
msgstr ""

#: src/types.md:132
msgid ""
"Paths to an [item](items.md) ([struct](types/struct.md), [enum](types/"
"enum.md), [union](types/union.md), [type alias](items/type-aliases.md), "
"[trait](types/trait-object.md))."
msgstr ""

#: src/types.md:133
msgid "[`Self` path](paths.md#self-1) where `Self` is the implementing type."
msgstr ""

#: src/types.md:134
msgid "Generic [type parameters](types/parameters.md)."
msgstr ""

#: src/types.md:138
msgid ""
"Pointer types ([reference](types/pointer.md#shared-references-), [raw "
"pointer](types/pointer.md#raw-pointers-const-and-mut), [function pointer]"
"(types/function-pointer.md))."
msgstr ""

#: src/types.md:142
msgid ""
"The [inferred type](types/inferred.md) which asks the compiler to determine "
"the type."
msgstr ""

#: src/types.md:146
msgid "[Parentheses](#parenthesized-types) which are used for disambiguation."
msgstr ""

#: src/types.md:150
msgid ""
"Trait types: [Trait objects](types/trait-object.md) and [impl trait](types/"
"impl-trait.md)."
msgstr ""

#: src/types.md:154
msgid "The [never](types/never.md) type."
msgstr ""

#: src/types.md:158
msgid "[Macros](macros.md) which expand to a type expression."
msgstr ""

#: src/types.md:162
msgid "Parenthesized types"
msgstr ""

#: src/types.md:166
msgid ""
"_ParenthesizedType_ :  \n"
"   `(` [_Type_](types.md#type-expressions) `)`"
msgstr ""

#: src/types.md:171
msgid ""
"In some situations the combination of types may be ambiguous. Use "
"parentheses around a type to avoid ambiguity. For example, the `+` operator "
"for [type boundaries](trait-bounds.md) within a [reference type](types/"
"pointer.md#shared-references-) is unclear where the boundary applies, so the "
"use of parentheses is required. Grammar rules that require this "
"disambiguation use the [_TypeNoBounds_](types.md#type-expressions) rule "
"instead of [_Type_](types.md#type-expressions)."
msgstr ""

#: src/types.md:185
msgid "Recursive types"
msgstr ""

#: src/types.md:189
msgid ""
"Nominal types — [structs](types/struct.md), [enumerations](types/enum.md), "
"and [unions](types/union.md) — may be recursive. That is, each `enum` "
"variant or `struct` or `union` field may refer, directly or indirectly, to "
"the enclosing `enum` or `struct` type itself."
msgstr ""

#: src/types.md:196
msgid "Such recursion has restrictions:"
msgstr ""

#: src/types.md:198
msgid ""
"Recursive types must include a nominal type in the recursion (not mere [type "
"aliases](items/type-aliases.md), or other structural types such as [arrays]"
"(types/array.md) or [tuples](types/tuple.md)). So `type Rec = &'static "
"[Rec]` is not allowed."
msgstr ""

#: src/types.md:201
msgid ""
"The size of a recursive type must be finite; in other words the recursive "
"fields of the type must be [pointer types](types/pointer.md)."
msgstr ""

#: src/types.md:204
msgid "An example of a _recursive_ type and its use:"
msgstr ""

#: src/types/boolean.md:11
msgid ""
"The _boolean type_ or _bool_ is a primitive data type that can take on one "
"of two values, called _true_ and _false_."
msgstr ""

#: src/types/boolean.md:16
msgid ""
"Values of this type may be created using a [literal expression](../"
"expressions/literal-expr.md) using the keywords `true` and `false` "
"corresponding to the value of the same name."
msgstr ""

#: src/types/boolean.md:21
msgid ""
"This type is a part of the [language prelude](../names/preludes.md#language-"
"prelude) with the [name](../names.md) `bool`."
msgstr ""

#: src/types/boolean.md:25
msgid ""
"An object with the boolean type has a [size and alignment](../type-"
"layout.md#size-and-alignment) of 1 each."
msgstr ""

#: src/types/boolean.md:29
msgid ""
"The value false has the bit pattern `0x00` and the value true has the bit "
"pattern `0x01`. It is [undefined behavior](../behavior-considered-"
"undefined.md) for an object with the boolean type to have any other bit "
"pattern."
msgstr ""

#: src/types/boolean.md:35
msgid ""
"The boolean type is the type of many operands in various [expressions](../"
"expressions.md):"
msgstr ""

#: src/types/boolean.md:39
msgid ""
"The condition operand in [if expressions](../expressions/if-expr.md#if-"
"expressions) and [while expressions](../expressions/loop-expr.md#predicate-"
"loops)"
msgstr ""

#: src/types/boolean.md:43
msgid ""
"The operands in [lazy boolean operator expressions](../expressions/operator-"
"expr.md#lazy-boolean-operators)"
msgstr ""

#: src/types/boolean.md:45
msgid ""
"**Note**: The boolean type acts similarly to but is not an [enumerated type]"
"(enum.md). In practice, this mostly means that constructors are not "
"associated to the type (e.g. `bool::true`)."
msgstr ""

#: src/types/boolean.md:51
msgid ""
"Like all primitives, the boolean type [implements](../items/"
"implementations.md) the [traits](../items/traits.md) [`Clone`](../special-"
"types-and-traits.md#clone), [`Copy`](../special-types-and-traits.md#copy), "
"[`Sized`](../special-types-and-traits.md#sized), [`Send`](../special-types-"
"and-traits.md#send), and [`Sync`](../special-types-and-traits.md#sync)."
msgstr ""

#: src/types/boolean.md:55
msgid ""
"**Note**: See the [standard library docs](../../std/primitive.bool.html) for "
"library operations."
msgstr ""

#: src/types/boolean.md:59
msgid "Operations on boolean values"
msgstr ""

#: src/types/boolean.md:62
msgid ""
"boolean type for its operands, they evaluate using the rules of [boolean "
"logic](https://en.wikipedia.org/wiki/Boolean_algebra)."
msgstr ""

#: src/types/boolean.md:66
msgid "Logical not"
msgstr ""

#: src/types/boolean.md:68 src/types/boolean.md:77 src/types/boolean.md:88
#: src/types/boolean.md:99 src/types/boolean.md:112 src/types/boolean.md:121
#: src/inline-assembly.md:842 src/inline-assembly.md:843
#: src/inline-assembly.md:861
msgid "`b`"
msgstr ""

#: src/types/boolean.md:68
msgid "[`!b`](../expressions/operator-expr.md#negation-operators)"
msgstr ""

#: src/types/boolean.md:70 src/types/boolean.md:71 src/types/boolean.md:79
#: src/types/boolean.md:80 src/types/boolean.md:81 src/types/boolean.md:90
#: src/types/boolean.md:91 src/types/boolean.md:92 src/types/boolean.md:101
#: src/types/boolean.md:102 src/types/boolean.md:103 src/types/boolean.md:114
#: src/types/boolean.md:115 src/types/boolean.md:116 src/types/boolean.md:117
#: src/types/boolean.md:123 src/types/boolean.md:124 src/types/boolean.md:125
msgid "`true`"
msgstr ""

#: src/types/boolean.md:70 src/types/boolean.md:71 src/types/boolean.md:80
#: src/types/boolean.md:81 src/types/boolean.md:82 src/types/boolean.md:91
#: src/types/boolean.md:92 src/types/boolean.md:93 src/types/boolean.md:101
#: src/types/boolean.md:102 src/types/boolean.md:103 src/types/boolean.md:104
#: src/types/boolean.md:115 src/types/boolean.md:116 src/types/boolean.md:117
#: src/types/boolean.md:123 src/types/boolean.md:124 src/types/boolean.md:125
#: src/types/boolean.md:126
msgid "`false`"
msgstr ""

#: src/types/boolean.md:75
msgid "Logical or"
msgstr ""

#: src/types/boolean.md:77
msgid ""
"[<code>a \\| b</code>](../expressions/operator-expr.md#arithmetic-and-"
"logical-binary-operators)"
msgstr ""

#: src/types/boolean.md:86
msgid "Logical and"
msgstr ""

#: src/types/boolean.md:88
msgid ""
"[`a & b`](../expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators)"
msgstr ""

#: src/types/boolean.md:97
msgid "Logical xor"
msgstr ""

#: src/types/boolean.md:99
msgid ""
"[`a ^ b`](../expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators)"
msgstr ""

#: src/types/boolean.md:108
msgid "Comparisons"
msgstr ""

#: src/types/boolean.md:112
msgid "[`a == b`](../expressions/operator-expr.md#comparison-operators)"
msgstr ""

#: src/types/boolean.md:121
msgid "[`a > b`](../expressions/operator-expr.md#comparison-operators)"
msgstr ""

#: src/types/boolean.md:130
msgid "`a != b` is the same as `!(a == b)`"
msgstr ""

#: src/types/boolean.md:134
msgid "`a >= b` is the same as `a == b | a > b`"
msgstr ""

#: src/types/boolean.md:138
msgid "`a < b` is the same as `!(a >= b)`"
msgstr ""

#: src/types/boolean.md:142
msgid "`a <= b` is the same as `a == b | a < b`"
msgstr ""

#: src/types/boolean.md:146 src/types/numeric.md:69 src/types/pointer.md:99
msgid "Bit validity"
msgstr ""

#: src/types/boolean.md:148
msgid ""
"The single byte of a `bool` is guaranteed to be initialized (in other words, "
"`transmute::<bool, u8>(...)` is always sound -- but since some bit patterns "
"are invalid `bool`s, the inverse is not always sound)."
msgstr ""

#: src/types/numeric.md:7
msgid "Integer types"
msgstr ""

#: src/types/numeric.md:11
msgid "The unsigned integer types consist of:"
msgstr ""

#: src/types/numeric.md:13 src/types/numeric.md:25
msgid "Minimum"
msgstr ""

#: src/types/numeric.md:13 src/types/numeric.md:25
msgid "Maximum"
msgstr ""

#: src/types/numeric.md:15
msgid "2<sup>8</sup>\\-1"
msgstr ""

#: src/types/numeric.md:16
msgid "`u16`"
msgstr ""

#: src/types/numeric.md:16
msgid "2<sup>16</sup>\\-1"
msgstr ""

#: src/types/numeric.md:17
msgid "`u32`"
msgstr ""

#: src/types/numeric.md:17
msgid "2<sup>32</sup>\\-1"
msgstr ""

#: src/types/numeric.md:18
msgid "`u64`"
msgstr ""

#: src/types/numeric.md:18
msgid "2<sup>64</sup>\\-1"
msgstr ""

#: src/types/numeric.md:19
msgid "`u128`"
msgstr ""

#: src/types/numeric.md:19
msgid "2<sup>128</sup>\\-1"
msgstr ""

#: src/types/numeric.md:23
msgid "The signed two's complement integer types consist of:"
msgstr ""

#: src/types/numeric.md:27 src/inline-assembly.md:590
msgid "`i8`"
msgstr ""

#: src/types/numeric.md:27
msgid "\\-(2<sup>7</sup>)"
msgstr ""

#: src/types/numeric.md:27
msgid "2<sup>7</sup>\\-1"
msgstr ""

#: src/types/numeric.md:28
msgid "`i16`"
msgstr ""

#: src/types/numeric.md:28
msgid "\\-(2<sup>15</sup>)"
msgstr ""

#: src/types/numeric.md:28
msgid "2<sup>15</sup>\\-1"
msgstr ""

#: src/types/numeric.md:29
msgid "`i32`"
msgstr ""

#: src/types/numeric.md:29
msgid "\\-(2<sup>31</sup>)"
msgstr ""

#: src/types/numeric.md:29
msgid "2<sup>31</sup>\\-1"
msgstr ""

#: src/types/numeric.md:30
msgid "`i64`"
msgstr ""

#: src/types/numeric.md:30
msgid "\\-(2<sup>63</sup>)"
msgstr ""

#: src/types/numeric.md:30
msgid "2<sup>63</sup>\\-1"
msgstr ""

#: src/types/numeric.md:31
msgid "`i128`"
msgstr ""

#: src/types/numeric.md:31
msgid "\\-(2<sup>127</sup>)"
msgstr ""

#: src/types/numeric.md:31
msgid "2<sup>127</sup>\\-1"
msgstr ""

#: src/types/numeric.md:36
msgid "Floating-point types"
msgstr ""

#: src/types/numeric.md:38
msgid ""
"The IEEE 754-2008 \"binary32\" and \"binary64\" floating-point types are "
"`f32` and `f64`, respectively."
msgstr ""

#: src/types/numeric.md:43
msgid "Machine-dependent integer types"
msgstr ""

#: src/types/numeric.md:47
msgid ""
"The `usize` type is an unsigned integer type with the same number of bits as "
"the platform's pointer type. It can represent every memory address in the "
"process."
msgstr ""

#: src/types/numeric.md:52
msgid ""
"The `isize` type is a signed integer type with the same number of bits as "
"the platform's pointer type. The theoretical upper bound on object and array "
"size is the maximum `isize` value. This ensures that `isize` can be used to "
"calculate differences between pointers into an object or array and can "
"address every byte within an object along with one byte past the end."
msgstr ""

#: src/types/numeric.md:60
msgid "`usize` and `isize` are at least 16-bits wide."
msgstr ""

#: src/types/numeric.md:62
msgid ""
"**Note**: Many pieces of Rust code may assume that pointers, `usize`, and "
"`isize` are either 32-bit or 64-bit. As a consequence, 16-bit pointer "
"support is limited and may require explicit care and acknowledgment from a "
"library to support."
msgstr ""

#: src/types/numeric.md:71
msgid ""
"For every numeric type, `T`, the bit validity of `T` is equivalent to the "
"bit validity of `[u8; size_of::<T>()]`. An uninitialized byte is not a valid "
"`u8`."
msgstr ""

#: src/types/textual.md:7
msgid "The types `char` and `str` hold textual data."
msgstr ""

#: src/types/textual.md:11
msgid ""
"A value of type `char` is a [Unicode scalar value](http://www.unicode.org/"
"glossary/#unicode_scalar_value) (i.e. a code point that is not a surrogate), "
"represented as a 32-bit unsigned word in the 0x0000 to 0xD7FF or 0xE000 to "
"0x10FFFF range."
msgstr ""

#: src/types/textual.md:17
msgid ""
"It is immediate [undefined behavior](../behavior-considered-undefined.md) to "
"create a `char` that falls outside this range. A `[char]` is effectively a "
"UCS-4 / UTF-32 string of length 1."
msgstr ""

#: src/types/textual.md:23
msgid ""
"A value of type `str` is represented the same way as `[u8]`, a slice of 8-"
"bit unsigned bytes. However, the Rust standard library makes extra "
"assumptions about `str`: methods working on `str` assume and ensure that the "
"data in there is valid UTF-8. Calling a `str` method with a non-UTF-8 buffer "
"can cause [undefined behavior](../behavior-considered-undefined.md) now or "
"in the future."
msgstr ""

#: src/types/textual.md:31
msgid ""
"Since `str` is a [dynamically sized type](../dynamically-sized-types.md), it "
"can only be instantiated through a pointer type, such as `&str`."
msgstr ""

#: src/types/textual.md:36
msgid "Layout and bit validity"
msgstr ""

#: src/types/textual.md:40
msgid ""
"`char` is guaranteed to have the same size and alignment as `u32` on all "
"platforms."
msgstr ""

#: src/types/textual.md:44
msgid ""
"Every byte of a `char` is guaranteed to be initialized (in other words, "
"`transmute::<char, [u8; size_of::<char>()]>(...)` is always sound -- but "
"since some bit patterns are invalid `char`s, the inverse is not always "
"sound)."
msgstr ""

#: src/types/never.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_NeverType_ : `!`"
msgstr ""

#: src/types/never.md:12
msgid ""
"The never type `!` is a type with no values, representing the result of "
"computations that never complete."
msgstr ""

#: src/types/never.md:17
msgid "Expressions of type `!` can be coerced into any other type."
msgstr ""

#: src/types/never.md:21
msgid ""
"The `!` type can **only** appear in function return types presently, "
"indicating it is a diverging function that never returns."
msgstr ""

#: src/types/never.md:26
msgid "\"This call never returns.\""
msgstr ""

#: src/types/tuple.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TupleType_ :  \n"
"      `(` `)`  \n"
"   | `(` ( [_Type_](../types.md#type-expressions) `,` )<sup>+</sup> [_Type_]"
"(../types.md#type-expressions)<sup>?</sup> `)`"
msgstr ""

#: src/types/tuple.md:14
msgid ""
"_Tuple types_ are a family of structural types[^1] for heterogeneous lists "
"of other types."
msgstr ""

#: src/types/tuple.md:16
msgid ""
"The syntax for a tuple type is a parenthesized, comma-separated list of "
"types."
msgstr ""

#: src/types/tuple.md:20
msgid ""
"1-ary tuples require a comma after their element type to be disambiguated "
"with a [parenthesized type](../types.md#parenthesized-types)."
msgstr ""

#: src/types/tuple.md:24
msgid ""
"A tuple type has a number of fields equal to the length of the list of "
"types. This number of fields determines the _arity_ of the tuple. A tuple "
"with `n` fields is called an _n-ary tuple_. For example, a tuple with 2 "
"fields is a 2-ary tuple."
msgstr ""

#: src/types/tuple.md:31
msgid ""
"Fields of tuples are named using increasing numeric names matching their "
"position in the list of types. The first field is `0`. The second field is "
"`1`. And so on. The type of each field is the type of the same position in "
"the tuple's list of types."
msgstr ""

#: src/types/tuple.md:39
msgid ""
"For convenience and historical reasons, the tuple type with no fields (`()`) "
"is often called _unit_ or _the unit type_. Its one value is also called "
"_unit_ or _the unit value_."
msgstr ""

#: src/types/tuple.md:42
msgid "Some examples of tuple types:"
msgstr ""

#: src/types/tuple.md:45
msgid "`(i32,)` (1-ary tuple)"
msgstr ""

#: src/types/tuple.md:47
msgid "`(String, i32)`"
msgstr ""

#: src/types/tuple.md:48
msgid "`(i32, String)` (different type from the previous example)"
msgstr ""

#: src/types/tuple.md:49
msgid "`(i32, f64, Vec<String>, Option<bool>)`"
msgstr ""

#: src/types/tuple.md:53
msgid ""
"Values of this type are constructed using a [tuple expression](../"
"expressions/tuple-expr.md#tuple-expressions). Furthermore, various "
"expressions will produce the unit value if there is no other meaningful "
"value for it to evaluate to."
msgstr ""

#: src/types/tuple.md:58
msgid ""
"Tuple fields can be accessed by either a [tuple index expression](../"
"expressions/tuple-expr.md#tuple-indexing-expressions) or [pattern matching]"
"(../patterns.md#tuple-patterns)."
msgstr ""

#: src/types/tuple.md:60
msgid ""
"Structural types are always equivalent if their internal types are "
"equivalent. For a nominal version of tuples, see [tuple structs](./"
"struct.md)."
msgstr ""

#: src/types/array.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ArrayType_ :  \n"
"   `[` [_Type_](../types.md#type-expressions) `;` [_Expression_](../"
"expressions.md) `]`"
msgstr ""

#: src/types/array.md:13
msgid ""
"An array is a fixed-size sequence of `N` elements of type `T`. The array "
"type is written as `[T; N]`."
msgstr ""

#: src/types/array.md:18
msgid ""
"The size is a [constant expression](../const_eval.md#constant-expressions) "
"that evaluates to a [`usize`](numeric.md#machine-dependent-integer-types)."
msgstr ""

#: src/types/array.md:23
msgid "// A stack-allocated array\n"
msgstr ""

#: src/types/array.md:25 src/types/slice.md:28
msgid "// A heap-allocated array, coerced to a slice\n"
msgstr ""

#: src/types/array.md:32
msgid ""
"All elements of arrays are always initialized, and access to an array is "
"always bounds-checked in safe methods and operators."
msgstr ""

#: src/types/array.md:35
msgid ""
"Note: The [`Vec<T>`](../../alloc/vec/struct.Vec.html) standard library type "
"provides a heap-allocated resizable array type."
msgstr ""

#: src/types/slice.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_SliceType_ :  \n"
"   `[` [_Type_](../types.md#type-expressions) `]`"
msgstr ""

#: src/types/slice.md:13
msgid ""
"A slice is a [dynamically sized type](../dynamically-sized-types.md) "
"representing a 'view' into a sequence of elements of type `T`. The slice "
"type is written as `[T]`."
msgstr ""

#: src/types/slice.md:18
msgid "Slice types are generally used through pointer types. For example:"
msgstr ""

#: src/types/slice.md:20
msgid ""
"`&[T]`: a 'shared slice', often just called a 'slice'. It doesn't own the "
"data it points to; it borrows it."
msgstr ""

#: src/types/slice.md:22
msgid ""
"`&mut [T]`: a 'mutable slice'. It mutably borrows the data it points to."
msgstr ""

#: src/types/slice.md:23
msgid "`Box<[T]>`: a 'boxed slice'"
msgstr ""

#: src/types/slice.md:30
msgid "// A (shared) slice into an array\n"
msgstr ""

#: src/types/slice.md:37
msgid ""
"All elements of slices are always initialized, and access to a slice is "
"always bounds-checked in safe methods and operators."
msgstr ""

#: src/types/struct.md:7
msgid ""
"A `struct` _type_ is a heterogeneous product of other types, called the "
"_fields_ of the type.[^structtype]"
msgstr ""

#: src/types/struct.md:12
msgid ""
"New instances of a `struct` can be constructed with a [struct expression](../"
"expressions/struct-expr.md)."
msgstr ""

#: src/types/struct.md:16
msgid ""
"The memory layout of a `struct` is undefined by default to allow for "
"compiler optimizations like field reordering, but it can be fixed with the "
"[`repr` attribute](../type-layout.md#representations). In either case, "
"fields may be given in any order in a corresponding struct _expression_; the "
"resulting `struct` value will always have the same memory layout."
msgstr ""

#: src/types/struct.md:24
msgid ""
"The fields of a `struct` may be qualified by [visibility modifiers](../"
"visibility-and-privacy.md), to allow access to data in a struct outside a "
"module."
msgstr ""

#: src/types/struct.md:29
msgid ""
"A _tuple struct_ type is just like a struct type, except that the fields are "
"anonymous."
msgstr ""

#: src/types/struct.md:34
msgid ""
"A _unit-like struct_ type is like a struct type, except that it has no "
"fields. The one value constructed by the associated [struct expression](../"
"expressions/struct-expr.md) is the only value that inhabits such a type."
msgstr ""

#: src/types/struct.md:38
msgid ""
"`struct` types are analogous to `struct` types in C, the _record_ types of "
"the ML family, or the _struct_ types of the Lisp family."
msgstr ""

#: src/types/enum.md:7
msgid ""
"An _enumerated type_ is a nominal, heterogeneous disjoint union type, "
"denoted by the name of an [`enum` item](../items/enumerations.md). "
"[^enumtype]"
msgstr ""

#: src/types/enum.md:12
msgid ""
"An [`enum` item](../items/enumerations.md) declares both the type and a "
"number of _variants_, each of which is independently named and has the "
"syntax of a struct, tuple struct or unit-like struct."
msgstr ""

#: src/types/enum.md:18
msgid ""
"New instances of an `enum` can be constructed with a [struct expression](../"
"expressions/struct-expr.md)."
msgstr ""

#: src/types/enum.md:22
msgid ""
"Any `enum` value consumes as much memory as the largest variant for its "
"corresponding `enum` type, as well as the size needed to store a "
"discriminant."
msgstr ""

#: src/types/enum.md:27
msgid ""
"Enum types cannot be denoted _structurally_ as types, but must be denoted by "
"named reference to an [`enum` item](../items/enumerations.md)."
msgstr ""

#: src/types/enum.md:30
msgid ""
"The `enum` type is analogous to a `data` constructor declaration in Haskell, "
"or a _pick ADT_ in Limbo."
msgstr ""

#: src/types/union.md:7
msgid ""
"A _union type_ is a nominal, heterogeneous C-like union, denoted by the name "
"of a [`union` item](../items/unions.md)."
msgstr ""

#: src/types/union.md:12
msgid ""
"Unions have no notion of an \"active field\". Instead, every union access "
"transmutes parts of the content of the union to the type of the accessed "
"field."
msgstr ""

#: src/types/union.md:17
msgid ""
"Since transmutes can cause unexpected or undefined behaviour, `unsafe` is "
"required to read from a union field."
msgstr ""

#: src/types/union.md:22
msgid ""
"Union field types are also restricted to a subset of types which ensures "
"that they never need dropping. See the [item](../items/unions.md) "
"documentation for further details."
msgstr ""

#: src/types/union.md:28
msgid ""
"The memory layout of a `union` is undefined by default (in particular, "
"fields do _not_ have to be at offset 0), but the `#[repr(...)]` attribute "
"can be used to fix a layout."
msgstr ""

#: src/types/function-item.md:7
msgid ""
"When referred to, a function item, or the constructor of a tuple-like struct "
"or enum variant, yields a zero-sized value of its _function item type_."
msgstr ""

#: src/types/function-item.md:12
msgid ""
"That type explicitly identifies the function - its name, its type arguments, "
"and its early-bound lifetime arguments (but not its late-bound lifetime "
"arguments, which are only assigned when the function is called) - so the "
"value does not need to contain an actual function pointer, and no "
"indirection is needed when the function is called."
msgstr ""

#: src/types/function-item.md:20
msgid ""
"There is no syntax that directly refers to a function item type, but the "
"compiler will display the type as something like `fn(u32) -> i32 {fn_name}` "
"in error messages."
msgstr ""

#: src/types/function-item.md:24
msgid ""
"Because the function item type explicitly identifies the function, the item "
"types of different functions - different items, or the same item with "
"different generics - are distinct, and mixing them will create a type error:"
msgstr ""

#: src/types/function-item.md:31
msgid "//~ ERROR mismatched types\n"
msgstr ""

#: src/types/function-item.md:36
msgid ""
"However, there is a [coercion](../type-coercions.md) from function items to "
"[function pointers](function-pointer.md) with the same signature, which is "
"triggered not only when a function item is used when a function pointer is "
"directly expected, but also when different function item types with the same "
"signature meet in different arms of the same `if` or `match`:"
msgstr ""

#: src/types/function-item.md:45
msgid "// `foo_ptr_1` has function pointer type `fn()` here\n"
msgstr ""

#: src/types/function-item.md:48
msgid "// ... and so does `foo_ptr_2` - this type-checks.\n"
msgstr ""

#: src/types/function-item.md:59
msgid ""
"All function items implement [`Fn`](../../core/ops/function/trait.Fn.html), "
"[`FnMut`](../../core/ops/function/trait.FnMut.html), [`FnOnce`](../../core/"
"ops/function/trait.FnOnce.html), [`Copy`](../special-types-and-"
"traits.md#copy), [`Clone`](../special-types-and-traits.md#clone), [`Send`]"
"(../special-types-and-traits.md#send), and [`Sync`](../special-types-and-"
"traits.md#sync)."
msgstr ""

#: src/types/closure.md:7
msgid ""
"A [closure expression](../expressions/closure-expr.md) produces a closure "
"value with a unique, anonymous type that cannot be written out. A closure "
"type is approximately equivalent to a struct which contains the captured "
"values. For instance, the following closure:"
msgstr ""

#: src/types/closure.md:30
msgid "// Prints \"Point { x: 2, y: 1 }\".\n"
msgstr ""

#: src/types/closure.md:33
msgid "generates a closure type roughly like the following:"
msgstr ""

#: src/types/closure.md:37
msgid ""
"// Note: This is not exactly how it is translated, this is only for\n"
"// illustration.\n"
msgstr ""

#: src/types/closure.md:47 src/types/closure.md:673
msgid "\"rust-call\""
msgstr ""

#: src/types/closure.md:55
msgid "so that the call to `f` works as if it were:"
msgstr ""

#: src/types/closure.md:59
msgid ""
"// Note: This is not valid Rust due to the duplicate mutable borrows.\n"
"// This is only provided as an illustration.\n"
msgstr ""

#: src/types/closure.md:70
msgid ""
"A _capture mode_ determines how a [place expression](../expressions.md#place-"
"expressions-and-value-expressions) from the environment is borrowed or moved "
"into the closure. The capture modes are:"
msgstr ""

#: src/types/closure.md:73
msgid ""
"Immutable borrow (`ImmBorrow`) --- The place expression is captured as a "
"[shared reference](pointer.md#references--and-mut)."
msgstr ""

#: src/types/closure.md:74
msgid ""
"Unique immutable borrow (`UniqueImmBorrow`) --- This is similar to an "
"immutable borrow, but must be unique as described [below](#unique-immutable-"
"borrows-in-captures)."
msgstr ""

#: src/types/closure.md:75
msgid ""
"Mutable borrow (`MutBorrow`) --- The place expression is captured as a "
"[mutable reference](pointer.md#mutable-references-mut)."
msgstr ""

#: src/types/closure.md:76
msgid ""
"Move (`ByValue`) --- The place expression is captured by [moving the value]"
"(../expressions.md#moved-and-copied-types) into the closure."
msgstr ""

#: src/types/closure.md:80
msgid ""
"Place expressions from the environment are captured from the first mode that "
"is compatible with how the captured value is used inside the closure body. "
"The mode is not affected by the code surrounding the closure, such as the "
"lifetimes of involved variables or fields, or of the closure itself."
msgstr ""

#: src/types/closure.md:90
msgid "`Copy` values"
msgstr ""

#: src/types/closure.md:92
msgid ""
"Values that implement [`Copy`](../special-types-and-traits.md#copy) that are "
"moved into the closure are captured with the `ImmBorrow` mode."
msgstr ""

#: src/types/closure.md:97
msgid "// x captured by ImmBorrow\n"
msgstr ""

#: src/types/closure.md:103
msgid "Async input capture"
msgstr ""

#: src/types/closure.md:105
msgid ""
"Async closures always capture all input arguments, regardless of whether or "
"not they are used within the body."
msgstr ""

#: src/types/closure.md:107
msgid "Capture Precision"
msgstr ""

#: src/types/closure.md:111
msgid ""
"A _capture path_ is a sequence starting with a variable from the environment "
"followed by zero or more place projections that were applied to that "
"variable."
msgstr ""

#: src/types/closure.md:115
msgid ""
"A _place projection_ is a [field access](../expressions/field-expr.md), "
"[tuple index](../expressions/tuple-expr.md#tuple-indexing-expressions), "
"[dereference](../expressions/operator-expr.md#the-dereference-operator) (and "
"automatic dereferences), or [array or slice index](../expressions/array-"
"expr.md#array-and-slice-indexing-expressions) expression applied to a "
"variable."
msgstr ""

#: src/types/closure.md:119
msgid ""
"The closure borrows or moves the capture path, which may be truncated based "
"on the rules described below."
msgstr ""

#: src/types/closure.md:130
msgid "// s.f1.1 captured by ImmBorrow\n"
msgstr ""

#: src/types/closure.md:135
msgid ""
"Here the capture path is the local variable `s`, followed by a field access "
"`.f1`, and then a tuple index `.1`. This closure captures an immutable "
"borrow of `s.f1.1`."
msgstr ""

#: src/types/closure.md:145
msgid "Shared prefix"
msgstr ""

#: src/types/closure.md:147
msgid ""
"In the case where a capture path and one of the ancestor’s of that path are "
"both captured by a closure, the ancestor path is captured with the highest "
"capture mode among the two captures, `CaptureMode = max(AncestorCaptureMode, "
"DescendantCaptureMode)`, using the strict weak ordering:"
msgstr ""

#: src/types/closure.md:149
msgid "`ImmBorrow < UniqueImmBorrow < MutBorrow < ByValue`"
msgstr ""

#: src/types/closure.md:151
msgid "Note that this might need to be applied recursively."
msgstr ""

#: src/types/closure.md:154
msgid ""
"// In this example, there are three different capture paths with a shared "
"ancestor:\n"
msgstr ""

#: src/types/closure.md:156 src/paths.md:136
msgid "\"S\""
msgstr ""

#: src/types/closure.md:157
msgid "\"T\""
msgstr ""

#: src/types/closure.md:158
msgid "\"U\""
msgstr ""

#: src/types/closure.md:161
msgid "// u captured by ImmBorrow\n"
msgstr ""

#: src/types/closure.md:162
msgid "// u.0 captured by MutBorrow\n"
msgstr ""

#: src/types/closure.md:163
msgid "// u.0.0 captured by ByValue\n"
msgstr ""

#: src/types/closure.md:168
msgid "Overall this closure will capture `u` by `ByValue`."
msgstr ""

#: src/types/closure.md:172
msgid "Rightmost shared reference truncation"
msgstr ""

#: src/types/closure.md:174
msgid ""
"The capture path is truncated at the rightmost dereference in the capture "
"path if the dereference is applied to a shared reference."
msgstr ""

#: src/types/closure.md:176
msgid ""
"This truncation is allowed because fields that are read through a shared "
"reference will always be read via a shared reference or a copy. This helps "
"reduce the size of the capture when the extra precision does not yield any "
"benefit from a borrow checking perspective."
msgstr ""

#: src/types/closure.md:179
msgid ""
"The reason it is the _rightmost_ dereference is to help avoid a shorter "
"lifetime than is necessary. Consider the following example:"
msgstr ""

#: src/types/closure.md:197
msgid ""
"If this were to capture `m`, then the closure would no longer outlive "
"`'static`, since `m` is constrained to `'a`. Instead, it captures "
"`(*(*m).a)` by `ImmBorrow`."
msgstr ""

#: src/types/closure.md:201
msgid "Wildcard pattern bindings"
msgstr ""

#: src/types/closure.md:203
msgid ""
"Closures only capture data that needs to be read. Binding a value with a "
"[wildcard pattern](../patterns.md#wildcard-pattern) does not count as a "
"read, and thus won't be captured. For example, the following closures will "
"not capture `x`:"
msgstr ""

#: src/types/closure.md:210 src/types/closure.md:214
msgid "// x is not captured\n"
msgstr ""

#: src/types/closure.md:215 src/inline-assembly.md:1535
msgid "\"Hello World!\""
msgstr ""

#: src/types/closure.md:220
msgid ""
"This also includes destructuring of tuples, structs, and enums. Fields "
"matched with the [_RestPattern_](../patterns.md#rest-patterns) or "
"[_StructPatternEtCetera_](../patterns.md#struct-patterns) are also not "
"considered as read, and thus those fields will not be captured. The "
"following illustrates some of these:"
msgstr ""

#: src/types/closure.md:227
msgid "// captures `x.0` ByValue\n"
msgstr ""

#: src/types/closure.md:228
msgid ""
"// The first tuple field has been moved into the closure.\n"
"// The second tuple field is still accessible.\n"
msgstr ""

#: src/types/closure.md:242 src/destructors.md:58
msgid "\"first\""
msgstr ""

#: src/types/closure.md:243
msgid "\"second\""
msgstr ""

#: src/types/closure.md:246
msgid "// captures `e.f2` ByValue\n"
msgstr ""

#: src/types/closure.md:247
msgid ""
"// Field f2 cannot be accessed since it is moved into the closure.\n"
"// Field f1 is still accessible.\n"
msgstr ""

#: src/types/closure.md:256
msgid ""
"Partial captures of arrays and slices are not supported; the entire slice or "
"array is always captured even if used with wildcard pattern matching, "
"indexing, or sub-slicing. For example:"
msgstr ""

#: src/types/closure.md:265
msgid "// captures all of `x` ByValue\n"
msgstr ""

#: src/types/closure.md:268
msgid "// ERROR: borrow of moved value: `x`\n"
msgstr ""

#: src/types/closure.md:273
msgid "Values that are matched with wildcards must still be initialized."
msgstr ""

#: src/types/closure.md:278
msgid "// ERROR: used binding `x` isn't initialized\n"
msgstr ""

#: src/types/closure.md:288
msgid "Capturing references in move contexts"
msgstr ""

#: src/types/closure.md:290
msgid ""
"Because it is not allowed to move fields out of a reference, `move` closures "
"will only capture the prefix of a capture path that runs up to, but not "
"including, the first dereference of a reference. The reference itself will "
"be moved into the closure."
msgstr ""

#: src/types/closure.md:299
msgid "// captures `t_mut_ref` ByValue\n"
msgstr ""

#: src/types/closure.md:306
msgid "Raw pointer dereference"
msgstr ""

#: src/types/closure.md:308
msgid ""
"Because it is `unsafe` to dereference a raw pointer, closures will only "
"capture the prefix of a capture path that runs up to, but not including, the "
"first dereference of a raw pointer."
msgstr ""

#: src/types/closure.md:317
msgid "// captures `t_ptr` by ImmBorrow\n"
msgstr ""

#: src/types/closure.md:324
msgid "Union fields"
msgstr ""

#: src/types/closure.md:326
msgid ""
"Because it is `unsafe` to access a union field, closures will only capture "
"the prefix of a capture path that runs up to the union itself."
msgstr ""

#: src/types/closure.md:336
msgid "// captures `u` ByValue\n"
msgstr ""

#: src/types/closure.md:339
msgid "// This also includes writing to fields.\n"
msgstr ""

#: src/types/closure.md:344
msgid "// captures `u` with MutBorrow\n"
msgstr ""

#: src/types/closure.md:351
msgid "Reference into unaligned `struct`s"
msgstr ""

#: src/types/closure.md:353
msgid ""
"Because it is [undefined behavior](../behavior-considered-undefined.md) to "
"create references to unaligned fields in a structure, closures will only "
"capture the prefix of the capture path that runs up to, but not including, "
"the first field access into a structure that uses [the `packed` "
"representation](../type-layout.md#the-alignment-modifiers). This includes "
"all fields, even those that are aligned, to protect against compatibility "
"concerns should any of the fields in the structure change in the future."
msgstr ""

#: src/types/closure.md:363 src/types/closure.md:378
msgid "// captures `t` with ImmBorrow\n"
msgstr ""

#: src/types/closure.md:364
msgid "// Copies out of `t` are ok.\n"
msgstr ""

#: src/types/closure.md:370
msgid ""
"Similarly, taking the address of an unaligned field also captures the entire "
"struct:"
msgstr ""

#: src/types/closure.md:380
msgid "// ERROR: cannot move out of `t.0` because it is borrowed\n"
msgstr ""

#: src/types/closure.md:384
msgid ""
"but the above works if it is not packed since it captures the field "
"precisely:"
msgstr ""

#: src/types/closure.md:391
msgid "// captures `t.1` with ImmBorrow\n"
msgstr ""

#: src/types/closure.md:392
msgid "// The move here is allowed.\n"
msgstr ""

#: src/types/closure.md:403
msgid "`Box` vs other `Deref` implementations"
msgstr ""

#: src/types/closure.md:405
msgid ""
"The implementation of the [`Deref`](../special-types-and-traits.md#deref-and-"
"derefmut) trait for [`Box`](../special-types-and-traits.md#boxt) is treated "
"differently from other `Deref` implementations, as it is considered a "
"special entity."
msgstr ""

#: src/types/closure.md:407
msgid ""
"For example, let us look at examples involving `Rc` and `Box`. The `*rc` is "
"desugared to a call to the trait method `deref` defined on `Rc`, but since "
"`*box` is treated differently, it is possible to do a precise capture of the "
"contents of the `Box`."
msgstr ""

#: src/types/closure.md:414
msgid "`Box` with non-`move` closure"
msgstr ""

#: src/types/closure.md:416
msgid ""
"In a non-`move` closure, if the contents of the `Box` are not moved into the "
"closure body, the contents of the `Box` are precisely captured."
msgstr ""

#: src/types/closure.md:423
msgid "// captures `(*b).0` by ImmBorrow\n"
msgstr ""

#: src/types/closure.md:426
msgid "// Contrast `Box` with another type that implements Deref:\n"
msgstr ""

#: src/types/closure.md:430
msgid "// captures `r` by ImmBorrow\n"
msgstr ""

#: src/types/closure.md:437
msgid ""
"However, if the contents of the `Box` are moved into the closure, then the "
"box is entirely captured. This is done so the amount of data that needs to "
"be moved into the closure is minimized."
msgstr ""

#: src/types/closure.md:440
msgid ""
"// This is the same as the example above except the closure\n"
"// moves the value instead of taking a reference to it.\n"
msgstr ""

#: src/types/closure.md:447 src/types/closure.md:463
msgid "// captures `b` with ByValue\n"
msgstr ""

#: src/types/closure.md:454
msgid "`Box` with move closure"
msgstr ""

#: src/types/closure.md:456
msgid ""
"Similarly to moving contents of a `Box` in a non-`move` closure, reading the "
"contents of a `Box` in a `move` closure will capture the `Box` entirely."
msgstr ""

#: src/types/closure.md:469
msgid "Unique immutable borrows in captures"
msgstr ""

#: src/types/closure.md:471
msgid ""
"Captures can occur by a special kind of borrow called a _unique immutable "
"borrow_, which cannot be used anywhere else in the language and cannot be "
"written out explicitly. It occurs when modifying the referent of a mutable "
"reference, as in the following example:"
msgstr ""

#: src/types/closure.md:479
msgid "// An ImmBorrow and a MutBorrow of `x`.\n"
msgstr ""

#: src/types/closure.md:481
msgid "// `x` captured by UniqueImmBorrow\n"
msgstr ""

#: src/types/closure.md:482
msgid ""
"// The following line is an error:\n"
"// let y = &x;\n"
msgstr ""

#: src/types/closure.md:485
msgid "// However, the following is OK.\n"
msgstr ""

#: src/types/closure.md:490
msgid ""
"In this case, borrowing `x` mutably is not possible, because `x` is not "
"`mut`. But at the same time, borrowing `x` immutably would make the "
"assignment illegal, because a `& &mut` reference might not be unique, so it "
"cannot safely be used to modify a value. So a unique immutable borrow is "
"used: it borrows `x` immutably, but like a mutable borrow, it must be unique."
msgstr ""

#: src/types/closure.md:495
msgid ""
"In the above example, uncommenting the declaration of `y` will produce an "
"error because it would violate the uniqueness of the closure's borrow of "
"`x`; the declaration of z is valid because the closure's lifetime has "
"expired at the end of the block, releasing the borrow."
msgstr ""

#: src/types/closure.md:499
msgid "Call traits and coercions"
msgstr ""

#: src/types/closure.md:503
msgid ""
"Closure types all implement [`FnOnce`](../../core/ops/function/"
"trait.FnOnce.html), indicating that they can be called once by consuming "
"ownership of the closure. Additionally, some closures implement more "
"specific call traits:"
msgstr ""

#: src/types/closure.md:509
msgid ""
"A closure which does not move out of any captured variables implements "
"[`FnMut`](../../core/ops/function/trait.FnMut.html), indicating that it can "
"be called by mutable reference."
msgstr ""

#: src/types/closure.md:514
msgid ""
"A closure which does not mutate or move out of any captured variables "
"implements [`Fn`](../../core/ops/function/trait.Fn.html), indicating that it "
"can be called by shared reference."
msgstr ""

#: src/types/closure.md:517
msgid ""
"Note: `move` closures may still implement [`Fn`](../../core/ops/function/"
"trait.Fn.html) or [`FnMut`](../../core/ops/function/trait.FnMut.html), even "
"though they capture variables by move. This is because the traits "
"implemented by a closure type are determined by what the closure does with "
"captured values, not how it captures them."
msgstr ""

#: src/types/closure.md:524
msgid ""
"_Non-capturing closures_ are closures that don't capture anything from their "
"environment. Non-async, non-capturing closures can be coerced to function "
"pointers (e.g., `fn()`) with the matching signature."
msgstr ""

#: src/types/closure.md:540
msgid "Async closure traits"
msgstr ""

#: src/types/closure.md:544
msgid ""
"Async closures have a further restriction of whether or not they implement "
"[`FnMut`](../../core/ops/function/trait.FnMut.html) or [`Fn`](../../core/ops/"
"function/trait.Fn.html)."
msgstr ""

#: src/types/closure.md:546
msgid ""
"The [`Future`](../../core/future/future/trait.Future.html) returned by the "
"async closure has similar capturing characteristics as a closure. It "
"captures place expressions from the async closure based on how they are "
"used. The async closure is said to be _lending_ to its [`Future`](../../core/"
"future/future/trait.Future.html) if it has either of the following "
"properties:"
msgstr ""

#: src/types/closure.md:548
msgid "The `Future` includes a mutable capture."
msgstr ""

#: src/types/closure.md:549
msgid ""
"The async closure captures by value, except when the value is accessed with "
"a dereference projection."
msgstr ""

#: src/types/closure.md:551
msgid ""
"If the async closure is lending to its `Future`, then [`FnMut`](../../core/"
"ops/function/trait.FnMut.html) and [`Fn`](../../core/ops/function/"
"trait.Fn.html) are _not_ implemented. [`FnOnce`](../../core/ops/function/"
"trait.FnOnce.html) is always implemented."
msgstr ""

#: src/types/closure.md:553
msgid ""
"**Example**: The first clause for a mutable capture can be illustrated with "
"the following:"
msgstr ""

#: src/types/closure.md:561
msgid "// x captured with MutBorrow\n"
msgstr ""

#: src/types/closure.md:563
msgid "// ERROR: async closure does not implement `FnMut`\n"
msgstr ""

#: src/types/closure.md:567
msgid ""
"The second clause for a regular value capture can be illustrated with the "
"following:"
msgstr ""

#: src/types/closure.md:575
msgid "// x captured ByValue\n"
msgstr ""

#: src/types/closure.md:577
msgid "// ERROR: async closure does not implement `Fn`\n"
msgstr ""

#: src/types/closure.md:581
msgid ""
"The exception of the the second clause can be illustrated by using a "
"dereference, which does allow `Fn` and `FnMut` to be implemented:"
msgstr ""

#: src/types/closure.md:591
msgid "// OK: implements `Fn`\n"
msgstr ""

#: src/types/closure.md:597
msgid ""
"Async closures implement [`AsyncFn`](../../core/ops/async_function/"
"trait.AsyncFn.html), [`AsyncFnMut`](../../core/ops/async_function/"
"trait.AsyncFnMut.html), and [`AsyncFnOnce`](../../core/ops/async_function/"
"trait.AsyncFnOnce.html) in an analogous way as regular closures implement "
"[`Fn`](../../core/ops/function/trait.Fn.html), [`FnMut`](../../core/ops/"
"function/trait.FnMut.html), and [`FnOnce`](../../core/ops/function/"
"trait.FnOnce.html); that is, depending on the use of the captured variables "
"in its body."
msgstr ""

#: src/types/closure.md:601
msgid "Other traits"
msgstr ""

#: src/types/closure.md:605
msgid ""
"All closure types implement [`Sized`](../special-types-and-traits.md#sized). "
"Additionally, closure types implement the following traits if allowed to do "
"so by the types of the captures it stores:"
msgstr ""

#: src/types/closure.md:608
msgid "[`Clone`](../special-types-and-traits.md#clone)"
msgstr ""

#: src/types/closure.md:609
msgid "[`Copy`](../special-types-and-traits.md#copy)"
msgstr ""

#: src/types/closure.md:610
msgid "[`Sync`](../special-types-and-traits.md#sync)"
msgstr ""

#: src/types/closure.md:611
msgid "[`Send`](../special-types-and-traits.md#send)"
msgstr ""

#: src/types/closure.md:615
msgid ""
"The rules for [`Send`](../special-types-and-traits.md#send) and [`Sync`](../"
"special-types-and-traits.md#sync) match those for normal struct types, while "
"[`Clone`](../special-types-and-traits.md#clone) and [`Copy`](../special-"
"types-and-traits.md#copy) behave as if [derived](../attributes/derive.md). "
"For [`Clone`](../special-types-and-traits.md#clone), the order of cloning of "
"the captured values is left unspecified."
msgstr ""

#: src/types/closure.md:620
msgid ""
"Because captures are often by reference, the following general rules arise:"
msgstr ""

#: src/types/closure.md:622
msgid ""
"A closure is [`Sync`](../special-types-and-traits.md#sync) if all captured "
"values are [`Sync`](../special-types-and-traits.md#sync)."
msgstr ""

#: src/types/closure.md:623
msgid ""
"A closure is [`Send`](../special-types-and-traits.md#send) if all values "
"captured by non-unique immutable reference are [`Sync`](../special-types-and-"
"traits.md#sync), and all values captured by unique immutable or mutable "
"reference, copy, or move are [`Send`](../special-types-and-traits.md#send)."
msgstr ""

#: src/types/closure.md:626
msgid ""
"A closure is [`Clone`](../special-types-and-traits.md#clone) or [`Copy`](../"
"special-types-and-traits.md#copy) if it does not capture any values by "
"unique immutable or mutable reference, and if all values it captures by copy "
"or move are [`Clone`](../special-types-and-traits.md#clone) or [`Copy`](../"
"special-types-and-traits.md#copy), respectively."
msgstr ""

#: src/types/closure.md:640
msgid "Drop Order"
msgstr ""

#: src/types/closure.md:642
msgid ""
"If a closure captures a field of a composite types such as structs, tuples, "
"and enums by value, the field's lifetime would now be tied to the closure. "
"As a result, it is possible for disjoint fields of a composite types to be "
"dropped at different times."
msgstr ""

#: src/types/closure.md:647
msgid "// --+\n"
msgstr ""

#: src/types/closure.md:648
msgid "//                                               |\n"
msgstr ""

#: src/types/closure.md:649
msgid ""
"// ----------------------------+  |\n"
"            // tuple.0 is captured into the closure |  |\n"
msgstr ""

#: src/types/closure.md:651
msgid "//                       |  |\n"
msgstr ""

#: src/types/closure.md:652
msgid "//                                       |  |\n"
msgstr ""

#: src/types/closure.md:653
msgid "// 'c' and 'tuple.0' dropped here ------------+  |\n"
msgstr ""

#: src/types/closure.md:654
msgid "// tuple.1 dropped here -----------------------------+\n"
msgstr ""

#: src/types/closure.md:659
msgid "Edition 2018 and before"
msgstr ""

#: src/types/closure.md:661
msgid "Closure types difference"
msgstr ""

#: src/types/closure.md:663
msgid ""
"In Edition 2018 and before, closures always capture a variable in its "
"entirety, without its precise capture path. This means that for the example "
"used in the [Closure types](#closure-types) section, the generated closure "
"type would instead look something like this:"
msgstr ""

#: src/types/closure.md:681
msgid "and the call to `f` would work as follows:"
msgstr ""

#: src/types/closure.md:690
msgid "Capture precision difference"
msgstr ""

#: src/types/closure.md:692
msgid ""
"Composite types such as structs, tuples, and enums are always captured in "
"its entirety, not by individual fields. As a result, it may be necessary to "
"borrow into a local variable in order to capture a single field:"
msgstr ""

#: src/types/closure.md:713
msgid ""
"If, instead, the closure were to use `self.vec` directly, then it would "
"attempt to capture `self` by mutable reference. But since `self.set` is "
"already borrowed to iterate over, the code would not compile."
msgstr ""

#: src/types/closure.md:717
msgid ""
"If the `move` keyword is used, then all captures are by move or, for `Copy` "
"types, by copy, regardless of whether a borrow would work. The `move` "
"keyword is usually used to allow the closure to outlive the captured values, "
"such as if the closure is being returned or used to spawn a new thread."
msgstr ""

#: src/types/closure.md:721
msgid ""
"Regardless of if the data will be read by the closure, i.e. in case of wild "
"card patterns, if a variable defined outside the closure is mentioned within "
"the closure the variable will be captured in its entirety."
msgstr ""

#: src/types/closure.md:725
msgid "Drop order difference"
msgstr ""

#: src/types/closure.md:727
msgid ""
"As composite types are captured in their entirety, a closure which captures "
"one of those composite types by value would drop the entire captured "
"variable at the same time as the closure gets dropped."
msgstr ""

#: src/types/closure.md:734
msgid ""
"// --------------------------+\n"
"            // tuple is captured into the closure |\n"
msgstr ""

#: src/types/closure.md:736
msgid "//                     |\n"
msgstr ""

#: src/types/closure.md:737
msgid "//                                     |\n"
msgstr ""

#: src/types/closure.md:738
msgid "// 'c' and 'tuple' dropped here ------------+\n"
msgstr ""

#: src/types/pointer.md:7
msgid ""
"All pointers are explicit first-class values. They can be moved or copied, "
"stored into data structs, and returned from functions."
msgstr ""

#: src/types/pointer.md:12
msgid "References (`&` and `&mut`)"
msgstr ""

#: src/types/pointer.md:16
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ReferenceType_ :  \n"
"   `&` [_Lifetime_](../trait-bounds.md)<sup>?</sup> `mut`<sup>?</sup> "
"[_TypeNoBounds_](../types.md#type-expressions)"
msgstr ""

#: src/types/pointer.md:22
msgid "Shared references (`&`)"
msgstr ""

#: src/types/pointer.md:26
msgid "Shared references point to memory which is owned by some other value."
msgstr ""

#: src/types/pointer.md:30
msgid ""
"When a shared reference to a value is created, it prevents direct mutation "
"of the value. [Interior mutability](../interior-mutability.md) provides an "
"exception for this in certain circumstances. As the name suggests, any "
"number of shared references to a value may exist. A shared reference type is "
"written `&type`, or `&'a type` when you need to specify an explicit lifetime."
msgstr ""

#: src/types/pointer.md:37
msgid ""
"Copying a reference is a \"shallow\" operation: it involves only copying the "
"pointer itself, that is, pointers are `Copy`. Releasing a reference has no "
"effect on the value it points to, but referencing of a [temporary value](../"
"expressions.md#temporaries) will keep it alive during the scope of the "
"reference itself."
msgstr ""

#: src/types/pointer.md:43
msgid "Mutable references (`&mut`)"
msgstr ""

#: src/types/pointer.md:47
msgid ""
"Mutable references point to memory which is owned by some other value. A "
"mutable reference type is written `&mut type` or `&'a mut type`."
msgstr ""

#: src/types/pointer.md:52
msgid ""
"A mutable reference (that hasn't been borrowed) is the only way to access "
"the value it points to, so is not `Copy`."
msgstr ""

#: src/types/pointer.md:56
msgid "Raw pointers (`*const` and `*mut`)"
msgstr ""

#: src/types/pointer.md:60
msgid ""
"**<sup>Syntax</sup>**  \n"
"_RawPointerType_ :  \n"
"   `*` ( `mut` | `const` ) [_TypeNoBounds_](../types.md#type-expressions)"
msgstr ""

#: src/types/pointer.md:66
msgid ""
"Raw pointers are pointers without safety or liveness guarantees. Raw "
"pointers are written as `*const T` or `*mut T`. For example `*const i32` "
"means a raw pointer to a 32-bit integer."
msgstr ""

#: src/types/pointer.md:72
msgid ""
"Copying or dropping a raw pointer has no effect on the lifecycle of any "
"other value."
msgstr ""

#: src/types/pointer.md:76
msgid "Dereferencing a raw pointer is an [`unsafe` operation](../unsafety.md)."
msgstr ""

#: src/types/pointer.md:78
msgid ""
"This can also be used to convert a raw pointer to a reference by reborrowing "
"it (`&*` or `&mut *`). Raw pointers are generally discouraged; they exist to "
"support interoperability with foreign code, and writing performance-critical "
"or low-level functions."
msgstr ""

#: src/types/pointer.md:84
msgid ""
"When comparing raw pointers they are compared by their address, rather than "
"by what they point to. When comparing raw pointers to [dynamically sized "
"types](../dynamically-sized-types.md) they also have their additional data "
"compared."
msgstr ""

#: src/types/pointer.md:89
msgid ""
"Raw pointers can be created directly using `&raw const` for `*const` "
"pointers and `&raw mut` for `*mut` pointers."
msgstr ""

#: src/types/pointer.md:93
msgid "Smart Pointers"
msgstr ""

#: src/types/pointer.md:95
msgid ""
"The standard library contains additional 'smart pointer' types beyond "
"references and raw pointers."
msgstr ""

#: src/types/pointer.md:103
msgid ""
"Despite pointers and references being similar to `usize`s in the machine "
"code emitted on most platforms, the semantics of transmuting a reference or "
"pointer type to a non-pointer type is currently undecided. Thus, it may not "
"be valid to transmute a pointer or reference type, `P`, to a `[u8; size_of::"
"<P>()]`."
msgstr ""

#: src/types/pointer.md:109
msgid ""
"For thin raw pointers (i.e., for `P = *const T` or `P = *mut T` for `T: "
"Sized`), the inverse direction (transmuting from an integer or array of "
"integers to `P`) is always valid. However, the pointer produced via such a "
"transmutation may not be dereferenced (not even if `T` has size zero)."
msgstr ""

#: src/types/function-pointer.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_BareFunctionType_ :  \n"
"   [_ForLifetimes_](../trait-bounds.md#higher-ranked-trait-bounds)<sup>?</"
"sup> _FunctionTypeQualifiers_ `fn`  \n"
"       `(` _FunctionParametersMaybeNamedVariadic_<sup>?</sup> `)` "
"_BareFunctionReturnType_<sup>?</sup>"
msgstr ""

#: src/types/function-pointer.md:12
msgid ""
"_FunctionTypeQualifiers_:  \n"
"   `unsafe`<sup>?</sup> (`extern` [_Abi_](../items/functions.md)<sup>?</"
"sup>)<sup>?</sup>"
msgstr ""

#: src/types/function-pointer.md:15
msgid ""
"_BareFunctionReturnType_:  \n"
"   `->` [_TypeNoBounds_](../types.md#type-expressions)"
msgstr ""

#: src/types/function-pointer.md:18
msgid ""
"_FunctionParametersMaybeNamedVariadic_ :  \n"
"   _MaybeNamedFunctionParameters_ | _MaybeNamedFunctionParametersVariadic_"
msgstr ""

#: src/types/function-pointer.md:21
msgid ""
"_MaybeNamedFunctionParameters_ :  \n"
"   _MaybeNamedParam_ ( `,` _MaybeNamedParam_ )<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/types/function-pointer.md:24
msgid ""
"_MaybeNamedParam_ :  \n"
"   [_OuterAttribute_](../attributes.md)<sup>\\*</sup> ( ( [IDENTIFIER](../"
"identifiers.md) | `_` ) `:` )<sup>?</sup> [_Type_](../types.md#type-"
"expressions)"
msgstr ""

#: src/types/function-pointer.md:27
msgid ""
"_MaybeNamedFunctionParametersVariadic_ :  \n"
"   ( _MaybeNamedParam_ `,` )<sup>\\*</sup> _MaybeNamedParam_ `,` "
"[_OuterAttribute_](../attributes.md)<sup>\\*</sup> `...`"
msgstr ""

#: src/types/function-pointer.md:32
msgid ""
"Function pointer types, written using the `fn` keyword, refer to a function "
"whose identity is not necessarily known at compile-time."
msgstr ""

#: src/types/function-pointer.md:35
msgid "An example where `Binop` is defined as a function pointer type:"
msgstr ""

#: src/types/function-pointer.md:51
msgid ""
"Function pointers can be created via a coercion from both [function items]"
"(function-item.md) and non-capturing, non-async [closures](closure.md)."
msgstr ""

#: src/types/function-pointer.md:55
msgid ""
"The `unsafe` qualifier indicates that the type's value is an [unsafe "
"function](../unsafe-keyword.md), and the `extern` qualifier indicates it is "
"an [extern function](../items/functions.md#extern-function-qualifier)."
msgstr ""

#: src/types/function-pointer.md:60
msgid ""
"Variadic parameters can only be specified with [`extern`](../items/external-"
"blocks.md) function types with the `\"C\"` or `\"cdecl\"` calling convention."
msgstr ""

#: src/types/function-pointer.md:65
msgid "Attributes on function pointer parameters"
msgstr ""

#: src/types/function-pointer.md:67
msgid ""
"Attributes on function pointer parameters follow the same rules and "
"restrictions as [regular function parameters](../items/"
"functions.md#attributes-on-function-parameters)."
msgstr ""

#: src/types/trait-object.md:3
msgid "Trait objects"
msgstr ""

#: src/types/trait-object.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TraitObjectType_ :  \n"
"   `dyn`<sup>?</sup> [_TypeParamBounds_](../trait-bounds.md)"
msgstr ""

#: src/types/trait-object.md:11
msgid ""
"_TraitObjectTypeOneBound_ :  \n"
"   `dyn`<sup>?</sup> [_TraitBound_](../trait-bounds.md)"
msgstr ""

#: src/types/trait-object.md:16
msgid ""
"A _trait object_ is an opaque value of another type that implements a set of "
"traits. The set of traits is made up of a [dyn compatible](../items/"
"traits.md#dyn-compatibility) _base trait_ plus any number of [auto traits]"
"(../special-types-and-traits.md#auto-traits)."
msgstr ""

#: src/types/trait-object.md:22
msgid ""
"Trait objects implement the base trait, its auto traits, and any "
"[supertraits](../items/traits.md#supertraits) of the base trait."
msgstr ""

#: src/types/trait-object.md:27
msgid ""
"Trait objects are written as the keyword `dyn` followed by a set of trait "
"bounds, but with the following restrictions on the trait bounds."
msgstr ""

#: src/types/trait-object.md:32
msgid ""
"There may not be more than one non-auto trait, no more than one lifetime, "
"and opt-out bounds (e.g. `?Sized`) are not allowed. Furthermore, paths to "
"traits may be parenthesized."
msgstr ""

#: src/types/trait-object.md:36
msgid ""
"For example, given a trait `Trait`, the following are all trait objects:"
msgstr ""

#: src/types/trait-object.md:38
msgid "`dyn Trait`"
msgstr ""

#: src/types/trait-object.md:39
msgid "`dyn Trait + Send`"
msgstr ""

#: src/types/trait-object.md:40
msgid "`dyn Trait + Send + Sync`"
msgstr ""

#: src/types/trait-object.md:41
msgid "`dyn Trait + 'static`"
msgstr ""

#: src/types/trait-object.md:42
msgid "`dyn Trait + Send + 'static`"
msgstr ""

#: src/types/trait-object.md:43
msgid "`dyn Trait +`"
msgstr ""

#: src/types/trait-object.md:44
msgid "`dyn 'static + Trait`."
msgstr ""

#: src/types/trait-object.md:45
msgid "`dyn (Trait)`"
msgstr ""

#: src/types/trait-object.md:49
msgid ""
"**Edition differences**: Before the 2021 edition, the `dyn` keyword may be "
"omitted."
msgstr ""

#: src/types/trait-object.md:52
msgid ""
"Note: For clarity, it is recommended to always use the `dyn` keyword on your "
"trait objects unless your codebase supports compiling with Rust 1.26 or "
"lower."
msgstr ""

#: src/types/trait-object.md:57
msgid ""
"**Edition differences**: In the 2015 edition, if the first bound of the "
"trait object is a path that starts with `::`, then the `dyn` will be treated "
"as a part of the path. The first path can be put in parenthesis to get "
"around this. As such, if you want a trait object with the trait "
"`::your_module::Trait`, you should write it as `dyn (::your_module::Trait)`."
msgstr ""

#: src/types/trait-object.md:63
msgid ""
"Beginning in the 2018 edition, `dyn` is a true keyword and is not allowed in "
"paths, so the parentheses are not necessary."
msgstr ""

#: src/types/trait-object.md:68
msgid ""
"Two trait object types alias each other if the base traits alias each other "
"and if the sets of auto traits are the same and the lifetime bounds are the "
"same. For example, `dyn Trait + Send + UnwindSafe` is the same as `dyn Trait "
"+ UnwindSafe + Send`."
msgstr ""

#: src/types/trait-object.md:75
msgid ""
"Due to the opaqueness of which concrete type the value is of, trait objects "
"are [dynamically sized types](../dynamically-sized-types.md). Like all <abbr "
"title=\"dynamically sized types\">DSTs</abbr>, trait objects are used behind "
"some type of pointer; for example `&dyn SomeTrait` or `Box<dyn SomeTrait>`. "
"Each instance of a pointer to a trait object includes:"
msgstr ""

#: src/types/trait-object.md:81
msgid "a pointer to an instance of a type `T` that implements `SomeTrait`"
msgstr ""

#: src/types/trait-object.md:82
msgid ""
"a _virtual method table_, often just called a _vtable_, which contains, for "
"each method of `SomeTrait` and its [supertraits](../items/"
"traits.md#supertraits) that `T` implements, a pointer to `T`'s "
"implementation (i.e. a function pointer)."
msgstr ""

#: src/types/trait-object.md:86
msgid ""
"The purpose of trait objects is to permit \"late binding\" of methods. "
"Calling a method on a trait object results in virtual dispatch at runtime: "
"that is, a function pointer is loaded from the trait object vtable and "
"invoked indirectly. The actual implementation for each vtable entry can vary "
"on an object-by-object basis."
msgstr ""

#: src/types/trait-object.md:92
msgid "An example of a trait object:"
msgstr ""

#: src/types/trait-object.md:112
msgid ""
"In this example, the trait `Printable` occurs as a trait object in both the "
"type signature of `print`, and the cast expression in `main`."
msgstr ""

#: src/types/trait-object.md:117
msgid "Trait Object Lifetime Bounds"
msgstr ""

#: src/types/trait-object.md:119
msgid ""
"Since a trait object can contain references, the lifetimes of those "
"references need to be expressed as part of the trait object. This lifetime "
"is written as `Trait + 'a`. There are [defaults](../lifetime-"
"elision.md#default-trait-object-lifetimes) that allow this lifetime to "
"usually be inferred with a sensible choice."
msgstr ""

#: src/types/impl-trait.md:3
msgid "Impl trait"
msgstr ""

#: src/types/impl-trait.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_ImplTraitType_ : `impl` [_TypeParamBounds_](../trait-bounds.md)"
msgstr ""

#: src/types/impl-trait.md:10
msgid "_ImplTraitTypeOneBound_ : `impl` [_TraitBound_](../trait-bounds.md)"
msgstr ""

#: src/types/impl-trait.md:14
msgid ""
"`impl Trait` provides ways to specify unnamed but concrete types that "
"implement a specific trait. It can appear in two sorts of places: argument "
"position (where it can act as an anonymous type parameter to functions), and "
"return position (where it can act as an abstract return type)."
msgstr ""

#: src/types/impl-trait.md:21
msgid "// argument position: anonymous type parameter\n"
msgstr ""

#: src/types/impl-trait.md:25
msgid "// return position: abstract return type\n"
msgstr ""

#: src/types/impl-trait.md:32
msgid "Anonymous type parameters"
msgstr ""

#: src/types/impl-trait.md:34
msgid ""
"Note: This is often called \"impl Trait in argument position\". (The term "
"\"parameter\" is more correct here, but \"impl Trait in argument position\" "
"is the phrasing used during the development of this feature, and it remains "
"in parts of the implementation.)"
msgstr ""

#: src/types/impl-trait.md:39
msgid ""
"Functions can use `impl` followed by a set of trait bounds to declare a "
"parameter as having an anonymous type. The caller must provide a type that "
"satisfies the bounds declared by the anonymous type parameter, and the "
"function can only use the methods available through the trait bounds of the "
"anonymous type parameter."
msgstr ""

#: src/types/impl-trait.md:42
msgid "For example, these two forms are almost equivalent:"
msgstr ""

#: src/types/impl-trait.md:46
msgid "// generic type parameter\n"
msgstr ""

#: src/types/impl-trait.md:50
msgid "// impl Trait in argument position\n"
msgstr ""

#: src/types/impl-trait.md:58
msgid ""
"That is, `impl Trait` in argument position is syntactic sugar for a generic "
"type parameter like `<T: Trait>`, except that the type is anonymous and "
"doesn't appear in the [_GenericParams_](../items/generics.md) list."
msgstr ""

#: src/types/impl-trait.md:60
msgid ""
"**Note:** For function parameters, generic type parameters and `impl Trait` "
"are not exactly equivalent. With a generic parameter such as `<T: Trait>`, "
"the caller has the option to explicitly specify the generic argument for `T` "
"at the call site using [_GenericArgs_](../paths.md#paths-in-expressions), "
"for example, `foo::<usize>(1)`. Changing a parameter from either one to the "
"other can constitute a breaking change for the callers of a function, since "
"this changes the number of generic arguments."
msgstr ""

#: src/types/impl-trait.md:67
msgid "Abstract return types"
msgstr ""

#: src/types/impl-trait.md:69
msgid "Note: This is often called \"impl Trait in return position\"."
msgstr ""

#: src/types/impl-trait.md:73
msgid ""
"Functions can use `impl Trait` to return an abstract return type. These "
"types stand in for another concrete type where the caller may only use the "
"methods declared by the specified `Trait`."
msgstr ""

#: src/types/impl-trait.md:78
msgid ""
"Each possible return value from the function must resolve to the same "
"concrete type."
msgstr ""

#: src/types/impl-trait.md:80
msgid ""
"`impl Trait` in return position allows a function to return an unboxed "
"abstract type. This is particularly useful with [closures](closure.md) and "
"iterators. For example, closures have a unique, un-writable type. "
"Previously, the only way to return a closure from a function was to use a "
"[trait object](trait-object.md):"
msgstr ""

#: src/types/impl-trait.md:91
msgid ""
"This could incur performance penalties from heap allocation and dynamic "
"dispatch. It wasn't possible to fully specify the type of the closure, only "
"to use the `Fn` trait. That means that the trait object is necessary. "
"However, with `impl Trait`, it is possible to write this more simply:"
msgstr ""

#: src/types/impl-trait.md:102
msgid "which also avoids the drawbacks of using a boxed trait object."
msgstr ""

#: src/types/impl-trait.md:104
msgid ""
"Similarly, the concrete types of iterators could become very complex, "
"incorporating the types of all previous iterators in a chain. Returning "
"`impl Iterator` means that a function only exposes the `Iterator` trait as a "
"bound on its return type, instead of explicitly specifying all of the other "
"iterator types involved."
msgstr ""

#: src/types/impl-trait.md:109
msgid "Return-position `impl Trait` in traits and trait implementations"
msgstr ""

#: src/types/impl-trait.md:113
msgid ""
"Functions in traits may also use `impl Trait` as a syntax for an anonymous "
"associated type."
msgstr ""

#: src/types/impl-trait.md:117
msgid ""
"Every `impl Trait` in the return type of an associated function in a trait "
"is desugared to an anonymous associated type. The return type that appears "
"in the implementation's function signature is used to determine the value of "
"the associated type."
msgstr ""

#: src/types/impl-trait.md:121
msgid "Capturing"
msgstr ""

#: src/types/impl-trait.md:123
msgid ""
"Behind each return-position `impl Trait` abstract type is some hidden "
"concrete type.  For this concrete type to use a generic parameter, that "
"generic parameter must be _captured_ by the abstract type."
msgstr ""

#: src/types/impl-trait.md:127
msgid "Automatic capturing"
msgstr ""

#: src/types/impl-trait.md:131
msgid ""
"Return-position `impl Trait` abstract types automatically capture all in-"
"scope generic parameters, including generic type, const, and lifetime "
"parameters (including higher-ranked ones)."
msgstr ""

#: src/types/impl-trait.md:135
msgid ""
"**Edition differences**: Before the 2024 edition, on free functions and on "
"associated functions and methods of inherent impls, generic lifetime "
"parameters that do not appear in the bounds of the abstract return type are "
"not automatically captured."
msgstr ""

#: src/types/impl-trait.md:139
msgid "Precise capturing"
msgstr ""

#: src/types/impl-trait.md:143
msgid ""
"The set of generic parameters captured by a return-position `impl Trait` "
"abstract type may be explicitly controlled with a [`use<..>` bound](../trait-"
"bounds.md#use-bounds).  If present, only the generic parameters listed in "
"the `use<..>` bound will be captured.  E.g.:"
msgstr ""

#: src/types/impl-trait.md:147
msgid ""
"//                                      ~~~~~~~~~~~~~~~~~~~~~~~\n"
"  //                                     Captures `'a` and `T` only.\n"
msgstr ""

#: src/types/impl-trait.md:155
msgid ""
"Currently, only one `use<..>` bound may be present in a bounds list, such "
"bounds are not allowed in the signature of items of a trait definition, all "
"in-scope type and const generic parameters must be included, and all "
"lifetime parameters that appear in other bounds of the abstract type must be "
"included."
msgstr ""

#: src/types/impl-trait.md:159
msgid ""
"Within the `use<..>` bound, any lifetime parameters present must appear "
"before all type and const generic parameters, and the elided lifetime (`'_`) "
"may be present if it is otherwise allowed to appear within the `impl Trait` "
"return type."
msgstr ""

#: src/types/impl-trait.md:163
msgid ""
"Because all in-scope type parameters must be included by name, a `use<..>` "
"bound may not be used in the signature of items that use argument-position "
"`impl Trait`, as those items have anonymous type parameters in scope."
msgstr ""

#: src/types/impl-trait.md:165
msgid "Differences between generics and `impl Trait` in return position"
msgstr ""

#: src/types/impl-trait.md:167
msgid ""
"In argument position, `impl Trait` is very similar in semantics to a generic "
"type parameter. However, there are significant differences between the two "
"in return position. With `impl Trait`, unlike with a generic type parameter, "
"the function chooses the return type, and the caller cannot choose the "
"return type."
msgstr ""

#: src/types/impl-trait.md:171 src/types/impl-trait.md:183
msgid "The function:"
msgstr ""

#: src/types/impl-trait.md:181
msgid ""
"allows the caller to determine the return type, `T`, and the function "
"returns that type."
msgstr ""

#: src/types/impl-trait.md:193
msgid ""
"doesn't allow the caller to determine the return type. Instead, the function "
"chooses the return type, but only promises that it will implement `Trait`."
msgstr ""

#: src/types/impl-trait.md:200
msgid ""
"`impl Trait` can only appear as a parameter or return type of a non-`extern` "
"function. It cannot be the type of a `let` binding, field type, or appear "
"inside a type alias."
msgstr ""

#: src/types/parameters.md:5
msgid ""
"Within the body of an item that has type parameter declarations, the names "
"of its type parameters are types:"
msgstr ""

#: src/types/parameters.md:20
msgid ""
"Here, `first` has type `A`, referring to `to_vec`'s `A` type parameter; and "
"`rest` has type `Vec<A>`, a vector with element type `A`."
msgstr ""

#: src/types/inferred.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_InferredType_ : `_`"
msgstr ""

#: src/types/inferred.md:12
msgid ""
"The inferred type asks the compiler to infer the type if possible based on "
"the surrounding information available."
msgstr ""

#: src/types/inferred.md:17
msgid "It cannot be used in item signatures."
msgstr ""

#: src/types/inferred.md:19
msgid "It is often used in generic arguments:"
msgstr ""

#: src/dynamically-sized-types.md:8
msgid ""
"Most types have a fixed size that is known at compile time and implement the "
"trait [`Sized`](special-types-and-traits.md#sized). A type with a size that "
"is known only at run-time is called a _dynamically sized type_ (_DST_) or, "
"informally, an unsized type. [Slices](types/slice.md) and [trait objects]"
"(types/trait-object.md) are two examples of <abbr title=\"dynamically sized\n"
"types\">DSTs</abbr>."
msgstr ""

#: src/dynamically-sized-types.md:16
msgid "Such types can only be used in certain cases:"
msgstr ""

#: src/dynamically-sized-types.md:20
msgid ""
"[Pointer types](types/pointer.md) to <abbr title=\"dynamically sized "
"types\">DSTs</abbr> are sized but have twice the size of pointers to sized "
"types"
msgstr ""

#: src/dynamically-sized-types.md:22
msgid "Pointers to slices also store the number of elements of the slice."
msgstr ""

#: src/dynamically-sized-types.md:23
msgid "Pointers to trait objects also store a pointer to a vtable."
msgstr ""

#: src/dynamically-sized-types.md:27
msgid ""
"<abbr title=\"dynamically sized types\">DSTs</abbr> can be provided as type "
"arguments to generic type parameters having the special `?Sized` bound. They "
"can also be used for associated type definitions when the corresponding "
"associated type declaration has a `?Sized` bound. By default, any type "
"parameter or associated type has a `Sized` bound, unless it is relaxed using "
"`?Sized`."
msgstr ""

#: src/dynamically-sized-types.md:34
msgid ""
"Traits may be implemented for <abbr title=\"dynamically sized\n"
"types\">DSTs</abbr>. Unlike with generic type parameters, `Self: ?Sized` is "
"the default in trait definitions."
msgstr ""

#: src/dynamically-sized-types.md:40
msgid ""
"Structs may contain a <abbr title=\"dynamically sized type\">DST</abbr> as "
"the last field; this makes the struct itself a <abbr title=\"dynamically "
"sized type\">DST</abbr>."
msgstr ""

#: src/dynamically-sized-types.md:44
msgid ""
"**Note**: [variables](variables.md), function parameters, [const](items/"
"constant-items.md) items, and [static](items/static-items.md) items must be "
"`Sized`."
msgstr ""

#: src/type-layout.md:3
msgid "Type Layout"
msgstr ""

#: src/type-layout.md:7
msgid ""
"The layout of a type is its size, alignment, and the relative offsets of its "
"fields. For enums, how the discriminant is laid out and interpreted is also "
"part of type layout."
msgstr ""

#: src/type-layout.md:13
msgid ""
"Type layout can be changed with each compilation. Instead of trying to "
"document exactly what is done, we only document what is guaranteed today."
msgstr ""

#: src/type-layout.md:16
msgid ""
"Note that even types with the same layout can still differ in how they are "
"passed across function boundaries. For function call ABI compatibility of "
"types, see [here](../core/primitive.fn.md#abi-compatibility)."
msgstr ""

#: src/type-layout.md:22
msgid "Size and Alignment"
msgstr ""

#: src/type-layout.md:24
msgid "All values have an alignment and size."
msgstr ""

#: src/type-layout.md:28
msgid ""
"The _alignment_ of a value specifies what addresses are valid to store the "
"value at. A value of alignment `n` must only be stored at an address that is "
"a multiple of n. For example, a value with an alignment of 2 must be stored "
"at an even address, while a value with an alignment of 1 can be stored at "
"any address. Alignment is measured in bytes, and must be at least 1, and "
"always a power of 2. The alignment of a value can be checked with the "
"[`align_of_val`](../core/mem/fn.align_of_val.html) function."
msgstr ""

#: src/type-layout.md:37
msgid ""
"The _size_ of a value is the offset in bytes between successive elements in "
"an array with that item type including alignment padding. The size of a "
"value is always a multiple of its alignment. Note that some types are zero-"
"sized; 0 is considered a multiple of any alignment (for example, on some "
"platforms, the type `[u16; 0]` has size 0 and alignment 2). The size of a "
"value can be checked with the [`size_of_val`](../core/mem/"
"fn.size_of_val.html) function."
msgstr ""

#: src/type-layout.md:46
msgid ""
"Types where all values have the same size and alignment, and both are known "
"at compile time, implement the [`Sized`](../core/marker/trait.Sized.html) "
"trait and can be checked with the [`size_of`](../core/mem/fn.size_of.html) "
"and [`align_of`](../core/mem/fn.align_of.html) functions. Types that are not "
"[`Sized`](../core/marker/trait.Sized.html) are known as [dynamically sized "
"types](dynamically-sized-types.md). Since all values of a `Sized` type share "
"the same size and alignment, we refer to those shared values as the size of "
"the type and the alignment of the type respectively."
msgstr ""

#: src/type-layout.md:55
msgid "Primitive Data Layout"
msgstr ""

#: src/type-layout.md:59
msgid "The size of most primitives is given in this table."
msgstr ""

#: src/type-layout.md:61
msgid "`size_of::<Type>()`"
msgstr ""

#: src/type-layout.md:63 src/type-layout.md:64
msgid "1"
msgstr ""

#: src/type-layout.md:64
msgid "`u8` / `i8`"
msgstr ""

#: src/type-layout.md:65
msgid "`u16` / `i16`"
msgstr ""

#: src/type-layout.md:65
msgid "2"
msgstr ""

#: src/type-layout.md:66
msgid "`u32` / `i32`"
msgstr ""

#: src/type-layout.md:66 src/type-layout.md:70 src/type-layout.md:72
msgid "4"
msgstr ""

#: src/type-layout.md:67
msgid "`u64` / `i64`"
msgstr ""

#: src/type-layout.md:67 src/type-layout.md:71
msgid "8"
msgstr ""

#: src/type-layout.md:68
msgid "`u128` / `i128`"
msgstr ""

#: src/type-layout.md:68
msgid "16"
msgstr ""

#: src/type-layout.md:69
msgid "`usize` / `isize`"
msgstr ""

#: src/type-layout.md:69
msgid "See below"
msgstr ""

#: src/type-layout.md:70 src/inline-assembly.md:610 src/inline-assembly.md:614
msgid "`f32`"
msgstr ""

#: src/type-layout.md:71 src/inline-assembly.md:611 src/inline-assembly.md:615
msgid "`f64`"
msgstr ""

#: src/type-layout.md:76
msgid ""
"`usize` and `isize` have a size big enough to contain every address on the "
"target platform. For example, on a 32 bit target, this is 4 bytes, and on a "
"64 bit target, this is 8 bytes."
msgstr ""

#: src/type-layout.md:82
msgid ""
"The alignment of primitives is platform-specific. In most cases, their "
"alignment is equal to their size, but it may be less. In particular, `i128` "
"and `u128` are often aligned to 4 or 8 bytes even though their size is 16, "
"and on many 32-bit platforms, `i64`, `u64`, and `f64` are only aligned to 4 "
"bytes, not 8."
msgstr ""

#: src/type-layout.md:90
msgid "Pointers and References Layout"
msgstr ""

#: src/type-layout.md:94
msgid ""
"Pointers and references have the same layout. Mutability of the pointer or "
"reference does not change the layout."
msgstr ""

#: src/type-layout.md:99
msgid "Pointers to sized types have the same size and alignment as `usize`."
msgstr ""

#: src/type-layout.md:103
msgid ""
"Pointers to unsized types are sized. The size and alignment is guaranteed to "
"be at least equal to the size and alignment of a pointer."
msgstr ""

#: src/type-layout.md:106
msgid ""
"Note: Though you should not rely on this, all pointers to <abbr "
"title=\"Dynamically Sized Types\">DSTs</abbr> are currently twice the size "
"of the size of `usize` and have the same alignment."
msgstr ""

#: src/type-layout.md:112
msgid "Array Layout"
msgstr ""

#: src/type-layout.md:115
msgid ""
"An array of `[T; N]` has a size of `size_of::<T>() * N` and the same "
"alignment of `T`. Arrays are laid out so that the zero-based `nth` element "
"of the array is offset from the start of the array by `n * size_of::<T>()` "
"bytes."
msgstr ""

#: src/type-layout.md:121
msgid "Slice Layout"
msgstr ""

#: src/type-layout.md:124
msgid "Slices have the same layout as the section of the array they slice."
msgstr ""

#: src/type-layout.md:126
msgid ""
"Note: This is about the raw `[T]` type, not pointers (`&[T]`, `Box<[T]>`, "
"etc.) to slices."
msgstr ""

#: src/type-layout.md:131
msgid "`str` Layout"
msgstr ""

#: src/type-layout.md:134
msgid ""
"String slices are a UTF-8 representation of characters that have the same "
"layout as slices of type `[u8]`."
msgstr ""

#: src/type-layout.md:138
msgid "Tuple Layout"
msgstr ""

#: src/type-layout.md:142
msgid ""
"Tuples are laid out according to the [`Rust` representation](#the-rust-"
"representation)."
msgstr ""

#: src/type-layout.md:146
msgid ""
"The exception to this is the unit tuple (`()`), which is guaranteed as a "
"zero-sized type to have a size of 0 and an alignment of 1."
msgstr ""

#: src/type-layout.md:151
msgid "Trait Object Layout"
msgstr ""

#: src/type-layout.md:154
msgid "Trait objects have the same layout as the value the trait object is of."
msgstr ""

#: src/type-layout.md:156
msgid ""
"Note: This is about the raw trait object types, not pointers (`&dyn Trait`, "
"`Box<dyn Trait>`, etc.) to trait objects."
msgstr ""

#: src/type-layout.md:161
msgid "Closure Layout"
msgstr ""

#: src/type-layout.md:164
msgid "Closures have no layout guarantees."
msgstr ""

#: src/type-layout.md:168
msgid "Representations"
msgstr ""

#: src/type-layout.md:172
msgid ""
"All user-defined composite types (`struct`s, `enum`s, and `union`s) have a "
"_representation_ that specifies what the layout is for the type."
msgstr ""

#: src/type-layout.md:177
msgid "The possible representations for a type are:"
msgstr ""

#: src/type-layout.md:179
msgid "[`Rust`](#the-rust-representation) (default)"
msgstr ""

#: src/type-layout.md:180
msgid "[`C`](#the-c-representation)"
msgstr ""

#: src/type-layout.md:181
msgid "The [primitive representations](#primitive-representations)"
msgstr ""

#: src/type-layout.md:182
msgid "[`transparent`](#the-transparent-representation)"
msgstr ""

#: src/type-layout.md:186
msgid ""
"The representation of a type can be changed by applying the `repr` attribute "
"to it. The following example shows a struct with a `C` representation."
msgstr ""

#: src/type-layout.md:200
msgid ""
"The alignment may be raised or lowered with the `align` and `packed` "
"modifiers respectively. They alter the representation specified in the "
"attribute. If no representation is specified, the default one is altered."
msgstr ""

#: src/type-layout.md:205
msgid "// Default representation, alignment lowered to 2.\n"
msgstr ""

#: src/type-layout.md:212
msgid "// C representation, alignment raised to 8\n"
msgstr ""

#: src/type-layout.md:222
msgid ""
"Note: As a consequence of the representation being an attribute on the item, "
"the representation does not depend on generic parameters. Any two types with "
"the same name have the same representation. For example, `Foo<Bar>` and "
"`Foo<Baz>` both have the same representation."
msgstr ""

#: src/type-layout.md:229
msgid ""
"The representation of a type can change the padding between fields, but does "
"not change the layout of the fields themselves. For example, a struct with a "
"`C` representation that contains a struct `Inner` with the `Rust` "
"representation will not change the layout of `Inner`."
msgstr ""

#: src/type-layout.md:234
msgid "<a id=\"the-default-representation\"></a>"
msgstr ""

#: src/type-layout.md:237
msgid "The `Rust` Representation"
msgstr ""

#: src/type-layout.md:241
msgid ""
"The `Rust` representation is the default representation for nominal types "
"without a `repr` attribute. Using this representation explicitly through a "
"`repr` attribute is guaranteed to be the same as omitting the attribute "
"entirely."
msgstr ""

#: src/type-layout.md:248
msgid ""
"The only data layout guarantees made by this representation are those "
"required for soundness. They are:"
msgstr ""

#: src/type-layout.md:251
msgid "The fields are properly aligned."
msgstr ""

#: src/type-layout.md:252
msgid "The fields do not overlap."
msgstr ""

#: src/type-layout.md:253
msgid ""
"The alignment of the type is at least the maximum alignment of its fields."
msgstr ""

#: src/type-layout.md:257
msgid ""
"Formally, the first guarantee means that the offset of any field is "
"divisible by that field's alignment."
msgstr ""

#: src/type-layout.md:262
msgid ""
"The second guarantee means that the fields can be ordered such that the "
"offset plus the size of any field is less than or equal to the offset of the "
"next field in the ordering. The ordering does not have to be the same as the "
"order in which the fields are specified in the declaration of the type."
msgstr ""

#: src/type-layout.md:268
msgid ""
"Be aware that the second guarantee does not imply that the fields have "
"distinct addresses: zero-sized types may have the same address as other "
"fields in the same struct."
msgstr ""

#: src/type-layout.md:274
msgid ""
"There are no other guarantees of data layout made by this representation."
msgstr ""

#: src/type-layout.md:278
msgid "The `C` Representation"
msgstr ""

#: src/type-layout.md:282
msgid ""
"The `C` representation is designed for dual purposes. One purpose is for "
"creating types that are interoperable with the C Language. The second "
"purpose is to create types that you can soundly perform operations on that "
"rely on data layout such as reinterpreting values as a different type."
msgstr ""

#: src/type-layout.md:287
msgid ""
"Because of this dual purpose, it is possible to create types that are not "
"useful for interfacing with the C programming language."
msgstr ""

#: src/type-layout.md:292
msgid ""
"This representation can be applied to structs, unions, and enums. The "
"exception is [zero-variant enums](items/enumerations.md#zero-variant-enums) "
"for which the `C` representation is an error."
msgstr ""

#: src/type-layout.md:297
msgid "`#[repr(C)]` Structs"
msgstr ""

#: src/type-layout.md:301
msgid ""
"The alignment of the struct is the alignment of the most-aligned field in it."
msgstr ""

#: src/type-layout.md:305
msgid "The size and offset of fields is determined by the following algorithm."
msgstr ""

#: src/type-layout.md:307
msgid "Start with a current offset of 0 bytes."
msgstr ""

#: src/type-layout.md:309
msgid ""
"For each field in declaration order in the struct, first determine the size "
"and alignment of the field. If the current offset is not a multiple of the "
"field's alignment, then add padding bytes to the current offset until it is "
"a multiple of the field's alignment. The offset for the field is what the "
"current offset is now. Then increase the current offset by the size of the "
"field."
msgstr ""

#: src/type-layout.md:315
msgid ""
"Finally, the size of the struct is the current offset rounded up to the "
"nearest multiple of the struct's alignment."
msgstr ""

#: src/type-layout.md:318
msgid "Here is this algorithm described in pseudocode."
msgstr ""

#: src/type-layout.md:322
msgid ""
"/// Returns the amount of padding needed after `offset` to ensure that the\n"
"/// following address will be aligned to `alignment`.\n"
msgstr ""

#: src/type-layout.md:327
msgid "// round up to next multiple of `alignment`\n"
msgstr ""

#: src/type-layout.md:330
msgid "// already a multiple of `alignment`\n"
msgstr ""

#: src/type-layout.md:340
msgid ""
"// Increase the current offset so that it's a multiple of the alignment\n"
"    // of this field. For the first field, this will always be zero.\n"
"    // The skipped bytes are called padding bytes.\n"
msgstr ""

#: src/type-layout.md:355
msgid ""
"_**Warning:**_ This pseudocode uses a naive algorithm that ignores overflow "
"issues for the sake of clarity. To perform memory layout computations in "
"actual code, use [`Layout`](../core/alloc/layout/struct.Layout.html)."
msgstr ""

#: src/type-layout.md:361
msgid ""
"Note: This algorithm can produce zero-sized structs. In C, an empty struct "
"declaration like `struct Foo { }` is illegal. However, both gcc and clang "
"support options to enable such structs, and assign them size zero. C++, in "
"contrast, gives empty structs a size of 1, unless they are inherited from or "
"they are fields that have the `[[no_unique_address]]` attribute, in which "
"case they do not increase the overall size of the struct."
msgstr ""

#: src/type-layout.md:370
msgid "`#[repr(C)]` Unions"
msgstr ""

#: src/type-layout.md:374
msgid ""
"A union declared with `#[repr(C)]` will have the same size and alignment as "
"an equivalent C union declaration in the C language for the target platform."
msgstr ""

#: src/type-layout.md:379
msgid ""
"The union will have a size of the maximum size of all of its fields rounded "
"to its alignment, and an alignment of the maximum alignment of all of its "
"fields. These maximums may come from different fields."
msgstr ""

#: src/type-layout.md:390
msgid "// From f2\n"
msgstr ""

#: src/type-layout.md:391
msgid "// From f1\n"
msgstr ""

#: src/type-layout.md:399
msgid ""
"// Size of 6 from b,\n"
"                                                      // rounded up to 8 "
"from\n"
"                                                      // alignment of a.\n"
msgstr ""

#: src/type-layout.md:402
msgid "// From a\n"
msgstr ""

#: src/type-layout.md:407
msgid "`#[repr(C)]` Field-less Enums"
msgstr ""

#: src/type-layout.md:410
msgid ""
"For [field-less enums](items/enumerations.md#field-less-enum), the `C` "
"representation has the size and alignment of the default `enum` size and "
"alignment for the target platform's C ABI."
msgstr ""

#: src/type-layout.md:413
msgid ""
"Note: The enum representation in C is implementation defined, so this is "
"really a \"best guess\". In particular, this may be incorrect when the C "
"code of interest is compiled with certain flags."
msgstr ""

#: src/type-layout.md:419
msgid ""
"_**Warning:**_ There are crucial differences between an `enum` in the C "
"language and Rust's [field-less enums](items/enumerations.md#field-less-"
"enum) with this representation. An `enum` in C is mostly a `typedef` plus "
"some named constants; in other words, an object of an `enum` type can hold "
"any integer value. For example, this is often used for bitflags in `C`. In "
"contrast, Rust’s [field-less enums](items/enumerations.md#field-less-enum) "
"can only legally hold the discriminant values, everything else is [undefined "
"behavior](behavior-considered-undefined.md). Therefore, using a field-less "
"enum in FFI to model a C `enum` is often wrong."
msgstr ""

#: src/type-layout.md:427
msgid "`#[repr(C)]` Enums With Fields"
msgstr ""

#: src/type-layout.md:431
msgid ""
"The representation of a `repr(C)` enum with fields is a `repr(C)` struct "
"with two fields, also called a \"tagged union\" in C:"
msgstr ""

#: src/type-layout.md:436
msgid "a `repr(C)` version of the enum with all fields removed (\"the tag\")"
msgstr ""

#: src/type-layout.md:440
msgid ""
"a `repr(C)` union of `repr(C)` structs for the fields of each variant that "
"had them (\"the payload\")"
msgstr ""

#: src/type-layout.md:443
msgid ""
"Note: Due to the representation of `repr(C)` structs and unions, if a "
"variant has a single field there is no difference between putting that field "
"directly in the union or wrapping it in a struct; any system which wishes to "
"manipulate such an `enum`'s representation may therefore use whichever form "
"is more convenient or consistent for them."
msgstr ""

#: src/type-layout.md:450
msgid "// This Enum has the same representation as ...\n"
msgstr ""

#: src/type-layout.md:458
msgid "// ... this struct.\n"
msgstr ""

#: src/type-layout.md:465 src/type-layout.md:559
msgid "// This is the discriminant enum.\n"
msgstr ""

#: src/type-layout.md:469
msgid "// This is the variant union.\n"
msgstr ""

#: src/type-layout.md:490
msgid ""
"// This struct could be omitted (it is a zero-sized type), and it must be "
"in\n"
"// C/C++ headers.\n"
msgstr ""

#: src/type-layout.md:498 src/type-layout.md:582
msgid ""
"Note: `union`s with non-`Copy` fields are unstable, see [55149](https://"
"github.com/rust-lang/rust/issues/55149)."
msgstr ""

#: src/type-layout.md:502
msgid "Primitive representations"
msgstr ""

#: src/type-layout.md:506
msgid ""
"The _primitive representations_ are the representations with the same names "
"as the primitive integer types. That is: `u8`, `u16`, `u32`, `u64`, `u128`, "
"`usize`, `i8`, `i16`, `i32`, `i64`, `i128`, and `isize`."
msgstr ""

#: src/type-layout.md:512
msgid ""
"Primitive representations can only be applied to enumerations and have "
"different behavior whether the enum has fields or no fields. It is an error "
"for [zero-variant enums](items/enumerations.md#zero-variant-enums) to have a "
"primitive representation. Combining two primitive representations together "
"is an error."
msgstr ""

#: src/type-layout.md:519
msgid "Primitive Representation of Field-less Enums"
msgstr ""

#: src/type-layout.md:522
msgid ""
"For [field-less enums](items/enumerations.md#field-less-enum), primitive "
"representations set the size and alignment to be the same as the primitive "
"type of the same name. For example, a field-less enum with a `u8` "
"representation can only have discriminants between 0 and 255 inclusive."
msgstr ""

#: src/type-layout.md:529
msgid "Primitive Representation of Enums With Fields"
msgstr ""

#: src/type-layout.md:532
msgid ""
"The representation of a primitive representation enum is a `repr(C)` union "
"of `repr(C)` structs for each variant with a field. The first field of each "
"struct in the union is the primitive representation version of the enum with "
"all fields removed (\"the tag\") and the remaining fields are the fields of "
"that variant."
msgstr ""

#: src/type-layout.md:537
msgid ""
"Note: This representation is unchanged if the tag is given its own member in "
"the union, should that make manipulation more clear for you (although to "
"follow the C++ standard the tag member should be wrapped in a `struct`)."
msgstr ""

#: src/type-layout.md:542
msgid "// This enum has the same representation as ...\n"
msgstr ""

#: src/type-layout.md:550
msgid "// ... this union.\n"
msgstr ""

#: src/type-layout.md:586
msgid ""
"Combining primitive representations of enums with fields and `#[repr(C)]`"
msgstr ""

#: src/type-layout.md:589
msgid ""
"For enums with fields, it is also possible to combine `repr(C)` and a "
"primitive representation (e.g., `repr(C, u8)`). This modifies the [`repr(C)`]"
"(#reprc-enums-with-fields) by changing the representation of the "
"discriminant enum to the chosen primitive instead. So, if you chose the `u8` "
"representation, then the discriminant enum would have a size and alignment "
"of 1 byte."
msgstr ""

#: src/type-layout.md:595
msgid ""
"The discriminant enum from the example [earlier](#reprc-enums-with-fields) "
"then becomes:"
msgstr ""

#: src/type-layout.md:598
msgid "// `u8` was added\n"
msgstr ""

#: src/type-layout.md:608
msgid "// So `u8` is used here instead of `C`\n"
msgstr ""

#: src/type-layout.md:614
msgid ""
"For example, with a `repr(C, u8)` enum it is not possible to have 257 unique "
"discriminants (\"tags\") whereas the same enum with only a `repr(C)` "
"attribute will compile without any problems."
msgstr ""

#: src/type-layout.md:618
msgid ""
"Using a primitive representation in addition to `repr(C)` can change the "
"size of an enum from the `repr(C)` form:"
msgstr ""

#: src/type-layout.md:639
msgid "// The size of the C representation is platform dependant\n"
msgstr ""

#: src/type-layout.md:641
msgid ""
"// One byte for the discriminant and one byte for the value in "
"Enum8::Variant0\n"
msgstr ""

#: src/type-layout.md:643
msgid ""
"// Two bytes for the discriminant and one byte for the value in "
"Enum16::Variant0\n"
"// plus one byte of padding.\n"
msgstr ""

#: src/type-layout.md:653
msgid "The alignment modifiers"
msgstr ""

#: src/type-layout.md:657
msgid ""
"The `align` and `packed` modifiers can be used to respectively raise or "
"lower the alignment of `struct`s and `union`s. `packed` may also alter the "
"padding between fields (although it will not alter the padding inside of any "
"field). On their own, `align` and `packed` do not provide guarantees about "
"the order of fields in the layout of a struct or the layout of an enum "
"variant, although they may be combined with representations (such as `C`) "
"which do provide such guarantees."
msgstr ""

#: src/type-layout.md:667
msgid ""
"The alignment is specified as an integer parameter in the form of "
"`#[repr(align(x))]` or `#[repr(packed(x))]`. The alignment value must be a "
"power of two from 1 up to 2<sup>29</sup>. For `packed`, if no value is "
"given, as in `#[repr(packed)]`, then the value is 1."
msgstr ""

#: src/type-layout.md:674
msgid ""
"For `align`, if the specified alignment is less than the alignment of the "
"type without the `align` modifier, then the alignment is unaffected."
msgstr ""

#: src/type-layout.md:679
msgid ""
"For `packed`, if the specified alignment is greater than the type's "
"alignment without the `packed` modifier, then the alignment and layout is "
"unaffected."
msgstr ""

#: src/type-layout.md:684
msgid ""
"The alignments of each field, for the purpose of positioning fields, is the "
"smaller of the specified alignment and the alignment of the field's type."
msgstr ""

#: src/type-layout.md:689
msgid ""
"Inter-field padding is guaranteed to be the minimum required in order to "
"satisfy each field's (possibly altered) alignment (although note that, on "
"its own, `packed` does not provide any guarantee about field ordering). An "
"important consequence of these rules is that a type with "
"`#[repr(packed(1))]` (or `#[repr(packed)]`) will have no inter-field padding."
msgstr ""

#: src/type-layout.md:697
msgid ""
"The `align` and `packed` modifiers cannot be applied on the same type and a "
"`packed` type cannot transitively contain another `align`ed type. `align` "
"and `packed` may only be applied to the [`Rust`](#the-rust-representation) "
"and [`C`](#the-c-representation) representations."
msgstr ""

#: src/type-layout.md:703
msgid ""
"The `align` modifier can also be applied on an `enum`. When it is, the "
"effect on the `enum`'s alignment is the same as if the `enum` was wrapped in "
"a newtype `struct` with the same `align` modifier."
msgstr ""

#: src/type-layout.md:707
msgid ""
"Note: References to unaligned fields are not allowed because it is "
"[undefined behavior](behavior-considered-undefined.md). When fields are "
"unaligned due to an alignment modifier, consider the following options for "
"using references and dereferences:"
msgstr ""

#: src/type-layout.md:717
msgid ""
"// Instead of creating a reference to a field, copy the value to a local "
"variable.\n"
msgstr ""

#: src/type-layout.md:719
msgid ""
"// Or in situations like `println!` which creates a reference, use braces\n"
msgstr ""

#: src/type-layout.md:720
msgid "// to change it to a copy of the value.\n"
msgstr ""

#: src/type-layout.md:722
msgid ""
"// Or if you need a pointer, use the unaligned methods for reading and "
"writing\n"
msgstr ""

#: src/type-layout.md:723
msgid "// instead of dereferencing the pointer directly.\n"
msgstr ""

#: src/type-layout.md:732
msgid "The `transparent` Representation"
msgstr ""

#: src/type-layout.md:736
msgid ""
"The `transparent` representation can only be used on a [`struct`](items/"
"structs.md) or an [`enum`](items/enumerations.md) with a single variant that "
"has:"
msgstr ""

#: src/type-layout.md:738
msgid ""
"any number of fields with size 0 and alignment 1 (e.g. [`PhantomData<T>`]"
"(special-types-and-traits.md#phantomdatat)), and"
msgstr ""

#: src/type-layout.md:739
msgid "at most one other field."
msgstr ""

#: src/type-layout.md:743
msgid ""
"Structs and enums with this representation have the same layout and ABI as "
"the only non-size 0 non-alignment 1 field, if present, or unit otherwise."
msgstr ""

#: src/type-layout.md:746
msgid ""
"This is different than the `C` representation because a struct with the `C` "
"representation will always have the ABI of a `C` `struct` while, for "
"example, a struct with the `transparent` representation with a primitive "
"field will have the ABI of the primitive field."
msgstr ""

#: src/type-layout.md:753
msgid ""
"Because this representation delegates type layout to another type, it cannot "
"be used with any other representation."
msgstr ""

#: src/interior-mutability.md:3
msgid "Interior Mutability"
msgstr ""

#: src/interior-mutability.md:7
msgid ""
"Sometimes a type needs to be mutated while having multiple aliases. In Rust "
"this is achieved using a pattern called _interior mutability_."
msgstr ""

#: src/interior-mutability.md:12
msgid ""
"A type has interior mutability if its internal state can be changed through "
"a [shared reference](types/pointer.md#shared-references-) to it."
msgstr ""

#: src/interior-mutability.md:17
msgid ""
"This goes against the usual [requirement](behavior-considered-undefined.md) "
"that the value pointed to by a shared reference is not mutated."
msgstr ""

#: src/interior-mutability.md:22
msgid ""
"[`std::cell::UnsafeCell<T>`](../core/cell/struct.UnsafeCell.html) type is "
"the only allowed way to disable this requirement. When `UnsafeCell<T>` is "
"immutably aliased, it is still safe to mutate, or obtain a mutable reference "
"to, the `T` it contains."
msgstr ""

#: src/interior-mutability.md:28
msgid ""
"As with all other types, it is undefined behavior to have multiple `&mut "
"UnsafeCell<T>` aliases."
msgstr ""

#: src/interior-mutability.md:33
msgid ""
"Other types with interior mutability can be created by using `UnsafeCell<T>` "
"as a field. The standard library provides a variety of types that provide "
"safe interior mutability APIs."
msgstr ""

#: src/interior-mutability.md:39
msgid ""
"For example, [`std::cell::RefCell<T>`](../core/cell/struct.RefCell.html) "
"uses run-time borrow checks to ensure the usual rules around multiple "
"references."
msgstr ""

#: src/interior-mutability.md:43
msgid ""
"The [`std::sync::atomic`](../core/sync/atomic/index.html) module contains "
"types that wrap a value that is only accessed with atomic operations, "
"allowing the value to be shared and mutated across threads."
msgstr ""

#: src/subtyping.md:7
msgid ""
"Subtyping is implicit and can occur at any stage in type checking or "
"inference."
msgstr ""

#: src/subtyping.md:12
msgid ""
"Subtyping is restricted to two cases: variance with respect to lifetimes and "
"between types with higher ranked lifetimes. If we were to erase lifetimes "
"from types, then the only subtyping would be due to type equality."
msgstr ""

#: src/subtyping.md:17
msgid ""
"Consider the following example: string literals always have `'static` "
"lifetime. Nevertheless, we can assign `s` to `t`:"
msgstr ""

#: src/subtyping.md:22
msgid "\"hi\""
msgstr ""

#: src/subtyping.md:27
msgid ""
"Since `'static` outlives the lifetime parameter `'a`, `&'static str` is a "
"subtype of `&'a str`."
msgstr ""

#: src/subtyping.md:32
msgid ""
"[Higher-ranked](../nomicon/hrtb.html) [function pointers](types/function-"
"pointer.md) and [trait objects](types/trait-object.md) have another subtype "
"relation. They are subtypes of types that are given by substitutions of the "
"higher-ranked lifetimes. Some examples:"
msgstr ""

#: src/subtyping.md:37
msgid "// Here 'a is substituted for 'static\n"
msgstr ""

#: src/subtyping.md:40
msgid "// This works similarly for trait objects\n"
msgstr ""

#: src/subtyping.md:44
msgid "// We can also substitute one higher-ranked lifetime for another\n"
msgstr ""

#: src/subtyping.md:52
msgid "Variance"
msgstr ""

#: src/subtyping.md:56
msgid ""
"Variance is a property that generic types have with respect to their "
"arguments. A generic type's _variance_ in a parameter is how the subtyping "
"of the parameter affects the subtyping of the type."
msgstr ""

#: src/subtyping.md:62
msgid ""
"`F<T>` is _covariant_ over `T` if `T` being a subtype of `U` implies that "
"`F<T>` is a subtype of `F<U>` (subtyping \"passes through\")"
msgstr ""

#: src/subtyping.md:67
msgid ""
"`F<T>` is _contravariant_ over `T` if `T` being a subtype of `U` implies "
"that `F<U>` is a subtype of `F<T>`"
msgstr ""

#: src/subtyping.md:72
msgid ""
"`F<T>` is _invariant_ over `T` otherwise (no subtyping relation can be "
"derived)"
msgstr ""

#: src/subtyping.md:77
msgid "Variance of types is automatically determined as follows"
msgstr ""

#: src/subtyping.md:79
msgid "Variance in `'a`"
msgstr ""

#: src/subtyping.md:79
msgid "Variance in `T`"
msgstr ""

#: src/subtyping.md:81
msgid "`&'a T`"
msgstr ""

#: src/subtyping.md:81 src/subtyping.md:82 src/subtyping.md:83
#: src/subtyping.md:85 src/subtyping.md:86 src/subtyping.md:89
#: src/subtyping.md:90
msgid "covariant"
msgstr ""

#: src/subtyping.md:82
msgid "`&'a mut T`"
msgstr ""

#: src/subtyping.md:82 src/subtyping.md:84 src/subtyping.md:88
#: src/subtyping.md:90
msgid "invariant"
msgstr ""

#: src/subtyping.md:83 src/type-coercions.md:197
msgid "`*const T`"
msgstr ""

#: src/subtyping.md:84 src/type-coercions.md:198
msgid "`*mut T`"
msgstr ""

#: src/subtyping.md:85
msgid "`[T]` and `[T; n]`"
msgstr ""

#: src/subtyping.md:86
msgid "`fn() -> T`"
msgstr ""

#: src/subtyping.md:87
msgid "`fn(T) -> ()`"
msgstr ""

#: src/subtyping.md:87
msgid "contravariant"
msgstr ""

#: src/subtyping.md:88
msgid "`std::cell::UnsafeCell<T>`"
msgstr ""

#: src/subtyping.md:89
msgid "`std::marker::PhantomData<T>`"
msgstr ""

#: src/subtyping.md:90
msgid "`dyn Trait<T> + 'a`"
msgstr ""

#: src/subtyping.md:94
msgid ""
"The variance of other `struct`, `enum`, and `union` types is decided by "
"looking at the variance of the types of their fields. If the parameter is "
"used in positions with different variances then the parameter is invariant. "
"For example the following struct is covariant in `'a` and `T` and invariant "
"in `'b`, `'c`, and `U`."
msgstr ""

#: src/subtyping.md:103
msgid ""
"// This makes `Variance` covariant in 'a, and would\n"
"                            // make it covariant in U, but U is used later\n"
msgstr ""

#: src/subtyping.md:105
msgid "// Covariant in T\n"
msgstr ""

#: src/subtyping.md:106
msgid "// Invariant in 'b\n"
msgstr ""

#: src/subtyping.md:107
msgid "// Invariant in U, makes the whole struct invariant\n"
msgstr ""

#: src/subtyping.md:109
msgid ""
"// Both co- and contravariant, makes 'c invariant\n"
"                            // in the struct.\n"
msgstr ""

#: src/subtyping.md:116
msgid ""
"When used outside of an `struct`, `enum`, or `union`, the variance for "
"parameters is checked at each location separately."
msgstr ""

#: src/subtyping.md:121
msgid ""
"// 'long is used inside of a tuple in both a co- and invariant position.\n"
msgstr ""

#: src/subtyping.md:124
msgid ""
"// As the variance at these positions is computed separately,\n"
"    // we can freely shrink 'long in the covariant position.\n"
msgstr ""

#: src/subtyping.md:130
msgid "// 'middle is used in both a co- and contravariant position.\n"
msgstr ""

#: src/subtyping.md:133
msgid ""
"// As the variance at these positions is computed separately,\n"
"    // we can freely shrink 'middle in the covariant position\n"
"    // and extend it in the contravariant position.\n"
msgstr ""

#: src/trait-bounds.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TypeParamBounds_ :  \n"
"   _TypeParamBound_ ( `+` _TypeParamBound_ )<sup>\\*</sup> `+`<sup>?</sup>"
msgstr ""

#: src/trait-bounds.md:11
msgid ""
"_TypeParamBound_ :  \n"
"      _Lifetime_ | _TraitBound_ | _UseBound_"
msgstr ""

#: src/trait-bounds.md:14
msgid ""
"_TraitBound_ :  \n"
"      ( `?` | [_ForLifetimes_](#higher-ranked-trait-bounds) )<sup>?</sup> "
"[_TypePath_](paths.md#paths-in-types)  \n"
"   | `(` ( `?` | [_ForLifetimes_](#higher-ranked-trait-bounds) )<sup>?</sup> "
"[_TypePath_](paths.md#paths-in-types) `)`"
msgstr ""

#: src/trait-bounds.md:20
msgid ""
"_LifetimeBounds_ :  \n"
"   ( _Lifetime_ `+` )<sup>\\*</sup> _Lifetime_<sup>?</sup>"
msgstr ""

#: src/trait-bounds.md:23
msgid ""
"_Lifetime_ :  \n"
"      [LIFETIME_OR_LABEL](tokens.md#lifetimes-and-loop-labels)  \n"
"   | `'static`  \n"
"   | `'_`"
msgstr ""

#: src/trait-bounds.md:28
msgid ""
"_UseBound_ :  \n"
"   `use` _UseBoundGenericArgs_"
msgstr ""

#: src/trait-bounds.md:31
msgid ""
"_UseBoundGenericArgs_ :  \n"
"      `<` `>`   \n"
"   | `<`   \n"
"      ( _UseBoundGenericArg_ `,`)<sup>\\*</sup>   \n"
"      _UseBoundGenericArg_ `,`<sup>?</sup>   \n"
"      `>`"
msgstr ""

#: src/trait-bounds.md:38
msgid ""
"_UseBoundGenericArg_ :  \n"
"      _Lifetime_   \n"
"   | [IDENTIFIER](identifiers.html)   \n"
"   | `Self`"
msgstr ""

#: src/trait-bounds.md:45
msgid ""
"[Trait](items/traits.md#trait-bounds) and lifetime bounds provide a way for "
"[generic items](items/generics.md) to restrict which types and lifetimes are "
"used as their parameters. Bounds can be provided on any type in a [where "
"clause](items/generics.md#where-clauses). There are also shorter forms for "
"certain common cases:"
msgstr ""

#: src/trait-bounds.md:50
msgid ""
"Bounds written after declaring a [generic parameter](items/generics.md): `fn "
"f<A: Copy>() {}` is the same as `fn f<A>() where A: Copy {}`."
msgstr ""

#: src/trait-bounds.md:52
msgid ""
"In trait declarations as [supertraits](items/traits.md#supertraits): `trait "
"Circle : Shape {}` is equivalent to `trait Circle where Self : Shape {}`."
msgstr ""

#: src/trait-bounds.md:54
msgid ""
"In trait declarations as bounds on [associated types](items/associated-"
"items.md#associated-types): `trait A { type B: Copy; }` is equivalent to "
"`trait A where Self::B: Copy { type B; }`."
msgstr ""

#: src/trait-bounds.md:60
msgid ""
"Bounds on an item must be satisfied when using the item. When type checking "
"and borrow checking a generic item, the bounds can be used to determine that "
"a trait is implemented for a type. For example, given `Ty: Trait`"
msgstr ""

#: src/trait-bounds.md:64
msgid ""
"In the body of a generic function, methods from `Trait` can be called on "
"`Ty` values. Likewise associated constants on the `Trait` can be used."
msgstr ""

#: src/trait-bounds.md:66
msgid "Associated types from `Trait` can be used."
msgstr ""

#: src/trait-bounds.md:67
msgid ""
"Generic functions and types with a `T: Trait` bounds can be used with `Ty` "
"being used for `T`."
msgstr ""

#: src/trait-bounds.md:78
msgid "// Can call method because T: Shape\n"
msgstr ""

#: src/trait-bounds.md:83
msgid "// doesn't move sh because T: Copy\n"
msgstr ""

#: src/trait-bounds.md:84
msgid "// Can use generic function because T: Shape\n"
msgstr ""

#: src/trait-bounds.md:90
msgid "// Type Figure<U> is well-formed because U: Shape\n"
msgstr ""

#: src/trait-bounds.md:93
msgid "\"Figure of two {}\""
msgstr ""

#: src/trait-bounds.md:94
msgid "// Can use associated function\n"
msgstr ""

#: src/trait-bounds.md:101
msgid ""
"Bounds that don't use the item's parameters or [higher-ranked lifetimes]"
"(#higher-ranked-trait-bounds) are checked when the item is defined. It is an "
"error for such a bound to be false."
msgstr ""

#: src/trait-bounds.md:106
msgid ""
"[`Copy`](special-types-and-traits.md#copy), [`Clone`](special-types-and-"
"traits.md#clone), and [`Sized`](special-types-and-traits.md#sized) bounds "
"are also checked for certain generic types when using the item, even if the "
"use does not provide a concrete type. It is an error to have `Copy` or "
"`Clone` as a bound on a mutable reference, [trait object](types/trait-"
"object.md), or [slice](types/slice.md). It is an error to have `Sized` as a "
"bound on a trait object or slice."
msgstr ""

#: src/trait-bounds.md:114
msgid "// Error: `i32` is not an iterator\n"
msgstr ""

#: src/trait-bounds.md:115
msgid "// (at use) Error: the trait bound is not satisfied\n"
msgstr ""

#: src/trait-bounds.md:116
msgid "// (at use) Error: size cannot be known at compilation\n"
msgstr ""

#: src/trait-bounds.md:125
msgid ""
"Trait and lifetime bounds are also used to name [trait objects](types/trait-"
"object.md)."
msgstr ""

#: src/trait-bounds.md:129
msgid "`?Sized`"
msgstr ""

#: src/trait-bounds.md:132
msgid ""
"`?` is only used to relax the implicit [`Sized`](special-types-and-"
"traits.md#sized) trait bound for [type parameters](types/parameters.md) or "
"[associated types](items/associated-items.md#associated-types). `?Sized` may "
"not be used as a bound for other types."
msgstr ""

#: src/trait-bounds.md:137
msgid "Lifetime bounds"
msgstr ""

#: src/trait-bounds.md:141
msgid "Lifetime bounds can be applied to types or to other lifetimes."
msgstr ""

#: src/trait-bounds.md:145
msgid ""
"The bound `'a: 'b` is usually read as `'a` _outlives_ `'b`. `'a: 'b` means "
"that `'a` lasts at least as long as `'b`, so a reference `&'a ()` is valid "
"whenever `&'b ()` is valid."
msgstr ""

#: src/trait-bounds.md:150
msgid "// &'a i32 is a subtype of &'b i32 because 'a: 'b\n"
msgstr ""

#: src/trait-bounds.md:151
msgid "// &'b &'a i32 is well formed because 'a: 'b\n"
msgstr ""

#: src/trait-bounds.md:157
msgid ""
"`T: 'a` means that all lifetime parameters of `T` outlive `'a`. For example, "
"if `'a` is an unconstrained lifetime parameter, then `i32: 'static` and "
"`&'static str: 'a` are satisfied, but `Vec<&'a ()>: 'static` is not."
msgstr ""

#: src/trait-bounds.md:162
msgid "Higher-ranked trait bounds"
msgstr ""

#: src/trait-bounds.md:166
msgid ""
"_ForLifetimes_ :  \n"
"   `for` [_GenericParams_](items/generics.md)"
msgstr ""

#: src/trait-bounds.md:171
msgid ""
"Trait bounds may be _higher ranked_ over lifetimes. These bounds specify a "
"bound that is true _for all_ lifetimes. For example, a bound such as "
"`for<'a> &'a T: PartialEq<i32>` would require an implementation like"
msgstr ""

#: src/trait-bounds.md:183
msgid ""
"and could then be used to compare a `&'a T` with any lifetime to an `i32`."
msgstr ""

#: src/trait-bounds.md:185
msgid ""
"Only a higher-ranked bound can be used here, because the lifetime of the "
"reference is shorter than any possible lifetime parameter on the function:"
msgstr ""

#: src/trait-bounds.md:196
msgid ""
"Higher-ranked lifetimes may also be specified just before the trait: the "
"only difference is the [scope](names/scopes.md#higher-ranked-trait-bound-"
"scopes) of the lifetime parameter, which extends only to the end of the "
"following trait instead of the whole bound. This function is equivalent to "
"the last one."
msgstr ""

#: src/trait-bounds.md:210
msgid "Implied bounds"
msgstr ""

#: src/trait-bounds.md:214
msgid ""
"Lifetime bounds required for types to be well-formed are sometimes inferred."
msgstr ""

#: src/trait-bounds.md:220
msgid ""
"The type parameter `T` is required to outlive `'a` for the type `&'a T` to "
"be well-formed. This is inferred because the function signature contains the "
"type `&'a T` which is only valid if `T: 'a` holds."
msgstr ""

#: src/trait-bounds.md:226
msgid ""
"Implied bounds are added for all parameters and outputs of functions. Inside "
"of `requires_t_outlives_a` you can assume `T: 'a` to hold even if you don't "
"explicitly specify this:"
msgstr ""

#: src/trait-bounds.md:233
msgid ""
"// This compiles, because `T: 'a` is implied by\n"
"    // the reference type `&'a T`.\n"
msgstr ""

#: src/trait-bounds.md:242
msgid ""
"// This errors, because `T: 'a` is not implied by\n"
"    // the function signature.\n"
msgstr ""

#: src/trait-bounds.md:250
msgid ""
"Only lifetime bounds are implied, trait bounds still have to be explicitly "
"added. The following example therefore causes an error:"
msgstr ""

#: src/trait-bounds.md:255
msgid "// error[E0277]: `T` doesn't implement `Debug`\n"
msgstr ""

#: src/trait-bounds.md:262
msgid ""
"Lifetime bounds are also inferred for type definitions and impl blocks for "
"any type:"
msgstr ""

#: src/trait-bounds.md:266
msgid ""
"// This requires `T: 'a` to be well-formed\n"
"    // which is inferred by the compiler.\n"
msgstr ""

#: src/trait-bounds.md:272
msgid ""
"// This requires `T: 'a` to be well-formed,\n"
"    // which is inferred by the compiler.\n"
"    //\n"
"    // Note that `T: 'a` is required even when only\n"
"    // using `Enum::OtherVariant`.\n"
msgstr ""

#: src/trait-bounds.md:282
msgid ""
"// This would error because `T: 'a` is not implied by any type\n"
"// in the impl header.\n"
"//     impl<'a, T> Trait<'a, T> for () {}\n"
msgstr ""

#: src/trait-bounds.md:286
msgid "// This compiles as `T: 'a` is implied by the self type `&'a T`.\n"
msgstr ""

#: src/trait-bounds.md:293
msgid "Use bounds"
msgstr ""

#: src/trait-bounds.md:296
msgid ""
"Certain bounds lists may include a `use<..>` bound to control which generic "
"parameters are captured by the `impl Trait` [abstract return type](types/"
"impl-trait.md#abstract-return-types).  See [precise capturing](types/impl-"
"trait.md#precise-capturing) for more details."
msgstr ""

#: src/type-coercions.md:7
msgid ""
"**Type coercions** are implicit operations that change the type of a value. "
"They happen automatically at specific locations and are highly restricted in "
"what types actually coerce."
msgstr ""

#: src/type-coercions.md:13
msgid ""
"Any conversions allowed by coercion can also be explicitly performed by the "
"[type cast operator](expressions/operator-expr.md#type-cast-expressions), "
"`as`."
msgstr ""

#: src/type-coercions.md:16
msgid ""
"Coercions are originally defined in [RFC 401](https://github.com/rust-lang/"
"rfcs/blob/master/text/0401-coercions.md) and expanded upon in [RFC 1558]"
"(https://github.com/rust-lang/rfcs/blob/master/text/1558-closure-to-fn-"
"coercion.md)."
msgstr ""

#: src/type-coercions.md:20
msgid "Coercion sites"
msgstr ""

#: src/type-coercions.md:24
msgid ""
"A coercion can only occur at certain coercion sites in a program; these are "
"typically places where the desired type is explicit or can be derived by "
"propagation from explicit types (without type inference). Possible coercion "
"sites are:"
msgstr ""

#: src/type-coercions.md:31
msgid "`let` statements where an explicit type is given."
msgstr ""

#: src/type-coercions.md:33 src/type-coercions.md:50 src/type-coercions.md:67
msgid "For example, `&mut 42` is coerced to have type `&i8` in the following:"
msgstr ""

#: src/type-coercions.md:41
msgid "`static` and `const` item declarations (similar to `let` statements)."
msgstr ""

#: src/type-coercions.md:45
msgid "Arguments for function calls"
msgstr ""

#: src/type-coercions.md:47
msgid ""
"The value being coerced is the actual parameter, and it is coerced to the "
"type of the formal parameter."
msgstr ""

#: src/type-coercions.md:60
msgid ""
"For method calls, the receiver (`self` parameter) type is coerced "
"differently, see the documentation on [method-call expressions](expressions/"
"method-call-expr.md) for details."
msgstr ""

#: src/type-coercions.md:65
msgid "Instantiations of struct, union, or enum variant fields"
msgstr ""

#: src/type-coercions.md:79
msgid ""
"Function results—either the final line of a block if it is not semicolon-"
"terminated or any expression in a `return` statement"
msgstr ""

#: src/type-coercions.md:82
msgid ""
"For example, `x` is coerced to have type `&dyn Display` in the following:"
msgstr ""

#: src/type-coercions.md:93
msgid ""
"If the expression in one of these coercion sites is a coercion-propagating "
"expression, then the relevant sub-expressions in that expression are also "
"coercion sites. Propagation recurses from these new coercion sites. "
"Propagating expressions and their relevant sub-expressions are:"
msgstr ""

#: src/type-coercions.md:100
msgid ""
"Array literals, where the array has type `[U; n]`. Each sub-expression in "
"the array literal is a coercion site for coercion to type `U`."
msgstr ""

#: src/type-coercions.md:105
msgid ""
"Array literals with repeating syntax, where the array has type `[U; n]`. The "
"repeated sub-expression is a coercion site for coercion to type `U`."
msgstr ""

#: src/type-coercions.md:110
msgid ""
"Tuples, where a tuple is a coercion site to type `(U_0, U_1, ..., U_n)`. "
"Each sub-expression is a coercion site to the respective type, e.g. the "
"zeroth sub-expression is a coercion site to type `U_0`."
msgstr ""

#: src/type-coercions.md:116
msgid ""
"Parenthesized sub-expressions (`(e)`): if the expression has type `U`, then "
"the sub-expression is a coercion site to `U`."
msgstr ""

#: src/type-coercions.md:121
msgid ""
"Blocks: if a block has type `U`, then the last expression in the block (if "
"it is not semicolon-terminated) is a coercion site to `U`. This includes "
"blocks which are part of control flow statements, such as `if`/`else`, if "
"the block has a known type."
msgstr ""

#: src/type-coercions.md:128
msgid "Coercion types"
msgstr ""

#: src/type-coercions.md:132
msgid "Coercion is allowed between the following types:"
msgstr ""

#: src/type-coercions.md:136
msgid ""
"`T` to `U` if `T` is a [subtype](subtyping.md) of `U` (_reflexive case_)"
msgstr ""

#: src/type-coercions.md:140
msgid ""
"`T_1` to `T_3` where `T_1` coerces to `T_2` and `T_2` coerces to `T_3` "
"(_transitive case_)"
msgstr ""

#: src/type-coercions.md:143
msgid "Note that this is not fully supported yet."
msgstr ""

#: src/type-coercions.md:147
msgid "`&mut T` to `&T`"
msgstr ""

#: src/type-coercions.md:151
msgid "`*mut T` to `*const T`"
msgstr ""

#: src/type-coercions.md:155
msgid "`&T` to `*const T`"
msgstr ""

#: src/type-coercions.md:159
msgid "`&mut T` to `*mut T`"
msgstr ""

#: src/type-coercions.md:163
msgid ""
"`&T` or `&mut T` to `&U` if `T` implements `Deref<Target = U>`. For example:"
msgstr ""

#: src/type-coercions.md:183
msgid "'y'"
msgstr ""

#: src/type-coercions.md:184
msgid "//&mut CharContainer is coerced to &char.\n"
msgstr ""

#: src/type-coercions.md:190
msgid "`&mut T` to `&mut U` if `T` implements `DerefMut<Target = U>`."
msgstr ""

#: src/type-coercions.md:194
msgid "TyCtor(`T`) to TyCtor(`U`), where TyCtor(`T`) is one of"
msgstr ""

#: src/type-coercions.md:195
msgid "`&T`"
msgstr ""

#: src/type-coercions.md:196
msgid "`&mut T`"
msgstr ""

#: src/type-coercions.md:199 src/special-types-and-traits.md:13
msgid "`Box<T>`"
msgstr ""

#: src/type-coercions.md:201
msgid ""
"and where `U` can be obtained from `T` by [unsized coercion](#unsized-"
"coercions)."
msgstr ""

#: src/type-coercions.md:209
msgid "Function item types to `fn` pointers"
msgstr ""

#: src/type-coercions.md:213
msgid "Non capturing closures to `fn` pointers"
msgstr ""

#: src/type-coercions.md:217
msgid "`!` to any `T`"
msgstr ""

#: src/type-coercions.md:221
msgid "Unsized Coercions"
msgstr ""

#: src/type-coercions.md:225
msgid ""
"The following coercions are called `unsized coercions`, since they relate to "
"converting types to unsized types, and are permitted in a few cases where "
"other coercions are not, as described above. They can still happen anywhere "
"else a coercion can occur."
msgstr ""

#: src/type-coercions.md:232
msgid ""
"Two traits, [`Unsize`](../core/marker/trait.Unsize.html) and "
"[`CoerceUnsized`](../core/ops/unsize/trait.CoerceUnsized.html), are used to "
"assist in this process and expose it for library use. The following "
"coercions are built-ins and, if `T` can be coerced to `U` with one of them, "
"then an implementation of `Unsize<U>` for `T` will be provided:"
msgstr ""

#: src/type-coercions.md:239
msgid "`[T; n]` to `[T]`."
msgstr ""

#: src/type-coercions.md:243
msgid ""
"`T` to `dyn U`, when `T` implements `U + Sized`, and `U` is [dyn compatible]"
"(items/traits.md#dyn-compatibility)."
msgstr ""

#: src/type-coercions.md:247
msgid ""
"`dyn T` to `dyn U`, when `U` is one of `T`'s [supertraits](items/"
"traits.md#supertraits)."
msgstr ""

#: src/type-coercions.md:248
msgid ""
"This allows dropping auto traits, i.e. `dyn T + Auto` to `dyn U` is allowed."
msgstr ""

#: src/type-coercions.md:249
msgid ""
"This allows adding auto traits if the principal trait has the auto trait as "
"a super trait, i.e. given `trait T: U + Send {}`, `dyn T` to `dyn T + Send` "
"or to `dyn U + Send` coercions are allowed."
msgstr ""

#: src/type-coercions.md:253
msgid "`Foo<..., T, ...>` to `Foo<..., U, ...>`, when:"
msgstr ""

#: src/type-coercions.md:254
msgid "`Foo` is a struct."
msgstr ""

#: src/type-coercions.md:255
msgid "`T` implements `Unsize<U>`."
msgstr ""

#: src/type-coercions.md:256
msgid "The last field of `Foo` has a type involving `T`."
msgstr ""

#: src/type-coercions.md:257
msgid ""
"If that field has type `Bar<T>`, then `Bar<T>` implements `Unsize<Bar<U>>`."
msgstr ""

#: src/type-coercions.md:258
msgid "T is not part of the type of any other fields."
msgstr ""

#: src/type-coercions.md:262
msgid ""
"Additionally, a type `Foo<T>` can implement `CoerceUnsized<Foo<U>>` when `T` "
"implements `Unsize<U>` or `CoerceUnsized<Foo<U>>`. This allows it to provide "
"an unsized coercion to `Foo<U>`."
msgstr ""

#: src/type-coercions.md:266
msgid ""
"Note: While the definition of the unsized coercions and their implementation "
"has been stabilized, the traits themselves are not yet stable and therefore "
"can't be used directly in stable Rust."
msgstr ""

#: src/type-coercions.md:272
msgid "Least upper bound coercions"
msgstr ""

#: src/type-coercions.md:276
msgid ""
"In some contexts, the compiler must coerce together multiple types to try "
"and find the most general type. This is called a \"Least Upper Bound\" "
"coercion. LUB coercion is used and only used in the following situations:"
msgstr ""

#: src/type-coercions.md:280
msgid "To find the common type for a series of if branches."
msgstr ""

#: src/type-coercions.md:281
msgid "To find the common type for a series of match arms."
msgstr ""

#: src/type-coercions.md:282
msgid "To find the common type for array elements."
msgstr ""

#: src/type-coercions.md:283
msgid ""
"To find the type for the return type of a closure with multiple return "
"statements."
msgstr ""

#: src/type-coercions.md:284
msgid ""
"To check the type for the return type of a function with multiple return "
"statements."
msgstr ""

#: src/type-coercions.md:288
msgid ""
"In each such case, there are a set of types `T0..Tn` to be mutually coerced "
"to some target type `T_t`, which is unknown to start."
msgstr ""

#: src/type-coercions.md:293
msgid ""
"Computing the LUB coercion is done iteratively. The target type `T_t` begins "
"as the type `T0`. For each new type `Ti`, we consider whether"
msgstr ""

#: src/type-coercions.md:299
msgid ""
"If `Ti` can be coerced to the current target type `T_t`, then no change is "
"made."
msgstr ""

#: src/type-coercions.md:303
msgid ""
"Otherwise, check whether `T_t` can be coerced to `Ti`; if so, the `T_t` is "
"changed to `Ti`. (This check is also conditioned on whether all of the "
"source expressions considered thus far have implicit coercions.)"
msgstr ""

#: src/type-coercions.md:309
msgid ""
"If not, try to compute a mutual supertype of `T_t` and `Ti`, which will "
"become the new target type."
msgstr ""

#: src/type-coercions.md:314
msgid "// For if branches\n"
msgstr ""

#: src/type-coercions.md:323
msgid "// For match arms\n"
msgstr ""

#: src/type-coercions.md:330
msgid "// For array elements\n"
msgstr ""

#: src/type-coercions.md:333
msgid "// For closure with multiple return statements\n"
msgstr ""

#: src/type-coercions.md:345
msgid "// For type checking of function with multiple return statements\n"
msgstr ""

#: src/type-coercions.md:357
msgid ""
"In these examples, types of the `ba*` are found by LUB coercion. And the "
"compiler checks whether LUB coercion result of `a`, `b`, `c` is `i32` in the "
"processing of the function `foo`."
msgstr ""

#: src/type-coercions.md:361
msgid "Caveat"
msgstr ""

#: src/type-coercions.md:363
msgid ""
"This description is obviously informal. Making it more precise is expected "
"to proceed as part of a general effort to specify the Rust type checker more "
"precisely."
msgstr ""

#: src/destructors.md:5
msgid ""
"When an [initialized](glossary.md#initialized) [variable](variables.md) or "
"[temporary](expressions.md#temporaries) goes out of [scope](#drop-scopes), "
"its _destructor_ is run, or it is _dropped_. [Assignment](expressions/"
"operator-expr.md#assignment-expressions) also runs the destructor of its "
"left-hand operand, if it's initialized. If a variable has been partially "
"initialized, only its initialized fields are dropped."
msgstr ""

#: src/destructors.md:13
msgid "The destructor of a type `T` consists of:"
msgstr ""

#: src/destructors.md:15
msgid ""
"If `T: Drop`, calling [`<T as std::ops::Drop>::drop`](../core/ops/drop/"
"trait.Drop.html#tymethod.drop)"
msgstr ""

#: src/destructors.md:16
msgid "Recursively running the destructor of all of its fields."
msgstr ""

#: src/destructors.md:17
msgid ""
"The fields of a [struct](types/struct.md) are dropped in declaration order."
msgstr ""

#: src/destructors.md:18
msgid ""
"The fields of the active [enum variant](types/enum.md) are dropped in "
"declaration order."
msgstr ""

#: src/destructors.md:19
msgid "The fields of a [tuple](types/tuple.md) are dropped in order."
msgstr ""

#: src/destructors.md:20
msgid ""
"The elements of an [array](types/array.md) or owned [slice](types/slice.md) "
"are dropped from the first element to the last."
msgstr ""

#: src/destructors.md:22
msgid ""
"The variables that a [closure](types/closure.md) captures by move are "
"dropped in an unspecified order."
msgstr ""

#: src/destructors.md:24
msgid ""
"[Trait objects](types/trait-object.md) run the destructor of the underlying "
"type."
msgstr ""

#: src/destructors.md:25
msgid "Other types don't result in any further drops."
msgstr ""

#: src/destructors.md:29
msgid ""
"If a destructor must be run manually, such as when implementing your own "
"smart pointer, [`std::ptr::drop_in_place`](../core/ptr/"
"fn.drop_in_place.html) can be used."
msgstr ""

#: src/destructors.md:32 src/destructors.md:255
msgid "Some examples:"
msgstr ""

#: src/destructors.md:43
msgid "\"drops when overwritten\""
msgstr ""

#: src/destructors.md:44
msgid "\"drops when scope ends\""
msgstr ""

#: src/destructors.md:46
msgid "\"Tuple first\""
msgstr ""

#: src/destructors.md:46
msgid "\"Tuple second\""
msgstr ""

#: src/destructors.md:48
msgid "// No destructor run on assignment.\n"
msgstr ""

#: src/destructors.md:50
msgid "\"Drops when moved\""
msgstr ""

#: src/destructors.md:50
msgid "// Drops now, but is then uninitialized.\n"
msgstr ""

#: src/destructors.md:53
msgid "// Uninitialized does not drop.\n"
msgstr ""

#: src/destructors.md:56
msgid "// After a partial move, only the remaining fields are dropped.\n"
msgstr ""

#: src/destructors.md:58
msgid "\"forgotten\""
msgstr ""

#: src/destructors.md:58
msgid "// Perform a partial move, leaving only `partial_move.0` initialized.\n"
msgstr ""

#: src/destructors.md:60
msgid "// When partial_move's scope ends, only the first field is dropped.\n"
msgstr ""

#: src/destructors.md:66
msgid "Drop scopes"
msgstr ""

#: src/destructors.md:70
msgid ""
"Each variable or temporary is associated to a _drop scope_. When control "
"flow leaves a drop scope all variables associated to that scope are dropped "
"in reverse order of declaration (for variables) or creation (for "
"temporaries)."
msgstr ""

#: src/destructors.md:76
msgid ""
"Drop scopes are determined after replacing [`for`](expressions/loop-"
"expr.md#iterator-loops), [`if let`](expressions/if-expr.md#if-let-"
"expressions), and [`while let`](expressions/loop-expr.md#predicate-pattern-"
"loops) expressions with the equivalent expressions using [`match`]"
"(expressions/match-expr.md)."
msgstr ""

#: src/destructors.md:81
msgid ""
"Overloaded operators are not distinguished from built-in operators and "
"[binding modes](patterns.md#binding-modes) are not considered."
msgstr ""

#: src/destructors.md:86
msgid "Given a function, or closure, there are drop scopes for:"
msgstr ""

#: src/destructors.md:90
msgid "The entire function"
msgstr ""

#: src/destructors.md:94
msgid "Each [statement](statements.md)"
msgstr ""

#: src/destructors.md:98
msgid "Each [expression](expressions.md)"
msgstr ""

#: src/destructors.md:102
msgid "Each block, including the function body"
msgstr ""

#: src/destructors.md:103
msgid ""
"In the case of a [block expression](expressions/block-expr.md), the scope "
"for the block and the expression are the same scope."
msgstr ""

#: src/destructors.md:108
msgid "Each arm of a `match` expression"
msgstr ""

#: src/destructors.md:112
msgid ""
"Drop scopes are nested within one another as follows. When multiple scopes "
"are left at once, such as when returning from a function, variables are "
"dropped from the inside outwards."
msgstr ""

#: src/destructors.md:118
msgid "The entire function scope is the outer most scope."
msgstr ""

#: src/destructors.md:122
msgid ""
"The function body block is contained within the scope of the entire function."
msgstr ""

#: src/destructors.md:126
msgid ""
"The parent of the expression in an expression statement is the scope of the "
"statement."
msgstr ""

#: src/destructors.md:131
msgid ""
"The parent of the initializer of a [`let` statement](statements.md#let-"
"statements) is the `let` statement's scope."
msgstr ""

#: src/destructors.md:136
msgid ""
"The parent of a statement scope is the scope of the block that contains the "
"statement."
msgstr ""

#: src/destructors.md:141
msgid ""
"The parent of the expression for a `match` guard is the scope of the arm "
"that the guard is for."
msgstr ""

#: src/destructors.md:146
msgid ""
"The parent of the expression after the `=>` in a `match` expression is the "
"scope of the arm that it's in."
msgstr ""

#: src/destructors.md:151
msgid ""
"The parent of the arm scope is the scope of the `match` expression that it "
"belongs to."
msgstr ""

#: src/destructors.md:156
msgid ""
"The parent of all other scopes is the scope of the immediately enclosing "
"expression."
msgstr ""

#: src/destructors.md:161
msgid "Scopes of function parameters"
msgstr ""

#: src/destructors.md:164
msgid ""
"All function parameters are in the scope of the entire function body, so are "
"dropped last when evaluating the function. Each actual function parameter is "
"dropped after any bindings introduced in that parameter's pattern."
msgstr ""

#: src/destructors.md:172 src/destructors.md:203 src/destructors.md:261
#: src/destructors.md:315
msgid "\"drop({})\""
msgstr ""

#: src/destructors.md:174
msgid ""
"// Drops `y`, then the second parameter, then `x`, then the first parameter\n"
msgstr ""

#: src/destructors.md:180
msgid "// drop order is 3 2 0 1\n"
msgstr ""

#: src/destructors.md:183 src/paths.md:41
msgid "\"0\""
msgstr ""

#: src/destructors.md:184
msgid "\"2\""
msgstr ""

#: src/destructors.md:184
msgid "\"3\""
msgstr ""

#: src/destructors.md:190
msgid "Scopes of local variables"
msgstr ""

#: src/destructors.md:194
msgid ""
"Local variables declared in a `let` statement are associated to the scope of "
"the block that contains the `let` statement. Local variables declared in a "
"`match` expression are associated to the arm scope of the `match` arm that "
"they are declared in."
msgstr ""

#: src/destructors.md:206
msgid "\"Dropped last in outer scope\""
msgstr ""

#: src/destructors.md:208
msgid "\"Dropped in inner scope\""
msgstr ""

#: src/destructors.md:210
msgid "\"Dropped first in outer scope\""
msgstr ""

#: src/destructors.md:215
msgid ""
"If multiple patterns are used in the same arm for a `match` expression, then "
"an unspecified pattern will be used to determine the drop order."
msgstr ""

#: src/destructors.md:220
msgid "Temporary scopes"
msgstr ""

#: src/destructors.md:224
msgid ""
"The _temporary scope_ of an expression is the scope that is used for the "
"temporary variable that holds the result of that expression when used in a "
"[place context](expressions.md#place-expressions-and-value-expressions), "
"unless it is [promoted](destructors.md#constant-promotion)."
msgstr ""

#: src/destructors.md:230
msgid ""
"Apart from lifetime extension, the temporary scope of an expression is the "
"smallest scope that contains the expression and is one of the following:"
msgstr ""

#: src/destructors.md:233
msgid "The entire function."
msgstr ""

#: src/destructors.md:234
msgid "A statement."
msgstr ""

#: src/destructors.md:235
msgid ""
"The body of an [`if`](expressions/if-expr.md#if-expressions), [`while`]"
"(expressions/loop-expr.md#predicate-loops) or [`loop`](expressions/loop-"
"expr.md#infinite-loops) expression."
msgstr ""

#: src/destructors.md:236
msgid "The `else` block of an `if` expression."
msgstr ""

#: src/destructors.md:237
msgid ""
"The condition expression of an `if` or `while` expression, or a `match` "
"guard."
msgstr ""

#: src/destructors.md:239
msgid "The body expression for a match arm."
msgstr ""

#: src/destructors.md:240
msgid ""
"Each operand of a [lazy boolean expression](expressions/operator-"
"expr.md#lazy-boolean-operators)."
msgstr ""

#: src/destructors.md:241
msgid ""
"The pattern-matching condition and consequent body of [`if let`](expressions/"
"if-expr.md#if-let-expressions) ([destructors.scope.temporary.edition2024]"
"(destructors.md#r-destructors.scope.temporary.edition2024))."
msgstr ""

#: src/destructors.md:242
msgid ""
"The entirety of the tail expression of a block "
"([destructors.scope.temporary.edition2024](destructors.md#r-"
"destructors.scope.temporary.edition2024))."
msgstr ""

#: src/destructors.md:244 src/inline-assembly.md:574 src/inline-assembly.md:879
msgid "**Notes**:"
msgstr ""

#: src/destructors.md:246
msgid ""
"The [scrutinee](glossary.md#scrutinee) of a `match` expression is not a "
"temporary scope, so temporaries in the scrutinee can be dropped after the "
"`match` expression. For example, the temporary for `1` in `match 1 { ref mut "
"z => z };` lives until the end of the statement."
msgstr ""

#: src/destructors.md:253
msgid ""
"**Edition differences**: The 2024 edition added two new temporary scope "
"narrowing rules: `if let` temporaries are dropped before the `else` block, "
"and temporaries of tail expressions of blocks are dropped immediately after "
"the tail expression is evaluated."
msgstr ""

#: src/destructors.md:264
msgid "\"local var\""
msgstr ""

#: src/destructors.md:265 src/destructors.md:294
msgid "// Dropped once the condition has been evaluated\n"
msgstr ""

#: src/destructors.md:267
msgid "\"If condition\""
msgstr ""

#: src/destructors.md:268
msgid "// Dropped at the end of the block\n"
msgstr ""

#: src/destructors.md:269
msgid "\"If body\""
msgstr ""

#: src/destructors.md:274
msgid "\"if let scrutinee\""
msgstr ""

#: src/destructors.md:275
msgid "\"if let consequent\""
msgstr ""

#: src/destructors.md:276
msgid "// `if let consequent` dropped here\n"
msgstr ""

#: src/destructors.md:277
msgid "// `if let scrutinee` is dropped here\n"
msgstr ""

#: src/destructors.md:280
msgid "\"if let else\""
msgstr ""

#: src/destructors.md:281
msgid "// `if let else` dropped here\n"
msgstr ""

#: src/destructors.md:283
msgid "// Dropped before the first ||\n"
msgstr ""

#: src/destructors.md:285
msgid "\"first operand\""
msgstr ""

#: src/destructors.md:285 src/destructors.md:287 src/destructors.md:289
#: src/destructors.md:295 src/inline-assembly.md:216 src/inline-assembly.md:410
#: src/inline-assembly.md:454 src/inline-assembly.md:462
#: src/inline-assembly.md:476 src/inline-assembly.md:769
#: src/inline-assembly.md:802 src/inline-assembly.md:1162
#: src/inline-assembly.md:1216 src/inline-assembly.md:1229
#: src/inline-assembly.md:1258
msgid "\"\""
msgstr ""

#: src/destructors.md:285
msgid "// Dropped before the )\n"
msgstr ""

#: src/destructors.md:287
msgid "\"second operand\""
msgstr ""

#: src/destructors.md:287
msgid "// Dropped before the ;\n"
msgstr ""

#: src/destructors.md:289
msgid "\"third operand\""
msgstr ""

#: src/destructors.md:290
msgid ""
"// Scrutinee is dropped at the end of the function, before local variables\n"
"// (because this is the tail expression of the function body block).\n"
msgstr ""

#: src/destructors.md:293
msgid "\"Matched value in final expression\""
msgstr ""

#: src/destructors.md:295
msgid "\"guard condition\""
msgstr ""

#: src/destructors.md:302
msgid "Operands"
msgstr ""

#: src/destructors.md:305
msgid ""
"Temporaries are also created to hold the result of operands to an expression "
"while the other operands are evaluated. The temporaries are associated to "
"the scope of the expression with that operand. Since the temporaries are "
"moved from once the expression is evaluated, dropping them has no effect "
"unless one of the operands to an expression breaks out of the expression, "
"returns, or panics."
msgstr ""

#: src/destructors.md:319
msgid ""
"// Tuple expression doesn't finish evaluating so operands drop in reverse "
"order\n"
msgstr ""

#: src/destructors.md:321
msgid "\"Outer tuple first\""
msgstr ""

#: src/destructors.md:322
msgid "\"Outer tuple second\""
msgstr ""

#: src/destructors.md:324
msgid "\"Inner tuple first\""
msgstr ""

#: src/destructors.md:325
msgid "\"Inner tuple second\""
msgstr ""

#: src/destructors.md:328
msgid "\"Never created\""
msgstr ""

#: src/destructors.md:335
msgid "Constant promotion"
msgstr ""

#: src/destructors.md:338
msgid ""
"Promotion of a value expression to a `'static` slot occurs when the "
"expression could be written in a constant and borrowed, and that borrow "
"could be dereferenced where the expression was originally written, without "
"changing the runtime behavior. That is, the promoted expression can be "
"evaluated at compile-time and the resulting value does not contain [interior "
"mutability](interior-mutability.md) or [destructors](destructors.md) (these "
"properties are determined based on the value where possible, e.g. `&None` "
"always has the type `&'static Option<_>`, as it contains nothing disallowed)."
msgstr ""

#: src/destructors.md:349
msgid "Temporary lifetime extension"
msgstr ""

#: src/destructors.md:352
msgid ""
"**Note**: The exact rules for temporary lifetime extension are subject to "
"change. This is describing the current behavior only."
msgstr ""

#: src/destructors.md:357
msgid ""
"The temporary scopes for expressions in `let` statements are sometimes "
"_extended_ to the scope of the block containing the `let` statement. This is "
"done when the usual temporary scope would be too small, based on certain "
"syntactic rules. For example:"
msgstr ""

#: src/destructors.md:363
msgid ""
"// Usually a temporary would be dropped by now, but the temporary for `0` "
"lives\n"
"// to the end of the block.\n"
msgstr ""

#: src/destructors.md:371
msgid ""
"Lifetime extension also applies to `static` and `const` items, where it "
"makes temporaries live until the end of the program. For example:"
msgstr ""

#: src/destructors.md:375
msgid ""
"// Usually this would be a dangling reference as the `Vec` would only\n"
"// exist inside the initializer expression of `C`, but instead the\n"
"// borrow gets lifetime-extended so it effectively has `'static` lifetime.\n"
msgstr ""

#: src/destructors.md:384
msgid ""
"If a [borrow](expressions/operator-expr.md#borrow-operators), [dereference]"
"(expressions/operator-expr.md#the-dereference-operator), [field](expressions/"
"field-expr.md), or [tuple indexing expression](expressions/tuple-"
"expr.md#tuple-indexing-expressions) has an extended temporary scope then so "
"does its operand. If an [indexing expression](expressions/array-"
"expr.md#array-and-slice-indexing-expressions) has an extended temporary "
"scope then the indexed expression also has an extended temporary scope."
msgstr ""

#: src/destructors.md:392
msgid "Extending based on patterns"
msgstr ""

#: src/destructors.md:396
msgid "An _extending pattern_ is either"
msgstr ""

#: src/destructors.md:398
msgid ""
"An [identifier pattern](patterns.md#identifier-patterns) that binds by "
"reference or mutable reference."
msgstr ""

#: src/destructors.md:399
msgid ""
"A [struct](patterns.md#struct-patterns), [tuple](patterns.md#tuple-"
"patterns), [tuple struct](patterns.md#tuple-struct-patterns), or [slice]"
"(patterns.md#slice-patterns) pattern where at least one of the direct "
"subpatterns is an extending pattern."
msgstr ""

#: src/destructors.md:403
msgid ""
"So `ref x`, `V(ref x)` and `[ref x, y]` are all extending patterns, but `x`, "
"`&ref x` and `&(ref x,)` are not."
msgstr ""

#: src/destructors.md:408
msgid ""
"If the pattern in a `let` statement is an extending pattern then the "
"temporary scope of the initializer expression is extended."
msgstr ""

#: src/destructors.md:413
msgid "Extending based on expressions"
msgstr ""

#: src/destructors.md:416
msgid ""
"For a let statement with an initializer, an _extending expression_ is an "
"expression which is one of the following:"
msgstr ""

#: src/destructors.md:419
msgid "The initializer expression."
msgstr ""

#: src/destructors.md:420
msgid ""
"The operand of an extending [borrow expression](expressions/operator-"
"expr.md#borrow-operators)."
msgstr ""

#: src/destructors.md:421
msgid ""
"The operand(s) of an extending [array](expressions/array-expr.md#array-"
"expressions), [cast](expressions/operator-expr.md#type-cast-expressions), "
"[braced struct](expressions/struct-expr.md), or [tuple](expressions/tuple-"
"expr.md#tuple-expressions) expression."
msgstr ""

#: src/destructors.md:424
msgid ""
"The final expression of any extending [block expression](expressions/block-"
"expr.md)."
msgstr ""

#: src/destructors.md:426
msgid ""
"So the borrow expressions in `&mut 0`, `(&1, &mut 2)`, and `Some { 0: &mut "
"3 }` are all extending expressions. The borrows in `&0 + &1` and `Some(&mut "
"0)` are not: the latter is syntactically a function call expression."
msgstr ""

#: src/destructors.md:430
msgid ""
"The operand of any extending borrow expression has its temporary scope "
"extended."
msgstr ""

#: src/destructors.md:435
msgid ""
"Here are some examples where expressions have extended temporary scopes:"
msgstr ""

#: src/destructors.md:440
msgid ""
"// The temporary that stores the result of `temp()` lives in the same scope\n"
"// as x in these cases.\n"
msgstr ""

#: src/destructors.md:452
msgid ""
"Here are some examples where expressions don't have extended temporary "
"scopes:"
msgstr ""

#: src/destructors.md:457
msgid ""
"// The temporary that stores the result of `temp()` only lives until the\n"
"// end of the let statement in these cases.\n"
msgstr ""

#: src/destructors.md:468
msgid "Not running destructors"
msgstr ""

#: src/destructors.md:471
msgid ""
"[`std::mem::forget`](../core/mem/fn.forget.html) can be used to prevent the "
"destructor of a variable from being run, and [`std::mem::ManuallyDrop`](../"
"core/mem/manually_drop/struct.ManuallyDrop.html) provides a wrapper to "
"prevent a variable or field from being dropped automatically."
msgstr ""

#: src/destructors.md:475
msgid ""
"Note: Preventing a destructor from being run via [`std::mem::forget`](../"
"core/mem/fn.forget.html) or other means is safe even if it has a type that "
"isn't `'static`. Besides the places where destructors are guaranteed to run "
"as defined by this document, types may _not_ safely rely on a destructor "
"being run for soundness."
msgstr ""

#: src/lifetime-elision.md:5
msgid ""
"Rust has rules that allow lifetimes to be elided in various places where the "
"compiler can infer a sensible default choice."
msgstr ""

#: src/lifetime-elision.md:10
msgid "Lifetime elision in functions"
msgstr ""

#: src/lifetime-elision.md:14
msgid ""
"In order to make common patterns more ergonomic, lifetime arguments can be "
"_elided_ in [function item](types/function-item.md), [function pointer]"
"(types/function-pointer.md), and [closure trait](types/closure.md) "
"signatures. The following rules are used to infer lifetime parameters for "
"elided lifetimes."
msgstr ""

#: src/lifetime-elision.md:20
msgid "It is an error to elide lifetime parameters that cannot be inferred."
msgstr ""

#: src/lifetime-elision.md:24
msgid ""
"The placeholder lifetime, `'_`, can also be used to have a lifetime inferred "
"in the same way. For lifetimes in paths, using `'_` is preferred."
msgstr ""

#: src/lifetime-elision.md:29
msgid ""
"Trait object lifetimes follow different rules discussed [below](#default-"
"trait-object-lifetimes)."
msgstr ""

#: src/lifetime-elision.md:34
msgid ""
"Each elided lifetime in the parameters becomes a distinct lifetime parameter."
msgstr ""

#: src/lifetime-elision.md:38
msgid ""
"If there is exactly one lifetime used in the parameters (elided or not), "
"that lifetime is assigned to _all_ elided output lifetimes."
msgstr ""

#: src/lifetime-elision.md:43
msgid "In method signatures there is another rule"
msgstr ""

#: src/lifetime-elision.md:45
msgid ""
"If the receiver has type `&Self`  or `&mut Self`, then the lifetime of that "
"reference to `Self` is assigned to all elided output lifetime parameters."
msgstr ""

#: src/lifetime-elision.md:57 src/lifetime-elision.md:61
#: src/lifetime-elision.md:64 src/lifetime-elision.md:67
#: src/lifetime-elision.md:70 src/lifetime-elision.md:73
#: src/lifetime-elision.md:77 src/lifetime-elision.md:81
#: src/lifetime-elision.md:84
msgid "// elided\n"
msgstr ""

#: src/lifetime-elision.md:58
msgid "// also elided\n"
msgstr ""

#: src/lifetime-elision.md:59 src/lifetime-elision.md:62
#: src/lifetime-elision.md:65 src/lifetime-elision.md:68
#: src/lifetime-elision.md:71 src/lifetime-elision.md:74
#: src/lifetime-elision.md:78 src/lifetime-elision.md:82
#: src/lifetime-elision.md:85
msgid "// expanded\n"
msgstr ""

#: src/lifetime-elision.md:76
msgid "// elided - preferred\n"
msgstr ""

#: src/lifetime-elision.md:89
msgid ""
"// The following examples show situations where it is not allowed to elide "
"the\n"
"// lifetime parameter.\n"
msgstr ""

#: src/lifetime-elision.md:92
msgid "// Cannot infer, because there are no parameters to infer from.\n"
msgstr ""

#: src/lifetime-elision.md:94 src/lifetime-elision.md:97
msgid "// ILLEGAL\n"
msgstr ""

#: src/lifetime-elision.md:95
msgid ""
"// Cannot infer, ambiguous if it is borrowed from the first or second "
"parameter.\n"
msgstr ""

#: src/lifetime-elision.md:103
msgid "Default trait object lifetimes"
msgstr ""

#: src/lifetime-elision.md:107
msgid ""
"The assumed lifetime of references held by a [trait object](types/trait-"
"object.md) is called its _default object lifetime bound_. These were defined "
"in [RFC 599](https://github.com/rust-lang/rfcs/blob/master/text/0599-default-"
"object-bound.md) and amended in [RFC 1156](https://github.com/rust-lang/rfcs/"
"blob/master/text/1156-adjust-default-object-bounds.md)."
msgstr ""

#: src/lifetime-elision.md:113
msgid ""
"These default object lifetime bounds are used instead of the lifetime "
"parameter elision rules defined above when the lifetime bound is omitted "
"entirely."
msgstr ""

#: src/lifetime-elision.md:118
msgid ""
"If `'_` is used as the lifetime bound then the bound follows the usual "
"elision rules."
msgstr ""

#: src/lifetime-elision.md:123
msgid ""
"If the trait object is used as a type argument of a generic type then the "
"containing type is first used to try to infer a bound."
msgstr ""

#: src/lifetime-elision.md:128
msgid ""
"If there is a unique bound from the containing type then that is the default"
msgstr ""

#: src/lifetime-elision.md:132
msgid ""
"If there is more than one bound from the containing type then an explicit "
"bound must be specified"
msgstr ""

#: src/lifetime-elision.md:137
msgid "If neither of those rules apply, then the bounds on the trait are used:"
msgstr ""

#: src/lifetime-elision.md:141
msgid ""
"If the trait is defined with a single lifetime _bound_ then that bound is "
"used."
msgstr ""

#: src/lifetime-elision.md:146
msgid "If `'static` is used for any lifetime bound then `'static` is used."
msgstr ""

#: src/lifetime-elision.md:150
msgid ""
"If the trait has no lifetime bounds, then the lifetime is inferred in "
"expressions and is `'static` outside of expressions."
msgstr ""

#: src/lifetime-elision.md:154 src/lifetime-elision.md:193
msgid "// For the following trait...\n"
msgstr ""

#: src/lifetime-elision.md:156
msgid "// These two are the same because Box<T> has no lifetime bound on T\n"
msgstr ""

#: src/lifetime-elision.md:160 src/lifetime-elision.md:199
msgid "// ...and so are these:\n"
msgstr ""

#: src/lifetime-elision.md:164
msgid "// ...so are these, because &'a T requires T: 'a\n"
msgstr ""

#: src/lifetime-elision.md:168
msgid "// std::cell::Ref<'a, T> also requires T: 'a, so these are the same\n"
msgstr ""

#: src/lifetime-elision.md:175
msgid "// This is an example of an error.\n"
msgstr ""

#: src/lifetime-elision.md:182
msgid ""
"//                                  ^^^^^^^\n"
"// Error: the lifetime bound for this object type cannot be deduced from "
"context\n"
msgstr ""

#: src/lifetime-elision.md:189
msgid ""
"Note that the innermost object sets the bound, so `&'a Box<dyn Foo>` is "
"still `&'a Box<dyn Foo + 'static>`."
msgstr ""

#: src/lifetime-elision.md:195
msgid "// ...these two are the same:\n"
msgstr ""

#: src/lifetime-elision.md:207
msgid "`const` and `static` elision"
msgstr ""

#: src/lifetime-elision.md:211
msgid ""
"Both [constant](items/constant-items.md) and [static](items/static-items.md) "
"declarations of reference types have _implicit_ `'static` lifetimes unless "
"an explicit lifetime is specified. As such, the constant declarations "
"involving `'static` above may be written without the lifetimes."
msgstr ""

#: src/lifetime-elision.md:217
msgid "// STRING: &'static str\n"
msgstr ""

#: src/lifetime-elision.md:224
msgid "// BITS_N_STRINGS: BitsNStrings<'static>\n"
msgstr ""

#: src/lifetime-elision.md:234
msgid ""
"Note that if the `static` or `const` items include function or closure "
"references, which themselves include references, the compiler will first try "
"the standard elision rules. If it is unable to resolve the lifetimes by its "
"usual rules, then it will error. By way of example:"
msgstr ""

#: src/lifetime-elision.md:243
msgid "// Resolved as `for<'a> fn(&'a str) -> &'a str`.\n"
msgstr ""

#: src/lifetime-elision.md:246
msgid ""
"// Resolved as `for<'a, 'b, 'c> Fn(&'a Foo, &'b Bar, &'c Baz) -> usize`.\n"
msgstr ""

#: src/lifetime-elision.md:255
msgid ""
"// There is insufficient information to bound the return reference lifetime\n"
"// relative to the argument lifetimes, so this is an error.\n"
msgstr ""

#: src/lifetime-elision.md:258
msgid ""
"//                                            ^\n"
"// this function's return type contains a borrowed value, but the signature\n"
"// does not say whether it is borrowed from argument 1 or argument 2\n"
msgstr ""

#: src/special-types-and-traits.md:7
msgid ""
"Certain types and traits that exist in [the standard library](../std/"
"index.html) are known to the Rust compiler. This chapter documents the "
"special features of these types and traits."
msgstr ""

#: src/special-types-and-traits.md:17
msgid ""
"[`Box<T>`](../alloc/boxed/struct.Box.html) has a few special features that "
"Rust doesn't currently allow for user defined types."
msgstr ""

#: src/special-types-and-traits.md:22
msgid ""
"The [dereference operator](expressions/operator-expr.md#the-dereference-"
"operator) for `Box<T>` produces a place which can be moved from. This means "
"that the `*` operator and the destructor of `Box<T>` are built-in to the "
"language."
msgstr ""

#: src/special-types-and-traits.md:28
msgid ""
"[Methods](items/associated-items.md#associated-functions-and-methods) can "
"take `Box<Self>` as a receiver."
msgstr ""

#: src/special-types-and-traits.md:32
msgid ""
"A trait may be implemented for `Box<T>` in the same crate as `T`, which the "
"[orphan rules](items/implementations.md#trait-implementation-coherence) "
"prevent for other generic types."
msgstr ""

#: src/special-types-and-traits.md:39
msgid "`Rc<T>`"
msgstr ""

#: src/special-types-and-traits.md:43
msgid ""
"[Methods](items/associated-items.md#associated-functions-and-methods) can "
"take [`Rc<Self>`](../alloc/rc/struct.Rc.html) as a receiver."
msgstr ""

#: src/special-types-and-traits.md:47
msgid "`Arc<T>`"
msgstr ""

#: src/special-types-and-traits.md:51
msgid ""
"[Methods](items/associated-items.md#associated-functions-and-methods) can "
"take [`Arc<Self>`](../alloc/sync/struct.Arc.html) as a receiver."
msgstr ""

#: src/special-types-and-traits.md:55
msgid "`Pin<P>`"
msgstr ""

#: src/special-types-and-traits.md:59
msgid ""
"[Methods](items/associated-items.md#associated-functions-and-methods) can "
"take [`Pin<P>`](../core/pin/struct.Pin.html) as a receiver."
msgstr ""

#: src/special-types-and-traits.md:63
msgid "`UnsafeCell<T>`"
msgstr ""

#: src/special-types-and-traits.md:67
msgid ""
"[`std::cell::UnsafeCell<T>`](../core/cell/struct.UnsafeCell.html) is used "
"for [interior mutability](interior-mutability.md). It ensures that the "
"compiler doesn't perform optimisations that are incorrect for such types."
msgstr ""

#: src/special-types-and-traits.md:72
msgid ""
"It also ensures that [`static` items](items/static-items.md) which have a "
"type with interior mutability aren't placed in memory marked as read only."
msgstr ""

#: src/special-types-and-traits.md:77
msgid "`PhantomData<T>`"
msgstr ""

#: src/special-types-and-traits.md:79
msgid ""
"[`std::marker::PhantomData<T>`](../core/marker/struct.PhantomData.html) is a "
"zero-sized, minimum alignment, type that is considered to own a `T` for the "
"purposes of [variance](subtyping.md#variance), [drop check](../nomicon/"
"dropck.html), and [auto traits](#auto-traits)."
msgstr ""

#: src/special-types-and-traits.md:85
msgid "Operator Traits"
msgstr ""

#: src/special-types-and-traits.md:87
msgid ""
"The traits in [`std::ops`](../core/ops/index.html) and [`std::cmp`](../core/"
"cmp/index.html) are used to overload [operators](expressions/operator-"
"expr.md), [indexing expressions](expressions/array-expr.md#array-and-slice-"
"indexing-expressions), and [call expressions](expressions/call-expr.md)."
msgstr ""

#: src/special-types-and-traits.md:92
msgid "`Deref` and `DerefMut`"
msgstr ""

#: src/special-types-and-traits.md:94
msgid ""
"As well as overloading the unary `*` operator, [`Deref`](../core/ops/deref/"
"trait.Deref.html) and [`DerefMut`](../core/ops/deref/trait.DerefMut.html) "
"are also used in [method resolution](expressions/method-call-expr.md) and "
"[deref coercions](type-coercions.md#coercion-types)."
msgstr ""

#: src/special-types-and-traits.md:99
msgid "`Drop`"
msgstr ""

#: src/special-types-and-traits.md:101
msgid ""
"The [`Drop`](../core/ops/drop/trait.Drop.html) trait provides a [destructor]"
"(destructors.md), to be run whenever a value of this type is to be destroyed."
msgstr ""

#: src/special-types-and-traits.md:106
msgid "`Copy`"
msgstr ""

#: src/special-types-and-traits.md:110
msgid ""
"The [`Copy`](../core/marker/trait.Copy.html) trait changes the semantics of "
"a type implementing it."
msgstr ""

#: src/special-types-and-traits.md:114
msgid ""
"Values whose type implements `Copy` are copied rather than moved upon "
"assignment."
msgstr ""

#: src/special-types-and-traits.md:118
msgid ""
"`Copy` can only be implemented for types which do not implement `Drop`, and "
"whose fields are all `Copy`. For enums, this means all fields of all "
"variants have to be `Copy`. For unions, this means all variants have to be "
"`Copy`."
msgstr ""

#: src/special-types-and-traits.md:124
msgid "`Copy` is implemented by the compiler for"
msgstr ""

#: src/special-types-and-traits.md:128
msgid "[Tuples](types/tuple.md) of `Copy` types"
msgstr ""

#: src/special-types-and-traits.md:136
msgid "[Function items](types/function-item.md)"
msgstr ""

#: src/special-types-and-traits.md:140
msgid ""
"[Closures](types/closure.md) that capture no values or that only capture "
"values of `Copy` types"
msgstr ""

#: src/special-types-and-traits.md:144
msgid "`Clone`"
msgstr ""

#: src/special-types-and-traits.md:148
msgid ""
"The [`Clone`](../core/clone/trait.Clone.html) trait is a supertrait of "
"`Copy`, so it also needs compiler generated implementations."
msgstr ""

#: src/special-types-and-traits.md:153
msgid "It is implemented by the compiler for the following types:"
msgstr ""

#: src/special-types-and-traits.md:157
msgid "Types with a built-in `Copy` implementation (see above)"
msgstr ""

#: src/special-types-and-traits.md:161
msgid "[Tuples](types/tuple.md) of `Clone` types"
msgstr ""

#: src/special-types-and-traits.md:165
msgid ""
"[Closures](types/closure.md) that only capture values of `Clone` types or "
"capture no values from the environment"
msgstr ""

#: src/special-types-and-traits.md:169
msgid "`Send`"
msgstr ""

#: src/special-types-and-traits.md:171
msgid ""
"The [`Send`](../core/marker/trait.Send.html) trait indicates that a value of "
"this type is safe to send from one thread to another."
msgstr ""

#: src/special-types-and-traits.md:176
msgid "`Sync`"
msgstr ""

#: src/special-types-and-traits.md:180
msgid ""
"The [`Sync`](../core/marker/trait.Sync.html) trait indicates that a value of "
"this type is safe to share between multiple threads."
msgstr ""

#: src/special-types-and-traits.md:185
msgid ""
"This trait must be implemented for all types used in immutable [`static` "
"items](items/static-items.md)."
msgstr ""

#: src/special-types-and-traits.md:189
msgid "`Termination`"
msgstr ""

#: src/special-types-and-traits.md:191
msgid ""
"The [`Termination`](../std/process/trait.Termination.html) trait indicates "
"the acceptable return types for the [main function](crates-and-source-"
"files.md#main-functions) and [test functions](attributes/testing.md#the-test-"
"attribute)."
msgstr ""

#: src/special-types-and-traits.md:195
msgid "Auto traits"
msgstr ""

#: src/special-types-and-traits.md:197
msgid ""
"The [`Send`](../core/marker/trait.Send.html), [`Sync`](../core/marker/"
"trait.Sync.html), [`Unpin`](../core/marker/trait.Unpin.html), [`UnwindSafe`]"
"(../core/panic/unwind_safe/trait.UnwindSafe.html), and [`RefUnwindSafe`](../"
"core/panic/unwind_safe/trait.RefUnwindSafe.html) traits are _auto traits_. "
"Auto traits have special properties."
msgstr ""

#: src/special-types-and-traits.md:202
msgid ""
"If no explicit implementation or negative implementation is written out for "
"an auto trait for a given type, then the compiler implements it "
"automatically according to the following rules:"
msgstr ""

#: src/special-types-and-traits.md:208
msgid ""
"`&T`, `&mut T`, `*const T`, `*mut T`, `[T; n]`, and `[T]` implement the "
"trait if `T` does."
msgstr ""

#: src/special-types-and-traits.md:213
msgid ""
"Function item types and function pointers automatically implement the trait."
msgstr ""

#: src/special-types-and-traits.md:217
msgid ""
"Structs, enums, unions, and tuples implement the trait if all of their "
"fields do."
msgstr ""

#: src/special-types-and-traits.md:222
msgid ""
"Closures implement the trait if the types of all of their captures do. A "
"closure that captures a `T` by shared reference and a `U` by value "
"implements any auto traits that both `&T` and `U` do."
msgstr ""

#: src/special-types-and-traits.md:228
msgid ""
"For generic types (counting the built-in types above as generic over `T`), "
"if a generic implementation is available, then the compiler does not "
"automatically implement it for types that could use the implementation "
"except that they do not meet the requisite trait bounds. For instance, the "
"standard library implements `Send` for all `&T` where `T` is `Sync`; this "
"means that the compiler will not implement `Send` for `&T` if `T` is `Send` "
"but not `Sync`."
msgstr ""

#: src/special-types-and-traits.md:237
msgid ""
"Auto traits can also have negative implementations, shown as `impl !"
"AutoTrait for T` in the standard library documentation, that override the "
"automatic implementations. For example `*mut T` has a negative "
"implementation of `Send`, and so `*mut T` is not `Send`, even if `T` is. "
"There is currently no stable way to specify additional negative "
"implementations; they exist only in the standard library."
msgstr ""

#: src/special-types-and-traits.md:246
msgid ""
"Auto traits may be added as an additional bound to any [trait object](types/"
"trait-object.md), even though normally only one trait is allowed. For "
"instance, `Box<dyn Debug + Send + UnwindSafe>` is a valid type."
msgstr ""

#: src/special-types-and-traits.md:252
msgid "`Sized`"
msgstr ""

#: src/special-types-and-traits.md:256
msgid ""
"The [`Sized`](../core/marker/trait.Sized.html) trait indicates that the size "
"of this type is known at compile-time; that is, it's not a [dynamically "
"sized type](dynamically-sized-types.md)."
msgstr ""

#: src/special-types-and-traits.md:260
msgid ""
"[Type parameters](types/parameters.md) (except `Self` in traits) are `Sized` "
"by default, as are [associated types](items/associated-items.md#associated-"
"types)."
msgstr ""

#: src/special-types-and-traits.md:264
msgid ""
"`Sized` is always implemented automatically by the compiler, not by "
"[implementation items](items/implementations.md)."
msgstr ""

#: src/special-types-and-traits.md:268
msgid ""
"These implicit `Sized` bounds may be relaxed by using the special `?Sized` "
"bound."
msgstr ""

#: src/names.md:7
msgid ""
"An _entity_ is a language construct that can be referred to in some way "
"within the source program, usually via a [path](paths.md). Entities include "
"[types](types.md), [items](items.md), [generic parameters](items/"
"generics.md), [variable bindings](patterns.md), [loop labels](expressions/"
"loop-expr.md#loop-labels), [lifetimes](tokens.md#lifetimes-and-loop-labels), "
"[fields](expressions/field-expr.md), [attributes](attributes.md), and [lints]"
"(attributes/diagnostics.md#lint-check-attributes)."
msgstr ""

#: src/names.md:14
msgid ""
"A _declaration_ is a syntactical construct that can introduce a _name_ to "
"refer to an entity. Entity names are valid within a [_scope_](names/"
"scopes.md) --- a region of source text where that name may be referenced."
msgstr ""

#: src/names.md:20
msgid ""
"Some entities are [explicitly declared](#explicitly-declared-entities) in "
"the source code, and some are [implicitly declared](#implicitly-declared-"
"entities) as part of the language or compiler extensions."
msgstr ""

#: src/names.md:26
msgid ""
"[_Paths_](paths.md) are used to refer to an entity, possibly in another "
"module or type."
msgstr ""

#: src/names.md:30
msgid ""
"Lifetimes and loop labels use a [dedicated syntax](tokens.md#lifetimes-and-"
"loop-labels) using a leading quote."
msgstr ""

#: src/names.md:35
msgid ""
"Names are segregated into different [_namespaces_](names/namespaces.md), "
"allowing entities in different namespaces to share the same name without "
"conflict."
msgstr ""

#: src/names.md:40
msgid ""
"[_Name resolution_](names/name-resolution.md) is the compile-time process of "
"tying paths, identifiers, and labels to entity declarations."
msgstr ""

#: src/names.md:45
msgid ""
"Access to certain names may be restricted based on their [_visibility_]"
"(visibility-and-privacy.md)."
msgstr ""

#: src/names.md:49
msgid "Explicitly declared entities"
msgstr ""

#: src/names.md:53
msgid "Entities that explicitly introduce a name in the source code are:"
msgstr ""

#: src/names.md:57
msgid "[Items](items.md):"
msgstr ""

#: src/names.md:58
msgid "[Module declarations](items/modules.md)"
msgstr ""

#: src/names.md:59
msgid "[External crate declarations](items/extern-crates.md)"
msgstr ""

#: src/names.md:60
msgid "[Use declarations](items/use-declarations.md)"
msgstr ""

#: src/names.md:61
msgid ""
"[Function declarations](items/functions.md) and [function parameters](items/"
"functions.md#function-parameters)"
msgstr ""

#: src/names.md:62
msgid "[Type aliases](items/type-aliases.md)"
msgstr ""

#: src/names.md:63
msgid ""
"[struct](items/structs.md), [union](items/unions.md), [enum](items/"
"enumerations.md), enum variant declarations, and their named fields"
msgstr ""

#: src/names.md:65
msgid "[Constant item declarations](items/constant-items.md)"
msgstr ""

#: src/names.md:66
msgid "[Static item declarations](items/static-items.md)"
msgstr ""

#: src/names.md:67
msgid ""
"[Trait item declarations](items/traits.md) and their [associated items]"
"(items/associated-items.md)"
msgstr ""

#: src/names.md:68
msgid "[External block items](items/external-blocks.md)"
msgstr ""

#: src/names.md:69
msgid ""
"[`macro_rules` declarations](macros-by-example.md) and [matcher "
"metavariables](macros-by-example.md#metavariables)"
msgstr ""

#: src/names.md:70
msgid "[Implementation](items/implementations.md) associated items"
msgstr ""

#: src/names.md:74
msgid "[Expressions](expressions.md):"
msgstr ""

#: src/names.md:75
msgid "[Closure](expressions/closure-expr.md) parameters"
msgstr ""

#: src/names.md:76
msgid ""
"[`while let`](expressions/loop-expr.md#predicate-pattern-loops) pattern "
"bindings"
msgstr ""

#: src/names.md:77
msgid "[`for`](expressions/loop-expr.md#iterator-loops) pattern bindings"
msgstr ""

#: src/names.md:78
msgid "[`if let`](expressions/if-expr.md#if-let-expressions) pattern bindings"
msgstr ""

#: src/names.md:79
msgid "[`match`](expressions/match-expr.md) pattern bindings"
msgstr ""

#: src/names.md:80
msgid "[Loop labels](expressions/loop-expr.md#loop-labels)"
msgstr ""

#: src/names.md:84
msgid "[Generic parameters](items/generics.md)"
msgstr ""

#: src/names.md:88
msgid ""
"[Higher ranked trait bounds](trait-bounds.md#higher-ranked-trait-bounds)"
msgstr ""

#: src/names.md:92
msgid "[`let` statement](statements.md#let-statements) pattern bindings"
msgstr ""

#: src/names.md:96
msgid ""
"The [`macro_use` attribute](macros-by-example.md#the-macro_use-attribute) "
"can introduce macro names from another crate"
msgstr ""

#: src/names.md:100
msgid ""
"The [`macro_export` attribute](macros-by-example.md#path-based-scope) can "
"introduce an alias for the macro into the crate root"
msgstr ""

#: src/names.md:104
msgid ""
"Additionally, [macro invocations](macros.md#macro-invocation) and "
"[attributes](attributes.md) can introduce names by expanding to one of the "
"above items."
msgstr ""

#: src/names.md:109
msgid "Implicitly declared entities"
msgstr ""

#: src/names.md:113
msgid ""
"The following entities are implicitly defined by the language, or are "
"introduced by compiler options and extensions:"
msgstr ""

#: src/names.md:118
msgid "[Language prelude](names/preludes.md#language-prelude):"
msgstr ""

#: src/names.md:119
msgid "[Boolean type](types/boolean.md) --- `bool`"
msgstr ""

#: src/names.md:120
msgid "[Textual types](types/textual.md) --- `char` and `str`"
msgstr ""

#: src/names.md:121
msgid ""
"[Integer types](types/numeric.md#integer-types) --- `i8`, `i16`, `i32`, "
"`i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128`"
msgstr ""

#: src/names.md:122
msgid ""
"[Machine-dependent integer types](types/numeric.md#machine-dependent-integer-"
"types) --- `usize` and `isize`"
msgstr ""

#: src/names.md:123
msgid ""
"[floating-point types](types/numeric.md#floating-point-types) --- `f32` and "
"`f64`"
msgstr ""

#: src/names.md:127
msgid "[Built-in attributes](attributes.md#built-in-attributes-index)"
msgstr ""

#: src/names.md:131
msgid ""
"[Standard library prelude](names/preludes.md#standard-library-prelude) "
"items, attributes, and macros"
msgstr ""

#: src/names.md:135
msgid ""
"[Standard library](names/preludes.md#extern-prelude) crates in the root "
"module"
msgstr ""

#: src/names.md:139
msgid ""
"[External crates](names/preludes.md#extern-prelude) linked by the compiler"
msgstr ""

#: src/names.md:143
msgid "[Tool attributes](attributes.md#tool-attributes)"
msgstr ""

#: src/names.md:147
msgid ""
"[Lints](attributes/diagnostics.md#lint-check-attributes) and [tool lint "
"attributes](attributes/diagnostics.md#tool-lint-attributes)"
msgstr ""

#: src/names.md:151
msgid ""
"[Derive helper attributes](procedural-macros.md#derive-macro-helper-"
"attributes) are valid within an item without being explicitly imported"
msgstr ""

#: src/names.md:155
msgid "The [`'static`](keywords.md#weak-keywords) lifetime"
msgstr ""

#: src/names.md:159
msgid ""
"Additionally, the crate root module does not have a name, but can be "
"referred to with certain [path qualifiers](paths.md#path-qualifiers) or "
"aliases."
msgstr ""

#: src/names/namespaces.md:7
msgid ""
"A _namespace_ is a logical grouping of declared [names](../names.md). Names "
"are segregated into separate namespaces based on the kind of entity the name "
"refers to. Namespaces allow the occurrence of a name in one namespace to not "
"conflict with the same name in another namespace."
msgstr ""

#: src/names/namespaces.md:12
msgid ""
"There are several different namespaces that each contain different kinds of "
"entities. The usage of a name will look for the declaration of that name in "
"different namespaces, based on the context, as described in the [name "
"resolution](name-resolution.md) chapter."
msgstr ""

#: src/names/namespaces.md:19
msgid ""
"The following is a list of namespaces, with their corresponding entities:"
msgstr ""

#: src/names/namespaces.md:21
msgid "Type Namespace"
msgstr ""

#: src/names/namespaces.md:22
msgid "[Module declarations](../items/modules.md)"
msgstr ""

#: src/names/namespaces.md:23
msgid "[External crate declarations](../items/extern-crates.md)"
msgstr ""

#: src/names/namespaces.md:24
msgid "[External crate prelude](preludes.md#extern-prelude) items"
msgstr ""

#: src/names/namespaces.md:25
msgid ""
"[Struct](../items/structs.md), [union](../items/unions.md), [enum](../items/"
"enumerations.md), enum variant declarations"
msgstr ""

#: src/names/namespaces.md:26
msgid "[Trait item declarations](../items/traits.md)"
msgstr ""

#: src/names/namespaces.md:27
msgid "[Type aliases](../items/type-aliases.md)"
msgstr ""

#: src/names/namespaces.md:28
msgid ""
"[Associated type declarations](../items/associated-items.md#associated-types)"
msgstr ""

#: src/names/namespaces.md:29
msgid ""
"Built-in types: [boolean](../types/boolean.md), [numeric](../types/"
"numeric.md), and [textual](../types/textual.md)"
msgstr ""

#: src/names/namespaces.md:30
msgid "[Generic type parameters](../items/generics.md)"
msgstr ""

#: src/names/namespaces.md:31
msgid "[`Self` type](../paths.md#self-1)"
msgstr ""

#: src/names/namespaces.md:32
msgid "[Tool attribute modules](../attributes.md#tool-attributes)"
msgstr ""

#: src/names/namespaces.md:33
msgid "Value Namespace"
msgstr ""

#: src/names/namespaces.md:34
msgid "[Function declarations](../items/functions.md)"
msgstr ""

#: src/names/namespaces.md:35
msgid "[Constant item declarations](../items/constant-items.md)"
msgstr ""

#: src/names/namespaces.md:36
msgid "[Static item declarations](../items/static-items.md)"
msgstr ""

#: src/names/namespaces.md:37
msgid "[Struct constructors](../items/structs.md)"
msgstr ""

#: src/names/namespaces.md:38
msgid "[Enum variant constructors](../items/enumerations.md)"
msgstr ""

#: src/names/namespaces.md:39
msgid "[`Self` constructors](../paths.md#self-1)"
msgstr ""

#: src/names/namespaces.md:40
msgid "[Generic const parameters](../items/generics.md#const-generics)"
msgstr ""

#: src/names/namespaces.md:41
msgid ""
"[Associated const declarations](../items/associated-items.md#associated-"
"constants)"
msgstr ""

#: src/names/namespaces.md:42
msgid ""
"[Associated function declarations](../items/associated-items.md#associated-"
"functions-and-methods)"
msgstr ""

#: src/names/namespaces.md:43
msgid ""
"Local bindings --- [`let`](../statements.md#let-statements), [`if let`](../"
"expressions/if-expr.md#if-let-expressions), [`while let`](../expressions/"
"loop-expr.md#predicate-pattern-loops), [`for`](../expressions/loop-"
"expr.md#iterator-loops), [`match`](../expressions/match-expr.md) arms, "
"[function parameters](../items/functions.md#function-parameters), [closure "
"parameters](../expressions/closure-expr.md)"
msgstr ""

#: src/names/namespaces.md:45
msgid "Captured [closure](../expressions/closure-expr.md) variables"
msgstr ""

#: src/names/namespaces.md:46
msgid "Macro Namespace"
msgstr ""

#: src/names/namespaces.md:47
msgid "[`macro_rules` declarations](../macros-by-example.md)"
msgstr ""

#: src/names/namespaces.md:48 src/names/preludes.md:161
msgid "[Built-in attributes](../attributes.md#built-in-attributes-index)"
msgstr ""

#: src/names/namespaces.md:49
msgid "[Tool attributes](../attributes.md#tool-attributes)"
msgstr ""

#: src/names/namespaces.md:50
msgid ""
"[Function-like procedural macros](../procedural-macros.md#function-like-"
"procedural-macros)"
msgstr ""

#: src/names/namespaces.md:52
msgid ""
"[Derive macro helpers](../procedural-macros.md#derive-macro-helper-"
"attributes)"
msgstr ""

#: src/names/namespaces.md:53
msgid "[Attribute macros](../procedural-macros.md#attribute-macros)"
msgstr ""

#: src/names/namespaces.md:54
msgid "Lifetime Namespace"
msgstr ""

#: src/names/namespaces.md:55
msgid "[Generic lifetime parameters](../items/generics.md)"
msgstr ""

#: src/names/namespaces.md:56
msgid "Label Namespace"
msgstr ""

#: src/names/namespaces.md:57
msgid "[Loop labels](../expressions/loop-expr.md#loop-labels)"
msgstr ""

#: src/names/namespaces.md:58
msgid "[Block labels](../expressions/loop-expr.md#labelled-block-expressions)"
msgstr ""

#: src/names/namespaces.md:60
msgid ""
"An example of how overlapping names in different namespaces can be used "
"unambiguously:"
msgstr ""

#: src/names/namespaces.md:63
msgid ""
"// Foo introduces a type in the type namespace and a constructor in the "
"value\n"
"// namespace.\n"
msgstr ""

#: src/names/namespaces.md:66
msgid "// The `Foo` macro is declared in the macro namespace.\n"
msgstr ""

#: src/names/namespaces.md:71
msgid ""
"// `Foo` in the `f` parameter type refers to `Foo` in the type namespace.\n"
"// `'Foo` introduces a new lifetime in the lifetime namespace.\n"
msgstr ""

#: src/names/namespaces.md:75
msgid "// `Foo` refers to the `Foo` constructor in the value namespace.\n"
msgstr ""

#: src/names/namespaces.md:77
msgid "// `Foo` refers to the `Foo` macro in the macro namespace.\n"
msgstr ""

#: src/names/namespaces.md:79
msgid "// `'Foo` introduces a label in the label namespace.\n"
msgstr ""

#: src/names/namespaces.md:81
msgid ""
"// `'Foo` refers to the `'Foo` lifetime parameter, and `Foo`\n"
"        // refers to the type namespace.\n"
msgstr ""

#: src/names/namespaces.md:84
msgid "// `'Foo` refers to the label.\n"
msgstr ""

#: src/names/namespaces.md:92
msgid "Named entities without a namespace"
msgstr ""

#: src/names/namespaces.md:94
msgid ""
"The following entities have explicit names, but the names are not a part of "
"any specific namespace."
msgstr ""

#: src/names/namespaces.md:97
msgid "Fields"
msgstr ""

#: src/names/namespaces.md:101
msgid ""
"Even though struct, enum, and union fields are named, the named fields do "
"not live in an explicit namespace. They can only be accessed via a [field "
"expression](../expressions/field-expr.md), which only inspects the field "
"names of the specific type being accessed."
msgstr ""

#: src/names/namespaces.md:110
msgid ""
"A [use declaration](../items/use-declarations.md) has named aliases that it "
"imports into scope, but the `use` item itself does not belong to a specific "
"namespace. Instead, it can introduce aliases into multiple namespaces, "
"depending on the item kind being imported."
msgstr ""

#: src/names/namespaces.md:117
msgid "Sub-namespaces"
msgstr ""

#: src/names/namespaces.md:121
msgid ""
"The macro namespace is split into two sub-namespaces: one for [bang-style "
"macros](../macros.md) and one for [attributes](../attributes.md). When an "
"attribute is resolved, any bang-style macros in scope will be ignored. And "
"conversely resolving a bang-style macro will ignore attribute macros in "
"scope. This prevents one style from shadowing another."
msgstr ""

#: src/names/namespaces.md:126
msgid ""
"For example, the [`cfg` attribute](../conditional-compilation.md#the-cfg-"
"attribute) and the [`cfg` macro](../conditional-compilation.md#the-cfg-"
"macro) are two different entities with the same name in the macro namespace, "
"but they can still be used in their respective context."
msgstr ""

#: src/names/namespaces.md:130
msgid ""
"It is still an error for a [`use` import](../items/use-declarations.md) to "
"shadow another macro, regardless of their sub-namespaces."
msgstr ""

#: src/names/scopes.md:7
msgid ""
"A _scope_ is the region of source text where a named [entity](../names.md) "
"may be referenced with that name. The following sections provide details on "
"the scoping rules and behavior, which depend on the kind of entity and where "
"it is declared. The process of how names are resolved to entities is "
"described in the [name resolution](name-resolution.md) chapter. More "
"information on \"drop scopes\" used for the purpose of running destructors "
"may be found in the [destructors](../destructors.md) chapter."
msgstr ""

#: src/names/scopes.md:14
msgid "Item scopes"
msgstr ""

#: src/names/scopes.md:18
msgid ""
"The name of an [item](../items.md) declared directly in a [module](../items/"
"modules.md) has a scope that extends from the start of the module to the end "
"of the module. These items are also members of the module and can be "
"referred to with a [path](../paths.md) leading from their module."
msgstr ""

#: src/names/scopes.md:22
msgid ""
"The name of an item declared as a [statement](../statements.md) has a scope "
"that extends from the start of the block the item statement is in until the "
"end of the block."
msgstr ""

#: src/names/scopes.md:26
msgid ""
"It is an error to introduce an item with a duplicate name of another item in "
"the same [namespace](namespaces.md) within the same module or block. "
"[Asterisk glob imports](../items/use-declarations.md) have special behavior "
"for dealing with duplicate names and shadowing, see the linked chapter for "
"more details."
msgstr ""

#: src/names/scopes.md:31
msgid "Items in a module may shadow items in a [prelude](#prelude-scopes)."
msgstr ""

#: src/names/scopes.md:35
msgid ""
"Item names from outer modules are not in scope within a nested module. A "
"[path](../paths.md) may be used to refer to an item in another module."
msgstr ""

#: src/names/scopes.md:40
msgid "Associated item scopes"
msgstr ""

#: src/names/scopes.md:44
msgid ""
"[Associated items](../items/associated-items.md) are not scoped and can only "
"be referred to by using a [path](../paths.md) leading from the type or trait "
"they are associated with. [Methods](../items/associated-items.md#methods) "
"can also be referred to via [call expressions](../expressions/call-expr.md)."
msgstr ""

#: src/names/scopes.md:49
msgid ""
"Similar to items within a module or block,  it is an error to introduce an "
"item within a trait or implementation that is a duplicate of another item in "
"the trait or impl in the same namespace."
msgstr ""

#: src/names/scopes.md:53
msgid "Pattern binding scopes"
msgstr ""

#: src/names/scopes.md:55
msgid ""
"The scope of a local variable [pattern](../patterns.md) binding depends on "
"where it is used:"
msgstr ""

#: src/names/scopes.md:59
msgid ""
"[`let` statement](../statements.md#let-statements) bindings range from just "
"after the `let` statement until the end of the block where it is declared."
msgstr ""

#: src/names/scopes.md:62
msgid ""
"[Function parameter](../items/functions.md#function-parameters) bindings are "
"within the body of the function."
msgstr ""

#: src/names/scopes.md:65
msgid ""
"[Closure parameter](../expressions/closure-expr.md) bindings are within the "
"closure body."
msgstr ""

#: src/names/scopes.md:68
msgid ""
"[`for`](../expressions/loop-expr.md#iterator-loops) and [`while let`](../"
"expressions/loop-expr.md#predicate-pattern-loops) bindings are within the "
"loop body."
msgstr ""

#: src/names/scopes.md:71
msgid ""
"[`if let`](../expressions/if-expr.md#if-let-expressions) bindings are within "
"the consequent block."
msgstr ""

#: src/names/scopes.md:74
msgid ""
"[`match` arms](../expressions/match-expr.md) bindings are within the [match "
"guard](../expressions/match-expr.md#match-guards) and the match arm "
"expression."
msgstr ""

#: src/names/scopes.md:78
msgid "Local variable scopes do not extend into item declarations."
msgstr ""

#: src/names/scopes.md:81
msgid "Pattern binding shadowing"
msgstr ""

#: src/names/scopes.md:85
msgid ""
"Pattern bindings are allowed to shadow any name in scope with the following "
"exceptions which are an error:"
msgstr ""

#: src/names/scopes.md:87
msgid "[Const generic parameters](../items/generics.md#const-generics)"
msgstr ""

#: src/names/scopes.md:88
msgid "[Static items](../items/static-items.md)"
msgstr ""

#: src/names/scopes.md:89
msgid "[Const items](../items/constant-items.md)"
msgstr ""

#: src/names/scopes.md:90
msgid ""
"Constructors for [structs](../items/structs.md) and [enums](../items/"
"enumerations.md)"
msgstr ""

#: src/names/scopes.md:92
msgid ""
"The following example illustrates how local bindings can shadow item "
"declarations:"
msgstr ""

#: src/names/scopes.md:96
msgid ""
"// Since there are no local variables in scope yet, this resolves to the "
"function.\n"
msgstr ""

#: src/names/scopes.md:97
msgid "// prints `function`\n"
msgstr ""

#: src/names/scopes.md:98
msgid "\"closure\""
msgstr ""

#: src/names/scopes.md:99
msgid "\"function\""
msgstr ""

#: src/names/scopes.md:100
msgid "// This resolves to the local closure since it shadows the item.\n"
msgstr ""

#: src/names/scopes.md:101
msgid "// prints `closure`\n"
msgstr ""

#: src/names/scopes.md:107
msgid "Generic parameter scopes"
msgstr ""

#: src/names/scopes.md:111
msgid ""
"Generic parameters are declared in a [_GenericParams_](../items/generics.md) "
"list. The scope of a generic parameter is within the item it is declared on."
msgstr ""

#: src/names/scopes.md:116
msgid ""
"All parameters are in scope within the generic parameter list regardless of "
"the order they are declared. The following shows some examples where a "
"parameter may be referenced before it is declared:"
msgstr ""

#: src/names/scopes.md:120
msgid "// The 'b bound is referenced before it is declared.\n"
msgstr ""

#: src/names/scopes.md:123
msgid ""
"// The const N is referenced in the trait bound before it is declared.\n"
msgstr ""

#: src/names/scopes.md:130
msgid ""
"Generic parameters are also in scope for type bounds and where clauses, for "
"example:"
msgstr ""

#: src/names/scopes.md:133
msgid ""
"// The <'a, U> for `SomeTrait` refer to the 'a and U parameters of "
"`bounds_scope`.\n"
msgstr ""

#: src/names/scopes.md:144
msgid ""
"It is an error for [items](../items.md) declared inside a function to refer "
"to a generic parameter from their outer scope."
msgstr ""

#: src/names/scopes.md:148
msgid "// ERROR: can't use generic parameters from outer function\n"
msgstr ""

#: src/names/scopes.md:152
msgid "Generic parameter shadowing"
msgstr ""

#: src/names/scopes.md:156
msgid ""
"It is an error to shadow a generic parameter with the exception that items "
"declared within functions are allowed to shadow generic parameter names from "
"the function."
msgstr ""

#: src/names/scopes.md:160
msgid ""
"// Items within functions are allowed to shadow generic parameter in scope.\n"
msgstr ""

#: src/names/scopes.md:169
msgid "// ERROR: 'a is already in use\n"
msgstr ""

#: src/names/scopes.md:170 src/names/scopes.md:172
msgid "// ERROR: T is already in use\n"
msgstr ""

#: src/names/scopes.md:171
msgid "// ERROR: N is already in use\n"
msgstr ""

#: src/names/scopes.md:178
msgid "Lifetime scopes"
msgstr ""

#: src/names/scopes.md:180
msgid ""
"Lifetime parameters are declared in a [_GenericParams_](../items/"
"generics.md) list and [higher-ranked trait bounds](../trait-bounds.md#higher-"
"ranked-trait-bounds)."
msgstr ""

#: src/names/scopes.md:184
msgid ""
"The `'static` lifetime and [placeholder lifetime](../lifetime-elision.md) "
"`'_` have a special meaning and cannot be declared as a parameter."
msgstr ""

#: src/names/scopes.md:186
msgid "Lifetime generic parameter scopes"
msgstr ""

#: src/names/scopes.md:190
msgid ""
"[Constant](../items/constant-items.md) and [static](../items/static-"
"items.md) items and [const contexts](../const_eval.md#const-context) only "
"ever allow `'static` lifetime references, so no other lifetime may be in "
"scope within them. [Associated consts](../items/associated-"
"items.md#associated-constants) do allow referring to lifetimes declared in "
"their trait or implementation."
msgstr ""

#: src/names/scopes.md:193
msgid "Higher-ranked trait bound scopes"
msgstr ""

#: src/names/scopes.md:197
msgid ""
"The scope of a lifetime parameter declared as a [higher-ranked trait bound]"
"(../trait-bounds.md#higher-ranked-trait-bounds) depends on the scenario "
"where it is used."
msgstr ""

#: src/names/scopes.md:199
msgid ""
"As a [_TypeBoundWhereClauseItem_](../items/generics.md) the declared "
"lifetimes are in scope in the type and the type bounds."
msgstr ""

#: src/names/scopes.md:200
msgid ""
"As a [_TraitBound_](../trait-bounds.md) the declared lifetimes are in scope "
"within the bound type path."
msgstr ""

#: src/names/scopes.md:201
msgid ""
"As a [_BareFunctionType_](../types/function-pointer.md) the declared "
"lifetimes are in scope within the function parameters and return type."
msgstr ""

#: src/names/scopes.md:207
msgid "// 'a is in scope in both the type and the type bounds.\n"
msgstr ""

#: src/names/scopes.md:212
msgid "// 'a is in scope within the bound.\n"
msgstr ""

#: src/names/scopes.md:219
msgid "// 'a is in scope in both the parameters and return type.\n"
msgstr ""

#: src/names/scopes.md:224
msgid "Impl trait restrictions"
msgstr ""

#: src/names/scopes.md:228
msgid ""
"[Impl trait](../types/impl-trait.md) types can only reference lifetimes "
"declared on a function or implementation."
msgstr ""

#: src/names/scopes.md:247
msgid ""
"// The `impl Trait2` here is not allowed to refer to 'b but it is allowed "
"to\n"
"// refer to 'a.\n"
msgstr ""

#: src/names/scopes.md:258
msgid "Loop label scopes"
msgstr ""

#: src/names/scopes.md:262
msgid ""
"[Loop labels](../expressions/loop-expr.md#loop-labels) may be declared by a "
"[loop expression](../expressions/loop-expr.md). The scope of a loop label is "
"from the point it is declared till the end of the loop expression. The scope "
"does not extend into [items](../items.md), [closures](../expressions/closure-"
"expr.md), [async blocks](../expressions/block-expr.md#async-blocks), [const "
"arguments](../items/generics.md#const-generics), [const contexts](../"
"const_eval.md#const-context), and the iterator expression of the defining "
"[`for` loop](../expressions/loop-expr.md#iterator-loops)."
msgstr ""

#: src/names/scopes.md:272
msgid ""
"// Using 'a here would be an error.\n"
"        // break 'a;\n"
msgstr ""

#: src/names/scopes.md:276
msgid "// The label is in scope for the expression of `while` loops.\n"
msgstr ""

#: src/names/scopes.md:278 src/names/scopes.md:279
msgid "// Loop does not run.\n"
msgstr ""

#: src/names/scopes.md:280
msgid "// The label is not in scope in the defining `for` loop:\n"
msgstr ""

#: src/names/scopes.md:283
msgid ""
"// This will break the outer loop, skipping the inner loop and stopping\n"
"    // the outer loop.\n"
msgstr ""

#: src/names/scopes.md:286
msgid "// This does not run.\n"
msgstr ""

#: src/names/scopes.md:288
msgid "// This does not run, either.\n"
msgstr ""

#: src/names/scopes.md:295
msgid ""
"Loop labels may shadow labels of the same name in outer scopes. References "
"to a label refer to the closest definition."
msgstr ""

#: src/names/scopes.md:299
msgid "// Loop label shadowing example.\n"
msgstr ""

#: src/names/scopes.md:302
msgid ""
"// This terminates the inner loop, but the outer loop continues to run.\n"
msgstr ""

#: src/names/scopes.md:310
msgid "Prelude scopes"
msgstr ""

#: src/names/scopes.md:314
msgid ""
"[Preludes](preludes.md) bring entities into scope of every module. The "
"entities are not members of the module, but are implicitly queried during "
"[name resolution](name-resolution.md)."
msgstr ""

#: src/names/scopes.md:319
msgid "The prelude names may be shadowed by declarations in a module."
msgstr ""

#: src/names/scopes.md:323
msgid ""
"The preludes are layered such that one shadows another if they contain "
"entities of the same name. The order that preludes may shadow other preludes "
"is the following where earlier entries may shadow later ones:"
msgstr ""

#: src/names/scopes.md:326
msgid "[Extern prelude](preludes.md#extern-prelude)"
msgstr ""

#: src/names/scopes.md:327
msgid "[Tool prelude](preludes.md#tool-prelude)"
msgstr ""

#: src/names/scopes.md:328
msgid "[`macro_use` prelude](preludes.md#macro_use-prelude)"
msgstr ""

#: src/names/scopes.md:329
msgid "[Standard library prelude](preludes.md#standard-library-prelude)"
msgstr ""

#: src/names/scopes.md:330
msgid "[Language prelude](preludes.md#language-prelude)"
msgstr ""

#: src/names/scopes.md:334
msgid "`macro_rules` scopes"
msgstr ""

#: src/names/scopes.md:336
msgid ""
"The scope of `macro_rules` macros is described in the [Macros By Example](../"
"macros-by-example.md) chapter. The behavior depends on the use of the "
"[`macro_use`](../macros-by-example.md#the-macro_use-attribute) and "
"[`macro_export`](../macros-by-example.md#path-based-scope) attributes."
msgstr ""

#: src/names/scopes.md:345
msgid ""
"[Derive macro helper attributes](../procedural-macros.md#derive-macro-helper-"
"attributes) are in scope in the item where their corresponding [`derive` "
"attribute](../attributes/derive.md) is specified. The scope extends from "
"just after the `derive` attribute to the end of the item. <!-- Note: Not "
"strictly true, see https://github.com/rust-lang/rust/issues/79202, but this "
"is the intention. -->"
msgstr ""

#: src/names/scopes.md:350
msgid "Helper attributes shadow other attributes of the same name in scope."
msgstr ""

#: src/names/scopes.md:354
msgid "`Self` scope"
msgstr ""

#: src/names/scopes.md:358
msgid ""
"Although [`Self`](../paths.md#self-1) is a keyword with special meaning, it "
"interacts with name resolution in a way similar to normal names."
msgstr ""

#: src/names/scopes.md:362
msgid ""
"The implicit `Self` type in the definition of a [struct](../items/"
"structs.md), [enum](../items/enumerations.mdr), [union](../items/unions.md), "
"[trait](../items/traits.md), or [implementation](../items/"
"implementations.md) is treated similarly to a [generic parameter](#generic-"
"parameter-scopes), and is in scope in the same way as a generic type "
"parameter."
msgstr ""

#: src/names/scopes.md:366
msgid ""
"The implicit `Self` constructor in the value [namespace](namespaces.md) of "
"an [implementation](../items/implementations.md) is in scope within the body "
"of the implementation (the implementation's [associated items](../items/"
"associated-items.md))."
msgstr ""

#: src/names/scopes.md:369
msgid "// Self type within struct definition.\n"
msgstr ""

#: src/names/scopes.md:373
msgid "// Self type within generic parameters.\n"
msgstr ""

#: src/names/scopes.md:376
msgid "// Self value constructor within an implementation.\n"
msgstr ""

#: src/names/scopes.md:380
msgid "// Self type\n"
msgstr ""

#: src/names/scopes.md:381
msgid "// Self value constructor\n"
msgstr ""

#: src/names/preludes.md:7
msgid ""
"A _prelude_ is a collection of names that are automatically brought into "
"scope of every module in a crate."
msgstr ""

#: src/names/preludes.md:10
msgid ""
"These prelude names are not part of the module itself: they are implicitly "
"queried during [name resolution](name-resolution.md). For example, even "
"though something like [`Box`](../../alloc/boxed/struct.Box.html) is in scope "
"in every module, you cannot refer to it as `self::Box` because it is not a "
"member of the current module."
msgstr ""

#: src/names/preludes.md:17
msgid "There are several different preludes:"
msgstr ""

#: src/names/preludes.md:19
msgid "[Standard library prelude](#standard-library-prelude)"
msgstr ""

#: src/names/preludes.md:20
msgid "[Extern prelude](#extern-prelude)"
msgstr ""

#: src/names/preludes.md:21
msgid "[Language prelude](#language-prelude)"
msgstr ""

#: src/names/preludes.md:22
msgid "[`macro_use` prelude](#macro_use-prelude)"
msgstr ""

#: src/names/preludes.md:23
msgid "[Tool prelude](#tool-prelude)"
msgstr ""

#: src/names/preludes.md:27
msgid "Standard library prelude"
msgstr ""

#: src/names/preludes.md:31
msgid ""
"Each crate has a standard library prelude, which consists of the names from "
"a single standard library module."
msgstr ""

#: src/names/preludes.md:35
msgid ""
"The module used depends on the crate's edition, and on whether the [`no_std` "
"attribute](#the-no_std-attribute) is applied to the crate:"
msgstr ""

#: src/names/preludes.md:37
msgid "Edition"
msgstr ""

#: src/names/preludes.md:37
msgid "`no_std` not applied"
msgstr ""

#: src/names/preludes.md:37
msgid "`no_std` applied"
msgstr ""

#: src/names/preludes.md:39
msgid "2015"
msgstr ""

#: src/names/preludes.md:39
msgid "[`std::prelude::rust_2015`](../../std/prelude/rust_2015/index.html)"
msgstr ""

#: src/names/preludes.md:39
msgid "[`core::prelude::rust_2015`](../../core/prelude/rust_2015/index.html)"
msgstr ""

#: src/names/preludes.md:40
msgid "2018"
msgstr ""

#: src/names/preludes.md:40
msgid "[`std::prelude::rust_2018`](../../std/prelude/rust_2018/index.html)"
msgstr ""

#: src/names/preludes.md:40
msgid "[`core::prelude::rust_2018`](../../core/prelude/rust_2018/index.html)"
msgstr ""

#: src/names/preludes.md:41
msgid "2021"
msgstr ""

#: src/names/preludes.md:41
msgid "[`std::prelude::rust_2021`](../../std/prelude/rust_2021/index.html)"
msgstr ""

#: src/names/preludes.md:41
msgid "[`core::prelude::rust_2021`](../../core/prelude/rust_2021/index.html)"
msgstr ""

#: src/names/preludes.md:42
msgid "2024"
msgstr ""

#: src/names/preludes.md:42
msgid "[`std::prelude::rust_2024`](../../std/prelude/rust_2024/index.html)"
msgstr ""

#: src/names/preludes.md:42
msgid "[`core::prelude::rust_2024`](../../core/prelude/rust_2024/index.html)"
msgstr ""

#: src/names/preludes.md:45
msgid "**Note**:"
msgstr ""

#: src/names/preludes.md:47
msgid ""
"[`std::prelude::rust_2015`](../../std/prelude/rust_2015/index.html) and "
"[`std::prelude::rust_2018`](../../std/prelude/rust_2018/index.html) have the "
"same contents as [`std::prelude::v1`](../../std/prelude/v1/index.html)."
msgstr ""

#: src/names/preludes.md:49
msgid ""
"[`core::prelude::rust_2015`](../../core/prelude/rust_2015/index.html) and "
"[`core::prelude::rust_2018`](../../core/prelude/rust_2018/index.html) have "
"the same contents as [`core::prelude::v1`](../../core/prelude/v1/index.html)."
msgstr ""

#: src/names/preludes.md:53
msgid "Extern prelude"
msgstr ""

#: src/names/preludes.md:57
msgid ""
"External crates imported with [`extern crate`](../items/extern-crates.md) in "
"the root module or provided to the compiler (as with the `--extern` flag "
"with `rustc`) are added to the _extern prelude_. If imported with an alias "
"such as `extern crate orig_name as new_name`, then the symbol `new_name` is "
"instead added to the prelude."
msgstr ""

#: src/names/preludes.md:64
msgid ""
"The [`core`](../../core/index.html) crate is always added to the extern "
"prelude."
msgstr ""

#: src/names/preludes.md:68
msgid ""
"The [`std`](../../std/index.html) crate is added as long as the [`no_std` "
"attribute](#the-no_std-attribute) is not specified in the crate root."
msgstr ""

#: src/names/preludes.md:72
msgid ""
"**Edition differences**: In the 2015 edition, crates in the extern prelude "
"cannot be referenced via [use declarations](../items/use-declarations.md), "
"so it is generally standard practice to include `extern crate` declarations "
"to bring them into scope."
msgstr ""

#: src/names/preludes.md:76
msgid ""
"Beginning in the 2018 edition, [use declarations](../items/use-"
"declarations.md) can reference crates in the extern prelude, so it is "
"considered unidiomatic to use `extern crate`."
msgstr ""

#: src/names/preludes.md:79
msgid ""
"**Note**: Additional crates that ship with `rustc`, such as [`alloc`](../../"
"alloc/index.html), and [`test`](../../test/index.html), are not "
"automatically included with the `--extern` flag when using Cargo. They must "
"be brought into scope with an `extern crate` declaration, even in the 2018 "
"edition."
msgstr ""

#: src/names/preludes.md:89
msgid ""
"Cargo does bring in `proc_macro` to the extern prelude for proc-macro crates "
"only."
msgstr ""

#: src/names/preludes.md:99
msgid "The `no_std` attribute"
msgstr ""

#: src/names/preludes.md:103
msgid ""
"By default, the standard library is automatically included in the crate root "
"module. The [`std`](../../std/index.html) crate is added to the root, along "
"with an implicit [`macro_use` attribute](../macros-by-example.md#the-"
"macro_use-attribute) pulling in all macros exported from `std` into the "
"[`macro_use` prelude](#macro_use-prelude). Both [`core`](../../core/"
"index.html) and [`std`](../../std/index.html) are added to the [extern "
"prelude](#extern-prelude)."
msgstr ""

#: src/names/preludes.md:111
msgid ""
"The _`no_std` [attribute](../attributes.md)_ may be applied at the crate "
"level to prevent the [`std`](../../std/index.html) crate from being "
"automatically added into scope."
msgstr ""

#: src/names/preludes.md:114
msgid "It does three things:"
msgstr ""

#: src/names/preludes.md:118
msgid ""
"Prevents `std` from being added to the [extern prelude](#extern-prelude)."
msgstr ""

#: src/names/preludes.md:121
msgid ""
"Affects which module is used to make up the [standard library prelude]"
"(#standard-library-prelude) (as described above)."
msgstr ""

#: src/names/preludes.md:124
msgid ""
"Injects the [`core`](../../core/index.html) crate into the crate root "
"instead of [`std`](../../std/index.html), and pulls in all macros exported "
"from `core` in the [`macro_use` prelude](#macro_use-prelude)."
msgstr ""

#: src/names/preludes.md:127
msgid ""
"**Note**: Using the core prelude over the standard prelude is useful when "
"either the crate is targeting a platform that does not support the standard "
"library or is purposefully not using the capabilities of the standard "
"library. Those capabilities are mainly dynamic memory allocation (e.g. `Box` "
"and `Vec`) and file and network capabilities (e.g. `std::fs` and `std::io`)."
msgstr ""

#: src/names/preludes.md:135
msgid ""
"_**Warning:**_ Using `no_std` does not prevent the standard library from "
"being linked in. It is still valid to put `extern crate std;` into the crate "
"and dependencies can also link it in."
msgstr ""

#: src/names/preludes.md:143
msgid "Language prelude"
msgstr ""

#: src/names/preludes.md:147
msgid ""
"The language prelude includes names of types and attributes that are built-"
"in to the language. The language prelude is always in scope."
msgstr ""

#: src/names/preludes.md:152
msgid "It includes the following:"
msgstr ""

#: src/names/preludes.md:154
msgid "[Type namespace](namespaces.md)"
msgstr ""

#: src/names/preludes.md:155
msgid "[Boolean type](../types/boolean.md) --- `bool`"
msgstr ""

#: src/names/preludes.md:156
msgid "[Textual types](../types/textual.md) --- `char` and `str`"
msgstr ""

#: src/names/preludes.md:157
msgid ""
"[Integer types](../types/numeric.md#integer-types) --- `i8`, `i16`, `i32`, "
"`i64`, `i128`, `u8`, `u16`, `u32`, `u64`, `u128`"
msgstr ""

#: src/names/preludes.md:158
msgid ""
"[Machine-dependent integer types](../types/numeric.md#machine-dependent-"
"integer-types) --- `usize` and `isize`"
msgstr ""

#: src/names/preludes.md:159
msgid ""
"[floating-point types](../types/numeric.md#floating-point-types) --- `f32` "
"and `f64`"
msgstr ""

#: src/names/preludes.md:160
msgid "[Macro namespace](namespaces.md)"
msgstr ""

#: src/names/preludes.md:165
msgid "`macro_use` prelude"
msgstr ""

#: src/names/preludes.md:169
msgid ""
"The `macro_use` prelude includes macros from external crates that were "
"imported by the [`macro_use` attribute](../macros-by-example.md#the-"
"macro_use-attribute) applied to an [`extern crate`](../items/extern-"
"crates.md)."
msgstr ""

#: src/names/preludes.md:174
msgid "Tool prelude"
msgstr ""

#: src/names/preludes.md:178
msgid ""
"The tool prelude includes tool names for external tools in the [type "
"namespace](namespaces.md). See the [tool attributes](../attributes.md#tool-"
"attributes) section for more details."
msgstr ""

#: src/names/preludes.md:183
msgid "The `no_implicit_prelude` attribute"
msgstr ""

#: src/names/preludes.md:187
msgid ""
"The _`no_implicit_prelude` [attribute](../attributes.md)_ may be applied at "
"the crate level or on a module to indicate that it should not automatically "
"bring the [standard library prelude](#standard-library-prelude), [extern "
"prelude](#extern-prelude), or [tool prelude](#tool-prelude) into scope for "
"that module or any of its descendants."
msgstr ""

#: src/names/preludes.md:194
msgid ""
"This attribute does not affect the [language prelude](#language-prelude)."
msgstr ""

#: src/names/preludes.md:198
msgid ""
"**Edition differences**: In the 2015 edition, the `no_implicit_prelude` "
"attribute does not affect the [`macro_use` prelude](#macro_use-prelude), and "
"all macros exported from the standard library are still included in the "
"`macro_use` prelude. Starting in the 2018 edition, it will remove the "
"`macro_use` prelude."
msgstr ""

#: src/paths.md:7
msgid ""
"A _path_ is a sequence of one or more path segments separated by `::` "
"tokens. Paths are used to refer to [items](items.md), values, [types]"
"(types.md), [macros](macros.md), and [attributes](attributes.md)."
msgstr ""

#: src/paths.md:10
msgid "Two examples of simple paths consisting of only identifier segments:"
msgstr ""

#: src/paths.md:18
msgid "Types of paths"
msgstr ""

#: src/paths.md:22
msgid "Simple Paths"
msgstr ""

#: src/paths.md:26
msgid ""
"**<sup>Syntax</sup>**  \n"
"_SimplePath_ :  \n"
"   `::`<sup>?</sup> _SimplePathSegment_ (`::` _SimplePathSegment_)<sup>\\*</"
"sup>"
msgstr ""

#: src/paths.md:30
msgid ""
"_SimplePathSegment_ :  \n"
"   [IDENTIFIER](identifiers.md) | `super` | `self` | `crate` | `$crate`"
msgstr ""

#: src/paths.md:35
msgid ""
"Simple paths are used in [visibility](visibility-and-privacy.md) markers, "
"[attributes](attributes.md), [macros](macros-by-example.md), and [`use`]"
"(items/use-declarations.md) items. For example:"
msgstr ""

#: src/paths.md:48
msgid "Paths in expressions"
msgstr ""

#: src/paths.md:52
msgid ""
"**<sup>Syntax</sup>**  \n"
"_PathInExpression_ :  \n"
"   `::`<sup>?</sup> _PathExprSegment_ (`::` _PathExprSegment_)<sup>\\*</sup>"
msgstr ""

#: src/paths.md:56
msgid ""
"_PathExprSegment_ :  \n"
"   _PathIdentSegment_ (`::` _GenericArgs_)<sup>?</sup>"
msgstr ""

#: src/paths.md:59
msgid ""
"_PathIdentSegment_ :  \n"
"   [IDENTIFIER](identifiers.md) | `super` | `self` | `Self` | `crate` | "
"`$crate`"
msgstr ""

#: src/paths.md:62
msgid ""
"_GenericArgs_ :  \n"
"      `<` `>`  \n"
"   | `<` ( _GenericArg_ `,` )<sup>\\*</sup> _GenericArg_ `,`<sup>?</sup> `>`"
msgstr ""

#: src/paths.md:66
msgid ""
"_GenericArg_ :  \n"
"   [_Lifetime_](trait-bounds.md) | [_Type_](types.md#type-expressions) | "
"_GenericArgsConst_ | _GenericArgsBinding_ | _GenericArgsBounds_"
msgstr ""

#: src/paths.md:69
msgid ""
"_GenericArgsConst_ :  \n"
"      [_BlockExpression_](expressions/block-expr.md)  \n"
"   | [_LiteralExpression_](expressions/literal-expr.md)  \n"
"   | `-` [_LiteralExpression_](expressions/literal-expr.md)  \n"
"   | [_SimplePathSegment_](#simple-paths)"
msgstr ""

#: src/paths.md:75
msgid ""
"_GenericArgsBinding_ :  \n"
"   [IDENTIFIER](identifiers.md) _GenericArgs_<sup>?</sup> `=` [_Type_]"
"(types.md#type-expressions)"
msgstr ""

#: src/paths.md:78
msgid ""
"_GenericArgsBounds_ :  \n"
"   [IDENTIFIER](identifiers.md) _GenericArgs_<sup>?</sup> `:` "
"[_TypeParamBounds_](trait-bounds.md)"
msgstr ""

#: src/paths.md:83
msgid ""
"Paths in expressions allow for paths with generic arguments to be specified. "
"They are used in various places in [expressions](expressions.md) and "
"[patterns](patterns.md)."
msgstr ""

#: src/paths.md:88
msgid ""
"The `::` token is required before the opening `<` for generic arguments to "
"avoid ambiguity with the less-than operator. This is colloquially known as "
"\"turbofish\" syntax."
msgstr ""

#: src/paths.md:98
msgid ""
"The order of generic arguments is restricted to lifetime arguments, then "
"type arguments, then const arguments, then equality constraints."
msgstr ""

#: src/paths.md:103
msgid ""
"Const arguments must be surrounded by braces unless they are a [literal]"
"(expressions/literal-expr.md) or a single segment path."
msgstr ""

#: src/paths.md:108
msgid ""
"The synthetic type parameters corresponding to `impl Trait` types are "
"implicit, and these cannot be explicitly specified."
msgstr ""

#: src/paths.md:113
msgid "Qualified paths"
msgstr ""

#: src/paths.md:117
msgid ""
"**<sup>Syntax</sup>**  \n"
"_QualifiedPathInExpression_ :  \n"
"   _QualifiedPathType_ (`::` _PathExprSegment_)<sup>+</sup>"
msgstr ""

#: src/paths.md:121
msgid ""
"_QualifiedPathType_ :  \n"
"   `<` [_Type_](types.md#type-expressions) (`as` _TypePath_)<sup>?</sup> `>`"
msgstr ""

#: src/paths.md:124
msgid ""
"_QualifiedPathInType_ :  \n"
"   _QualifiedPathType_ (`::` _TypePathSegment_)<sup>+</sup>"
msgstr ""

#: src/paths.md:129
msgid ""
"Fully qualified paths allow for disambiguating the path for [trait "
"implementations](items/implementations.md#trait-implementations) and for "
"specifying [canonical paths](#canonical-paths). When used in a type "
"specification, it supports using the type syntax specified below."
msgstr ""

#: src/paths.md:139
msgid "\"T1 f\""
msgstr ""

#: src/paths.md:143
msgid "\"T2 f\""
msgstr ""

#: src/paths.md:146
msgid "// Calls the inherent impl.\n"
msgstr ""

#: src/paths.md:147
msgid "// Calls the T1 trait function.\n"
msgstr ""

#: src/paths.md:148
msgid "// Calls the T2 trait function.\n"
msgstr ""

#: src/paths.md:153
msgid "Paths in types"
msgstr ""

#: src/paths.md:157
msgid ""
"**<sup>Syntax</sup>**  \n"
"_TypePath_ :  \n"
"   `::`<sup>?</sup> _TypePathSegment_ (`::` _TypePathSegment_)<sup>\\*</sup>"
msgstr ""

#: src/paths.md:161
msgid ""
"_TypePathSegment_ :  \n"
"   _PathIdentSegment_ (`::`<sup>?</sup> ([_GenericArgs_](#paths-in-"
"expressions) | _TypePathFn_))<sup>?</sup>"
msgstr ""

#: src/paths.md:164
msgid ""
"_TypePathFn_ :  \n"
"`(` _TypePathFnInputs_<sup>?</sup> `)` (`->` [_TypeNoBounds_](types.md#type-"
"expressions))<sup>?</sup>"
msgstr ""

#: src/paths.md:167
msgid ""
"_TypePathFnInputs_ :  \n"
"[_Type_](types.md#type-expressions) (`,` [_Type_](types.md#type-"
"expressions))<sup>\\*</sup> `,`<sup>?</sup>"
msgstr ""

#: src/paths.md:172
msgid ""
"Type paths are used within type definitions, trait bounds, type parameter "
"bounds, and qualified paths."
msgstr ""

#: src/paths.md:177
msgid ""
"Although the `::` token is allowed before the generics arguments, it is not "
"required because there is no ambiguity like there is in _PathInExpression_."
msgstr ""

#: src/paths.md:187
msgid "/*...*/"
msgstr ""

#: src/paths.md:198
msgid "Path qualifiers"
msgstr ""

#: src/paths.md:200
msgid ""
"Paths can be denoted with various leading qualifiers to change the meaning "
"of how it is resolved."
msgstr ""

#: src/paths.md:209
msgid ""
"Paths starting with `::` are considered to be _global paths_ where the "
"segments of the path start being resolved from a place which differs based "
"on edition. Each identifier in the path must resolve to an item."
msgstr ""

#: src/paths.md:215
msgid ""
"**Edition Differences**: In the 2015 Edition, identifiers resolve from the "
"\"crate root\" (`crate::` in the 2018 edition), which contains a variety of "
"different items, including external crates, default crates such as `std` or "
"`core`, and items in the top level of the crate (including `use` imports)."
msgstr ""

#: src/paths.md:220
msgid ""
"Beginning with the 2018 Edition, paths starting with `::` resolve from "
"crates in the [extern prelude](names/preludes.md#extern-prelude). That is, "
"they must be followed by the name of a crate."
msgstr ""

#: src/paths.md:225
msgid ""
"// In the 2018 edition, this accesses `std` via the extern prelude.\n"
"    // In the 2015 edition, this accesses `std` via the crate root.\n"
msgstr ""

#: src/paths.md:239
msgid ""
"// call `a`'s foo function\n"
"        // In Rust 2018, `::a` would be interpreted as the crate `a`.\n"
msgstr ""

#: src/paths.md:252
msgid "`self` resolves the path relative to the current module."
msgstr ""

#: src/paths.md:256
msgid "`self` can only be used as the first segment, without a preceding `::`."
msgstr ""

#: src/paths.md:260
msgid ""
"In a method body, a path which consists of a single `self` segment resolves "
"to the method's self parameter."
msgstr ""

#: src/paths.md:278
msgid "`Self`"
msgstr ""

#: src/paths.md:282
msgid ""
"`Self`, with a capital \"S\", is used to refer to the current type being "
"implemented or defined. It may be used in the following situations:"
msgstr ""

#: src/paths.md:286
msgid ""
"In a [trait](items/traits.md) definition, it refers to the type implementing "
"the trait."
msgstr ""

#: src/paths.md:290
msgid ""
"In an [implementation](items/implementations.md), it refers to the type "
"being implemented. When implementing a tuple or unit [struct](items/"
"structs.md), it also refers to the constructor in the [value namespace]"
"(names/namespaces.md)."
msgstr ""

#: src/paths.md:295
msgid ""
"In the definition of a [struct](items/structs.md), [enumeration](items/"
"enumerations.md), or [union](items/unions.md), it refers to the type being "
"defined. The definition is not allowed to be infinitely recursive (there "
"must be an indirection)."
msgstr ""

#: src/paths.md:300
msgid ""
"The scope of `Self` behaves similarly to a generic parameter; see the "
"[`Self` scope](names/scopes.md#self-scope) section for more details."
msgstr ""

#: src/paths.md:304
msgid "`Self` can only be used as the first segment, without a preceding `::`."
msgstr ""

#: src/paths.md:308
msgid "The `Self` path cannot include generic arguments (as in `Self::<i32>`)."
msgstr ""

#: src/paths.md:314
msgid "// `Self` will be whatever type that implements `T`.\n"
msgstr ""

#: src/paths.md:316
msgid "// `Self::Item` will be the type alias in the implementation.\n"
msgstr ""

#: src/paths.md:323
msgid "// `Self` is the type `S`.\n"
msgstr ""

#: src/paths.md:326
msgid "// `Self::Item` is the type `i32`.\n"
msgstr ""

#: src/paths.md:327
msgid "// `Self::C` is the constant value `9`.\n"
msgstr ""

#: src/paths.md:330
msgid ""
"// `Self` is in scope within the generics of a trait definition,\n"
"// to refer to the type being defined.\n"
msgstr ""

#: src/paths.md:335
msgid ""
"// `Self` can also reference associated items of the\n"
"    // type being implemented.\n"
msgstr ""

#: src/paths.md:342
msgid ""
"// A struct can reference itself (as long as it is not\n"
"    // infinitely recursive).\n"
msgstr ""

#: src/paths.md:350
msgid "`super`"
msgstr ""

#: src/paths.md:354
msgid "`super` in a path resolves to the parent module."
msgstr ""

#: src/paths.md:358
msgid ""
"It may only be used in leading segments of the path, possibly after an "
"initial `self` segment."
msgstr ""

#: src/paths.md:366 src/paths.md:384 src/paths.md:385
msgid "// call a's foo function\n"
msgstr ""

#: src/paths.md:374
msgid ""
"`super` may be repeated several times after the first `super` or `self` to "
"refer to ancestor modules."
msgstr ""

#: src/paths.md:399
msgid "`crate` resolves the path relative to the current crate."
msgstr ""

#: src/paths.md:403
msgid ""
"`crate` can only be used as the first segment, without a preceding `::`."
msgstr ""

#: src/paths.md:417
msgid "`$crate`"
msgstr ""

#: src/paths.md:421
msgid ""
"`$crate` is only used within [macro transcribers](macros-by-example.md), and "
"can only be used as the first segment, without a preceding `::`."
msgstr ""

#: src/paths.md:426
msgid ""
"`$crate` will expand to a path to access items from the top level of the "
"crate where the macro is defined, regardless of which crate the macro is "
"invoked."
msgstr ""

#: src/paths.md:444
msgid "Canonical paths"
msgstr ""

#: src/paths.md:448
msgid ""
"Items defined in a module or implementation have a _canonical path_ that "
"corresponds to where within its crate it is defined."
msgstr ""

#: src/paths.md:453
msgid "All other paths to these items are aliases."
msgstr ""

#: src/paths.md:457
msgid ""
"The canonical path is defined as a _path prefix_ appended by the path "
"segment the item itself defines."
msgstr ""

#: src/paths.md:462
msgid ""
"[Implementations](items/implementations.md) and [use declarations](items/use-"
"declarations.md) do not have canonical paths, although the items that "
"implementations define do have them. Items defined in block expressions do "
"not have canonical paths. Items defined in a module that does not have a "
"canonical path do not have a canonical path. Associated items defined in an "
"implementation that refers to an item without a canonical path, e.g. as the "
"implementing type, the trait being implemented, a type parameter or bound on "
"a type parameter, do not have canonical paths."
msgstr ""

#: src/paths.md:472
msgid "The path prefix for modules is the canonical path to that module."
msgstr ""

#: src/paths.md:476
msgid ""
"For bare implementations, it is the canonical path of the item being "
"implemented surrounded by <span class=\"parenthetical\">angle (`<>`)</span> "
"brackets."
msgstr ""

#: src/paths.md:481
msgid ""
"For [trait implementations](items/implementations.md#trait-implementations), "
"it is the canonical path of the item being implemented followed by `as` "
"followed by the canonical path to the trait all surrounded in <span "
"class=\"parenthetical\">angle (`<>`)</span> brackets."
msgstr ""

#: src/paths.md:487
msgid ""
"The canonical path is only meaningful within a given crate. There is no "
"global namespace across crates; an item's canonical path merely identifies "
"it within the crate."
msgstr ""

#: src/paths.md:492
msgid "// Comments show the canonical path of the item.\n"
msgstr ""

#: src/paths.md:494
msgid "// crate::a\n"
msgstr ""

#: src/paths.md:495
msgid "// crate::a::Struct\n"
msgstr ""

#: src/paths.md:497
msgid "// crate::a::Trait\n"
msgstr ""

#: src/paths.md:498
msgid "// crate::a::Trait::f\n"
msgstr ""

#: src/paths.md:502
msgid "// <crate::a::Struct as crate::a::Trait>::f\n"
msgstr ""

#: src/paths.md:506
msgid "// <crate::a::Struct>::g\n"
msgstr ""

#: src/paths.md:510
msgid "// crate::without\n"
msgstr ""

#: src/paths.md:511
msgid "// crate::without::canonicals\n"
msgstr ""

#: src/paths.md:512 src/paths.md:514 src/paths.md:515 src/paths.md:519
#: src/paths.md:523 src/paths.md:527
msgid "// None\n"
msgstr ""

#: src/names/name-resolution.md:3
msgid "**Note**: This is a placeholder for future expansion."
msgstr ""

#: src/visibility-and-privacy.md:3
msgid "Visibility and Privacy"
msgstr ""

#: src/visibility-and-privacy.md:7
msgid ""
"**<sup>Syntax</sup>**  \n"
"_Visibility_ :  \n"
"      `pub`  \n"
"   | `pub` `(` `crate` `)`  \n"
"   | `pub` `(` `self` `)`  \n"
"   | `pub` `(` `super` `)`  \n"
"   | `pub` `(` `in` [_SimplePath_](paths.md#simple-paths) `)`"
msgstr ""

#: src/visibility-and-privacy.md:17
msgid ""
"These two terms are often used interchangeably, and what they are attempting "
"to convey is the answer to the question \"Can this item be used at this "
"location?\""
msgstr ""

#: src/visibility-and-privacy.md:22
msgid ""
"Rust's name resolution operates on a global hierarchy of namespaces. Each "
"level in the hierarchy can be thought of as some item. The items are one of "
"those mentioned above, but also include external crates. Declaring or "
"defining a new module can be thought of as inserting a new tree into the "
"hierarchy at the location of the definition."
msgstr ""

#: src/visibility-and-privacy.md:30
msgid ""
"To control whether interfaces can be used across modules, Rust checks each "
"use of an item to see whether it should be allowed or not. This is where "
"privacy warnings are generated, or otherwise \"you used a private item of "
"another module and weren't allowed to.\""
msgstr ""

#: src/visibility-and-privacy.md:37
msgid ""
"By default, everything is _private_, with two exceptions: Associated items "
"in a `pub` Trait are public by default; Enum variants in a `pub` enum are "
"also public by default. When an item is declared as `pub`, it can be thought "
"of as being accessible to the outside world. For example:"
msgstr ""

#: src/visibility-and-privacy.md:43
msgid "// Declare a private struct\n"
msgstr ""

#: src/visibility-and-privacy.md:46
msgid "// Declare a public struct with a private field\n"
msgstr ""

#: src/visibility-and-privacy.md:51
msgid "// Declare a public enum with two public variants\n"
msgstr ""

#: src/visibility-and-privacy.md:61
msgid ""
"With the notion of an item being either public or private, Rust allows item "
"accesses in two cases:"
msgstr ""

#: src/visibility-and-privacy.md:64
msgid ""
"If an item is public, then it can be accessed externally from some module "
"`m` if you can access all the item's ancestor modules from `m`. You can also "
"potentially be able to name the item through re-exports. See below."
msgstr ""

#: src/visibility-and-privacy.md:67
msgid ""
"If an item is private, it may be accessed by the current module and its "
"descendants."
msgstr ""

#: src/visibility-and-privacy.md:70
msgid ""
"These two cases are surprisingly powerful for creating module hierarchies "
"exposing public APIs while hiding internal implementation details. To help "
"explain, here's a few use cases and what they would entail:"
msgstr ""

#: src/visibility-and-privacy.md:74
msgid ""
"A library developer needs to expose functionality to crates which link "
"against their library. As a consequence of the first case, this means that "
"anything which is usable externally must be `pub` from the root down to the "
"destination item. Any private item in the chain will disallow external "
"accesses."
msgstr ""

#: src/visibility-and-privacy.md:80
msgid ""
"A crate needs a global available \"helper module\" to itself, but it doesn't "
"want to expose the helper module as a public API. To accomplish this, the "
"root of the crate's hierarchy would have a private module which then "
"internally has a \"public API\". Because the entire crate is a descendant of "
"the root, then the entire local crate can access this private module through "
"the second case."
msgstr ""

#: src/visibility-and-privacy.md:87
msgid ""
"When writing unit tests for a module, it's often a common idiom to have an "
"immediate child of the module to-be-tested named `mod test`. This module "
"could access any items of the parent module through the second case, meaning "
"that internal implementation details could also be seamlessly tested from "
"the child module."
msgstr ""

#: src/visibility-and-privacy.md:93
msgid ""
"In the second case, it mentions that a private item \"can be accessed\" by "
"the current module and its descendants, but the exact meaning of accessing "
"an item depends on what the item is."
msgstr ""

#: src/visibility-and-privacy.md:99
msgid ""
"Accessing a module, for example, would mean looking inside of it (to import "
"more items). On the other hand, accessing a function would mean that it is "
"invoked. Additionally, path expressions and import statements are considered "
"to access an item in the sense that the import/expression is only valid if "
"the destination is in the current visibility scope."
msgstr ""

#: src/visibility-and-privacy.md:105
msgid ""
"Here's an example of a program which exemplifies the three cases outlined "
"above:"
msgstr ""

#: src/visibility-and-privacy.md:109
msgid ""
"// This module is private, meaning that no external crate can access this\n"
"// module. Because it is private at the root of this current crate, however, "
"any\n"
"// module in the crate may access any publicly visible item in this module.\n"
msgstr ""

#: src/visibility-and-privacy.md:114
msgid "// This function can be used by anything in the current crate\n"
msgstr ""

#: src/visibility-and-privacy.md:117
msgid ""
"// This function *cannot* be used by anything else in the crate. It is not\n"
"    // publicly visible outside of the `crate_helper_module`, so only this\n"
"    // current module and its descendants may access it.\n"
msgstr ""

#: src/visibility-and-privacy.md:122
msgid ""
"// This function is \"public to the root\" meaning that it's available to "
"external\n"
"// crates linking against this one.\n"
msgstr ""

#: src/visibility-and-privacy.md:126
msgid ""
"// Similarly to 'public_api', this module is public so external crates may "
"look\n"
"// inside of it.\n"
msgstr ""

#: src/visibility-and-privacy.md:133
msgid ""
"// Any item in the local crate may invoke the helper module's public\n"
"        // interface through a combination of the two rules above.\n"
msgstr ""

#: src/visibility-and-privacy.md:138
msgid ""
"// This function is hidden to any module which is not a descendant of\n"
"    // `submodule`\n"
msgstr ""

#: src/visibility-and-privacy.md:147
msgid ""
"// Because this module is a descendant of `submodule`, it's allowed\n"
"            // to access private items inside of `submodule` without a "
"privacy\n"
"            // violation.\n"
msgstr ""

#: src/visibility-and-privacy.md:158
msgid ""
"For a Rust program to pass the privacy checking pass, all paths must be "
"valid accesses given the two rules above. This includes all use statements, "
"expressions, types, etc."
msgstr ""

#: src/visibility-and-privacy.md:164
msgid "`pub(in path)`, `pub(crate)`, `pub(super)`, and `pub(self)`"
msgstr ""

#: src/visibility-and-privacy.md:168
msgid ""
"In addition to public and private, Rust allows users to declare an item as "
"visible only within a given scope. The rules for `pub` restrictions are as "
"follows:"
msgstr ""

#: src/visibility-and-privacy.md:174
msgid ""
"`pub(in path)` makes an item visible within the provided `path`. `path` must "
"be a simple path which resolves to an ancestor module of the item whose "
"visibility is being declared. Each identifier in `path` must refer directly "
"to a module (not to a name introduced by a `use` statement)."
msgstr ""

#: src/visibility-and-privacy.md:180
msgid "`pub(crate)` makes an item visible within the current crate."
msgstr ""

#: src/visibility-and-privacy.md:184
msgid ""
"`pub(super)` makes an item visible to the parent module. This is equivalent "
"to `pub(in super)`."
msgstr ""

#: src/visibility-and-privacy.md:189
msgid ""
"`pub(self)` makes an item visible to the current module. This is equivalent "
"to `pub(in self)` or not using `pub` at all."
msgstr ""

#: src/visibility-and-privacy.md:194
msgid ""
"**Edition differences**: Starting with the 2018 edition, paths for `pub(in "
"path)` must start with `crate`, `self`, or `super`. The 2015 edition may "
"also use paths starting with `::` or modules from the crate root."
msgstr ""

#: src/visibility-and-privacy.md:198
msgid "Here's an example:"
msgstr ""

#: src/visibility-and-privacy.md:203 src/visibility-and-privacy.md:211
msgid "// This function is visible within `outer_mod`\n"
msgstr ""

#: src/visibility-and-privacy.md:205
msgid "// Same as above, this is only valid in the 2015 edition.\n"
msgstr ""

#: src/visibility-and-privacy.md:208
msgid "// This function is visible to the entire crate\n"
msgstr ""

#: src/visibility-and-privacy.md:213
msgid "// This function is visible since we're in the same `mod`\n"
msgstr ""

#: src/visibility-and-privacy.md:217
msgid ""
"// This function is visible only within `inner_mod`,\n"
"        // which is the same as leaving it private.\n"
msgstr ""

#: src/visibility-and-privacy.md:226
msgid ""
"// This function is no longer visible since we're outside of `inner_mod`\n"
"        // Error! `inner_mod_visible_fn` is private\n"
"        //inner_mod::inner_mod_visible_fn();\n"
msgstr ""

#: src/visibility-and-privacy.md:233
msgid "// This function is still visible since we're in the same crate\n"
msgstr ""

#: src/visibility-and-privacy.md:236
msgid ""
"// This function is no longer visible since we're outside of `outer_mod`\n"
"    // Error! `super_mod_visible_fn` is private\n"
"    //outer_mod::inner_mod::super_mod_visible_fn();\n"
msgstr ""

#: src/visibility-and-privacy.md:240
msgid ""
"// This function is no longer visible since we're outside of `outer_mod`\n"
"    // Error! `outer_mod_visible_fn` is private\n"
"    //outer_mod::inner_mod::outer_mod_visible_fn();\n"
msgstr ""

#: src/visibility-and-privacy.md:250
msgid ""
"**Note:** This syntax only adds another restriction to the visibility of an "
"item. It does not guarantee that the item is visible within all parts of the "
"specified scope. To access an item, all of its parent items up to the "
"current scope must still be visible as well."
msgstr ""

#: src/visibility-and-privacy.md:257
msgid "Re-exporting and Visibility"
msgstr ""

#: src/visibility-and-privacy.md:261
msgid ""
"Rust allows publicly re-exporting items through a `pub use` directive. "
"Because this is a public directive, this allows the item to be used in the "
"current module through the rules above. It essentially allows public access "
"into the re-exported item. For example, this program is valid:"
msgstr ""

#: src/visibility-and-privacy.md:278
msgid ""
"This means that any external crate referencing `implementation::api::f` "
"would receive a privacy violation, while the path `api::f` would be allowed."
msgstr ""

#: src/visibility-and-privacy.md:283
msgid ""
"When re-exporting a private item, it can be thought of as allowing the "
"\"privacy chain\" being short-circuited through the reexport instead of "
"passing through the namespace hierarchy as it normally would."
msgstr ""

#: src/memory-model.md:3
msgid ""
"Rust does not yet have a defined memory model. Various academics and "
"industry professionals are working on various proposals, but for now, this "
"is an under-defined place in the language."
msgstr ""

#: src/memory-allocation-and-lifetime.md:7
msgid ""
"The _items_ of a program are those functions, modules, and types that have "
"their value calculated at compile-time and stored uniquely in the memory "
"image of the rust process. Items are neither dynamically allocated nor freed."
msgstr ""

#: src/memory-allocation-and-lifetime.md:13
msgid ""
"The _heap_ is a general term that describes boxes.  The lifetime of an "
"allocation in the heap depends on the lifetime of the box values pointing to "
"it. Since box values may themselves be passed in and out of frames, or "
"stored in the heap, heap allocations may outlive the frame they are "
"allocated within. An allocation in the heap is guaranteed to reside at a "
"single location in the heap for the whole lifetime of the allocation - it "
"will never be relocated as a result of moving a box value."
msgstr ""

#: src/variables.md:7
msgid ""
"A _variable_ is a component of a stack frame, either a named function "
"parameter, an anonymous [temporary](expressions.md#temporaries), or a named "
"local variable."
msgstr ""

#: src/variables.md:13
msgid ""
"A _local variable_ (or _stack-local_ allocation) holds a value directly, "
"allocated within the stack's memory. The value is a part of the stack frame."
msgstr ""

#: src/variables.md:18
msgid ""
"Local variables are immutable unless declared otherwise. For example: `let "
"mut x = ...`."
msgstr ""

#: src/variables.md:23
msgid ""
"Function parameters are immutable unless declared with `mut`. The `mut` "
"keyword applies only to the following parameter. For example: `|mut x, y|` "
"and `fn f(mut x: Box<i32>, y: Box<i32>)` declare one mutable variable `x` "
"and one immutable variable `y`."
msgstr ""

#: src/variables.md:30
msgid ""
"Local variables are not initialized when allocated. Instead, the entire "
"frame worth of local variables are allocated, on frame-entry, in an "
"uninitialized state. Subsequent statements within a function may or may not "
"initialize the local variables. Local variables can be used only after they "
"have been initialized through all reachable control flow paths."
msgstr ""

#: src/variables.md:36
msgid ""
"In this next example, `init_after_if` is initialized after the [`if` "
"expression](expressions/if-expr.md#if-expressions) while `uninit_after_if` "
"is not because it is not initialized in the `else` case."
msgstr ""

#: src/variables.md:52
msgid ""
"// ok\n"
"    // uninit_after_if; // err: use of possibly uninitialized "
"`uninit_after_if`\n"
msgstr ""

#: src/linkage.md:6
msgid ""
"Note: This section is described more in terms of the compiler than of the "
"language."
msgstr ""

#: src/linkage.md:11
msgid ""
"The compiler supports various methods to link crates together both "
"statically and dynamically. This section will explore the various methods to "
"link crates together, and more information about native libraries can be "
"found in the [FFI section of the book](../book/ch19-01-unsafe-"
"rust.html#using-extern-functions-to-call-external-code)."
msgstr ""

#: src/linkage.md:20
msgid ""
"In one session of compilation, the compiler can generate multiple artifacts "
"through the usage of either command line flags or the `crate_type` "
"attribute. If one or more command line flags are specified, all `crate_type` "
"attributes will be ignored in favor of only building the artifacts specified "
"by command line."
msgstr ""

#: src/linkage.md:27
msgid ""
"`--crate-type=bin`, `#![crate_type = \"bin\"]` - A runnable executable will "
"be produced. This requires that there is a `main` function in the crate "
"which will be run when the program begins executing. This will link in all "
"Rust and native dependencies, producing a single distributable binary. This "
"is the default crate type."
msgstr ""

#: src/linkage.md:35
msgid ""
"`--crate-type=lib`, `#![crate_type = \"lib\"]` - A Rust library will be "
"produced. This is an ambiguous concept as to what exactly is produced "
"because a library can manifest itself in several forms. The purpose of this "
"generic `lib` option is to generate the \"compiler recommended\" style of "
"library. The output library will always be usable by rustc, but the actual "
"type of library may change from time-to-time. The remaining output types are "
"all different flavors of libraries, and the `lib` type can be seen as an "
"alias for one of them (but the actual one is compiler-defined)."
msgstr ""

#: src/linkage.md:46
msgid ""
"`--crate-type=dylib`, `#![crate_type = \"dylib\"]` - A dynamic Rust library "
"will be produced. This is different from the `lib` output type in that this "
"forces dynamic library generation. The resulting dynamic library can be used "
"as a dependency for other libraries and/or executables. This output type "
"will create `*.so` files on Linux, `*.dylib` files on macOS, and `*.dll` "
"files on Windows."
msgstr ""

#: src/linkage.md:55
msgid ""
"`--crate-type=staticlib`, `#![crate_type = \"staticlib\"]` - A static system "
"library will be produced. This is different from other library outputs in "
"that the compiler will never attempt to link to `staticlib` outputs. The "
"purpose of this output type is to create a static library containing all of "
"the local crate's code along with all upstream dependencies. This output "
"type will create `*.a` files on Linux, macOS and Windows (MinGW), and "
"`*.lib` files on Windows (MSVC). This format is recommended for use in "
"situations such as linking Rust code into an existing non-Rust application "
"because it will not have dynamic dependencies on other Rust code."
msgstr ""

#: src/linkage.md:65
msgid ""
"Note that any dynamic dependencies that the static library may have (such as "
"dependencies on system libraries, or dependencies on Rust libraries that are "
"compiled as dynamic libraries) will have to be specified manually when "
"linking that static library from somewhere. The `--print=native-static-libs` "
"flag may help with this."
msgstr ""

#: src/linkage.md:70
msgid ""
"Note that, because the resulting static library contains the code of all the "
"dependencies, including the standard library, and also exports all public "
"symbols of them, linking the static library into an executable or shared "
"library may need special care. In case of a shared library the list of "
"exported symbols will have to be limited via e.g. a linker or symbol version "
"script, exported symbols list (macOS), or module definition file (Windows). "
"Additionally, unused sections can be removed to remove all code of "
"dependencies that is not actually used (e.g. `--gc-sections` or `-"
"dead_strip` for macOS)."
msgstr ""

#: src/linkage.md:82
msgid ""
"`--crate-type=cdylib`, `#![crate_type = \"cdylib\"]` - A dynamic system "
"library will be produced.  This is used when compiling a dynamic library to "
"be loaded from another language.  This output type will create `*.so` files "
"on Linux, `*.dylib` files on macOS, and `*.dll` files on Windows."
msgstr ""

#: src/linkage.md:90
msgid ""
"`--crate-type=rlib`, `#![crate_type = \"rlib\"]` - A \"Rust library\" file "
"will be produced. This is used as an intermediate artifact and can be "
"thought of as a \"static Rust library\". These `rlib` files, unlike "
"`staticlib` files, are interpreted by the compiler in future linkage. This "
"essentially means that `rustc` will look for metadata in `rlib` files like "
"it looks for metadata in dynamic libraries. This form of output is used to "
"produce statically linked executables as well as `staticlib` outputs."
msgstr ""

#: src/linkage.md:100
msgid ""
"`--crate-type=proc-macro`, `#![crate_type = \"proc-macro\"]` - The output "
"produced is not specified, but if a `-L` path is provided to it then the "
"compiler will recognize the output artifacts as a macro and it can be loaded "
"for a program. Crates compiled with this crate type  must only export "
"[procedural macros](procedural-macros.md). The compiler will automatically "
"set the `proc_macro` [configuration option](conditional-compilation.md). The "
"crates are always compiled with the same target that the compiler itself was "
"built with. For example, if you are executing the compiler from Linux with "
"an `x86_64` CPU, the target will be `x86_64-unknown-linux-gnu` even if the "
"crate is a dependency of another crate being built for a different target."
msgstr ""

#: src/linkage.md:113
msgid ""
"Note that these outputs are stackable in the sense that if multiple are "
"specified, then the compiler will produce each form of output without having "
"to recompile. However, this only applies for outputs specified by the same "
"method. If only `crate_type` attributes are specified, then they will all be "
"built, but if one or more `--crate-type` command line flags are specified, "
"then only those outputs will be built."
msgstr ""

#: src/linkage.md:122
msgid ""
"With all these different kinds of outputs, if crate A depends on crate B, "
"then the compiler could find B in various different forms throughout the "
"system. The only forms looked for by the compiler, however, are the `rlib` "
"format and the dynamic library format. With these two options for a "
"dependent library, the compiler must at some point make a choice between "
"these two formats. With this in mind, the compiler follows these rules when "
"determining what format of dependencies will be used:"
msgstr ""

#: src/linkage.md:132
msgid ""
"If a static library is being produced, all upstream dependencies are "
"required to be available in `rlib` formats. This requirement stems from the "
"reason that a dynamic library cannot be converted into a static format."
msgstr ""

#: src/linkage.md:136
msgid ""
"Note that it is impossible to link in native dynamic dependencies to a "
"static library, and in this case warnings will be printed about all unlinked "
"native dynamic dependencies."
msgstr ""

#: src/linkage.md:143
msgid ""
"If an `rlib` file is being produced, then there are no restrictions on what "
"format the upstream dependencies are available in. It is simply required "
"that all upstream dependencies be available for reading metadata from."
msgstr ""

#: src/linkage.md:147
msgid ""
"The reason for this is that `rlib` files do not contain any of their "
"upstream dependencies. It wouldn't be very efficient for all `rlib` files to "
"contain a copy of `libstd.rlib`!"
msgstr ""

#: src/linkage.md:154
msgid ""
"If an executable is being produced and the `-C prefer-dynamic` flag is not "
"specified, then dependencies are first attempted to be found in the `rlib` "
"format. If some dependencies are not available in an rlib format, then "
"dynamic linking is attempted (see below)."
msgstr ""

#: src/linkage.md:162
msgid ""
"If a dynamic library or an executable that is being dynamically linked is "
"being produced, then the compiler will attempt to reconcile the available "
"dependencies in either the rlib or dylib format to create a final product."
msgstr ""

#: src/linkage.md:166
msgid ""
"A major goal of the compiler is to ensure that a library never appears more "
"than once in any artifact. For example, if dynamic libraries B and C were "
"each statically linked to library A, then a crate could not link to B and C "
"together because there would be two copies of A. The compiler allows mixing "
"the rlib and dylib formats, but this restriction must be satisfied."
msgstr ""

#: src/linkage.md:172
msgid ""
"The compiler currently implements no method of hinting what format a library "
"should be linked with. When dynamically linking, the compiler will attempt "
"to maximize dynamic dependencies while still allowing some dependencies to "
"be linked in via an rlib."
msgstr ""

#: src/linkage.md:177
msgid ""
"For most situations, having all libraries available as a dylib is "
"recommended if dynamically linking. For other situations, the compiler will "
"emit a warning if it is unable to determine which formats to link each "
"library with."
msgstr ""

#: src/linkage.md:181
msgid ""
"In general, `--crate-type=bin` or `--crate-type=lib` should be sufficient "
"for all compilation needs, and the other options are just available if more "
"fine-grained control is desired over the output format of a crate."
msgstr ""

#: src/linkage.md:187
msgid "Static and dynamic C runtimes"
msgstr ""

#: src/linkage.md:191
msgid ""
"The standard library in general strives to support both statically linked "
"and dynamically linked C runtimes for targets as appropriate. For example "
"the `x86_64-pc-windows-msvc` and `x86_64-unknown-linux-musl` targets "
"typically come with both runtimes and the user selects which one they'd "
"like. All targets in the compiler have a default mode of linking to the C "
"runtime. Typically targets are linked dynamically by default, but there are "
"exceptions which are static by default such as:"
msgstr ""

#: src/linkage.md:199
msgid "`arm-unknown-linux-musleabi`"
msgstr ""

#: src/linkage.md:200
msgid "`arm-unknown-linux-musleabihf`"
msgstr ""

#: src/linkage.md:201
msgid "`armv7-unknown-linux-musleabihf`"
msgstr ""

#: src/linkage.md:202
msgid "`i686-unknown-linux-musl`"
msgstr ""

#: src/linkage.md:203
msgid "`x86_64-unknown-linux-musl`"
msgstr ""

#: src/linkage.md:207
msgid ""
"The linkage of the C runtime is configured to respect the `crt-static` "
"target feature. These target features are typically configured from the "
"command line via flags to the compiler itself. For example to enable a "
"static runtime you would execute:"
msgstr ""

#: src/linkage.md:216
msgid "whereas to link dynamically to the C runtime you would execute:"
msgstr ""

#: src/linkage.md:224
msgid ""
"Targets which do not support switching between linkage of the C runtime will "
"ignore this flag. It's recommended to inspect the resulting binary to ensure "
"that it's linked as you would expect after the compiler succeeds."
msgstr ""

#: src/linkage.md:230
msgid ""
"Crates may also learn about how the C runtime is being linked. Code on MSVC, "
"for example, needs to be compiled differently (e.g. with `/MT` or `/MD`) "
"depending on the runtime being linked. This is exported currently through "
"the [`cfg` attribute `target_feature` option](conditional-"
"compilation.md#target_feature):"
msgstr ""

#: src/linkage.md:236 src/linkage.md:241 src/linkage.md:257
msgid "\"crt-static\""
msgstr ""

#: src/linkage.md:238
msgid "\"the C runtime should be statically linked\""
msgstr ""

#: src/linkage.md:243
msgid "\"the C runtime should be dynamically linked\""
msgstr ""

#: src/linkage.md:247
msgid ""
"Also note that Cargo build scripts can learn about this feature through "
"[environment variables](../cargo/reference/environment-"
"variables.html#environment-variables-cargo-sets-for-build-scripts). In a "
"build script you can detect the linkage via:"
msgstr ""

#: src/linkage.md:255
msgid "\"CARGO_CFG_TARGET_FEATURE\""
msgstr ""

#: src/linkage.md:258
msgid "\"the C runtime will be statically linked\""
msgstr ""

#: src/linkage.md:260
msgid "\"the C runtime will be dynamically linked\""
msgstr ""

#: src/linkage.md:267
msgid ""
"To use this feature locally, you typically will use the `RUSTFLAGS` "
"environment variable to specify flags to the compiler through Cargo. For "
"example to compile a statically linked binary on MSVC you would execute:"
msgstr ""

#: src/linkage.md:272
msgid "'-C target-feature=+crt-static'"
msgstr ""

#: src/linkage.md:275
msgid "Mixed Rust and foreign codebases"
msgstr ""

#: src/linkage.md:277
msgid ""
"If you are mixing Rust with foreign code (e.g. C, C++) and wish to make a "
"single binary containing both types of code, you have two approaches for the "
"final binary link:"
msgstr ""

#: src/linkage.md:281
msgid ""
"Use `rustc`. Pass any non-Rust libraries using `-L <directory>` and `-"
"l<library>` rustc arguments, and/or `#[link]` directives in your Rust code. "
"If you need to link against `.o` files you can use `-Clink-arg=file.o`."
msgstr ""

#: src/linkage.md:284
msgid ""
"Use your foreign linker. In this case, you first need to generate a Rust "
"`staticlib` target and pass that into your foreign linker invocation. If you "
"need to link multiple Rust subsystems, you will need to generate a _single_ "
"`staticlib` perhaps using lots of `extern crate` statements to include "
"multiple Rust `rlib`s. Multiple Rust `staticlib` files are likely to "
"conflict."
msgstr ""

#: src/linkage.md:290
msgid ""
"Passing `rlib`s directly into your foreign linker is currently unsupported."
msgstr ""

#: src/inline-assembly.md:7
msgid ""
"Support for inline assembly is provided via the [`asm!`](../core/arch/"
"macro.asm.html) and [`global_asm!`](../core/arch/macro.global_asm.html) "
"macros. It can be used to embed handwritten assembly in the assembly output "
"generated by the compiler."
msgstr ""

#: src/inline-assembly.md:15
msgid "Support for inline assembly is stable on the following architectures:"
msgstr ""

#: src/inline-assembly.md:16
msgid "x86 and x86-64"
msgstr ""

#: src/inline-assembly.md:17 src/inline-assembly.md:555
#: src/inline-assembly.md:556 src/inline-assembly.md:557
#: src/inline-assembly.md:558 src/inline-assembly.md:559
#: src/inline-assembly.md:560 src/inline-assembly.md:561
#: src/inline-assembly.md:562 src/inline-assembly.md:604
#: src/inline-assembly.md:605 src/inline-assembly.md:606
#: src/inline-assembly.md:607 src/inline-assembly.md:727
#: src/inline-assembly.md:728 src/inline-assembly.md:729
#: src/inline-assembly.md:730 src/inline-assembly.md:731
#: src/inline-assembly.md:732 src/inline-assembly.md:733
#: src/inline-assembly.md:734 src/inline-assembly.md:735
#: src/inline-assembly.md:781 src/inline-assembly.md:789
#: src/inline-assembly.md:790 src/inline-assembly.md:866
#: src/inline-assembly.md:867 src/inline-assembly.md:868
#: src/inline-assembly.md:869 src/inline-assembly.md:870
#: src/inline-assembly.md:993 src/inline-assembly.md:1330
msgid "ARM"
msgstr ""

#: src/inline-assembly.md:18 src/inline-assembly.md:1337
msgid "AArch64 and Arm64EC"
msgstr ""

#: src/inline-assembly.md:19 src/inline-assembly.md:563
#: src/inline-assembly.md:564 src/inline-assembly.md:565
#: src/inline-assembly.md:610 src/inline-assembly.md:611
#: src/inline-assembly.md:612 src/inline-assembly.md:736
#: src/inline-assembly.md:737 src/inline-assembly.md:738
#: src/inline-assembly.md:739 src/inline-assembly.md:740
#: src/inline-assembly.md:741 src/inline-assembly.md:742
#: src/inline-assembly.md:743 src/inline-assembly.md:744
#: src/inline-assembly.md:745 src/inline-assembly.md:746
#: src/inline-assembly.md:747 src/inline-assembly.md:748
#: src/inline-assembly.md:749 src/inline-assembly.md:750
#: src/inline-assembly.md:751 src/inline-assembly.md:791
#: src/inline-assembly.md:792 src/inline-assembly.md:871
#: src/inline-assembly.md:872 src/inline-assembly.md:994
#: src/inline-assembly.md:1340
msgid "RISC-V"
msgstr ""

#: src/inline-assembly.md:20 src/inline-assembly.md:566
#: src/inline-assembly.md:567 src/inline-assembly.md:752
#: src/inline-assembly.md:753 src/inline-assembly.md:754
#: src/inline-assembly.md:755 src/inline-assembly.md:756
#: src/inline-assembly.md:757 src/inline-assembly.md:758
#: src/inline-assembly.md:759 src/inline-assembly.md:760
#: src/inline-assembly.md:761 src/inline-assembly.md:762
#: src/inline-assembly.md:763 src/inline-assembly.md:793
#: src/inline-assembly.md:794 src/inline-assembly.md:795
#: src/inline-assembly.md:873 src/inline-assembly.md:874
#: src/inline-assembly.md:995 src/inline-assembly.md:1343
msgid "LoongArch"
msgstr ""

#: src/inline-assembly.md:21 src/inline-assembly.md:568
#: src/inline-assembly.md:569 src/inline-assembly.md:570
#: src/inline-assembly.md:571 src/inline-assembly.md:572
#: src/inline-assembly.md:616 src/inline-assembly.md:617
#: src/inline-assembly.md:618 src/inline-assembly.md:619
#: src/inline-assembly.md:796 src/inline-assembly.md:797
#: src/inline-assembly.md:875 src/inline-assembly.md:876
#: src/inline-assembly.md:877 src/inline-assembly.md:996
#: src/inline-assembly.md:1345
msgid "s390x"
msgstr ""

#: src/inline-assembly.md:23
msgid ""
"The compiler will emit an error if `asm!` is used on an unsupported target."
msgstr ""

#: src/inline-assembly.md:30 src/inline-assembly.md:84
#: src/inline-assembly.md:96 src/inline-assembly.md:113
#: src/inline-assembly.md:134 src/inline-assembly.md:139
#: src/inline-assembly.md:148 src/inline-assembly.md:163
#: src/inline-assembly.md:167 src/inline-assembly.md:175
#: src/inline-assembly.md:181 src/inline-assembly.md:185
#: src/inline-assembly.md:191 src/inline-assembly.md:199
#: src/inline-assembly.md:205 src/inline-assembly.md:213
#: src/inline-assembly.md:219 src/inline-assembly.md:255
#: src/inline-assembly.md:271 src/inline-assembly.md:285
#: src/inline-assembly.md:304 src/inline-assembly.md:321
#: src/inline-assembly.md:336 src/inline-assembly.md:353
#: src/inline-assembly.md:369 src/inline-assembly.md:393
#: src/inline-assembly.md:409 src/inline-assembly.md:412
#: src/inline-assembly.md:419 src/inline-assembly.md:434
#: src/inline-assembly.md:452 src/inline-assembly.md:457
#: src/inline-assembly.md:460 src/inline-assembly.md:465
#: src/inline-assembly.md:473 src/inline-assembly.md:479
#: src/inline-assembly.md:493 src/inline-assembly.md:518
#: src/inline-assembly.md:525 src/inline-assembly.md:624
#: src/inline-assembly.md:636 src/inline-assembly.md:642
#: src/inline-assembly.md:652 src/inline-assembly.md:670
#: src/inline-assembly.md:681 src/inline-assembly.md:688
#: src/inline-assembly.md:766 src/inline-assembly.md:800
#: src/inline-assembly.md:805 src/inline-assembly.md:826
#: src/inline-assembly.md:831 src/inline-assembly.md:886
#: src/inline-assembly.md:915 src/inline-assembly.md:931
#: src/inline-assembly.md:958 src/inline-assembly.md:975
#: src/inline-assembly.md:1020 src/inline-assembly.md:1030
#: src/inline-assembly.md:1039 src/inline-assembly.md:1050
#: src/inline-assembly.md:1074 src/inline-assembly.md:1097
#: src/inline-assembly.md:1107 src/inline-assembly.md:1122
#: src/inline-assembly.md:1150 src/inline-assembly.md:1154
#: src/inline-assembly.md:1160 src/inline-assembly.md:1173
#: src/inline-assembly.md:1185 src/inline-assembly.md:1214
#: src/inline-assembly.md:1219 src/inline-assembly.md:1227
#: src/inline-assembly.md:1232 src/inline-assembly.md:1240
#: src/inline-assembly.md:1246 src/inline-assembly.md:1256
#: src/inline-assembly.md:1259 src/inline-assembly.md:1359
#: src/inline-assembly.md:1385 src/inline-assembly.md:1520
msgid "\"x86_64\""
msgstr ""

#: src/inline-assembly.md:32
msgid "// Multiply x by 6 using shifts and adds\n"
msgstr ""

#: src/inline-assembly.md:37
msgid "\"mov {tmp}, {x}\""
msgstr ""

#: src/inline-assembly.md:38
msgid "\"shl {tmp}, 1\""
msgstr ""

#: src/inline-assembly.md:39
msgid "\"shl {x}, 2\""
msgstr ""

#: src/inline-assembly.md:40
msgid "\"add {x}, {tmp}\""
msgstr ""

#: src/inline-assembly.md:53
msgid "The following ABNF specifies the general syntax:"
msgstr ""

#: src/inline-assembly.md:55
msgid ""
"```text\n"
"format_string := STRING_LITERAL / RAW_STRING_LITERAL\n"
"dir_spec := \"in\" / \"out\" / \"lateout\" / \"inout\" / \"inlateout\"\n"
"reg_spec := <register class> / \"\\\"\" <explicit register> \"\\\"\"\n"
"operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\"\n"
"reg_operand := [ident \"=\"] dir_spec \"(\" reg_spec \")\" operand_expr / "
"sym <path> / const <expr>\n"
"clobber_abi := \"clobber_abi(\" <abi> *(\",\" <abi>) [\",\"] \")\"\n"
"option := \"pure\" / \"nomem\" / \"readonly\" / \"preserves_flags\" / "
"\"noreturn\" / \"nostack\" / \"att_syntax\" / \"raw\"\n"
"options := \"options(\" option *(\",\" option) [\",\"] \")\"\n"
"operand := reg_operand / clobber_abi / options\n"
"asm := \"asm!(\" format_string *(\",\" format_string) *(\",\" operand) [\","
"\"] \")\"\n"
"global_asm := \"global_asm!(\" format_string *(\",\" format_string) *(\",\" "
"operand) [\",\"] \")\"\n"
"```"
msgstr ""

#: src/inline-assembly.md:71 src/glossary.md:196
msgid "Scope"
msgstr ""

#: src/inline-assembly.md:75
msgid "Inline assembly can be used in one of two ways."
msgstr ""

#: src/inline-assembly.md:79
msgid ""
"With the `asm!` macro, the assembly code is emitted in a function scope and "
"integrated into the compiler-generated assembly code of a function. This "
"assembly code must obey [strict rules](#rules-for-inline-assembly) to avoid "
"undefined behavior. Note that in some cases the compiler may choose to emit "
"the assembly code as a separate function and generate a call to it."
msgstr ""

#: src/inline-assembly.md:85 src/inline-assembly.md:97
#: src/inline-assembly.md:188 src/inline-assembly.md:202
#: src/inline-assembly.md:257 src/inline-assembly.md:274
#: src/inline-assembly.md:498 src/inline-assembly.md:502
#: src/inline-assembly.md:506 src/inline-assembly.md:510
#: src/inline-assembly.md:513 src/inline-assembly.md:522
#: src/inline-assembly.md:639 src/inline-assembly.md:685
msgid "\"/* {} */\""
msgstr ""

#: src/inline-assembly.md:91
msgid ""
"With the `global_asm!` macro, the assembly code is emitted in a global "
"scope, outside a function. This can be used to hand-write entire functions "
"using assembly code, and generally provides much more freedom to use "
"arbitrary registers and assembler directives."
msgstr ""

#: src/inline-assembly.md:102
msgid "Template string arguments"
msgstr ""

#: src/inline-assembly.md:106
msgid ""
"The assembler template uses the same syntax as [format strings](../alloc/fmt/"
"index.html#syntax) (i.e. placeholders are specified by curly braces)."
msgstr ""

#: src/inline-assembly.md:110
msgid ""
"The corresponding arguments are accessed in order, by index, or by name."
msgstr ""

#: src/inline-assembly.md:116
msgid "// This\n"
msgstr ""

#: src/inline-assembly.md:118 src/inline-assembly.md:656
msgid "\"mov {}, {}\""
msgstr ""

#: src/inline-assembly.md:118
msgid "// ... this\n"
msgstr ""

#: src/inline-assembly.md:120
msgid "\"mov {0}, {1}\""
msgstr ""

#: src/inline-assembly.md:120
msgid "// ... and this\n"
msgstr ""

#: src/inline-assembly.md:122
msgid "\"mov {out}, {in}\""
msgstr ""

#: src/inline-assembly.md:122
msgid "// all have the same behavior\n"
msgstr ""

#: src/inline-assembly.md:131
msgid ""
"However, implicit named arguments (introduced by [RFC #2795](https://"
"github.com/rust-lang/rfcs/pull/2795)) are not supported."
msgstr ""

#: src/inline-assembly.md:135
msgid ""
"// We can't refer to `x` from the scope directly, we need an operand like "
"`in(reg) x`\n"
msgstr ""

#: src/inline-assembly.md:137 src/inline-assembly.md:165
msgid "\"/* {x} */\""
msgstr ""

#: src/inline-assembly.md:137
msgid "// ERROR: no argument named x\n"
msgstr ""

#: src/inline-assembly.md:139 src/inline-assembly.md:167
#: src/inline-assembly.md:181 src/inline-assembly.md:191
#: src/inline-assembly.md:205 src/inline-assembly.md:219
#: src/inline-assembly.md:412 src/inline-assembly.md:457
#: src/inline-assembly.md:465 src/inline-assembly.md:479
#: src/inline-assembly.md:525 src/inline-assembly.md:642
#: src/inline-assembly.md:688 src/inline-assembly.md:805
#: src/inline-assembly.md:831 src/inline-assembly.md:975
#: src/inline-assembly.md:1039 src/inline-assembly.md:1219
#: src/inline-assembly.md:1232 src/inline-assembly.md:1246
#: src/inline-assembly.md:1259
msgid "\"Test not supported on this arch\""
msgstr ""

#: src/inline-assembly.md:144
msgid ""
"An `asm!` invocation may have one or more template string arguments; an `asm!"
"` with multiple template string arguments is treated as if all the strings "
"were concatenated with a `\\n` between them. The expected usage is for each "
"template string argument to correspond to a line of assembly code."
msgstr ""

#: src/inline-assembly.md:150
msgid "// We can separate multiple strings as if they were written together\n"
msgstr ""

#: src/inline-assembly.md:152
msgid "\"mov eax, 5\""
msgstr ""

#: src/inline-assembly.md:152 src/inline-assembly.md:941
msgid "\"mov ecx, eax\""
msgstr ""

#: src/inline-assembly.md:152 src/inline-assembly.md:462
#: src/inline-assembly.md:769 src/inline-assembly.md:921
#: src/inline-assembly.md:945
msgid "\"rax\""
msgstr ""

#: src/inline-assembly.md:152
msgid "\"rcx\""
msgstr ""

#: src/inline-assembly.md:159
msgid "All template string arguments must appear before any other arguments."
msgstr ""

#: src/inline-assembly.md:163
msgid "// The template strings need to appear first in the asm invocation\n"
msgstr ""

#: src/inline-assembly.md:165 src/inline-assembly.md:1152
msgid "\"ud2\""
msgstr ""

#: src/inline-assembly.md:165
msgid "// ERROR: unexpected token\n"
msgstr ""

#: src/inline-assembly.md:172
msgid ""
"As with format strings, positional arguments must appear before named "
"arguments and explicit [register operands](#register-operands)."
msgstr ""

#: src/inline-assembly.md:176
msgid "// Named operands need to come after positional ones\n"
msgstr ""

#: src/inline-assembly.md:178
msgid "\"/* {x} {} */\""
msgstr ""

#: src/inline-assembly.md:178 src/inline-assembly.md:188
msgid ""
"// ERROR: positional arguments cannot follow named arguments or explicit "
"register arguments\n"
msgstr ""

#: src/inline-assembly.md:186
msgid "// We also can't put explicit registers before positional operands\n"
msgstr ""

#: src/inline-assembly.md:188 src/inline-assembly.md:202
#: src/inline-assembly.md:438 src/inline-assembly.md:454
#: src/inline-assembly.md:1377
msgid "\"eax\""
msgstr ""

#: src/inline-assembly.md:196
msgid ""
"Explicit register operands cannot be used by placeholders in the template "
"string."
msgstr ""

#: src/inline-assembly.md:200
msgid ""
"// Explicit register operands don't get substituted, use `eax` explicitly in "
"the string\n"
msgstr ""

#: src/inline-assembly.md:202
msgid "// ERROR: invalid reference to argument at index 0\n"
msgstr ""

#: src/inline-assembly.md:210
msgid ""
"All other named and positional operands must appear at least once in the "
"template string, otherwise a compiler error is generated."
msgstr ""

#: src/inline-assembly.md:214
msgid "// We have to name all of the operands in the format string\n"
msgstr ""

#: src/inline-assembly.md:216
msgid "// ERROR: multiple unused asm arguments\n"
msgstr ""

#: src/inline-assembly.md:224
msgid ""
"The exact assembly code syntax is target-specific and opaque to the compiler "
"except for the way operands are substituted into the template string to form "
"the code passed to the assembler."
msgstr ""

#: src/inline-assembly.md:228
msgid ""
"Currently, all supported targets follow the assembly code syntax used by "
"LLVM's internal assembler which usually corresponds to that of the GNU "
"assembler (GAS). On x86, the `.intel_syntax noprefix` mode of GAS is used by "
"default. On ARM, the `.syntax unified` mode is used. These targets impose an "
"additional restriction on the assembly code: any assembler state (e.g. the "
"current section which can be changed with `.section`) must be restored to "
"its original value at the end of the asm string. Assembly code that does not "
"conform to the GAS syntax will result in assembler-specific behavior. "
"Further constraints on the directives used by inline assembly are indicated "
"by [Directives Support](#directives-support)."
msgstr ""

#: src/inline-assembly.md:240
msgid "Operand type"
msgstr ""

#: src/inline-assembly.md:244
msgid "Several types of operands are supported:"
msgstr ""

#: src/inline-assembly.md:248
msgid "`in(<reg>) <expr>`"
msgstr ""

#: src/inline-assembly.md:249 src/inline-assembly.md:264
#: src/inline-assembly.md:298
msgid ""
"`<reg>` can refer to a register class or an explicit register. The allocated "
"register name is substituted into the asm template string."
msgstr ""

#: src/inline-assembly.md:251 src/inline-assembly.md:300
msgid ""
"The allocated register will contain the value of `<expr>` at the start of "
"the asm code."
msgstr ""

#: src/inline-assembly.md:252
msgid ""
"The allocated register must contain the same value at the end of the asm "
"code (except if a `lateout` is allocated to the same register)."
msgstr ""

#: src/inline-assembly.md:255
msgid "// ``in` can be used to pass values into inline assembly...\n"
msgstr ""

#: src/inline-assembly.md:263
msgid "`out(<reg>) <expr>`"
msgstr ""

#: src/inline-assembly.md:266
msgid ""
"The allocated register will contain an undefined value at the start of the "
"asm code."
msgstr ""

#: src/inline-assembly.md:267
msgid ""
"`<expr>` must be a (possibly uninitialized) place expression, to which the "
"contents of the allocated register are written at the end of the asm code."
msgstr ""

#: src/inline-assembly.md:268
msgid ""
"An underscore (`_`) may be specified instead of an expression, which will "
"cause the contents of the register to be discarded at the end of the asm "
"code (effectively acting as a clobber)."
msgstr ""

#: src/inline-assembly.md:272
msgid "// and `out` can be used to pass values back to rust.\n"
msgstr ""

#: src/inline-assembly.md:280
msgid "`lateout(<reg>) <expr>`"
msgstr ""

#: src/inline-assembly.md:281
msgid ""
"Identical to `out` except that the register allocator can reuse a register "
"allocated to an `in`."
msgstr ""

#: src/inline-assembly.md:282 src/inline-assembly.md:333
msgid ""
"You should only write to the register after all inputs are read, otherwise "
"you may clobber an input."
msgstr ""

#: src/inline-assembly.md:286
msgid ""
"// `lateout` is the same as `out`\n"
"// but the compiler knows we don't care about the value of any inputs by "
"the\n"
"// time we overwrite it.\n"
msgstr ""

#: src/inline-assembly.md:290
msgid "\"mov {}, 5\""
msgstr ""

#: src/inline-assembly.md:297
msgid "`inout(<reg>) <expr>`"
msgstr ""

#: src/inline-assembly.md:301
msgid ""
"`<expr>` must be a mutable initialized place expression, to which the "
"contents of the allocated register are written at the end of the asm code."
msgstr ""

#: src/inline-assembly.md:305
msgid "// `inout` can be used to modify values in-register\n"
msgstr ""

#: src/inline-assembly.md:307 src/inline-assembly.md:324
#: src/inline-assembly.md:339 src/inline-assembly.md:1024
#: src/inline-assembly.md:1035
msgid "\"inc {}\""
msgstr ""

#: src/inline-assembly.md:314
msgid "`inout(<reg>) <in expr> => <out expr>`"
msgstr ""

#: src/inline-assembly.md:315
msgid ""
"Same as `inout` except that the initial value of the register is taken from "
"the value of `<in expr>`."
msgstr ""

#: src/inline-assembly.md:316
msgid ""
"`<out expr>` must be a (possibly uninitialized) place expression, to which "
"the contents of the allocated register are written at the end of the asm "
"code."
msgstr ""

#: src/inline-assembly.md:317
msgid ""
"An underscore (`_`) may be specified instead of an expression for `<out "
"expr>`, which will cause the contents of the register to be discarded at the "
"end of the asm code (effectively acting as a clobber)."
msgstr ""

#: src/inline-assembly.md:318
msgid "`<in expr>` and `<out expr>` may have different types."
msgstr ""

#: src/inline-assembly.md:322
msgid "// `inout` can also move values to different places\n"
msgstr ""

#: src/inline-assembly.md:331
msgid "`inlateout(<reg>) <expr>` / `inlateout(<reg>) <in expr> => <out expr>`"
msgstr ""

#: src/inline-assembly.md:332
msgid ""
"Identical to `inout` except that the register allocator can reuse a register "
"allocated to an `in` (this can happen if the compiler knows the `in` has the "
"same initial value as the `inlateout`)."
msgstr ""

#: src/inline-assembly.md:337
msgid "// `inlateout` is `inout` using `lateout`\n"
msgstr ""

#: src/inline-assembly.md:346
msgid "`sym <path>`"
msgstr ""

#: src/inline-assembly.md:347
msgid "`<path>` must refer to a `fn` or `static`."
msgstr ""

#: src/inline-assembly.md:348
msgid ""
"A mangled symbol name referring to the item is substituted into the asm "
"template string."
msgstr ""

#: src/inline-assembly.md:349
msgid ""
"The substituted string does not include any modifiers (e.g. GOT, PLT, "
"relocations, etc)."
msgstr ""

#: src/inline-assembly.md:350
msgid ""
"`<path>` is allowed to point to a `#[thread_local]` static, in which case "
"the asm code can combine the symbol with relocations (e.g. `@plt`, `@TPOFF`) "
"to read from thread-local data."
msgstr ""

#: src/inline-assembly.md:355
msgid "\"Hello from inline assembly\""
msgstr ""

#: src/inline-assembly.md:356
msgid ""
"// `sym` can be used to refer to a function (even if it doesn't have an\n"
"// external name we can directly write)\n"
msgstr ""

#: src/inline-assembly.md:359 src/inline-assembly.md:921
#: src/inline-assembly.md:940 src/inline-assembly.md:942
#: src/inline-assembly.md:966
msgid "\"call {}\""
msgstr ""

#: src/inline-assembly.md:363
msgid "`const <expr>`"
msgstr ""

#: src/inline-assembly.md:364
msgid ""
"`<expr>` must be an integer constant expression. This expression follows the "
"same rules as inline `const` blocks."
msgstr ""

#: src/inline-assembly.md:365
msgid ""
"The type of the expression may be any integer type, but defaults to `i32` "
"just like integer literals."
msgstr ""

#: src/inline-assembly.md:366
msgid ""
"The value of the expression is formatted as a string and substituted "
"directly into the asm template string."
msgstr ""

#: src/inline-assembly.md:369
msgid "// swizzle [0, 1, 2, 3] => [3, 2, 0, 1]\n"
msgstr ""

#: src/inline-assembly.md:373
msgid ""
"// Pass a constant value into an instruction that expects an immediate like "
"`pshufd`\n"
msgstr ""

#: src/inline-assembly.md:376
msgid "\"pshufd {xmm}, {xmm}, {shuffle}\""
msgstr ""

#: src/inline-assembly.md:388
msgid ""
"Operand expressions are evaluated from left to right, just like function "
"call arguments. After the `asm!` has executed, outputs are written to in "
"left to right order. This is significant if two outputs point to the same "
"place: that place will contain the value of the rightmost output."
msgstr ""

#: src/inline-assembly.md:394
msgid "// y gets its value from the second output, rather than the first\n"
msgstr ""

#: src/inline-assembly.md:396
msgid "\"mov {}, 0\""
msgstr ""

#: src/inline-assembly.md:396
msgid "\"mov {}, 1\""
msgstr ""

#: src/inline-assembly.md:403
msgid ""
"Since `global_asm!` exists outside a function, it can only use `sym` and "
"`const` operands."
msgstr ""

#: src/inline-assembly.md:407
msgid "// register operands aren't allowed, since we aren't in a function\n"
msgstr ""

#: src/inline-assembly.md:410
msgid "// ERROR: the `in` operand cannot be used with `global_asm!`\n"
msgstr ""

#: src/inline-assembly.md:419
msgid "// `const` and `sym` are both allowed, however\n"
msgstr ""

#: src/inline-assembly.md:421
msgid "\"/* {} {} */\""
msgstr ""

#: src/inline-assembly.md:426
msgid "Register operands"
msgstr ""

#: src/inline-assembly.md:430
msgid ""
"Input and output operands can be specified either as an explicit register or "
"as a register class from which the register allocator can select a register. "
"Explicit registers are specified as string literals (e.g. `\"eax\"`) while "
"register classes are specified as identifiers (e.g. `reg`)."
msgstr ""

#: src/inline-assembly.md:435
msgid ""
"// We can name both `reg`, or an explicit register like `eax` to get an\n"
"// integer register\n"
msgstr ""

#: src/inline-assembly.md:438 src/inline-assembly.md:965
msgid "\"mov eax, {:e}\""
msgstr ""

#: src/inline-assembly.md:445
msgid ""
"Note that explicit registers treat register aliases (e.g. `r14` vs `lr` on "
"ARM) and smaller views of a register (e.g. `eax` vs `rax`) as equivalent to "
"the base register."
msgstr ""

#: src/inline-assembly.md:449
msgid ""
"It is a compile-time error to use the same explicit register for two input "
"operands or two output operands."
msgstr ""

#: src/inline-assembly.md:452
msgid "// We can't name eax twice\n"
msgstr ""

#: src/inline-assembly.md:454
msgid "// ERROR: register `eax` conflicts with register `eax`\n"
msgstr ""

#: src/inline-assembly.md:460
msgid "// ... even using different aliases\n"
msgstr ""

#: src/inline-assembly.md:462 src/inline-assembly.md:476
msgid "\"ax\""
msgstr ""

#: src/inline-assembly.md:462
msgid "// ERROR: register `rax` conflicts with register `ax`\n"
msgstr ""

#: src/inline-assembly.md:470
msgid ""
"Additionally, it is also a compile-time error to use overlapping registers "
"(e.g. ARM VFP) in input operands or in output operands."
msgstr ""

#: src/inline-assembly.md:474
msgid "// al overlaps with ax, so we can't name both of them.\n"
msgstr ""

#: src/inline-assembly.md:476
msgid "\"al\""
msgstr ""

#: src/inline-assembly.md:476
msgid "// ERROR: register `al` conflicts with register `ax`\n"
msgstr ""

#: src/inline-assembly.md:484
msgid "Only the following types are allowed as operands for inline assembly:"
msgstr ""

#: src/inline-assembly.md:485
msgid "Integers (signed and unsigned)"
msgstr ""

#: src/inline-assembly.md:486
msgid "Floating-point numbers"
msgstr ""

#: src/inline-assembly.md:487
msgid "Pointers (thin only)"
msgstr ""

#: src/inline-assembly.md:488
msgid "Function pointers"
msgstr ""

#: src/inline-assembly.md:489
msgid ""
"SIMD vectors (structs defined with `#[repr(simd)]` and which implement "
"`Copy`). This includes architecture-specific vector types defined in "
"`std::arch` such as `__m128` (x86) or `int8x16_t` (ARM)."
msgstr ""

#: src/inline-assembly.md:495
msgid "// Integers are allowed...\n"
msgstr ""

#: src/inline-assembly.md:499
msgid "// and pointers...\n"
msgstr ""

#: src/inline-assembly.md:503
msgid "// floats as well...\n"
msgstr ""

#: src/inline-assembly.md:507
msgid "// even function pointers and simd vectors.\n"
msgstr ""

#: src/inline-assembly.md:520
msgid "// Complex types like structs are not allowed\n"
msgstr ""

#: src/inline-assembly.md:522
msgid "// ERROR: cannot use value of type `Foo` for inline assembly\n"
msgstr ""

#: src/inline-assembly.md:530
msgid "Here is the list of currently supported register classes:"
msgstr ""

#: src/inline-assembly.md:532 src/inline-assembly.md:586
#: src/inline-assembly.md:701 src/inline-assembly.md:777
#: src/inline-assembly.md:838 src/inline-assembly.md:986
msgid "Architecture"
msgstr ""

#: src/inline-assembly.md:532 src/inline-assembly.md:586
#: src/inline-assembly.md:838
msgid "Register class"
msgstr ""

#: src/inline-assembly.md:532
msgid "Registers"
msgstr ""

#: src/inline-assembly.md:532
msgid "LLVM constraint code"
msgstr ""

#: src/inline-assembly.md:534 src/inline-assembly.md:535
#: src/inline-assembly.md:538 src/inline-assembly.md:539
#: src/inline-assembly.md:540 src/inline-assembly.md:541
#: src/inline-assembly.md:542 src/inline-assembly.md:543
#: src/inline-assembly.md:544 src/inline-assembly.md:590
#: src/inline-assembly.md:591 src/inline-assembly.md:592
#: src/inline-assembly.md:593 src/inline-assembly.md:594
#: src/inline-assembly.md:595 src/inline-assembly.md:596
#: src/inline-assembly.md:597 src/inline-assembly.md:598
#: src/inline-assembly.md:703 src/inline-assembly.md:704
#: src/inline-assembly.md:705 src/inline-assembly.md:706
#: src/inline-assembly.md:707 src/inline-assembly.md:708
#: src/inline-assembly.md:709 src/inline-assembly.md:710
#: src/inline-assembly.md:711 src/inline-assembly.md:712
#: src/inline-assembly.md:713 src/inline-assembly.md:714
#: src/inline-assembly.md:783 src/inline-assembly.md:844
#: src/inline-assembly.md:845 src/inline-assembly.md:846
#: src/inline-assembly.md:848 src/inline-assembly.md:849
#: src/inline-assembly.md:850 src/inline-assembly.md:851
#: src/inline-assembly.md:852 src/inline-assembly.md:853
#: src/inline-assembly.md:854 src/inline-assembly.md:855
#: src/inline-assembly.md:1326
msgid "x86"
msgstr ""

#: src/inline-assembly.md:534 src/inline-assembly.md:546
#: src/inline-assembly.md:550 src/inline-assembly.md:553
#: src/inline-assembly.md:554 src/inline-assembly.md:563
#: src/inline-assembly.md:566 src/inline-assembly.md:568
#: src/inline-assembly.md:588 src/inline-assembly.md:589
#: src/inline-assembly.md:599 src/inline-assembly.md:602
#: src/inline-assembly.md:604 src/inline-assembly.md:608
#: src/inline-assembly.md:609 src/inline-assembly.md:613
#: src/inline-assembly.md:840 src/inline-assembly.md:841
#: src/inline-assembly.md:843 src/inline-assembly.md:845
#: src/inline-assembly.md:846 src/inline-assembly.md:847
#: src/inline-assembly.md:856 src/inline-assembly.md:857
#: src/inline-assembly.md:858 src/inline-assembly.md:866
#: src/inline-assembly.md:871 src/inline-assembly.md:873
#: src/inline-assembly.md:875
msgid "`reg`"
msgstr ""

#: src/inline-assembly.md:534
msgid "`ax`, `bx`, `cx`, `dx`, `si`, `di`, `bp`, `r[8-15]` (x86-64 only)"
msgstr ""

#: src/inline-assembly.md:534 src/inline-assembly.md:546
#: src/inline-assembly.md:550 src/inline-assembly.md:553
#: src/inline-assembly.md:554 src/inline-assembly.md:563
#: src/inline-assembly.md:566 src/inline-assembly.md:568
#: src/inline-assembly.md:847
msgid "`r`"
msgstr ""

#: src/inline-assembly.md:535 src/inline-assembly.md:842
#: src/inline-assembly.md:844
msgid "`reg_abcd`"
msgstr ""

#: src/inline-assembly.md:535
msgid "`ax`, `bx`, `cx`, `dx`"
msgstr ""

#: src/inline-assembly.md:535
msgid "`Q`"
msgstr ""

#: src/inline-assembly.md:536 src/inline-assembly.md:588
#: src/inline-assembly.md:840 src/inline-assembly.md:842
#: src/inline-assembly.md:988
msgid "x86-32"
msgstr ""

#: src/inline-assembly.md:536 src/inline-assembly.md:590
#: src/inline-assembly.md:848
msgid "`reg_byte`"
msgstr ""

#: src/inline-assembly.md:536
msgid "`al`, `bl`, `cl`, `dl`, `ah`, `bh`, `ch`, `dh`"
msgstr ""

#: src/inline-assembly.md:536 src/inline-assembly.md:537
#: src/inline-assembly.md:841 src/inline-assembly.md:847
#: src/inline-assembly.md:865 src/inline-assembly.md:869
msgid "`q`"
msgstr ""

#: src/inline-assembly.md:537 src/inline-assembly.md:545
#: src/inline-assembly.md:589 src/inline-assembly.md:841
#: src/inline-assembly.md:843 src/inline-assembly.md:847
#: src/inline-assembly.md:989 src/inline-assembly.md:990
msgid "x86-64"
msgstr ""

#: src/inline-assembly.md:537
msgid "`reg_byte`\\*"
msgstr ""

#: src/inline-assembly.md:537
msgid "`al`, `bl`, `cl`, `dl`, `sil`, `dil`, `bpl`, `r[8-15]b`"
msgstr ""

#: src/inline-assembly.md:538 src/inline-assembly.md:591
#: src/inline-assembly.md:849
msgid "`xmm_reg`"
msgstr ""

#: src/inline-assembly.md:538
msgid "`xmm[0-7]` (x86) `xmm[0-15]` (x86-64)"
msgstr ""

#: src/inline-assembly.md:538 src/inline-assembly.md:539
#: src/inline-assembly.md:548 src/inline-assembly.md:552
#: src/inline-assembly.md:556 src/inline-assembly.md:559
#: src/inline-assembly.md:562 src/inline-assembly.md:845
#: src/inline-assembly.md:849 src/inline-assembly.md:852
#: src/inline-assembly.md:856 src/inline-assembly.md:858
msgid "`x`"
msgstr ""

#: src/inline-assembly.md:539 src/inline-assembly.md:592
#: src/inline-assembly.md:850
msgid "`ymm_reg`"
msgstr ""

#: src/inline-assembly.md:539
msgid "`ymm[0-7]` (x86) `ymm[0-15]` (x86-64)"
msgstr ""

#: src/inline-assembly.md:540 src/inline-assembly.md:593
#: src/inline-assembly.md:851
msgid "`zmm_reg`"
msgstr ""

#: src/inline-assembly.md:540
msgid "`zmm[0-7]` (x86) `zmm[0-31]` (x86-64)"
msgstr ""

#: src/inline-assembly.md:540 src/inline-assembly.md:860
msgid "`v`"
msgstr ""

#: src/inline-assembly.md:541 src/inline-assembly.md:594
#: src/inline-assembly.md:595 src/inline-assembly.md:855
msgid "`kreg`"
msgstr ""

#: src/inline-assembly.md:541
msgid "`k[1-7]`"
msgstr ""

#: src/inline-assembly.md:541
msgid "`Yk`"
msgstr ""

#: src/inline-assembly.md:542
msgid "`kreg0`"
msgstr ""

#: src/inline-assembly.md:542
msgid "`k0`"
msgstr ""

#: src/inline-assembly.md:542 src/inline-assembly.md:543
#: src/inline-assembly.md:544 src/inline-assembly.md:545
#: src/inline-assembly.md:549 src/inline-assembly.md:565
#: src/inline-assembly.md:571 src/inline-assembly.md:572
#: src/inline-assembly.md:596 src/inline-assembly.md:597
#: src/inline-assembly.md:598 src/inline-assembly.md:601
#: src/inline-assembly.md:612 src/inline-assembly.md:618
#: src/inline-assembly.md:619
msgid "Only clobbers"
msgstr ""

#: src/inline-assembly.md:543 src/inline-assembly.md:597
msgid "`x87_reg`"
msgstr ""

#: src/inline-assembly.md:543
msgid "`st([0-7])`"
msgstr ""

#: src/inline-assembly.md:544 src/inline-assembly.md:596
msgid "`mmx_reg`"
msgstr ""

#: src/inline-assembly.md:544
msgid "`mm[0-7]`"
msgstr ""

#: src/inline-assembly.md:545 src/inline-assembly.md:598
msgid "`tmm_reg`"
msgstr ""

#: src/inline-assembly.md:545
msgid "`tmm[0-7]`"
msgstr ""

#: src/inline-assembly.md:546 src/inline-assembly.md:547
#: src/inline-assembly.md:548 src/inline-assembly.md:549
#: src/inline-assembly.md:599 src/inline-assembly.md:600
#: src/inline-assembly.md:601 src/inline-assembly.md:715
#: src/inline-assembly.md:716 src/inline-assembly.md:717
#: src/inline-assembly.md:718 src/inline-assembly.md:719
#: src/inline-assembly.md:720 src/inline-assembly.md:784
#: src/inline-assembly.md:785 src/inline-assembly.md:991
msgid "AArch64"
msgstr ""

#: src/inline-assembly.md:546 src/inline-assembly.md:715
#: src/inline-assembly.md:721
msgid "`x[0-30]`"
msgstr ""

#: src/inline-assembly.md:547 src/inline-assembly.md:551
#: src/inline-assembly.md:565 src/inline-assembly.md:571
#: src/inline-assembly.md:600 src/inline-assembly.md:603
#: src/inline-assembly.md:612 src/inline-assembly.md:618
#: src/inline-assembly.md:859 src/inline-assembly.md:860
#: src/inline-assembly.md:861 src/inline-assembly.md:862
#: src/inline-assembly.md:863 src/inline-assembly.md:864
#: src/inline-assembly.md:865
msgid "`vreg`"
msgstr ""

#: src/inline-assembly.md:547 src/inline-assembly.md:565
#: src/inline-assembly.md:571 src/inline-assembly.md:720
msgid "`v[0-31]`"
msgstr ""

#: src/inline-assembly.md:547 src/inline-assembly.md:551
#: src/inline-assembly.md:557 src/inline-assembly.md:560
#: src/inline-assembly.md:845 src/inline-assembly.md:857
msgid "`w`"
msgstr ""

#: src/inline-assembly.md:548 src/inline-assembly.md:552
msgid "`vreg_low16`"
msgstr ""

#: src/inline-assembly.md:548 src/inline-assembly.md:551
#: src/inline-assembly.md:552 src/inline-assembly.md:726
msgid "`v[0-15]`"
msgstr ""

#: src/inline-assembly.md:549 src/inline-assembly.md:601
msgid "`preg`"
msgstr ""

#: src/inline-assembly.md:549
msgid "`p[0-15]`, `ffr`"
msgstr ""

#: src/inline-assembly.md:550 src/inline-assembly.md:551
#: src/inline-assembly.md:552 src/inline-assembly.md:602
#: src/inline-assembly.md:603 src/inline-assembly.md:721
#: src/inline-assembly.md:722 src/inline-assembly.md:723
#: src/inline-assembly.md:724 src/inline-assembly.md:725
#: src/inline-assembly.md:726 src/inline-assembly.md:786
#: src/inline-assembly.md:787 src/inline-assembly.md:788
#: src/inline-assembly.md:992
msgid "Arm64EC"
msgstr ""

#: src/inline-assembly.md:550
msgid "`x[0-12]`, `x[15-22]`, `x[25-27]`, `x30`"
msgstr ""

#: src/inline-assembly.md:553
msgid "ARM (ARM/Thumb2)"
msgstr ""

#: src/inline-assembly.md:553
msgid "`r[0-12]`, `r14`"
msgstr ""

#: src/inline-assembly.md:554
msgid "ARM (Thumb1)"
msgstr ""

#: src/inline-assembly.md:554
msgid "`r[0-7]`"
msgstr ""

#: src/inline-assembly.md:555 src/inline-assembly.md:605
#: src/inline-assembly.md:867
msgid "`sreg`"
msgstr ""

#: src/inline-assembly.md:555
msgid "`s[0-31]`"
msgstr ""

#: src/inline-assembly.md:555 src/inline-assembly.md:558
#: src/inline-assembly.md:561 src/inline-assembly.md:850
#: src/inline-assembly.md:853
msgid "`t`"
msgstr ""

#: src/inline-assembly.md:556
msgid "`sreg_low16`"
msgstr ""

#: src/inline-assembly.md:556
msgid "`s[0-15]`"
msgstr ""

#: src/inline-assembly.md:557 src/inline-assembly.md:606
#: src/inline-assembly.md:868
msgid "`dreg`"
msgstr ""

#: src/inline-assembly.md:557
msgid "`d[0-31]`"
msgstr ""

#: src/inline-assembly.md:558
msgid "`dreg_low16`"
msgstr ""

#: src/inline-assembly.md:558
msgid "`d[0-15]`"
msgstr ""

#: src/inline-assembly.md:559
msgid "`dreg_low8`"
msgstr ""

#: src/inline-assembly.md:559
msgid "`d[0-8]`"
msgstr ""

#: src/inline-assembly.md:560 src/inline-assembly.md:607
#: src/inline-assembly.md:869 src/inline-assembly.md:870
msgid "`qreg`"
msgstr ""

#: src/inline-assembly.md:560
msgid "`q[0-15]`"
msgstr ""

#: src/inline-assembly.md:561
msgid "`qreg_low8`"
msgstr ""

#: src/inline-assembly.md:561
msgid "`q[0-7]`"
msgstr ""

#: src/inline-assembly.md:562
msgid "`qreg_low4`"
msgstr ""

#: src/inline-assembly.md:562
msgid "`q[0-3]`"
msgstr ""

#: src/inline-assembly.md:563
msgid "`x1`, `x[5-7]`, `x[9-15]`, `x[16-31]` (non-RV32E)"
msgstr ""

#: src/inline-assembly.md:564 src/inline-assembly.md:567
#: src/inline-assembly.md:570 src/inline-assembly.md:610
#: src/inline-assembly.md:611 src/inline-assembly.md:614
#: src/inline-assembly.md:615 src/inline-assembly.md:617
#: src/inline-assembly.md:872 src/inline-assembly.md:874
#: src/inline-assembly.md:877
msgid "`freg`"
msgstr ""

#: src/inline-assembly.md:564
msgid "`f[0-31]`"
msgstr ""

#: src/inline-assembly.md:564 src/inline-assembly.md:567
#: src/inline-assembly.md:570 src/inline-assembly.md:610
#: src/inline-assembly.md:614
msgid "`f`"
msgstr ""

#: src/inline-assembly.md:566
msgid "`$r1`, `$r[4-20]`, `$r[23,30]`"
msgstr ""

#: src/inline-assembly.md:567
msgid "`$f[0-31]`"
msgstr ""

#: src/inline-assembly.md:568
msgid "`r[0-10]`, `r[12-14]`"
msgstr ""

#: src/inline-assembly.md:569 src/inline-assembly.md:876
msgid "`reg_addr`"
msgstr ""

#: src/inline-assembly.md:569
msgid "`r[1-10]`, `r[12-14]`"
msgstr ""

#: src/inline-assembly.md:570
msgid "`f[0-15]`"
msgstr ""

#: src/inline-assembly.md:572 src/inline-assembly.md:619
msgid "`areg`"
msgstr ""

#: src/inline-assembly.md:572
msgid "`a[2-15]`"
msgstr ""

#: src/inline-assembly.md:575
msgid ""
"On x86 we treat `reg_byte` differently from `reg` because the compiler can "
"allocate `al` and `ah` separately whereas `reg` reserves the whole register."
msgstr ""

#: src/inline-assembly.md:576
msgid ""
"On x86-64 the high byte registers (e.g. `ah`) are not available in the "
"`reg_byte` register class."
msgstr ""

#: src/inline-assembly.md:577
msgid ""
"Some register classes are marked as \"Only clobbers\" which means that "
"registers in these classes cannot be used for inputs or outputs, only "
"clobbers of the form `out(<explicit register>) _` or `lateout(<explicit "
"register>) _`."
msgstr ""

#: src/inline-assembly.md:581
msgid ""
"Each register class has constraints on which value types they can be used "
"with. This is necessary because the way a value is loaded into a register "
"depends on its type. For example, on big-endian systems, loading a `i32x4` "
"and a `i8x16` into a SIMD register may result in different register contents "
"even if the byte-wise memory representation of both values is identical. The "
"availability of supported types for a particular register class may depend "
"on what target features are currently enabled."
msgstr ""

#: src/inline-assembly.md:586
msgid "Target feature"
msgstr ""

#: src/inline-assembly.md:586
msgid "Allowed types"
msgstr ""

#: src/inline-assembly.md:588 src/inline-assembly.md:589
#: src/inline-assembly.md:590 src/inline-assembly.md:599
#: src/inline-assembly.md:602 src/inline-assembly.md:604
#: src/inline-assembly.md:608 src/inline-assembly.md:609
#: src/inline-assembly.md:613 src/inline-assembly.md:616
#: src/inline-assembly.md:617 src/inline-assembly.md:840
#: src/inline-assembly.md:841 src/inline-assembly.md:848
#: src/inline-assembly.md:849 src/inline-assembly.md:850
#: src/inline-assembly.md:851 src/inline-assembly.md:855
#: src/inline-assembly.md:856 src/inline-assembly.md:859
#: src/inline-assembly.md:860 src/inline-assembly.md:866
#: src/inline-assembly.md:867 src/inline-assembly.md:868
#: src/inline-assembly.md:869 src/inline-assembly.md:871
#: src/inline-assembly.md:872 src/inline-assembly.md:873
#: src/inline-assembly.md:874 src/inline-assembly.md:875
#: src/inline-assembly.md:876 src/inline-assembly.md:877
msgid "None"
msgstr ""

#: src/inline-assembly.md:588
msgid "`i16`, `i32`, `f32`"
msgstr ""

#: src/inline-assembly.md:589
msgid "`i16`, `i32`, `f32`, `i64`, `f64`"
msgstr ""

#: src/inline-assembly.md:591
msgid ""
"`i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, "
"`f32x4`, `f64x2`"
msgstr ""

#: src/inline-assembly.md:592
msgid ""
"`i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, "
"`f32x4`, `f64x2` <br> `i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4`"
msgstr ""

#: src/inline-assembly.md:593 src/inline-assembly.md:594
msgid "`avx512f`"
msgstr ""

#: src/inline-assembly.md:593
msgid ""
"`i32`, `f32`, `i64`, `f64`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, "
"`f32x4`, `f64x2` <br> `i8x32`, `i16x16`, `i32x8`, `i64x4`, `f32x8`, `f64x4` "
"<br> `i8x64`, `i16x32`, `i32x16`, `i64x8`, `f32x16`, `f64x8`"
msgstr ""

#: src/inline-assembly.md:594
msgid "`i8`, `i16`"
msgstr ""

#: src/inline-assembly.md:595
msgid "`avx512bw`"
msgstr ""

#: src/inline-assembly.md:595
msgid "`i32`, `i64`"
msgstr ""

#: src/inline-assembly.md:596 src/inline-assembly.md:597
#: src/inline-assembly.md:598 src/inline-assembly.md:601
#: src/inline-assembly.md:612 src/inline-assembly.md:618
#: src/inline-assembly.md:619
msgid "N/A"
msgstr ""

#: src/inline-assembly.md:599 src/inline-assembly.md:602
#: src/inline-assembly.md:609
msgid "`i8`, `i16`, `i32`, `f32`, `i64`, `f64`"
msgstr ""

#: src/inline-assembly.md:600 src/inline-assembly.md:603
msgid ""
"`i8`, `i16`, `i32`, `f32`, `i64`, `f64`, <br> `i8x8`, `i16x4`, `i32x2`, "
"`i64x1`, `f32x2`, `f64x1`, <br> `i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`, "
"`f64x2`"
msgstr ""

#: src/inline-assembly.md:604 src/inline-assembly.md:608
msgid "`i8`, `i16`, `i32`, `f32`"
msgstr ""

#: src/inline-assembly.md:605 src/inline-assembly.md:606
msgid "`vfp2`"
msgstr ""

#: src/inline-assembly.md:605
msgid "`i32`, `f32`"
msgstr ""

#: src/inline-assembly.md:606
msgid "`i64`, `f64`, `i8x8`, `i16x4`, `i32x2`, `i64x1`, `f32x2`"
msgstr ""

#: src/inline-assembly.md:607
msgid "`i8x16`, `i16x8`, `i32x4`, `i64x2`, `f32x4`"
msgstr ""

#: src/inline-assembly.md:608
msgid "RISC-V32"
msgstr ""

#: src/inline-assembly.md:609
msgid "RISC-V64"
msgstr ""

#: src/inline-assembly.md:611 src/inline-assembly.md:615
#: src/inline-assembly.md:864
msgid "`d`"
msgstr ""

#: src/inline-assembly.md:613 src/inline-assembly.md:614
#: src/inline-assembly.md:615
msgid "LoongArch64"
msgstr ""

#: src/inline-assembly.md:613
msgid "`i8`, `i16`, `i32`, `i64`, `f32`, `f64`"
msgstr ""

#: src/inline-assembly.md:616
msgid "`reg`, `reg_addr`"
msgstr ""

#: src/inline-assembly.md:616
msgid "`i8`, `i16`, `i32`, `i64`"
msgstr ""

#: src/inline-assembly.md:621
msgid ""
"**Note**: For the purposes of the above table pointers, function pointers "
"and `isize`/`usize` are treated as the equivalent integer type (`i16`/`i32`/"
"`i64` depending on the target)."
msgstr ""

#: src/inline-assembly.md:628
msgid ""
"// reg is valid for `i32`, `reg_byte` is valid for `i8`, and xmm_reg is "
"valid for `__m128i`\n"
"// We can't use `tmm0` as an input or output, but we can clobber it.\n"
msgstr ""

#: src/inline-assembly.md:631
msgid "\"/* {} {} {} */\""
msgstr ""

#: src/inline-assembly.md:631
msgid "\"tmm0\""
msgstr ""

#: src/inline-assembly.md:637
msgid "// We can't pass an `__m128i` to a `reg` input\n"
msgstr ""

#: src/inline-assembly.md:639
msgid "// ERROR: type `__m128i` cannot be used with this register class\n"
msgstr ""

#: src/inline-assembly.md:647
msgid ""
"If a value is of a smaller size than the register it is allocated in then "
"the upper bits of that register will have an undefined value for inputs and "
"will be ignored for outputs. The only exception is the `freg` register class "
"on RISC-V where `f32` values are NaN-boxed in a `f64` as required by the "
"RISC-V architecture."
msgstr ""

#: src/inline-assembly.md:653
msgid "// Moving a 32-bit value into a 64-bit value, oops.\n"
msgstr ""

#: src/inline-assembly.md:655
msgid "// rustc warns about this behavior\n"
msgstr ""

#: src/inline-assembly.md:656
msgid "// top 32-bits are indeterminate\n"
msgstr ""

#: src/inline-assembly.md:658
msgid "// This assertion is not guaranteed to succeed\n"
msgstr ""

#: src/inline-assembly.md:659
msgid "// However, this one will succeed\n"
msgstr ""

#: src/inline-assembly.md:665
msgid ""
"When separate input and output expressions are specified for an `inout` "
"operand, both expressions must have the same type. The only exception is if "
"both operands are pointers or integers, in which case they are only required "
"to have the same size. This restriction exists because the register "
"allocators in LLVM and GCC sometimes cannot handle tied operands with "
"different types."
msgstr ""

#: src/inline-assembly.md:670
msgid "// Pointers and integers can mix (as long as they are the same size)\n"
msgstr ""

#: src/inline-assembly.md:673
msgid "// Transmute an `isize` to a `*mut ()`, using inline assembly magic\n"
msgstr ""

#: src/inline-assembly.md:675
msgid "\"/*{}*/\""
msgstr ""

#: src/inline-assembly.md:676
msgid "// Extremely roundabout way to make a null pointer\n"
msgstr ""

#: src/inline-assembly.md:683
msgid "// But we can't reinterpret an `i32` to an `f32` like this\n"
msgstr ""

#: src/inline-assembly.md:685
msgid "// ERROR: incompatible types for asm inout argument\n"
msgstr ""

#: src/inline-assembly.md:693
msgid "Register names"
msgstr ""

#: src/inline-assembly.md:697
msgid ""
"Some registers have multiple names. These are all treated by the compiler as "
"identical to the base register name. Here is the list of all supported "
"register aliases:"
msgstr ""

#: src/inline-assembly.md:701
msgid "Base register"
msgstr ""

#: src/inline-assembly.md:701
msgid "Aliases"
msgstr ""

#: src/inline-assembly.md:703 src/inline-assembly.md:845
msgid "`ax`"
msgstr ""

#: src/inline-assembly.md:703
msgid "`eax`, `rax`"
msgstr ""

#: src/inline-assembly.md:704
msgid "`bx`"
msgstr ""

#: src/inline-assembly.md:704
msgid "`ebx`, `rbx`"
msgstr ""

#: src/inline-assembly.md:705
msgid "`cx`"
msgstr ""

#: src/inline-assembly.md:705
msgid "`ecx`, `rcx`"
msgstr ""

#: src/inline-assembly.md:706
msgid "`dx`"
msgstr ""

#: src/inline-assembly.md:706
msgid "`edx`, `rdx`"
msgstr ""

#: src/inline-assembly.md:707
msgid "`si`"
msgstr ""

#: src/inline-assembly.md:707
msgid "`esi`, `rsi`"
msgstr ""

#: src/inline-assembly.md:708
msgid "`di`"
msgstr ""

#: src/inline-assembly.md:708
msgid "`edi`, `rdi`"
msgstr ""

#: src/inline-assembly.md:709
msgid "`bp`"
msgstr ""

#: src/inline-assembly.md:709
msgid "`bpl`, `ebp`, `rbp`"
msgstr ""

#: src/inline-assembly.md:710 src/inline-assembly.md:718
#: src/inline-assembly.md:724 src/inline-assembly.md:733
#: src/inline-assembly.md:738
msgid "`sp`"
msgstr ""

#: src/inline-assembly.md:710
msgid "`spl`, `esp`, `rsp`"
msgstr ""

#: src/inline-assembly.md:711 src/inline-assembly.md:732
#: src/inline-assembly.md:783
msgid "`ip`"
msgstr ""

#: src/inline-assembly.md:711
msgid "`eip`, `rip`"
msgstr ""

#: src/inline-assembly.md:712
msgid "`st(0)`"
msgstr ""

#: src/inline-assembly.md:712
msgid "`st`"
msgstr ""

#: src/inline-assembly.md:713
msgid "`r[8-15]`"
msgstr ""

#: src/inline-assembly.md:713
msgid "`r[8-15]b`, `r[8-15]w`, `r[8-15]d`"
msgstr ""

#: src/inline-assembly.md:714
msgid "`xmm[0-31]`"
msgstr ""

#: src/inline-assembly.md:714
msgid "`ymm[0-31]`, `zmm[0-31]`"
msgstr ""

#: src/inline-assembly.md:715 src/inline-assembly.md:721
msgid "`w[0-30]`"
msgstr ""

#: src/inline-assembly.md:716 src/inline-assembly.md:722
msgid "`x29`"
msgstr ""

#: src/inline-assembly.md:716 src/inline-assembly.md:722
#: src/inline-assembly.md:731
msgid "`fp`"
msgstr ""

#: src/inline-assembly.md:717 src/inline-assembly.md:723
msgid "`x30`"
msgstr ""

#: src/inline-assembly.md:717 src/inline-assembly.md:723
#: src/inline-assembly.md:734
msgid "`lr`"
msgstr ""

#: src/inline-assembly.md:718 src/inline-assembly.md:724
msgid "`wsp`"
msgstr ""

#: src/inline-assembly.md:719 src/inline-assembly.md:725
#: src/inline-assembly.md:784 src/inline-assembly.md:786
msgid "`xzr`"
msgstr ""

#: src/inline-assembly.md:719 src/inline-assembly.md:725
msgid "`wzr`"
msgstr ""

#: src/inline-assembly.md:720
msgid "`b[0-31]`, `h[0-31]`, `s[0-31]`, `d[0-31]`, `q[0-31]`"
msgstr ""

#: src/inline-assembly.md:726
msgid "`b[0-15]`, `h[0-15]`, `s[0-15]`, `d[0-15]`, `q[0-15]`"
msgstr ""

#: src/inline-assembly.md:727
msgid "`r[0-3]`"
msgstr ""

#: src/inline-assembly.md:727
msgid "`a[1-4]`"
msgstr ""

#: src/inline-assembly.md:728
msgid "`r[4-9]`"
msgstr ""

#: src/inline-assembly.md:728
msgid "`v[1-6]`"
msgstr ""

#: src/inline-assembly.md:729 src/inline-assembly.md:790
msgid "`r9`"
msgstr ""

#: src/inline-assembly.md:729
msgid "`rfp`"
msgstr ""

#: src/inline-assembly.md:730
msgid "`r10`"
msgstr ""

#: src/inline-assembly.md:730
msgid "`sl`"
msgstr ""

#: src/inline-assembly.md:731
msgid "`r11`"
msgstr ""

#: src/inline-assembly.md:732
msgid "`r12`"
msgstr ""

#: src/inline-assembly.md:733
msgid "`r13`"
msgstr ""

#: src/inline-assembly.md:734
msgid "`r14`"
msgstr ""

#: src/inline-assembly.md:735
msgid "`r15`"
msgstr ""

#: src/inline-assembly.md:735 src/inline-assembly.md:789
msgid "`pc`"
msgstr ""

#: src/inline-assembly.md:736 src/inline-assembly.md:791
#: src/inline-assembly.md:856 src/inline-assembly.md:858
msgid "`x0`"
msgstr ""

#: src/inline-assembly.md:736
msgid "`zero`"
msgstr ""

#: src/inline-assembly.md:737 src/inline-assembly.md:871
msgid "`x1`"
msgstr ""

#: src/inline-assembly.md:737
msgid "`ra`"
msgstr ""

#: src/inline-assembly.md:738
msgid "`x2`"
msgstr ""

#: src/inline-assembly.md:739
msgid "`x3`"
msgstr ""

#: src/inline-assembly.md:739
msgid "`gp`"
msgstr ""

#: src/inline-assembly.md:740
msgid "`x4`"
msgstr ""

#: src/inline-assembly.md:740
msgid "`tp`"
msgstr ""

#: src/inline-assembly.md:741
msgid "`x[5-7]`"
msgstr ""

#: src/inline-assembly.md:741
msgid "`t[0-2]`"
msgstr ""

#: src/inline-assembly.md:742
msgid "`x8`"
msgstr ""

#: src/inline-assembly.md:742
msgid "`fp`, `s0`"
msgstr ""

#: src/inline-assembly.md:743
msgid "`x9`"
msgstr ""

#: src/inline-assembly.md:743
msgid "`s1`"
msgstr ""

#: src/inline-assembly.md:744
msgid "`x[10-17]`"
msgstr ""

#: src/inline-assembly.md:744
msgid "`a[0-7]`"
msgstr ""

#: src/inline-assembly.md:745
msgid "`x[18-27]`"
msgstr ""

#: src/inline-assembly.md:745
msgid "`s[2-11]`"
msgstr ""

#: src/inline-assembly.md:746
msgid "`x[28-31]`"
msgstr ""

#: src/inline-assembly.md:746
msgid "`t[3-6]`"
msgstr ""

#: src/inline-assembly.md:747
msgid "`f[0-7]`"
msgstr ""

#: src/inline-assembly.md:747
msgid "`ft[0-7]`"
msgstr ""

#: src/inline-assembly.md:748
msgid "`f[8-9]`"
msgstr ""

#: src/inline-assembly.md:748
msgid "`fs[0-1]`"
msgstr ""

#: src/inline-assembly.md:749
msgid "`f[10-17]`"
msgstr ""

#: src/inline-assembly.md:749
msgid "`fa[0-7]`"
msgstr ""

#: src/inline-assembly.md:750
msgid "`f[18-27]`"
msgstr ""

#: src/inline-assembly.md:750
msgid "`fs[2-11]`"
msgstr ""

#: src/inline-assembly.md:751
msgid "`f[28-31]`"
msgstr ""

#: src/inline-assembly.md:751
msgid "`ft[8-11]`"
msgstr ""

#: src/inline-assembly.md:752
msgid "`$r0`"
msgstr ""

#: src/inline-assembly.md:752
msgid "`$zero`"
msgstr ""

#: src/inline-assembly.md:753 src/inline-assembly.md:873
msgid "`$r1`"
msgstr ""

#: src/inline-assembly.md:753
msgid "`$ra`"
msgstr ""

#: src/inline-assembly.md:754
msgid "`$r2`"
msgstr ""

#: src/inline-assembly.md:754
msgid "`$tp`"
msgstr ""

#: src/inline-assembly.md:755
msgid "`$r3`"
msgstr ""

#: src/inline-assembly.md:755
msgid "`$sp`"
msgstr ""

#: src/inline-assembly.md:756
msgid "`$r[4-11]`"
msgstr ""

#: src/inline-assembly.md:756
msgid "`$a[0-7]`"
msgstr ""

#: src/inline-assembly.md:757
msgid "`$r[12-20]`"
msgstr ""

#: src/inline-assembly.md:757
msgid "`$t[0-8]`"
msgstr ""

#: src/inline-assembly.md:758 src/inline-assembly.md:795
msgid "`$r21`"
msgstr ""

#: src/inline-assembly.md:759
msgid "`$r22`"
msgstr ""

#: src/inline-assembly.md:759
msgid "`$fp`, `$s9`"
msgstr ""

#: src/inline-assembly.md:760
msgid "`$r[23-31]`"
msgstr ""

#: src/inline-assembly.md:760
msgid "`$s[0-8]`"
msgstr ""

#: src/inline-assembly.md:761
msgid "`$f[0-7]`"
msgstr ""

#: src/inline-assembly.md:761
msgid "`$fa[0-7]`"
msgstr ""

#: src/inline-assembly.md:762
msgid "`$f[8-23]`"
msgstr ""

#: src/inline-assembly.md:762
msgid "`$ft[0-15]`"
msgstr ""

#: src/inline-assembly.md:763
msgid "`$f[24-31]`"
msgstr ""

#: src/inline-assembly.md:763
msgid "`$fs[0-7]`"
msgstr ""

#: src/inline-assembly.md:767
msgid "// rax is an alias for eax and ax\n"
msgstr ""

#: src/inline-assembly.md:775
msgid "Some registers cannot be used for input or output operands:"
msgstr ""

#: src/inline-assembly.md:777
msgid "Unsupported register"
msgstr ""

#: src/inline-assembly.md:777
msgid "Reason"
msgstr ""

#: src/inline-assembly.md:779 src/inline-assembly.md:780
#: src/inline-assembly.md:782
msgid "All"
msgstr ""

#: src/inline-assembly.md:779
msgid "`sp`, `r15` (s390x)"
msgstr ""

#: src/inline-assembly.md:779
msgid ""
"The stack pointer must be restored to its original value at the end of an "
"asm code block."
msgstr ""

#: src/inline-assembly.md:780
msgid ""
"`bp` (x86), `x29` (AArch64 and Arm64EC), `x8` (RISC-V), `$fp` (LoongArch), "
"`r11` (s390x)"
msgstr ""

#: src/inline-assembly.md:780
msgid "The frame pointer cannot be used as an input or output."
msgstr ""

#: src/inline-assembly.md:781
msgid "`r7` or `r11`"
msgstr ""

#: src/inline-assembly.md:781
msgid ""
"On ARM the frame pointer can be either `r7` or `r11` depending on the "
"target. The frame pointer cannot be used as an input or output."
msgstr ""

#: src/inline-assembly.md:782
msgid ""
"`si` (x86-32), `bx` (x86-64), `r6` (ARM), `x19` (AArch64 and Arm64EC), `x9` "
"(RISC-V), `$s8` (LoongArch)"
msgstr ""

#: src/inline-assembly.md:782
msgid ""
"This is used internally by LLVM as a \"base pointer\" for functions with "
"complex stack frames."
msgstr ""

#: src/inline-assembly.md:783 src/inline-assembly.md:789
msgid "This is the program counter, not a real register."
msgstr ""

#: src/inline-assembly.md:784 src/inline-assembly.md:786
#: src/inline-assembly.md:791 src/inline-assembly.md:793
msgid "This is a constant zero register which can't be modified."
msgstr ""

#: src/inline-assembly.md:785 src/inline-assembly.md:787
msgid "`x18`"
msgstr ""

#: src/inline-assembly.md:785
msgid "This is an OS-reserved register on some AArch64 targets."
msgstr ""

#: src/inline-assembly.md:787
msgid "This is an OS-reserved register."
msgstr ""

#: src/inline-assembly.md:788
msgid "`x13`, `x14`, `x23`, `x24`, `x28`, `v[16-31]`, `p[0-15]`, `ffr`"
msgstr ""

#: src/inline-assembly.md:788
msgid "These are AArch64 registers that are not supported for Arm64EC."
msgstr ""

#: src/inline-assembly.md:790
msgid "This is an OS-reserved register on some ARM targets."
msgstr ""

#: src/inline-assembly.md:792
msgid "`gp`, `tp`"
msgstr ""

#: src/inline-assembly.md:792
msgid "These registers are reserved and cannot be used as inputs or outputs."
msgstr ""

#: src/inline-assembly.md:793
msgid "`$r0` or `$zero`"
msgstr ""

#: src/inline-assembly.md:794
msgid "`$r2` or `$tp`"
msgstr ""

#: src/inline-assembly.md:794
msgid "This is reserved for TLS."
msgstr ""

#: src/inline-assembly.md:795
msgid "This is reserved by the ABI."
msgstr ""

#: src/inline-assembly.md:796
msgid "`c[0-15]`"
msgstr ""

#: src/inline-assembly.md:796
msgid "Reserved by the kernel."
msgstr ""

#: src/inline-assembly.md:797
msgid "`a[0-1]`"
msgstr ""

#: src/inline-assembly.md:797
msgid "Reserved for system use."
msgstr ""

#: src/inline-assembly.md:800
msgid "// bp is reserved\n"
msgstr ""

#: src/inline-assembly.md:802
msgid "\"bp\""
msgstr ""

#: src/inline-assembly.md:802
msgid ""
"// ERROR: invalid register `bp`: the frame pointer cannot be used as an "
"operand for inline asm\n"
msgstr ""

#: src/inline-assembly.md:810
msgid ""
"The frame pointer and base pointer registers are reserved for internal use "
"by LLVM. While `asm!` statements cannot explicitly specify the use of "
"reserved registers, in some cases LLVM will allocate one of these reserved "
"registers for `reg` operands. Assembly code making use of reserved registers "
"should be careful since `reg` operands may use the same registers."
msgstr ""

#: src/inline-assembly.md:814
msgid "Template modifiers"
msgstr ""

#: src/inline-assembly.md:818
msgid ""
"The placeholders can be augmented by modifiers which are specified after the "
"`:` in the curly braces. These modifiers do not affect register allocation, "
"but change the way operands are formatted when inserted into the template "
"string."
msgstr ""

#: src/inline-assembly.md:823
msgid "Only one modifier is allowed per template placeholder."
msgstr ""

#: src/inline-assembly.md:826
msgid "// We can't specify both `r` and `e` at the same time.\n"
msgstr ""

#: src/inline-assembly.md:828
msgid "\"/* {:er}\""
msgstr ""

#: src/inline-assembly.md:828
msgid "// ERROR: asm template modifier must be a single character\n"
msgstr ""

#: src/inline-assembly.md:836
msgid ""
"The supported modifiers are a subset of LLVM's (and GCC's) [asm template "
"argument modifiers](http://llvm.org/docs/LangRef.html#asm-template-argument-"
"modifiers), but do not use the same letter codes."
msgstr ""

#: src/inline-assembly.md:838
msgid "Modifier"
msgstr ""

#: src/inline-assembly.md:838
msgid "Example output"
msgstr ""

#: src/inline-assembly.md:838
msgid "LLVM modifier"
msgstr ""

#: src/inline-assembly.md:840 src/inline-assembly.md:846
msgid "`eax`"
msgstr ""

#: src/inline-assembly.md:840 src/inline-assembly.md:846
msgid "`k`"
msgstr ""

#: src/inline-assembly.md:841 src/inline-assembly.md:847
msgid "`rax`"
msgstr ""

#: src/inline-assembly.md:842 src/inline-assembly.md:843
msgid "`l`"
msgstr ""

#: src/inline-assembly.md:842 src/inline-assembly.md:843
msgid "`al`"
msgstr ""

#: src/inline-assembly.md:844 src/inline-assembly.md:862
msgid "`h`"
msgstr ""

#: src/inline-assembly.md:844
msgid "`ah`"
msgstr ""

#: src/inline-assembly.md:846
msgid "`e`"
msgstr ""

#: src/inline-assembly.md:848
msgid "`al` / `ah`"
msgstr ""

#: src/inline-assembly.md:849 src/inline-assembly.md:852
msgid "`xmm0`"
msgstr ""

#: src/inline-assembly.md:850 src/inline-assembly.md:853
msgid "`ymm0`"
msgstr ""

#: src/inline-assembly.md:851 src/inline-assembly.md:854
msgid "`zmm0`"
msgstr ""

#: src/inline-assembly.md:851 src/inline-assembly.md:854
msgid "`g`"
msgstr ""

#: src/inline-assembly.md:852 src/inline-assembly.md:853
#: src/inline-assembly.md:854
msgid "`*mm_reg`"
msgstr ""

#: src/inline-assembly.md:853
msgid "`y`"
msgstr ""

#: src/inline-assembly.md:854
msgid "`z`"
msgstr ""

#: src/inline-assembly.md:855
msgid "`k1`"
msgstr ""

#: src/inline-assembly.md:856 src/inline-assembly.md:857
#: src/inline-assembly.md:858 src/inline-assembly.md:859
#: src/inline-assembly.md:860 src/inline-assembly.md:861
#: src/inline-assembly.md:862 src/inline-assembly.md:863
#: src/inline-assembly.md:864 src/inline-assembly.md:865
msgid "AArch64/Arm64EC"
msgstr ""

#: src/inline-assembly.md:857
msgid "`w0`"
msgstr ""

#: src/inline-assembly.md:859 src/inline-assembly.md:860
msgid "`v0`"
msgstr ""

#: src/inline-assembly.md:861
msgid "`b0`"
msgstr ""

#: src/inline-assembly.md:862
msgid "`h0`"
msgstr ""

#: src/inline-assembly.md:863
msgid "`s`"
msgstr ""

#: src/inline-assembly.md:863 src/inline-assembly.md:867
msgid "`s0`"
msgstr ""

#: src/inline-assembly.md:864 src/inline-assembly.md:868
msgid "`d0`"
msgstr ""

#: src/inline-assembly.md:865 src/inline-assembly.md:869
msgid "`q0`"
msgstr ""

#: src/inline-assembly.md:866
msgid "`r0`"
msgstr ""

#: src/inline-assembly.md:868
msgid "`P`"
msgstr ""

#: src/inline-assembly.md:870
msgid "`e` / `f`"
msgstr ""

#: src/inline-assembly.md:870
msgid "`d0` / `d1`"
msgstr ""

#: src/inline-assembly.md:872
msgid "`f0`"
msgstr ""

#: src/inline-assembly.md:874
msgid "`$f0`"
msgstr ""

#: src/inline-assembly.md:875
msgid "`%r0`"
msgstr ""

#: src/inline-assembly.md:876
msgid "`%r1`"
msgstr ""

#: src/inline-assembly.md:877
msgid "`%f0`"
msgstr ""

#: src/inline-assembly.md:880
msgid ""
"on ARM `e` / `f`: this prints the low or high doubleword register name of a "
"NEON quad (128-bit) register."
msgstr ""

#: src/inline-assembly.md:881
msgid ""
"on x86: our behavior for `reg` with no modifiers differs from what GCC does. "
"GCC will infer the modifier based on the operand value type, while we "
"default to the full register size."
msgstr ""

#: src/inline-assembly.md:883
msgid ""
"on x86 `xmm_reg`: the `x`, `t` and `g` LLVM modifiers are not yet "
"implemented in LLVM (they are supported by GCC only), but this should be a "
"simple change."
msgstr ""

#: src/inline-assembly.md:888
msgid ""
"// u16::swap_bytes using `xchg`\n"
"// low half of `{x}` is referred to by `{x:l}`, and the high half by `{x:h}"
"`\n"
msgstr ""

#: src/inline-assembly.md:891
msgid "\"xchg {x:l}, {x:h}\""
msgstr ""

#: src/inline-assembly.md:898
msgid ""
"As stated in the previous section, passing an input value smaller than the "
"register width will result in the upper bits of the register containing "
"undefined values. This is not a problem if the inline asm only accesses the "
"lower bits of the register, which can be done by using a template modifier "
"to use a subregister name in the asm code (e.g. `ax` instead of `rax`). "
"Since this an easy pitfall, the compiler will suggest a template modifier to "
"use where appropriate given the input type. If all references to an operand "
"already have modifiers then the warning is suppressed for that operand."
msgstr ""

#: src/inline-assembly.md:907
msgid "ABI clobbers"
msgstr ""

#: src/inline-assembly.md:911
msgid ""
"The `clobber_abi` keyword can be used to apply a default set of clobbers to "
"an `asm!` block. This will automatically insert the necessary clobber "
"constraints as needed for calling a function with a particular calling "
"convention: if the calling convention does not fully preserve the value of a "
"register across a call then `lateout(\"...\") _` is implicitly added to the "
"operands list (where the `...` is replaced by the register's name)."
msgstr ""

#: src/inline-assembly.md:918
msgid ""
"// To call a function, we have to inform the compiler that we're clobbering\n"
"// callee saved registers\n"
msgstr ""

#: src/inline-assembly.md:928
msgid ""
"`clobber_abi` may be specified any number of times. It will insert a clobber "
"for all unique registers in the union of all specified calling conventions."
msgstr ""

#: src/inline-assembly.md:932
msgid "\"sysv64\""
msgstr ""

#: src/inline-assembly.md:933
msgid "\"win64\""
msgstr ""

#: src/inline-assembly.md:935
msgid ""
"// We can even call multiple functions with different conventions and\n"
"// different saved registers\n"
msgstr ""

#: src/inline-assembly.md:955
msgid ""
"Generic register class outputs are disallowed by the compiler when "
"`clobber_abi` is used: all outputs must specify an explicit register."
msgstr ""

#: src/inline-assembly.md:961
msgid "// explicit registers must be used to not accidentally overlap.\n"
msgstr ""

#: src/inline-assembly.md:971
msgid ""
"// ERROR: asm with `clobber_abi` must specify explicit registers for "
"outputs\n"
msgstr ""

#: src/inline-assembly.md:980
msgid ""
"Explicit register outputs have precedence over the implicit clobbers "
"inserted by `clobber_abi`: a clobber will only be inserted for a register if "
"that register is not used as an output."
msgstr ""

#: src/inline-assembly.md:984
msgid "The following ABIs can be used with `clobber_abi`:"
msgstr ""

#: src/inline-assembly.md:986
msgid "ABI name"
msgstr ""

#: src/inline-assembly.md:986
msgid "Clobbered registers"
msgstr ""

#: src/inline-assembly.md:988
msgid ""
"`\"C\"`, `\"system\"`, `\"efiapi\"`, `\"cdecl\"`, `\"stdcall\"`, "
"`\"fastcall\"`"
msgstr ""

#: src/inline-assembly.md:988
msgid "`ax`, `cx`, `dx`, `xmm[0-7]`, `mm[0-7]`, `k[0-7]`, `st([0-7])`"
msgstr ""

#: src/inline-assembly.md:989
msgid "`\"C\"`, `\"system\"` (on Windows), `\"efiapi\"`, `\"win64\"`"
msgstr ""

#: src/inline-assembly.md:989
msgid ""
"`ax`, `cx`, `dx`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `k[0-7]`, `st([0-7])`, "
"`tmm[0-7]`"
msgstr ""

#: src/inline-assembly.md:990
msgid "`\"C\"`, `\"system\"` (on non-Windows), `\"sysv64\"`"
msgstr ""

#: src/inline-assembly.md:990
msgid ""
"`ax`, `cx`, `dx`, `si`, `di`, `r[8-11]`, `xmm[0-31]`, `mm[0-7]`, `k[0-7]`, "
"`st([0-7])`, `tmm[0-7]`"
msgstr ""

#: src/inline-assembly.md:991 src/inline-assembly.md:994
msgid "`\"C\"`, `\"system\"`, `\"efiapi\"`"
msgstr ""

#: src/inline-assembly.md:991
msgid "`x[0-17]`, `x18`\\*, `x30`, `v[0-31]`, `p[0-15]`, `ffr`"
msgstr ""

#: src/inline-assembly.md:992 src/inline-assembly.md:995
#: src/inline-assembly.md:996
msgid "`\"C\"`, `\"system\"`"
msgstr ""

#: src/inline-assembly.md:992
msgid "`x[0-12]`, `x[15-17]`, `x30`, `v[0-15]`"
msgstr ""

#: src/inline-assembly.md:993
msgid "`\"C\"`, `\"system\"`, `\"efiapi\"`, `\"aapcs\"`"
msgstr ""

#: src/inline-assembly.md:993
msgid "`r[0-3]`, `r12`, `r14`, `s[0-15]`, `d[0-7]`, `d[16-31]`"
msgstr ""

#: src/inline-assembly.md:994
msgid ""
"`x1`, `x[5-7]`, `x[10-17]`\\*, `x[28-31]`\\*, `f[0-7]`, `f[10-17]`, "
"`f[28-31]`, `v[0-31]`"
msgstr ""

#: src/inline-assembly.md:995
msgid "`$r1`, `$r[4-20]`, `$f[0-23]`"
msgstr ""

#: src/inline-assembly.md:996
msgid "`r[0-5]`, `r14`, `f[0-7]`, `v[0-31]`, `a[2-15]`"
msgstr ""

#: src/inline-assembly.md:998
msgid "Notes:"
msgstr ""

#: src/inline-assembly.md:999
msgid ""
"On AArch64 `x18` only included in the clobber list if it is not considered "
"as a reserved register on the target."
msgstr ""

#: src/inline-assembly.md:1000
msgid ""
"On RISC-V `x[16-17]` and `x[28-31]` only included in the clobber list if "
"they are not considered as reserved registers on the target."
msgstr ""

#: src/inline-assembly.md:1002
msgid ""
"The list of clobbered registers for each ABI is updated in rustc as "
"architectures gain new registers: this ensures that `asm!` clobbers will "
"continue to be correct when LLVM starts using these new registers in its "
"generated code."
msgstr ""

#: src/inline-assembly.md:1006
msgid "Options"
msgstr ""

#: src/inline-assembly.md:1010
msgid ""
"Flags are used to further influence the behavior of the inline assembly "
"block. Currently the following options are defined:"
msgstr ""

#: src/inline-assembly.md:1015
msgid ""
"`pure`: The `asm!` block has no side effects, must eventually return, and "
"its outputs depend only on its direct inputs (i.e. the values themselves, "
"not what they point to) or values read from memory (unless the `nomem` "
"options is also set). This allows the compiler to execute the `asm!` block "
"fewer times than specified in the program (e.g. by hoisting it out of a "
"loop) or even eliminate it entirely if the outputs are not used. The `pure` "
"option must be combined with either the `nomem` or `readonly` options, "
"otherwise a compile-time error is emitted."
msgstr ""

#: src/inline-assembly.md:1022
msgid ""
"// pure can be used to optimize by assuming the assembly has no side "
"effects\n"
msgstr ""

#: src/inline-assembly.md:1032
msgid ""
"// Either nomem or readonly must be satisfied, to indicate whether or not\n"
"// memory is allowed to be read\n"
msgstr ""

#: src/inline-assembly.md:1035
msgid ""
"// ERROR: the `pure` option must be combined with either `nomem` or "
"`readonly`\n"
msgstr ""

#: src/inline-assembly.md:1044
msgid ""
"`nomem`: The `asm!` block does not read from or write to any memory "
"accessible outside of the `asm!` block. This allows the compiler to cache "
"the values of modified global variables in registers across the `asm!` block "
"since it knows that they are not read or written to by the `asm!`. The "
"compiler also assumes that this `asm!` block does not perform any kind of "
"synchronization with other threads, e.g. via fences."
msgstr ""

#: src/inline-assembly.md:1052
msgid "// Accessing memory from a nomem asm block is disallowed\n"
msgstr ""

#: src/inline-assembly.md:1055
msgid "\"mov {val:e}, dword ptr [{ptr}]\""
msgstr ""

#: src/inline-assembly.md:1061
msgid "// Writing to memory is also undefined behaviour\n"
msgstr ""

#: src/inline-assembly.md:1064
msgid "\"mov  dword ptr [{ptr}], {val:e}\""
msgstr ""

#: src/inline-assembly.md:1076
msgid ""
"// If we allocate our own memory, such as via `push`, however.\n"
"// we can still use it\n"
msgstr ""

#: src/inline-assembly.md:1080 src/inline-assembly.md:1127
msgid "\"push {x}\""
msgstr ""

#: src/inline-assembly.md:1080 src/inline-assembly.md:1127
msgid "\"add qword ptr [rsp], 1\""
msgstr ""

#: src/inline-assembly.md:1080 src/inline-assembly.md:1127
msgid "\"pop {x}\""
msgstr ""

#: src/inline-assembly.md:1091
msgid ""
"`readonly`: The `asm!` block does not write to any memory accessible outside "
"of the `asm!` block. This allows the compiler to cache the values of "
"unmodified global variables in registers across the `asm!` block since it "
"knows that they are not written to by the `asm!`. The compiler also assumes "
"that this `asm!` block does not perform any kind of synchronization with "
"other threads, e.g. via fences."
msgstr ""

#: src/inline-assembly.md:1098
msgid "// We cannot modify memory in readonly\n"
msgstr ""

#: src/inline-assembly.md:1101
msgid "\"mov dword ptr[{}], 1\""
msgstr ""

#: src/inline-assembly.md:1109
msgid "// We can still read from it, though\n"
msgstr ""

#: src/inline-assembly.md:1112
msgid "\"mov {x}, qword ptr [{x}]\""
msgstr ""

#: src/inline-assembly.md:1124
msgid "// Same exception applies as with nomem.\n"
msgstr ""

#: src/inline-assembly.md:1138
msgid ""
"`preserves_flags`: The `asm!` block does not modify the flags register "
"(defined in the rules below). This allows the compiler to avoid recomputing "
"the condition flags after the `asm!` block."
msgstr ""

#: src/inline-assembly.md:1143
msgid ""
"`noreturn`: The `asm!` block never returns, and its return type is defined "
"as `!` (never). Behavior is undefined if execution falls through past the "
"end of the asm code. A `noreturn` asm block behaves just like a function "
"which doesn't return; notably, local variables in scope are not dropped "
"before it is invoked."
msgstr ""

#: src/inline-assembly.md:1151
msgid ""
"// We can use an instruction to trap execution inside of a noreturn block\n"
msgstr ""

#: src/inline-assembly.md:1154
msgid "\"no return\""
msgstr ""

#: src/inline-assembly.md:1160
msgid ""
"// You are responsible for not falling past the end of a noreturn asm block\n"
msgstr ""

#: src/inline-assembly.md:1168
msgid ""
"`nostack`: The `asm!` block does not push data to the stack, or write to the "
"stack red-zone (if supported by the target). If this option is _not_ used "
"then the stack pointer is guaranteed to be suitably aligned (according to "
"the target ABI) for a function call."
msgstr ""

#: src/inline-assembly.md:1173
msgid "// `push` and `pop` are UB when used with nostack\n"
msgstr ""

#: src/inline-assembly.md:1175
msgid "\"push rax\""
msgstr ""

#: src/inline-assembly.md:1175
msgid "\"pop rax\""
msgstr ""

#: src/inline-assembly.md:1181
msgid ""
"`att_syntax`: This option is only valid on x86, and causes the assembler to "
"use the `.att_syntax prefix` mode of the GNU assembler. Register operands "
"are substituted in with a leading `%`."
msgstr ""

#: src/inline-assembly.md:1187
msgid "// We need to use AT&T Syntax here. src, dest order for operands\n"
msgstr ""

#: src/inline-assembly.md:1190
msgid "\"mov {y:e}, {x:e}\""
msgstr ""

#: src/inline-assembly.md:1202
msgid ""
"`raw`: This causes the template string to be parsed as a raw assembly "
"string, with no special handling for `{` and `}`. This is primarily useful "
"when including raw assembly code from an external file using `include_str!`."
msgstr ""

#: src/inline-assembly.md:1207
msgid "The compiler performs some additional checks on options:"
msgstr ""

#: src/inline-assembly.md:1211
msgid ""
"The `nomem` and `readonly` options are mutually exclusive: it is a compile-"
"time error to specify both."
msgstr ""

#: src/inline-assembly.md:1214
msgid ""
"// nomem is strictly stronger than readonly, they can't be specified "
"together\n"
msgstr ""

#: src/inline-assembly.md:1216
msgid "// ERROR: the `nomem` and `readonly` options are mutually exclusive\n"
msgstr ""

#: src/inline-assembly.md:1224
msgid ""
"It is a compile-time error to specify `pure` on an asm block with no outputs "
"or only discarded outputs (`_`)."
msgstr ""

#: src/inline-assembly.md:1227
msgid "// pure blocks need at least one output\n"
msgstr ""

#: src/inline-assembly.md:1229
msgid "// ERROR: asm with the `pure` option must have at least one output\n"
msgstr ""

#: src/inline-assembly.md:1237
msgid ""
"It is a compile-time error to specify `noreturn` on an asm block with "
"outputs."
msgstr ""

#: src/inline-assembly.md:1241
msgid "// noreturn can't have outputs\n"
msgstr ""

#: src/inline-assembly.md:1243
msgid "\"mov {:e}, 1\""
msgstr ""

#: src/inline-assembly.md:1243
msgid "// ERROR: asm outputs are not allowed with the `noreturn` option\n"
msgstr ""

#: src/inline-assembly.md:1251
msgid ""
"`global_asm!` only supports the `att_syntax` and `raw` options. The "
"remaining options are not meaningful for global-scope inline assembly"
msgstr ""

#: src/inline-assembly.md:1256
msgid "// nomem is useless on global_asm!\n"
msgstr ""

#: src/inline-assembly.md:1264
msgid "Rules for inline assembly"
msgstr ""

#: src/inline-assembly.md:1268
msgid ""
"To avoid undefined behavior, these rules must be followed when using "
"function-scope inline assembly (`asm!`):"
msgstr ""

#: src/inline-assembly.md:1272
msgid ""
"Any registers not specified as inputs will contain an undefined value on "
"entry to the asm block."
msgstr ""

#: src/inline-assembly.md:1273
msgid ""
"An \"undefined value\" in the context of inline assembly means that the "
"register can (non-deterministically) have any one of the possible values "
"allowed by the architecture. Notably it is not the same as an LLVM `undef` "
"which can have a different value every time you read it (since such a "
"concept does not exist in assembly code)."
msgstr ""

#: src/inline-assembly.md:1278
msgid ""
"Any registers not specified as outputs must have the same value upon exiting "
"the asm block as they had on entry, otherwise behavior is undefined."
msgstr ""

#: src/inline-assembly.md:1279
msgid ""
"This only applies to registers which can be specified as an input or output. "
"Other registers follow target-specific rules."
msgstr ""

#: src/inline-assembly.md:1281
msgid ""
"Note that a `lateout` may be allocated to the same register as an `in`, in "
"which case this rule does not apply. Code should not rely on this however "
"since it depends on the results of register allocation."
msgstr ""

#: src/inline-assembly.md:1286
msgid "Behavior is undefined if execution unwinds out of an asm block."
msgstr ""

#: src/inline-assembly.md:1287
msgid ""
"This also applies if the assembly code calls a function which then unwinds."
msgstr ""

#: src/inline-assembly.md:1291
msgid ""
"The set of memory locations that assembly code is allowed to read and write "
"are the same as those allowed for an FFI function."
msgstr ""

#: src/inline-assembly.md:1292
msgid "Refer to the unsafe code guidelines for the exact rules."
msgstr ""

#: src/inline-assembly.md:1293
msgid "If the `readonly` option is set, then only memory reads are allowed."
msgstr ""

#: src/inline-assembly.md:1294
msgid ""
"If the `nomem` option is set then no reads or writes to memory are allowed."
msgstr ""

#: src/inline-assembly.md:1295
msgid ""
"These rules do not apply to memory which is private to the asm code, such as "
"stack space allocated within the asm block."
msgstr ""

#: src/inline-assembly.md:1299
msgid ""
"The compiler cannot assume that the instructions in the asm are the ones "
"that will actually end up executed."
msgstr ""

#: src/inline-assembly.md:1300
msgid ""
"This effectively means that the compiler must treat the `asm!` as a black "
"box and only take the interface specification into account, not the "
"instructions themselves."
msgstr ""

#: src/inline-assembly.md:1301
msgid "Runtime code patching is allowed, via target-specific mechanisms."
msgstr ""

#: src/inline-assembly.md:1302
msgid ""
"However there is no guarantee that each `asm!` directly corresponds to a "
"single instance of instructions in the object file: the compiler is free to "
"duplicate or deduplicate `asm!` blocks."
msgstr ""

#: src/inline-assembly.md:1306
msgid ""
"Unless the `nostack` option is set, asm code is allowed to use stack space "
"below the stack pointer."
msgstr ""

#: src/inline-assembly.md:1307
msgid ""
"On entry to the asm block the stack pointer is guaranteed to be suitably "
"aligned (according to the target ABI) for a function call."
msgstr ""

#: src/inline-assembly.md:1308
msgid ""
"You are responsible for making sure you don't overflow the stack (e.g. use "
"stack probing to ensure you hit a guard page)."
msgstr ""

#: src/inline-assembly.md:1309
msgid ""
"You should adjust the stack pointer when allocating stack memory as required "
"by the target ABI."
msgstr ""

#: src/inline-assembly.md:1310
msgid ""
"The stack pointer must be restored to its original value before leaving the "
"asm block."
msgstr ""

#: src/inline-assembly.md:1314
msgid ""
"If the `noreturn` option is set then behavior is undefined if execution "
"falls through to the end of the asm block."
msgstr ""

#: src/inline-assembly.md:1318
msgid ""
"If the `pure` option is set then behavior is undefined if the `asm!` has "
"side-effects other than its direct outputs. Behavior is also undefined if "
"two executions of the `asm!` code with the same inputs result in different "
"outputs."
msgstr ""

#: src/inline-assembly.md:1320
msgid ""
"When used with the `nomem` option, \"inputs\" are just the direct inputs of "
"the `asm!`."
msgstr ""

#: src/inline-assembly.md:1321
msgid ""
"When used with the `readonly` option, \"inputs\" comprise the direct inputs "
"of the `asm!` and any memory that the `asm!` block is allowed to read."
msgstr ""

#: src/inline-assembly.md:1325
msgid ""
"These flags registers must be restored upon exiting the asm block if the "
"`preserves_flags` option is set:"
msgstr ""

#: src/inline-assembly.md:1327
msgid "Status flags in `EFLAGS` (CF, PF, AF, ZF, SF, OF)."
msgstr ""

#: src/inline-assembly.md:1328
msgid "Floating-point status word (all)."
msgstr ""

#: src/inline-assembly.md:1329
msgid "Floating-point exception flags in `MXCSR` (PE, UE, OE, ZE, DE, IE)."
msgstr ""

#: src/inline-assembly.md:1331
msgid "Condition flags in `CPSR` (N, Z, C, V)"
msgstr ""

#: src/inline-assembly.md:1332
msgid "Saturation flag in `CPSR` (Q)"
msgstr ""

#: src/inline-assembly.md:1333
msgid "Greater than or equal flags in `CPSR` (GE)."
msgstr ""

#: src/inline-assembly.md:1334
msgid "Condition flags in `FPSCR` (N, Z, C, V)"
msgstr ""

#: src/inline-assembly.md:1335
msgid "Saturation flag in `FPSCR` (QC)"
msgstr ""

#: src/inline-assembly.md:1336
msgid ""
"Floating-point exception flags in `FPSCR` (IDC, IXC, UFC, OFC, DZC, IOC)."
msgstr ""

#: src/inline-assembly.md:1338
msgid "Condition flags (`NZCV` register)."
msgstr ""

#: src/inline-assembly.md:1339
msgid "Floating-point status (`FPSR` register)."
msgstr ""

#: src/inline-assembly.md:1341
msgid "Floating-point exception flags in `fcsr` (`fflags`)."
msgstr ""

#: src/inline-assembly.md:1342
msgid "Vector extension state (`vtype`, `vl`, `vcsr`)."
msgstr ""

#: src/inline-assembly.md:1344
msgid "Floating-point condition flags in `$fcc[0-7]`."
msgstr ""

#: src/inline-assembly.md:1346
msgid "The condition code register `cc`."
msgstr ""

#: src/inline-assembly.md:1350
msgid ""
"On x86, the direction flag (DF in `EFLAGS`) is clear on entry to an asm "
"block and must be clear on exit."
msgstr ""

#: src/inline-assembly.md:1351
msgid ""
"Behavior is undefined if the direction flag is set on exiting an asm block."
msgstr ""

#: src/inline-assembly.md:1355
msgid ""
"On x86, the x87 floating-point register stack must remain unchanged unless "
"all of the `st([0-7])` registers have been marked as clobbered with "
"`out(\"st(0)\") _, out(\"st(1)\") _, ...`."
msgstr ""

#: src/inline-assembly.md:1356
msgid ""
"If all x87 registers are clobbered then the x87 register stack is guaranteed "
"to be empty upon entering an `asm` block. Assembly code must ensure that the "
"x87 register stack is also empty when exiting the asm block."
msgstr ""

#: src/inline-assembly.md:1363
msgid ""
"// we can do complex stuff with x87 if we clobber the entire x87 stack\n"
msgstr ""

#: src/inline-assembly.md:1365
msgid "\"fld qword ptr [{x}]\""
msgstr ""

#: src/inline-assembly.md:1366
msgid "\"fld qword ptr [{y}])\""
msgstr ""

#: src/inline-assembly.md:1367
msgid "\"faddp\""
msgstr ""

#: src/inline-assembly.md:1368
msgid "\"fstp qword ptr [{out}]\""
msgstr ""

#: src/inline-assembly.md:1369
msgid "\"xor eax, eax\""
msgstr ""

#: src/inline-assembly.md:1370
msgid "\"fstsw ax\""
msgstr ""

#: src/inline-assembly.md:1371
msgid "\"shl eax, 11\""
msgstr ""

#: src/inline-assembly.md:1375
msgid "\"st(0)\""
msgstr ""

#: src/inline-assembly.md:1375
msgid "\"st(1)\""
msgstr ""

#: src/inline-assembly.md:1375
msgid "\"st(2)\""
msgstr ""

#: src/inline-assembly.md:1375
msgid "\"st(3)\""
msgstr ""

#: src/inline-assembly.md:1376
msgid "\"st(4)\""
msgstr ""

#: src/inline-assembly.md:1376
msgid "\"st(5)\""
msgstr ""

#: src/inline-assembly.md:1376
msgid "\"st(6)\""
msgstr ""

#: src/inline-assembly.md:1376
msgid "\"st(7)\""
msgstr ""

#: src/inline-assembly.md:1393
msgid ""
"On arm64ec, [call checkers with appropriate thunks](https://"
"learn.microsoft.com/en-us/windows/arm/arm64ec-abi#authoring-arm64ec-in-"
"assembly) are mandatory when calling functions."
msgstr ""

#: src/inline-assembly.md:1397
msgid ""
"The requirement of restoring the stack pointer and non-output registers to "
"their original value only applies when exiting an `asm!` block."
msgstr ""

#: src/inline-assembly.md:1398
msgid ""
"This means that `asm!` blocks that never return (even if not marked "
"`noreturn`) don't need to preserve these registers."
msgstr ""

#: src/inline-assembly.md:1399
msgid ""
"When returning to a different `asm!` block than you entered (e.g. for "
"context switching), these registers must contain the value they had upon "
"entering the `asm!` block that you are _exiting_."
msgstr ""

#: src/inline-assembly.md:1400
msgid ""
"You cannot exit an `asm!` block that has not been entered. Neither can you "
"exit an `asm!` block that has already been exited (without first entering it "
"again)."
msgstr ""

#: src/inline-assembly.md:1402
msgid ""
"You are responsible for switching any target-specific state (e.g. thread-"
"local storage, stack bounds)."
msgstr ""

#: src/inline-assembly.md:1403
msgid ""
"You cannot jump from an address in one `asm!` block to an address in "
"another, even within the same function or block, without treating their "
"contexts as potentially different and requiring context switching. You "
"cannot assume that any particular value in those contexts (e.g. current "
"stack pointer or temporary values below the stack pointer) will remain "
"unchanged between the two `asm!` blocks."
msgstr ""

#: src/inline-assembly.md:1404
msgid ""
"The set of memory locations that you may access is the intersection of those "
"allowed by the `asm!` blocks you entered and exited."
msgstr ""

#: src/inline-assembly.md:1408
msgid ""
"You cannot assume that two `asm!` blocks adjacent in source code, even "
"without any other code between them, will end up in successive addresses in "
"the binary without any other instructions between them."
msgstr ""

#: src/inline-assembly.md:1412
msgid ""
"You cannot assume that an `asm!` block will appear exactly once in the "
"output binary. The compiler is allowed to instantiate multiple copies of the "
"`asm!` block, for example when the function containing it is inlined in "
"multiple places."
msgstr ""

#: src/inline-assembly.md:1417
msgid ""
"On x86, inline assembly must not end with an instruction prefix (such as "
"`LOCK`) that would apply to instructions generated by the compiler."
msgstr ""

#: src/inline-assembly.md:1418
msgid ""
"The compiler is currently unable to detect this due to the way inline "
"assembly is compiled, but may catch and reject this in the future."
msgstr ""

#: src/inline-assembly.md:1422
msgid ""
"**Note**: As a general rule, the flags covered by `preserves_flags` are "
"those which are _not_ preserved when performing a function call."
msgstr ""

#: src/inline-assembly.md:1426
msgid "Correctness and Validity"
msgstr ""

#: src/inline-assembly.md:1430
msgid ""
"In addition to all of the previous rules, the string argument to `asm!` must "
"ultimately become--- after all other arguments are evaluated, formatting is "
"performed, and operands are translated--- assembly that is both "
"syntactically correct and semantically valid for the target architecture. "
"The formatting rules allow the compiler to generate assembly with correct "
"syntax. Rules concerning operands permit valid translation of Rust operands "
"into and out of `asm!`. Adherence to these rules is necessary, but not "
"sufficient, for the final expanded assembly to be both correct and valid. "
"For instance:"
msgstr ""

#: src/inline-assembly.md:1438
msgid ""
"arguments may be placed in positions which are syntactically incorrect after "
"formatting"
msgstr ""

#: src/inline-assembly.md:1439
msgid ""
"an instruction may be correctly written, but given architecturally invalid "
"operands"
msgstr ""

#: src/inline-assembly.md:1440
msgid ""
"an architecturally unspecified instruction may be assembled into unspecified "
"code"
msgstr ""

#: src/inline-assembly.md:1441
msgid ""
"a set of instructions, each correct and valid, may cause undefined behavior "
"if placed in immediate succession"
msgstr ""

#: src/inline-assembly.md:1445
msgid ""
"As a result, these rules are _non-exhaustive_. The compiler is not required "
"to check the correctness and validity of the initial string nor the final "
"assembly that is generated. The assembler may check for correctness and "
"validity but is not required to do so. When using `asm!`, a typographical "
"error may be sufficient to make a program unsound, and the rules for "
"assembly may include thousands of pages of architectural reference manuals. "
"Programmers should exercise appropriate care, as invoking this `unsafe` "
"capability comes with assuming the responsibility of not violating rules of "
"both the compiler or the architecture."
msgstr ""

#: src/inline-assembly.md:1455
msgid "Directives Support"
msgstr ""

#: src/inline-assembly.md:1459
msgid ""
"Inline assembly supports a subset of the directives supported by both GNU AS "
"and LLVM's internal assembler, given as follows. The result of using other "
"directives is assembler-specific (and may cause an error, or may be accepted "
"as-is)."
msgstr ""

#: src/inline-assembly.md:1464
msgid ""
"If inline assembly includes any \"stateful\" directive that modifies how "
"subsequent assembly is processed, the block must undo the effects of any "
"such directives before the inline assembly ends."
msgstr ""

#: src/inline-assembly.md:1468
msgid ""
"The following directives are guaranteed to be supported by the assembler:"
msgstr ""

#: src/inline-assembly.md:1470
msgid "`.2byte`"
msgstr ""

#: src/inline-assembly.md:1471
msgid "`.4byte`"
msgstr ""

#: src/inline-assembly.md:1472
msgid "`.8byte`"
msgstr ""

#: src/inline-assembly.md:1473
msgid "`.align`"
msgstr ""

#: src/inline-assembly.md:1474
msgid "`.alt_entry`"
msgstr ""

#: src/inline-assembly.md:1475
msgid "`.ascii`"
msgstr ""

#: src/inline-assembly.md:1476
msgid "`.asciz`"
msgstr ""

#: src/inline-assembly.md:1477
msgid "`.balign`"
msgstr ""

#: src/inline-assembly.md:1478
msgid "`.balignl`"
msgstr ""

#: src/inline-assembly.md:1479
msgid "`.balignw`"
msgstr ""

#: src/inline-assembly.md:1480
msgid "`.bss`"
msgstr ""

#: src/inline-assembly.md:1481
msgid "`.byte`"
msgstr ""

#: src/inline-assembly.md:1482
msgid "`.comm`"
msgstr ""

#: src/inline-assembly.md:1483
msgid "`.data`"
msgstr ""

#: src/inline-assembly.md:1484
msgid "`.def`"
msgstr ""

#: src/inline-assembly.md:1485
msgid "`.double`"
msgstr ""

#: src/inline-assembly.md:1486
msgid "`.endef`"
msgstr ""

#: src/inline-assembly.md:1487
msgid "`.equ`"
msgstr ""

#: src/inline-assembly.md:1488
msgid "`.equiv`"
msgstr ""

#: src/inline-assembly.md:1489
msgid "`.eqv`"
msgstr ""

#: src/inline-assembly.md:1490
msgid "`.fill`"
msgstr ""

#: src/inline-assembly.md:1491
msgid "`.float`"
msgstr ""

#: src/inline-assembly.md:1492
msgid "`.global`"
msgstr ""

#: src/inline-assembly.md:1493
msgid "`.globl`"
msgstr ""

#: src/inline-assembly.md:1494
msgid "`.inst`"
msgstr ""

#: src/inline-assembly.md:1495
msgid "`.insn`"
msgstr ""

#: src/inline-assembly.md:1496
msgid "`.lcomm`"
msgstr ""

#: src/inline-assembly.md:1497
msgid "`.long`"
msgstr ""

#: src/inline-assembly.md:1498
msgid "`.octa`"
msgstr ""

#: src/inline-assembly.md:1499
msgid "`.option`"
msgstr ""

#: src/inline-assembly.md:1500
msgid "`.p2align`"
msgstr ""

#: src/inline-assembly.md:1501
msgid "`.popsection`"
msgstr ""

#: src/inline-assembly.md:1502
msgid "`.private_extern`"
msgstr ""

#: src/inline-assembly.md:1503
msgid "`.pushsection`"
msgstr ""

#: src/inline-assembly.md:1504
msgid "`.quad`"
msgstr ""

#: src/inline-assembly.md:1505
msgid "`.scl`"
msgstr ""

#: src/inline-assembly.md:1506
msgid "`.section`"
msgstr ""

#: src/inline-assembly.md:1507
msgid "`.set`"
msgstr ""

#: src/inline-assembly.md:1508
msgid "`.short`"
msgstr ""

#: src/inline-assembly.md:1509
msgid "`.size`"
msgstr ""

#: src/inline-assembly.md:1510
msgid "`.skip`"
msgstr ""

#: src/inline-assembly.md:1511
msgid "`.sleb128`"
msgstr ""

#: src/inline-assembly.md:1512
msgid "`.space`"
msgstr ""

#: src/inline-assembly.md:1513
msgid "`.string`"
msgstr ""

#: src/inline-assembly.md:1514
msgid "`.text`"
msgstr ""

#: src/inline-assembly.md:1515
msgid "`.type`"
msgstr ""

#: src/inline-assembly.md:1516
msgid "`.uleb128`"
msgstr ""

#: src/inline-assembly.md:1517
msgid "`.word`"
msgstr ""

#: src/inline-assembly.md:1525
msgid "\"jmp 3f\""
msgstr ""

#: src/inline-assembly.md:1525
msgid "\"2: .ascii \\\"Hello World!\\\"\""
msgstr ""

#: src/inline-assembly.md:1526
msgid "\"3: lea {bytes}, [2b+rip]\""
msgstr ""

#: src/inline-assembly.md:1527
msgid "\"mov {len}, 12\""
msgstr ""

#: src/inline-assembly.md:1541
msgid "Target Specific Directive Support"
msgstr ""

#: src/inline-assembly.md:1546
msgid "Dwarf Unwinding"
msgstr ""

#: src/inline-assembly.md:1548
msgid ""
"The following directives are supported on ELF targets that support DWARF "
"unwind info:"
msgstr ""

#: src/inline-assembly.md:1550
msgid "`.cfi_adjust_cfa_offset`"
msgstr ""

#: src/inline-assembly.md:1551
msgid "`.cfi_def_cfa`"
msgstr ""

#: src/inline-assembly.md:1552
msgid "`.cfi_def_cfa_offset`"
msgstr ""

#: src/inline-assembly.md:1553
msgid "`.cfi_def_cfa_register`"
msgstr ""

#: src/inline-assembly.md:1554
msgid "`.cfi_endproc`"
msgstr ""

#: src/inline-assembly.md:1555
msgid "`.cfi_escape`"
msgstr ""

#: src/inline-assembly.md:1556
msgid "`.cfi_lsda`"
msgstr ""

#: src/inline-assembly.md:1557
msgid "`.cfi_offset`"
msgstr ""

#: src/inline-assembly.md:1558
msgid "`.cfi_personality`"
msgstr ""

#: src/inline-assembly.md:1559
msgid "`.cfi_register`"
msgstr ""

#: src/inline-assembly.md:1560
msgid "`.cfi_rel_offset`"
msgstr ""

#: src/inline-assembly.md:1561
msgid "`.cfi_remember_state`"
msgstr ""

#: src/inline-assembly.md:1562
msgid "`.cfi_restore`"
msgstr ""

#: src/inline-assembly.md:1563
msgid "`.cfi_restore_state`"
msgstr ""

#: src/inline-assembly.md:1564
msgid "`.cfi_return_column`"
msgstr ""

#: src/inline-assembly.md:1565
msgid "`.cfi_same_value`"
msgstr ""

#: src/inline-assembly.md:1566
msgid "`.cfi_sections`"
msgstr ""

#: src/inline-assembly.md:1567
msgid "`.cfi_signal_frame`"
msgstr ""

#: src/inline-assembly.md:1568
msgid "`.cfi_startproc`"
msgstr ""

#: src/inline-assembly.md:1569
msgid "`.cfi_undefined`"
msgstr ""

#: src/inline-assembly.md:1570
msgid "`.cfi_window_save`"
msgstr ""

#: src/inline-assembly.md:1574
msgid "Structured Exception Handling"
msgstr ""

#: src/inline-assembly.md:1576
msgid ""
"On targets with structured exception Handling, the following additional "
"directives are guaranteed to be supported:"
msgstr ""

#: src/inline-assembly.md:1578
msgid "`.seh_endproc`"
msgstr ""

#: src/inline-assembly.md:1579
msgid "`.seh_endprologue`"
msgstr ""

#: src/inline-assembly.md:1580
msgid "`.seh_proc`"
msgstr ""

#: src/inline-assembly.md:1581
msgid "`.seh_pushreg`"
msgstr ""

#: src/inline-assembly.md:1582
msgid "`.seh_savereg`"
msgstr ""

#: src/inline-assembly.md:1583
msgid "`.seh_setframe`"
msgstr ""

#: src/inline-assembly.md:1584
msgid "`.seh_stackalloc`"
msgstr ""

#: src/inline-assembly.md:1588
msgid "x86 (32-bit and 64-bit)"
msgstr ""

#: src/inline-assembly.md:1590
msgid ""
"On x86 targets, both 32-bit and 64-bit, the following additional directives "
"are guaranteed to be supported:"
msgstr ""

#: src/inline-assembly.md:1591
msgid "`.nops`"
msgstr ""

#: src/inline-assembly.md:1592
msgid "`.code16`"
msgstr ""

#: src/inline-assembly.md:1593
msgid "`.code32`"
msgstr ""

#: src/inline-assembly.md:1594
msgid "`.code64`"
msgstr ""

#: src/inline-assembly.md:1596
msgid ""
"Use of `.code16`, `.code32`, and `.code64` directives are only supported if "
"the state is reset to the default before exiting the assembly block. 32-bit "
"x86 uses `.code32` by default, and x86_64 uses `.code64` by default."
msgstr ""

#: src/inline-assembly.md:1601
msgid "ARM (32-bit)"
msgstr ""

#: src/inline-assembly.md:1603
msgid ""
"On ARM, the following additional directives are guaranteed to be supported:"
msgstr ""

#: src/inline-assembly.md:1605
msgid "`.even`"
msgstr ""

#: src/inline-assembly.md:1606
msgid "`.fnstart`"
msgstr ""

#: src/inline-assembly.md:1607
msgid "`.fnend`"
msgstr ""

#: src/inline-assembly.md:1608
msgid "`.save`"
msgstr ""

#: src/inline-assembly.md:1609
msgid "`.movsp`"
msgstr ""

#: src/inline-assembly.md:1610
msgid "`.code`"
msgstr ""

#: src/inline-assembly.md:1611
msgid "`.thumb`"
msgstr ""

#: src/inline-assembly.md:1612
msgid "`.thumb_func`"
msgstr ""

#: src/unsafety.md:7
msgid ""
"Unsafe operations are those that can potentially violate the memory-safety "
"guarantees of Rust's static semantics."
msgstr ""

#: src/unsafety.md:12
msgid ""
"The following language level features cannot be used in the safe subset of "
"Rust:"
msgstr ""

#: src/unsafety.md:17
msgid "Dereferencing a [raw pointer](types/pointer.md)."
msgstr ""

#: src/unsafety.md:21
msgid ""
"Reading or writing a [mutable](items/static-items.md#mutable-statics) or "
"[external](items/external-blocks.md) static variable."
msgstr ""

#: src/unsafety.md:25
msgid ""
"Accessing a field of a [`union`](items/unions.md), other than to assign to "
"it."
msgstr ""

#: src/unsafety.md:29
msgid ""
"Calling an unsafe function (including an intrinsic or foreign function)."
msgstr ""

#: src/unsafety.md:33
msgid ""
"Calling a safe function marked with a [`target_feature`](attributes/"
"codegen.md#r-attributes.codegen.target_feature) from a function that does "
"not have a `target_feature` attribute enabling the same features (see "
"[attributes.codegen.target_feature.safety-restrictions](attributes/"
"codegen.md#r-attributes.codegen.target_feature.safety-restrictions))."
msgstr ""

#: src/unsafety.md:37
msgid "Implementing an [unsafe trait](items/traits.md#unsafe-traits)."
msgstr ""

#: src/unsafety.md:41
msgid "Declaring an [`extern`](items/external-blocks.md) block[^extern-2024]."
msgstr ""

#: src/unsafety.md:45
msgid "Applying an [unsafe attribute](attributes.md) to an item."
msgstr ""

#: src/unsafety.md:47
msgid ""
"Prior to the 2024 edition, extern blocks were allowed to be declared without "
"`unsafe`."
msgstr ""

#: src/unsafe-keyword.md:7
msgid ""
"The `unsafe` keyword can occur in several different contexts: unsafe "
"functions (`unsafe fn`), unsafe blocks (`unsafe {}`), unsafe traits (`unsafe "
"trait`), unsafe trait implementations (`unsafe impl`), unsafe external "
"blocks (`unsafe extern`), and unsafe attributes (`#[unsafe(attr)]`). It "
"plays several different roles, depending on where it is used and whether the "
"`unsafe_op_in_unsafe_fn` lint is enabled:"
msgstr ""

#: src/unsafe-keyword.md:10
msgid ""
"it is used to mark code that _defines_ extra safety conditions (`unsafe fn`, "
"`unsafe trait`)"
msgstr ""

#: src/unsafe-keyword.md:11
msgid ""
"it is used to mark code that needs to _satisfy_ extra safety conditions "
"(`unsafe {}`, `unsafe impl`, `unsafe fn` without [`unsafe_op_in_unsafe_fn`]"
"(../rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn), "
"`unsafe extern`, `#[unsafe(attr)]`)"
msgstr ""

#: src/unsafe-keyword.md:13
msgid ""
"The following discusses each of these cases. See the [keyword documentation]"
"(../std/keyword.unsafe.html) for some illustrative examples."
msgstr ""

#: src/unsafe-keyword.md:18
msgid "Unsafe functions (`unsafe fn`)"
msgstr ""

#: src/unsafe-keyword.md:22
msgid ""
"Unsafe functions are functions that are not safe in all contexts and/or for "
"all possible inputs. We say they have _extra safety conditions_, which are "
"requirements that must be upheld by all callers and that the compiler does "
"not check. For example, [`get_unchecked`](../std/"
"primitive.slice.html#method.get_unchecked) has the extra safety condition "
"that the index must be in-bounds. The unsafe function should come with "
"documentation explaining what those extra safety conditions are."
msgstr ""

#: src/unsafe-keyword.md:29
msgid ""
"Such a function must be prefixed with the keyword `unsafe` and can only be "
"called from inside an `unsafe` block, or inside `unsafe fn` without the "
"[`unsafe_op_in_unsafe_fn`](../rustc/lints/listing/allowed-by-"
"default.html#unsafe-op-in-unsafe-fn) lint."
msgstr ""

#: src/unsafe-keyword.md:33
msgid "Unsafe blocks (`unsafe {}`)"
msgstr ""

#: src/unsafe-keyword.md:37
msgid ""
"A block of code can be prefixed with the `unsafe` keyword to permit using "
"the unsafe actions as defined in the [Unsafety](unsafety.md) chapter, such "
"as calling other unsafe functions or dereferencing raw pointers."
msgstr ""

#: src/unsafe-keyword.md:41
msgid ""
"By default, the body of an unsafe function is also considered to be an "
"unsafe block; this can be changed by enabling the [`unsafe_op_in_unsafe_fn`]"
"(../rustc/lints/listing/allowed-by-default.html#unsafe-op-in-unsafe-fn) lint."
msgstr ""

#: src/unsafe-keyword.md:44
msgid ""
"By putting operations into an unsafe block, the programmer states that they "
"have taken care of satisfying the extra safety conditions of all operations "
"inside that block."
msgstr ""

#: src/unsafe-keyword.md:46
msgid ""
"Unsafe blocks are the logical dual to unsafe functions: where unsafe "
"functions define a proof obligation that callers must uphold, unsafe blocks "
"state that all relevant proof obligations of functions or operations called "
"inside the block have been discharged. There are many ways to discharge "
"proof obligations; for example, there could be run-time checks or data "
"structure invariants that guarantee that certain properties are definitely "
"true, or the unsafe block could be inside an `unsafe fn`, in which case the "
"block can use the proof obligations of that function to discharge the proof "
"obligations arising inside the block."
msgstr ""

#: src/unsafe-keyword.md:51
msgid ""
"Unsafe blocks are used to wrap foreign libraries, make direct use of "
"hardware or implement features not directly present in the language. For "
"example, Rust provides the language features necessary to implement memory-"
"safe concurrency in the language but the implementation of threads and "
"message passing in the standard library uses unsafe blocks."
msgstr ""

#: src/unsafe-keyword.md:54
msgid ""
"Rust's type system is a conservative approximation of the dynamic safety "
"requirements, so in some cases there is a performance cost to using safe "
"code. For example, a doubly-linked list is not a tree structure and can only "
"be represented with reference-counted pointers in safe code. By using "
"`unsafe` blocks to represent the reverse links as raw pointers, it can be "
"implemented without reference counting. (See [\"Learn Rust With Entirely Too "
"Many Linked Lists\"](https://rust-unofficial.github.io/too-many-lists/) for "
"a more in-depth exploration of this particular example.)"
msgstr ""

#: src/unsafe-keyword.md:63
msgid "Unsafe traits (`unsafe trait`)"
msgstr ""

#: src/unsafe-keyword.md:67
msgid ""
"An unsafe trait is a trait that comes with extra safety conditions that must "
"be upheld by _implementations_ of the trait. The unsafe trait should come "
"with documentation explaining what those extra safety conditions are."
msgstr ""

#: src/unsafe-keyword.md:72
msgid ""
"Such a trait must be prefixed with the keyword `unsafe` and can only be "
"implemented by `unsafe impl` blocks."
msgstr ""

#: src/unsafe-keyword.md:76
msgid "Unsafe trait implementations (`unsafe impl`)"
msgstr ""

#: src/unsafe-keyword.md:79
msgid ""
"When implementing an unsafe trait, the implementation needs to be prefixed "
"with the `unsafe` keyword. By writing `unsafe impl`, the programmer states "
"that they have taken care of satisfying the extra safety conditions required "
"by the trait."
msgstr ""

#: src/unsafe-keyword.md:82
msgid ""
"Unsafe trait implementations are the logical dual to unsafe traits: where "
"unsafe traits define a proof obligation that implementations must uphold, "
"unsafe implementations state that all relevant proof obligations have been "
"discharged."
msgstr ""

#: src/unsafe-keyword.md:90
msgid "Unsafe external blocks (`unsafe extern`)"
msgstr ""

#: src/unsafe-keyword.md:93
msgid ""
"The programmer who declares an [external block](items/external-blocks.md) "
"must assure that the signatures of the items contained within are correct. "
"Failing to do so may lead to undefined behavior.  That this obligation has "
"been met is indicated by writing `unsafe extern`."
msgstr ""

#: src/unsafe-keyword.md:97
msgid ""
"**Edition differences**: Prior to edition 2024, `extern` blocks were allowed "
"without being qualified as `unsafe`."
msgstr ""

#: src/unsafe-keyword.md:103
msgid "Unsafe attributes (`#[unsafe(attr)]`)"
msgstr ""

#: src/unsafe-keyword.md:106
msgid ""
"An [unsafe attribute](attributes.md) is one that has extra safety conditions "
"that must be upheld when using the attribute. The compiler cannot check "
"whether these conditions have been upheld.  To assert that they have been, "
"these attributes must be wrapped in `unsafe(..)`, e.g. "
"`#[unsafe(no_mangle)]`."
msgstr ""

#: src/behavior-considered-undefined.md:7
msgid ""
"Rust code is incorrect if it exhibits any of the behaviors in the following "
"list. This includes code within `unsafe` blocks and `unsafe` functions. "
"`unsafe` only means that avoiding undefined behavior is on the programmer; "
"it does not change anything about the fact that Rust programs must never "
"cause undefined behavior."
msgstr ""

#: src/behavior-considered-undefined.md:15
msgid ""
"It is the programmer's responsibility when writing `unsafe` code to ensure "
"that any safe code interacting with the `unsafe` code cannot trigger these "
"behaviors. `unsafe` code that satisfies this property for any safe client is "
"called _sound_; if `unsafe` code can be misused by safe code to exhibit "
"undefined behavior, it is _unsound_."
msgstr ""

#: src/behavior-considered-undefined.md:23
msgid ""
"_**Warning:**_ The following list is not exhaustive; it may grow or shrink. "
"There is no formal model of Rust's semantics for what is and is not allowed "
"in unsafe code, so there may be more behavior considered unsafe. We also "
"reserve the right to make some of the behavior in that list defined in the "
"future. In other words, this list does not say that anything will "
"_definitely_ always be undefined in all future Rust version (but we might "
"make such commitments for some list items in the future)."
msgstr ""

#: src/behavior-considered-undefined.md:31
msgid ""
"Please read the [Rustonomicon](../nomicon/index.html) before writing unsafe "
"code."
msgstr ""

#: src/behavior-considered-undefined.md:37
msgid "Data races."
msgstr ""

#: src/behavior-considered-undefined.md:41
msgid ""
"Accessing (loading from or storing to) a place that is [dangling](#dangling-"
"pointers) or [based on a misaligned pointer](#places-based-on-misaligned-"
"pointers)."
msgstr ""

#: src/behavior-considered-undefined.md:46
msgid ""
"Performing a place projection that violates the requirements of [in-bounds "
"pointer arithmetic](../std/primitive.pointer.html#method.offset). A place "
"projection is a [field expression](expressions/field-expr.md), a [tuple "
"index expression](expressions/tuple-expr.md#tuple-indexing-expressions), or "
"an [array/slice index expression](expressions/array-expr.md#array-and-slice-"
"indexing-expressions)."
msgstr ""

#: src/behavior-considered-undefined.md:53
msgid ""
"Breaking the [pointer aliasing rules](http://llvm.org/docs/"
"LangRef.html#pointer-aliasing-rules). `Box<T>`, `&mut T` and `&T` follow "
"LLVM’s scoped [noalias](http://llvm.org/docs/LangRef.html#noalias) model, "
"except if the `&T` contains an [`UnsafeCell<U>`](../core/cell/"
"struct.UnsafeCell.html). References and boxes must not be [dangling]"
"(#dangling-pointers) while they are live. The exact liveness duration is not "
"specified, but some bounds exist:"
msgstr ""

#: src/behavior-considered-undefined.md:57
msgid ""
"For references, the liveness duration is upper-bounded by the syntactic "
"lifetime assigned by the borrow checker; it cannot be live any _longer_ than "
"that lifetime."
msgstr ""

#: src/behavior-considered-undefined.md:60
msgid ""
"Each time a reference or box is passed to or returned from a function, it is "
"considered live."
msgstr ""

#: src/behavior-considered-undefined.md:62
msgid ""
"When a reference (but not a `Box`!) is passed to a function, it is live at "
"least as long as that function call, again except if the `&T` contains an "
"[`UnsafeCell<U>`](../core/cell/struct.UnsafeCell.html)."
msgstr ""

#: src/behavior-considered-undefined.md:66
msgid ""
"All this also applies when values of these types are passed in a (nested) "
"field of a compound type, but not behind pointer indirections."
msgstr ""

#: src/behavior-considered-undefined.md:72
msgid ""
"Mutating immutable bytes. All bytes reachable through a [const-promoted]"
"(destructors.md#constant-promotion) expression are immutable, as well as "
"bytes reachable through borrows in `static` and `const` initializers that "
"have been [lifetime-extended](destructors.md#temporary-lifetime-extension) "
"to `'static`. The bytes owned by an immutable binding or immutable `static` "
"are immutable, unless those bytes are part of an [`UnsafeCell<U>`](../core/"
"cell/struct.UnsafeCell.html)."
msgstr ""

#: src/behavior-considered-undefined.md:76
msgid ""
"Moreover, the bytes [pointed to](#pointed-to-bytes) by a shared reference, "
"including transitively through other references (both shared and mutable) "
"and `Box`es, are immutable; transitivity includes those references stored in "
"fields of compound types."
msgstr ""

#: src/behavior-considered-undefined.md:78
msgid ""
"A mutation is any write of more than 0 bytes which overlaps with any of the "
"relevant bytes (even if that write does not change the memory contents)."
msgstr ""

#: src/behavior-considered-undefined.md:82
msgid "Invoking undefined behavior via compiler intrinsics."
msgstr ""

#: src/behavior-considered-undefined.md:86
msgid ""
"Executing code compiled with platform features that the current platform "
"does not support (see [`target_feature`](attributes/codegen.md#the-"
"target_feature-attribute)), _except_ if the platform explicitly documents "
"this to be safe."
msgstr ""

#: src/behavior-considered-undefined.md:91
msgid ""
"Calling a function with the wrong call ABI or unwinding from a function with "
"the wrong unwind ABI."
msgstr ""

#: src/behavior-considered-undefined.md:95
msgid ""
"Producing an [invalid value](#invalid-values). \"Producing\" a value happens "
"any time a value is assigned to or read from a place, passed to a function/"
"primitive operation or returned from a function/primitive operation."
msgstr ""

#: src/behavior-considered-undefined.md:102
msgid ""
"Incorrect use of inline assembly. For more details, refer to the [rules]"
"(inline-assembly.md#rules-for-inline-assembly) to follow when writing code "
"that uses inline assembly."
msgstr ""

#: src/behavior-considered-undefined.md:107
msgid ""
"**In [const context](const_eval.md#const-context)**: transmuting or "
"otherwise reinterpreting a pointer (reference, raw pointer, or function "
"pointer) into some allocated object as a non-pointer type (such as "
"integers). 'Reinterpreting' refers to loading the pointer value at integer "
"type without a cast, e.g. by doing raw pointer casts or using a union."
msgstr ""

#: src/behavior-considered-undefined.md:113
msgid ""
"**Note**: Undefined behavior affects the entire program. For example, "
"calling a function in C that exhibits undefined behavior of C means your "
"entire program contains undefined behaviour that can also affect the Rust "
"code. And vice versa, undefined behavior in Rust can cause adverse affects "
"on code executed by any FFI calls to other languages."
msgstr ""

#: src/behavior-considered-undefined.md:121
msgid "Pointed-to bytes"
msgstr ""

#: src/behavior-considered-undefined.md:123
msgid ""
"The span of bytes a pointer or reference \"points to\" is determined by the "
"pointer value and the size of the pointee type (using `size_of_val`)."
msgstr ""

#: src/behavior-considered-undefined.md:125
msgid "Places based on misaligned pointers"
msgstr ""

#: src/behavior-considered-undefined.md:133
msgid ""
"A place is said to be \"based on a misaligned pointer\" if the last `*` "
"projection during place computation was performed on a pointer that was not "
"aligned for its type. (If there is no `*` projection in the place "
"expression, then this is accessing the field of a local or `static` and "
"rustc will guarantee proper alignment. If there are multiple `*` projection, "
"then each of them incurs a load of the pointer-to-be-dereferenced itself "
"from memory, and each of these loads is subject to the alignment constraint. "
"Note that some `*` projections can be omitted in surface Rust syntax due to "
"automatic dereferencing; we are considering the fully expanded place "
"expression here.)"
msgstr ""

#: src/behavior-considered-undefined.md:143
msgid ""
"For instance, if `ptr` has type `*const S` where `S` has an alignment of 8, "
"then `ptr` must be 8-aligned or else `(*ptr).f` is \"based on an misaligned "
"pointer\". This is true even if the type of the field `f` is `u8` (i.e., a "
"type with alignment 1). In other words, the alignment requirement derives "
"from the type of the pointer that was dereferenced, _not_ the type of the "
"field that is being accessed."
msgstr ""

#: src/behavior-considered-undefined.md:152
msgid ""
"Note that a place based on a misaligned pointer only leads to Undefined "
"Behavior when it is loaded from or stored to."
msgstr ""

#: src/behavior-considered-undefined.md:157
msgid "`&raw const`/`&raw mut` on such a place is allowed."
msgstr ""

#: src/behavior-considered-undefined.md:161
msgid ""
"`&`/`&mut` on a place requires the alignment of the field type (or else the "
"program would be \"producing an invalid value\"), which generally is a less "
"restrictive requirement than being based on an aligned pointer."
msgstr ""

#: src/behavior-considered-undefined.md:167
msgid ""
"Taking a reference will lead to a compiler error in cases where the field "
"type might be more aligned than the type that contains it, i.e., "
"`repr(packed)`. This means that being based on an aligned pointer is always "
"sufficient to ensure that the new reference is aligned, but it is not always "
"necessary."
msgstr ""

#: src/behavior-considered-undefined.md:172
msgid "Dangling pointers"
msgstr ""

#: src/behavior-considered-undefined.md:180
msgid ""
"A reference/pointer is \"dangling\" if not all of the bytes it [points to]"
"(#pointed-to-bytes) are part of the same live allocation (so in particular "
"they all have to be part of _some_ allocation)."
msgstr ""

#: src/behavior-considered-undefined.md:186
msgid ""
"If the size is 0, then the pointer is trivially never \"dangling\" (even if "
"it is a null pointer)."
msgstr ""

#: src/behavior-considered-undefined.md:191
msgid ""
"Note that dynamically sized types (such as slices and strings) point to "
"their entire range, so it is important that the length metadata is never too "
"large."
msgstr ""

#: src/behavior-considered-undefined.md:196
msgid ""
"In particular, the dynamic size of a Rust value (as determined by "
"`size_of_val`) must never exceed `isize::MAX`, since it is impossible for a "
"single allocation to be larger than `isize::MAX`."
msgstr ""

#: src/behavior-considered-undefined.md:200
msgid "Invalid values"
msgstr ""

#: src/behavior-considered-undefined.md:208
msgid ""
"The Rust compiler assumes that all values produced during program execution "
"are \"valid\", and producing an invalid value is hence immediate UB."
msgstr ""

#: src/behavior-considered-undefined.md:211
msgid "Whether a value is valid depends on the type:"
msgstr ""

#: src/behavior-considered-undefined.md:215
msgid ""
"A [`bool`](types/boolean.md) value must be `false` (`0`) or `true` (`1`)."
msgstr ""

#: src/behavior-considered-undefined.md:219
msgid "A `fn` pointer value must be non-null."
msgstr ""

#: src/behavior-considered-undefined.md:223
msgid ""
"A `char` value must not be a surrogate (i.e., must not be in the range "
"`0xD800..=0xDFFF`) and must be equal to or less than `char::MAX`."
msgstr ""

#: src/behavior-considered-undefined.md:227
msgid "A `!` value must never exist."
msgstr ""

#: src/behavior-considered-undefined.md:231
msgid ""
"An integer (`i*`/`u*`), floating point value (`f*`), or raw pointer must be "
"initialized, i.e., must not be obtained from [uninitialized memory](http://"
"llvm.org/docs/LangRef.html#undefined-values)."
msgstr ""

#: src/behavior-considered-undefined.md:236
msgid "A `str` value is treated like `[u8]`, i.e. it must be initialized."
msgstr ""

#: src/behavior-considered-undefined.md:240
msgid ""
"An `enum` must have a valid discriminant, and all fields of the variant "
"indicated by that discriminant must be valid at their respective type."
msgstr ""

#: src/behavior-considered-undefined.md:244
msgid ""
"A `struct`, tuple, and array requires all fields/elements to be valid at "
"their respective type."
msgstr ""

#: src/behavior-considered-undefined.md:248
msgid ""
"For a `union`, the exact validity requirements are not decided yet. "
"Obviously, all values that can be created entirely in safe code are valid. "
"If the union has a zero-sized field, then every possible value is valid. "
"Further details are [still being debated](https://github.com/rust-lang/"
"unsafe-code-guidelines/issues/438)."
msgstr ""

#: src/behavior-considered-undefined.md:255
msgid ""
"A reference or [`Box<T>`](../alloc/boxed/struct.Box.html) must be aligned "
"and non-null, it cannot be [dangling](#dangling-pointers), and it must point "
"to a valid value (in case of dynamically sized types, using the actual "
"dynamic type of the pointee as determined by the metadata). Note that the "
"last point (about pointing to a valid value) remains a subject of some "
"debate."
msgstr ""

#: src/behavior-considered-undefined.md:262
msgid ""
"The metadata of a wide reference, [`Box<T>`](../alloc/boxed/"
"struct.Box.html), or raw pointer must match the type of the unsized tail:"
msgstr ""

#: src/behavior-considered-undefined.md:264
msgid ""
"`dyn Trait` metadata must be a pointer to a compiler-generated vtable for "
"`Trait`. (For raw pointers, this requirement remains a subject of some "
"debate.)"
msgstr ""

#: src/behavior-considered-undefined.md:266
msgid ""
"Slice (`[T]`) metadata must be a valid `usize`. Furthermore, for wide "
"references and [`Box<T>`](../alloc/boxed/struct.Box.html), slice metadata is "
"invalid if it makes the total size of the pointed-to value bigger than "
"`isize::MAX`."
msgstr ""

#: src/behavior-considered-undefined.md:272
msgid ""
"If a type has a custom range of a valid values, then a valid value must be "
"in that range. In the standard library, this affects [`NonNull<T>`](../core/"
"ptr/non_null/struct.NonNull.html) and [`NonZero<T>`](../core/num/nonzero/"
"struct.NonZero.html)."
msgstr ""

#: src/behavior-considered-undefined.md:275
msgid ""
"**Note**: `rustc` achieves this with the unstable "
"`rustc_layout_scalar_valid_range_*` attributes."
msgstr ""

#: src/behavior-considered-undefined.md:280
msgid ""
"**Note:** Uninitialized memory is also implicitly invalid for any type that "
"has a restricted set of valid values. In other words, the only cases in "
"which reading uninitialized memory is permitted are inside `union`s and in "
"\"padding\" (the gaps between the fields of a type)."
msgstr ""

#: src/behavior-not-considered-unsafe.md:1
msgid "Behavior not considered `unsafe`"
msgstr ""

#: src/behavior-not-considered-unsafe.md:3
msgid ""
"The Rust compiler does not consider the following behaviors _unsafe_, though "
"a programmer may (should) find them undesirable, unexpected, or erroneous."
msgstr ""

#: src/behavior-not-considered-unsafe.md:7
msgid "Deadlocks"
msgstr ""

#: src/behavior-not-considered-unsafe.md:8
msgid "Leaks of memory and other resources"
msgstr ""

#: src/behavior-not-considered-unsafe.md:9
msgid "Exiting without calling destructors"
msgstr ""

#: src/behavior-not-considered-unsafe.md:10
msgid "Exposing randomized base addresses through pointer leaks"
msgstr ""

#: src/behavior-not-considered-unsafe.md:11
msgid "Integer overflow"
msgstr ""

#: src/behavior-not-considered-unsafe.md:13
msgid ""
"If a program contains arithmetic overflow, the programmer has made an error. "
"In the following discussion, we maintain a distinction between arithmetic "
"overflow and wrapping arithmetic. The first is erroneous, while the second "
"is intentional."
msgstr ""

#: src/behavior-not-considered-unsafe.md:18
msgid ""
"When the programmer has enabled `debug_assert!` assertions (for example, by "
"enabling a non-optimized build), implementations must insert dynamic checks "
"that `panic` on overflow. Other kinds of builds may result in `panics` or "
"silently wrapped values on overflow, at the implementation's discretion."
msgstr ""

#: src/behavior-not-considered-unsafe.md:24
msgid ""
"In the case of implicitly-wrapped overflow, implementations must provide "
"well-defined (even if still considered erroneous) results by using two's "
"complement overflow conventions."
msgstr ""

#: src/behavior-not-considered-unsafe.md:28
msgid ""
"The integral types provide inherent methods to allow programmers explicitly "
"to perform wrapping arithmetic. For example, `i32::wrapping_add` provides "
"two's complement, wrapping addition."
msgstr ""

#: src/behavior-not-considered-unsafe.md:32
msgid ""
"The standard library also provides a `Wrapping<T>` newtype which ensures all "
"standard arithmetic operations for `T` have wrapping semantics."
msgstr ""

#: src/behavior-not-considered-unsafe.md:36
msgid ""
"See [RFC 560](https://github.com/rust-lang/rfcs/blob/master/text/0560-"
"integer-overflow.md) for error conditions, rationale, and more details about "
"integer overflow."
msgstr ""

#: src/behavior-not-considered-unsafe.md:39
msgid "Logic errors"
msgstr ""

#: src/behavior-not-considered-unsafe.md:41
msgid ""
"Safe code may impose extra logical constraints that can be checked at "
"neither compile-time nor runtime. If a program breaks such a constraint, the "
"behavior may be unspecified but will not result in undefined behavior. This "
"could include panics, incorrect results, aborts, and non-termination. The "
"behavior may also differ between runs, builds, or kinds of build."
msgstr ""

#: src/behavior-not-considered-unsafe.md:48
msgid ""
"For example, implementing both `Hash` and `Eq` requires that values "
"considered equal have equal hashes. Another example are data structures like "
"`BinaryHeap`, `BTreeMap`, `BTreeSet`, `HashMap` and `HashSet` which describe "
"constraints on the modification of their keys while they are in the data "
"structure. Violating such constraints is not considered unsafe, yet the "
"program is considered erroneous and its behavior unpredictable."
msgstr ""

#: src/const_eval.md:3
msgid "Constant evaluation"
msgstr ""

#: src/const_eval.md:7
msgid ""
"Constant evaluation is the process of computing the result of [expressions]"
"(expressions.md) during compilation. Only a subset of all expressions can be "
"evaluated at compile-time."
msgstr ""

#: src/const_eval.md:13
msgid "Constant expressions"
msgstr ""

#: src/const_eval.md:17
msgid ""
"Certain forms of expressions, called constant expressions, can be evaluated "
"at compile time."
msgstr ""

#: src/const_eval.md:22
msgid ""
"In [const contexts](#const-context), these are the only allowed expressions, "
"and are always evaluated at compile time."
msgstr ""

#: src/const_eval.md:27
msgid ""
"In other places, such as [let statements](statements.md#let-statements), "
"constant expressions _may_ be, but are not guaranteed to be, evaluated at "
"compile time."
msgstr ""

#: src/const_eval.md:31
msgid ""
"Behaviors such as out of bounds [array indexing](expressions/array-"
"expr.md#array-and-slice-indexing-expressions) or [overflow](expressions/"
"operator-expr.md#overflow) are compiler errors if the value must be "
"evaluated at compile time (i.e. in const contexts). Otherwise, these "
"behaviors are warnings, but will likely panic at run-time."
msgstr ""

#: src/const_eval.md:37
msgid ""
"The following expressions are constant expressions, so long as any operands "
"are also constant expressions and do not cause any [`Drop::drop`]"
"(destructors.md) calls to be run."
msgstr ""

#: src/const_eval.md:43
msgid "[Literals](expressions/literal-expr.md)."
msgstr ""

#: src/const_eval.md:47
msgid "[Const parameters](items/generics.md)."
msgstr ""

#: src/const_eval.md:51
msgid ""
"[Paths](expressions/path-expr.md) to [functions](items/functions.md) and "
"[constants](items/constant-items.md). Recursively defining constants is not "
"allowed."
msgstr ""

#: src/const_eval.md:56
msgid "Paths to [statics](items/static-items.md) with these restrictions:"
msgstr ""

#: src/const_eval.md:57
msgid ""
"Writes to `static` items are not allowed in any constant evaluation context."
msgstr ""

#: src/const_eval.md:58
msgid ""
"Reads from `extern` statics are not allowed in any constant evaluation "
"context."
msgstr ""

#: src/const_eval.md:59
msgid ""
"If the evaluation is _not_ carried out in an initializer of a `static` item, "
"then reads from any mutable `static` are not allowed. A mutable `static` is "
"a `static mut` item, or a `static` item with an interior-mutable type."
msgstr ""

#: src/const_eval.md:61
msgid ""
"These requirements are checked only when the constant is evaluated. In other "
"words, having such accesses syntactically occur in const contexts is allowed "
"as long as they never get executed."
msgstr ""

#: src/const_eval.md:65
msgid "[Tuple expressions](expressions/tuple-expr.md)."
msgstr ""

#: src/const_eval.md:69
msgid "[Array expressions](expressions/array-expr.md)."
msgstr ""

#: src/const_eval.md:73
msgid "[Struct](expressions/struct-expr.md) expressions."
msgstr ""

#: src/const_eval.md:77
msgid ""
"[Block expressions](expressions/block-expr.md), including `unsafe` and "
"`const` blocks."
msgstr ""

#: src/const_eval.md:78
msgid ""
"[let statements](statements.md#let-statements) and thus irrefutable "
"[patterns](patterns.md), including mutable bindings"
msgstr ""

#: src/const_eval.md:79
msgid ""
"[assignment expressions](expressions/operator-expr.md#assignment-expressions)"
msgstr ""

#: src/const_eval.md:80
msgid ""
"[compound assignment expressions](expressions/operator-expr.md#compound-"
"assignment-expressions)"
msgstr ""

#: src/const_eval.md:81
msgid "[expression statements](statements.md#expression-statements)"
msgstr ""

#: src/const_eval.md:85
msgid "[Field](expressions/field-expr.md) expressions."
msgstr ""

#: src/const_eval.md:89
msgid ""
"Index expressions, [array indexing](expressions/array-expr.md#array-and-"
"slice-indexing-expressions) or [slice](types/slice.md) with a `usize`."
msgstr ""

#: src/const_eval.md:93
msgid "[Range expressions](expressions/range-expr.md)."
msgstr ""

#: src/const_eval.md:97
msgid ""
"[Closure expressions](expressions/closure-expr.md) which don't capture "
"variables from the environment."
msgstr ""

#: src/const_eval.md:101
msgid ""
"Built-in [negation](expressions/operator-expr.md#negation-operators), "
"[arithmetic](expressions/operator-expr.md#arithmetic-and-logical-binary-"
"operators), [logical](expressions/operator-expr.md#arithmetic-and-logical-"
"binary-operators), [comparison](expressions/operator-expr.md#comparison-"
"operators) or [lazy boolean](expressions/operator-expr.md#lazy-boolean-"
"operators) operators used on integer and floating point types, `bool`, and "
"`char`."
msgstr ""

#: src/const_eval.md:106
msgid ""
"All forms of [borrow](expressions/operator-expr.md#borrow-operators)s, "
"including raw borrows, with one limitation: mutable borrows and shared "
"borrows to values with interior mutability are only allowed to refer to "
"_transient_ places. A place is _transient_ if its lifetime is strictly "
"contained inside the current [const context](#const-context)."
msgstr ""

#: src/const_eval.md:113
msgid ""
"The [dereference operator](expressions/operator-expr.md#the-dereference-"
"operator) except for raw pointers."
msgstr ""

#: src/const_eval.md:118
msgid "[Grouped](expressions/grouped-expr.md) expressions."
msgstr ""

#: src/const_eval.md:122
msgid ""
"[Cast](expressions/operator-expr.md#type-cast-expressions) expressions, "
"except"
msgstr ""

#: src/const_eval.md:123
msgid "pointer to address casts and"
msgstr ""

#: src/const_eval.md:124
msgid "function pointer to address casts."
msgstr ""

#: src/const_eval.md:128
msgid ""
"Calls of [const functions](items/functions.md#const-functions) and const "
"methods."
msgstr ""

#: src/const_eval.md:132
msgid ""
"[loop](expressions/loop-expr.md#infinite-loops), [while](expressions/loop-"
"expr.md#predicate-loops) and [`while let`](expressions/loop-"
"expr.md#predicate-pattern-loops) expressions."
msgstr ""

#: src/const_eval.md:136
msgid ""
"[if](expressions/if-expr.md#if-expressions), [`if let`](expressions/if-"
"expr.md#if-let-expressions) and [match](expressions/match-expr.md) "
"expressions."
msgstr ""

#: src/const_eval.md:138
msgid "Const context"
msgstr ""

#: src/const_eval.md:146
msgid "A _const context_ is one of the following:"
msgstr ""

#: src/const_eval.md:150
msgid "[Array type length expressions](types/array.md)"
msgstr ""

#: src/const_eval.md:154
msgid "[Array repeat length expressions](expressions/array-expr.md)"
msgstr ""

#: src/const_eval.md:158
msgid "The initializer of"
msgstr ""

#: src/const_eval.md:159
msgid "[constants](items/constant-items.md)"
msgstr ""

#: src/const_eval.md:160
msgid "[statics](items/static-items.md)"
msgstr ""

#: src/const_eval.md:161
msgid "[enum discriminants](items/enumerations.md#discriminants)"
msgstr ""

#: src/const_eval.md:165
msgid "A [const generic argument](items/generics.md#const-generics)"
msgstr ""

#: src/const_eval.md:169
msgid "A [const block](expressions/block-expr.md#const-blocks)"
msgstr ""

#: src/const_eval.md:171
msgid ""
"Const contexts that are used as parts of types (array type and repeat length "
"expressions as well as const generic arguments) can only make restricted use "
"of surrounding generic parameters: such an expression must either be a "
"single bare const generic parameter, or an arbitrary expression not making "
"use of any generics."
msgstr ""

#: src/const_eval.md:179
msgid "Const Functions"
msgstr ""

#: src/const_eval.md:183
msgid ""
"A _const fn_ is a function that one is permitted to call from a const "
"context."
msgstr ""

#: src/const_eval.md:187
msgid ""
"Declaring a function `const` has no effect on any existing uses, it only "
"restricts the types that arguments and the return type may use, and "
"restricts the function body to constant expressions."
msgstr ""

#: src/const_eval.md:193
msgid ""
"When called from a const context, the function is interpreted by the "
"compiler at compile time. The interpretation happens in the environment of "
"the compilation target and not the host. So `usize` is `32` bits if you are "
"compiling against a `32` bit system, irrelevant of whether you are building "
"on a `64` bit or a `32` bit system."
msgstr ""

#: src/abi.md:1
msgid "Application Binary Interface (ABI)"
msgstr ""

#: src/abi.md:3
msgid ""
"This section documents features that affect the ABI of the compiled output "
"of a crate."
msgstr ""

#: src/abi.md:6
msgid ""
"See _[extern functions](items/functions.md#extern-function-qualifier)_ for "
"information on specifying the ABI for exporting functions. See _[external "
"blocks](items/external-blocks.md)_ for information on specifying the ABI for "
"linking external libraries."
msgstr ""

#: src/abi.md:10
msgid "The `used` attribute"
msgstr ""

#: src/abi.md:12
msgid ""
"The _`used` attribute_ can only be applied to [`static` items](items/static-"
"items.md). This [attribute](attributes.md) forces the compiler to keep the "
"variable in the output object file (.o, .rlib, etc. excluding final "
"binaries) even if the variable is not used, or referenced, by any other item "
"in the crate. However, the linker is still free to remove such an item."
msgstr ""

#: src/abi.md:17
msgid ""
"Below is an example that shows under what conditions the compiler keeps a "
"`static` item in the output object file."
msgstr ""

#: src/abi.md:21
msgid "// foo.rs\n"
msgstr ""

#: src/abi.md:22
msgid "// This is kept because of `#[used]`:\n"
msgstr ""

#: src/abi.md:26
msgid "// This is removable because it is unused:\n"
msgstr ""

#: src/abi.md:30
msgid "// This is kept because it is publicly reachable:\n"
msgstr ""

#: src/abi.md:33
msgid ""
"// This is kept because it is referenced by a public, reachable function:\n"
msgstr ""

#: src/abi.md:40
msgid ""
"// This is removable because it is referenced by a private, unused (dead) "
"function:\n"
msgstr ""

#: src/abi.md:60
msgid "The `no_mangle` attribute"
msgstr ""

#: src/abi.md:62
msgid ""
"The _`no_mangle` attribute_ may be used on any [item](items.md) to disable "
"standard symbol name mangling. The symbol for the item will be the "
"identifier of the item's name."
msgstr ""

#: src/abi.md:66
msgid ""
"Additionally, the item will be publicly exported from the produced library "
"or object file, similar to the [`used` attribute](#the-used-attribute)."
msgstr ""

#: src/abi.md:69
msgid ""
"This attribute is unsafe as an unmangled symbol may collide with another "
"symbol with the same name (or with a well-known symbol), leading to "
"undefined behavior."
msgstr ""

#: src/abi.md:77
msgid ""
"**Edition differences**: Before the 2024 edition it is allowed to use the "
"`no_mangle` attribute without the `unsafe` qualification."
msgstr ""

#: src/abi.md:79
msgid "The `link_section` attribute"
msgstr ""

#: src/abi.md:81
msgid ""
"The _`link_section` attribute_ specifies the section of the object file that "
"a [function](items/functions.md) or [static](items/static-items.md)'s "
"content will be placed into. It uses the [_MetaNameValueStr_]"
"(attributes.md#meta-item-attribute-syntax) syntax to specify the section "
"name."
msgstr ""

#: src/abi.md:85
msgid ""
"This attribute is unsafe as it allows users to place data and code into "
"sections of memory not expecting them, such as mutable data into read-only "
"areas."
msgstr ""

#: src/abi.md:91
msgid "\".example_section\""
msgstr ""

#: src/abi.md:95
msgid ""
"**Edition differences**: Before the 2024 edition it is allowed to use the "
"`link_section` attribute without the `unsafe` qualification."
msgstr ""

#: src/abi.md:97
msgid "The `export_name` attribute"
msgstr ""

#: src/abi.md:99
msgid ""
"The _`export_name` attribute_ specifies the name of the symbol that will be "
"exported on a [function](items/functions.md) or [static](items/static-"
"items.md). It uses the [_MetaNameValueStr_](attributes.md#meta-item-"
"attribute-syntax) syntax to specify the symbol name."
msgstr ""

#: src/abi.md:103
msgid ""
"This attribute is unsafe as a symbol with a custom name may collide with "
"another symbol with the same name (or with a well-known symbol), leading to "
"undefined behavior."
msgstr ""

#: src/abi.md:108
msgid "\"exported_symbol_name\""
msgstr ""

#: src/abi.md:112
msgid ""
"**Edition differences**: Before the 2024 edition it is allowed to use the "
"`export_name` attribute without the `unsafe` qualification."
msgstr ""

#: src/runtime.md:5
msgid ""
"This section documents features that define some aspects of the Rust runtime."
msgstr ""

#: src/runtime.md:9
msgid "The `panic_handler` attribute"
msgstr ""

#: src/runtime.md:13
msgid ""
"The _`panic_handler` attribute_ can only be applied to a function with "
"signature `fn(&PanicInfo) -> !`."
msgstr ""

#: src/runtime.md:18
msgid ""
"The function marked with this [attribute](attributes.md) defines the "
"behavior of panics."
msgstr ""

#: src/runtime.md:22
msgid ""
"The [`PanicInfo`](../core/panic/panic_info/struct.PanicInfo.html) struct "
"contains information about the location of the panic."
msgstr ""

#: src/runtime.md:26
msgid ""
"There must be a single `panic_handler` function in the dependency graph of a "
"binary, dylib or cdylib crate."
msgstr ""

#: src/runtime.md:28
msgid ""
"Below is shown a `panic_handler` function that logs the panic message and "
"then halts the thread."
msgstr ""

#: src/runtime.md:39
msgid "// ..\n"
msgstr ""

#: src/runtime.md:55
msgid "// logs \"panicked at '$reason', src/main.rs:27:4\" to some `sink`\n"
msgstr ""

#: src/runtime.md:64
msgid "Standard behavior"
msgstr ""

#: src/runtime.md:66
msgid ""
"The standard library provides an implementation of `panic_handler` that "
"defaults to unwinding the stack but that can be [changed to abort the "
"process](../book/ch09-01-unrecoverable-errors-with-panic.html). The standard "
"library's panic behavior can be modified at runtime with the [set_hook](../"
"std/panicking/fn.set_hook.html) function."
msgstr ""

#: src/runtime.md:73
msgid "The `global_allocator` attribute"
msgstr ""

#: src/runtime.md:75
msgid ""
"The _`global_allocator` attribute_ is used on a [static item](items/static-"
"items.md) implementing the [`GlobalAlloc`](../core/alloc/global/"
"trait.GlobalAlloc.html) trait to set the global allocator."
msgstr ""

#: src/runtime.md:80
msgid "The `windows_subsystem` attribute"
msgstr ""

#: src/runtime.md:84
msgid ""
"The _`windows_subsystem` attribute_ may be applied at the crate level to set "
"the [subsystem](https://msdn.microsoft.com/en-us/library/fcc1zstk.aspx) when "
"linking on a Windows target."
msgstr ""

#: src/runtime.md:89
msgid ""
"It uses the [_MetaNameValueStr_](attributes.md#meta-item-attribute-syntax) "
"syntax to specify the subsystem with a value of either `console` or "
"`windows`."
msgstr ""

#: src/runtime.md:94
msgid ""
"This attribute is ignored on non-Windows targets, and for non-`bin` [crate "
"types](linkage.md)."
msgstr ""

#: src/runtime.md:98
msgid ""
"The \"console\" subsystem is the default. If a console process is run from "
"an existing console then it will be attached to that console, otherwise a "
"new console window will be created."
msgstr ""

#: src/runtime.md:104
msgid ""
"The \"windows\" subsystem is commonly used by GUI applications that do not "
"want to display a console window on startup. It will run detached from any "
"existing console."
msgstr ""

#: src/macro-ambiguity.md:3
msgid "Appendix: Macro Follow-Set Ambiguity Formal Specification"
msgstr ""

#: src/macro-ambiguity.md:6
msgid ""
"This page documents the formal specification of the follow rules for [Macros "
"By Example](macros-by-example.md). They were originally specified in [RFC "
"550](https://github.com/rust-lang/rfcs/blob/master/text/0550-macro-future-"
"proofing.md), from which the bulk of this text is copied, and expanded upon "
"in subsequent RFCs."
msgstr ""

#: src/macro-ambiguity.md:12
msgid "Definitions & Conventions"
msgstr ""

#: src/macro-ambiguity.md:16
msgid "`macro`: anything invocable as `foo!(...)` in source code."
msgstr ""

#: src/macro-ambiguity.md:17
msgid "`MBE`: macro-by-example, a macro defined by `macro_rules`."
msgstr ""

#: src/macro-ambiguity.md:18
msgid ""
"`matcher`: the left-hand-side of a rule in a `macro_rules` invocation, or a "
"subportion thereof."
msgstr ""

#: src/macro-ambiguity.md:20
msgid ""
"`macro parser`: the bit of code in the Rust parser that will parse the input "
"using a grammar derived from all of the matchers."
msgstr ""

#: src/macro-ambiguity.md:22
msgid ""
"`fragment`: The class of Rust syntax that a given matcher will accept (or "
"\"match\")."
msgstr ""

#: src/macro-ambiguity.md:24
msgid "`repetition` : a fragment that follows a regular repeating pattern"
msgstr ""

#: src/macro-ambiguity.md:25
msgid ""
"`NT`: non-terminal, the various \"meta-variables\" or repetition matchers "
"that can appear in a matcher, specified in MBE syntax with a leading `$` "
"character."
msgstr ""

#: src/macro-ambiguity.md:28
msgid ""
"`simple NT`: a \"meta-variable\" non-terminal (further discussion below)."
msgstr ""

#: src/macro-ambiguity.md:29
msgid ""
"`complex NT`: a repetition matching non-terminal, specified via repetition "
"operators (`*`, `+`, `?`)."
msgstr ""

#: src/macro-ambiguity.md:31
msgid ""
"`token`: an atomic element of a matcher; i.e. identifiers, operators, open/"
"close delimiters, _and_ simple NT's."
msgstr ""

#: src/macro-ambiguity.md:33
msgid ""
"`token tree`: a tree structure formed from tokens (the leaves), complex "
"NT's, and finite sequences of token trees."
msgstr ""

#: src/macro-ambiguity.md:35
msgid ""
"`delimiter token`: a token that is meant to divide the end of one fragment "
"and the start of the next fragment."
msgstr ""

#: src/macro-ambiguity.md:37
msgid ""
"`separator token`: an optional delimiter token in an complex NT that "
"separates each pair of elements in the matched repetition."
msgstr ""

#: src/macro-ambiguity.md:39
msgid "`separated complex NT`: a complex NT that has its own separator token."
msgstr ""

#: src/macro-ambiguity.md:40
msgid ""
"`delimited sequence`: a sequence of token trees with appropriate open- and "
"close-delimiters at the start and end of the sequence."
msgstr ""

#: src/macro-ambiguity.md:42
msgid ""
"`empty fragment`: The class of invisible Rust syntax that separates tokens, "
"i.e. whitespace, or (in some lexical contexts), the empty token sequence."
msgstr ""

#: src/macro-ambiguity.md:44
msgid ""
"`fragment specifier`: The identifier in a simple NT that specifies which "
"fragment the NT accepts."
msgstr ""

#: src/macro-ambiguity.md:46
msgid "`language`: a context-free language."
msgstr ""

#: src/macro-ambiguity.md:58
msgid ""
"`(start $foo:expr $($i:ident),* end)` is a matcher. The whole matcher is a "
"delimited sequence (with open- and close-delimiters `(` and `)`), and `$foo` "
"and `$i` are simple NT's with `expr` and `ident` as their respective "
"fragment specifiers."
msgstr ""

#: src/macro-ambiguity.md:65
msgid ""
"`$(i:ident),*` is _also_ an NT; it is a complex NT that matches a comma-"
"separated repetition of identifiers. The `,` is the separator token for the "
"complex NT; it occurs in between each pair of elements (if any) of the "
"matched fragment."
msgstr ""

#: src/macro-ambiguity.md:70
msgid ""
"Another example of a complex NT is `$(hi $e:expr ;)+`, which matches any "
"fragment of the form `hi <expr>; hi <expr>; ...` where `hi <expr>;` occurs "
"at least once. Note that this complex NT does not have a dedicated separator "
"token."
msgstr ""

#: src/macro-ambiguity.md:75
msgid ""
"(Note that Rust's parser ensures that delimited sequences always occur with "
"proper nesting of token tree structure and correct matching of open- and "
"close-delimiters.)"
msgstr ""

#: src/macro-ambiguity.md:81
msgid ""
"We will tend to use the variable \"M\" to stand for a matcher, variables "
"\"t\" and \"u\" for arbitrary individual tokens, and the variables \"tt\" "
"and \"uu\" for arbitrary token trees. (The use of \"tt\" does present "
"potential ambiguity with its additional role as a fragment specifier; but it "
"will be clear from context which interpretation is meant.)"
msgstr ""

#: src/macro-ambiguity.md:89
msgid ""
"\"SEP\" will range over separator tokens, \"OP\" over the repetition "
"operators `*`, `+`, and `?`, \"OPEN\"/\"CLOSE\" over matching token pairs "
"surrounding a delimited sequence (e.g. `[` and `]`)."
msgstr ""

#: src/macro-ambiguity.md:95
msgid ""
"Greek letters \"α\" \"β\" \"γ\" \"δ\"  stand for potentially empty token-"
"tree sequences. (However, the Greek letter \"ε\" (epsilon) has a special "
"role in the presentation and does not stand for a token-tree sequence.)"
msgstr ""

#: src/macro-ambiguity.md:99
msgid ""
"This Greek letter convention is usually just employed when the presence of a "
"sequence is a technical detail; in particular, when we wish to _emphasize_ "
"that we are operating on a sequence of token-trees, we will use the notation "
"\"tt ...\" for the sequence, not a Greek letter."
msgstr ""

#: src/macro-ambiguity.md:104
msgid ""
"Note that a matcher is merely a token tree. A \"simple NT\", as mentioned "
"above, is an meta-variable NT; thus it is a non-repetition. For example, "
"`$foo:ty` is a simple NT but `$($foo:ty)+` is a complex NT."
msgstr ""

#: src/macro-ambiguity.md:108
msgid ""
"Note also that in the context of this formalism, the term \"token\" "
"generally _includes_ simple NTs."
msgstr ""

#: src/macro-ambiguity.md:111
msgid ""
"Finally, it is useful for the reader to keep in mind that according to the "
"definitions of this formalism, no simple NT matches the empty fragment, and "
"likewise no token matches the empty fragment of Rust syntax. (Thus, the "
"_only_ NT that can match the empty fragment is a complex NT.) This is not "
"actually true, because the `vis` matcher can match an empty fragment. Thus, "
"for the purposes of the formalism, we will treat `$v:vis` as actually being "
"`$($v:vis)?`, with a requirement that the matcher match an empty fragment."
msgstr ""

#: src/macro-ambiguity.md:121
msgid "The Matcher Invariants"
msgstr ""

#: src/macro-ambiguity.md:125
msgid ""
"To be valid, a matcher must meet the following three invariants. The "
"definitions of FIRST and FOLLOW are described later."
msgstr ""

#: src/macro-ambiguity.md:128
msgid ""
"For any two successive token tree sequences in a matcher `M` (i.e. `M = ... "
"tt uu ...`) with `uu ...` nonempty, we must have FOLLOW(`... tt`) ∪ {ε} ⊇ "
"FIRST(`uu ...`)."
msgstr ""

#: src/macro-ambiguity.md:131
msgid ""
"For any separated complex NT in a matcher, `M = ... $(tt ...) SEP OP ...`, "
"we must have `SEP` ∈ FOLLOW(`tt ...`)."
msgstr ""

#: src/macro-ambiguity.md:133
msgid ""
"For an unseparated complex NT in a matcher, `M = ... $(tt ...) OP ...`, if "
"OP = `*` or `+`, we must have FOLLOW(`tt ...`) ⊇ FIRST(`tt ...`)."
msgstr ""

#: src/macro-ambiguity.md:138
msgid ""
"The first invariant says that whatever actual token that comes after a "
"matcher, if any, must be somewhere in the predetermined follow set.  This "
"ensures that a legal macro definition will continue to assign the same "
"determination as to where `... tt` ends and `uu ...` begins, even as new "
"syntactic forms are added to the language."
msgstr ""

#: src/macro-ambiguity.md:146
msgid ""
"The second invariant says that a separated complex NT must use a separator "
"token that is part of the predetermined follow set for the internal contents "
"of the NT. This ensures that a legal macro definition will continue to parse "
"an input fragment into the same delimited sequence of `tt ...`'s, even as "
"new syntactic forms are added to the language."
msgstr ""

#: src/macro-ambiguity.md:154
msgid ""
"The third invariant says that when we have a complex NT that can match two "
"or more copies of the same thing with no separation in between, it must be "
"permissible for them to be placed next to each other as per the first "
"invariant. This invariant also requires they be nonempty, which eliminates a "
"possible ambiguity."
msgstr ""

#: src/macro-ambiguity.md:160
msgid ""
"**NOTE: The third invariant is currently unenforced due to historical "
"oversight and significant reliance on the behaviour. It is currently "
"undecided what to do about this going forward. Macros that do not respect "
"the behaviour may become invalid in a future edition of Rust. See the "
"[tracking issue](https://github.com/rust-lang/rust/issues/56575).**"
msgstr ""

#: src/macro-ambiguity.md:167
msgid "FIRST and FOLLOW, informally"
msgstr ""

#: src/macro-ambiguity.md:171
msgid "A given matcher M maps to three sets: FIRST(M), LAST(M) and FOLLOW(M)."
msgstr ""

#: src/macro-ambiguity.md:173
msgid ""
"Each of the three sets is made up of tokens. FIRST(M) and LAST(M) may also "
"contain a distinguished non-token element ε (\"epsilon\"), which indicates "
"that M can match the empty fragment. (But FOLLOW(M) is always just a set of "
"tokens.)"
msgstr ""

#: src/macro-ambiguity.md:177
msgid "Informally:"
msgstr ""

#: src/macro-ambiguity.md:181
msgid ""
"FIRST(M): collects the tokens potentially used first when matching a "
"fragment to M."
msgstr ""

#: src/macro-ambiguity.md:186
msgid ""
"LAST(M): collects the tokens potentially used last when matching a fragment "
"to M."
msgstr ""

#: src/macro-ambiguity.md:191
msgid ""
"FOLLOW(M): the set of tokens allowed to follow immediately after some "
"fragment matched by M."
msgstr ""

#: src/macro-ambiguity.md:194
msgid ""
"In other words: t ∈ FOLLOW(M) if and only if there exists (potentially "
"empty) token sequences α, β, γ, δ where:"
msgstr ""

#: src/macro-ambiguity.md:197
msgid "M matches β,"
msgstr ""

#: src/macro-ambiguity.md:199
msgid "t matches γ, and"
msgstr ""

#: src/macro-ambiguity.md:201
msgid "The concatenation α β γ δ is a parseable Rust program."
msgstr ""

#: src/macro-ambiguity.md:205
msgid ""
"We use the shorthand ANYTOKEN to denote the set of all tokens (including "
"simple NTs). For example, if any token is legal after a matcher M, then "
"FOLLOW(M) = ANYTOKEN."
msgstr ""

#: src/macro-ambiguity.md:209
msgid ""
"(To review one's understanding of the above informal descriptions, the "
"reader at this point may want to jump ahead to the [examples of FIRST/LAST]"
"(#examples-of-first-and-last) before reading their formal definitions.)"
msgstr ""

#: src/macro-ambiguity.md:216
msgid "FIRST, LAST"
msgstr ""

#: src/macro-ambiguity.md:220
msgid "Below are formal inductive definitions for FIRST and LAST."
msgstr ""

#: src/macro-ambiguity.md:224
msgid ""
"\"A ∪ B\" denotes set union, \"A ∩ B\" denotes set intersection, and \"A \\ "
"B\" denotes set difference (i.e. all elements of A that are not present in "
"B)."
msgstr ""

#: src/macro-ambiguity.md:229
msgid "FIRST"
msgstr ""

#: src/macro-ambiguity.md:233
msgid ""
"FIRST(M) is defined by case analysis on the sequence M and the structure of "
"its first token-tree (if any):"
msgstr ""

#: src/macro-ambiguity.md:238
msgid "if M is the empty sequence, then FIRST(M) = { ε },"
msgstr ""

#: src/macro-ambiguity.md:242
msgid "if M starts with a token t, then FIRST(M) = { t },"
msgstr ""

#: src/macro-ambiguity.md:244
msgid ""
"(Note: this covers the case where M starts with a delimited token-tree "
"sequence, `M = OPEN tt ... CLOSE ...`, in which case `t = OPEN` and thus "
"FIRST(M) = { `OPEN` }.)"
msgstr ""

#: src/macro-ambiguity.md:248
msgid ""
"(Note: this critically relies on the property that no simple NT matches the "
"empty fragment.)"
msgstr ""

#: src/macro-ambiguity.md:253
msgid ""
"Otherwise, M is a token-tree sequence starting with a complex NT: `M = $"
"( tt ... ) OP α`, or `M = $( tt ... ) SEP OP α`, (where `α` is the "
"(potentially empty) sequence of token trees for the rest of the matcher)."
msgstr ""

#: src/macro-ambiguity.md:257
msgid ""
"Let SEP\\_SET(M) = { SEP } if SEP is present and ε ∈ FIRST(`tt ...`); "
"otherwise SEP\\_SET(M) = {}."
msgstr ""

#: src/macro-ambiguity.md:260
msgid ""
"Let ALPHA\\_SET(M) = FIRST(`α`) if OP = `*` or `?` and ALPHA\\_SET(M) = {} "
"if OP = `+`."
msgstr ""

#: src/macro-ambiguity.md:262
msgid "FIRST(M) = (FIRST(`tt ...`) \\\\ {ε}) ∪ SEP\\_SET(M) ∪ ALPHA\\_SET(M)."
msgstr ""

#: src/macro-ambiguity.md:264
msgid ""
"The definition for complex NTs deserves some justification. SEP\\_SET(M) "
"defines the possibility that the separator could be a valid first token for "
"M, which happens when there is a separator defined and the repeated fragment "
"could be empty. ALPHA\\_SET(M) defines the possibility that the complex NT "
"could be empty, meaning that M's valid first tokens are those of the "
"following token-tree sequences `α`. This occurs when either `*` or `?` is "
"used, in which case there could be zero repetitions. In theory, this could "
"also occur if `+` was used with a potentially-empty repeating fragment, but "
"this is forbidden by the third invariant."
msgstr ""

#: src/macro-ambiguity.md:274
msgid ""
"From there, clearly FIRST(M) can include any token from SEP\\_SET(M) or "
"ALPHA\\_SET(M), and if the complex NT match is nonempty, then any token "
"starting FIRST(`tt ...`) could work too. The last piece to consider is ε. "
"SEP\\_SET(M) and FIRST(`tt ...`) \\ {ε} cannot contain ε, but ALPHA\\_SET(M) "
"could. Hence, this definition allows M to accept ε if and only if ε ∈ "
"ALPHA\\_SET(M) does. This is correct because for M to accept ε in the "
"complex NT case, both the complex NT and α must accept it. If OP = `+`, "
"meaning that the complex NT cannot be empty, then by definition ε ∉ "
"ALPHA\\_SET(M). Otherwise, the complex NT can accept zero repetitions, and "
"then ALPHA\\_SET(M) = FOLLOW(`α`). So this definition is correct with "
"respect to \\varepsilon as well."
msgstr ""

#: src/macro-ambiguity.md:287
msgid "LAST"
msgstr ""

#: src/macro-ambiguity.md:291
msgid ""
"LAST(M), defined by case analysis on M itself (a sequence of token-trees):"
msgstr ""

#: src/macro-ambiguity.md:295
msgid "if M is the empty sequence, then LAST(M) = { ε }"
msgstr ""

#: src/macro-ambiguity.md:299
msgid "if M is a singleton token t, then LAST(M) = { t }"
msgstr ""

#: src/macro-ambiguity.md:303
msgid ""
"if M is the singleton complex NT repeating zero or more times, `M = $"
"( tt ... ) *`, or `M = $( tt ... ) SEP *`"
msgstr ""

#: src/macro-ambiguity.md:306 src/macro-ambiguity.md:318
msgid "Let sep_set = { SEP } if SEP present; otherwise sep_set = {}."
msgstr ""

#: src/macro-ambiguity.md:308 src/macro-ambiguity.md:320
msgid "if ε ∈ LAST(`tt ...`) then LAST(M) = LAST(`tt ...`) ∪ sep_set"
msgstr ""

#: src/macro-ambiguity.md:310
msgid ""
"otherwise, the sequence `tt ...` must be non-empty; LAST(M) = LAST(`tt ...`) "
"∪ {ε}."
msgstr ""

#: src/macro-ambiguity.md:315
msgid ""
"if M is the singleton complex NT repeating one or more times, `M = $"
"( tt ... ) +`, or `M = $( tt ... ) SEP +`"
msgstr ""

#: src/macro-ambiguity.md:322
msgid ""
"otherwise, the sequence `tt ...` must be non-empty; LAST(M) = LAST(`tt ...`)"
msgstr ""

#: src/macro-ambiguity.md:327
msgid ""
"if M is the singleton complex NT repeating zero or one time, `M = $"
"( tt ...) ?`, then LAST(M) = LAST(`tt ...`) ∪ {ε}."
msgstr ""

#: src/macro-ambiguity.md:332
msgid ""
"if M is a delimited token-tree sequence `OPEN tt ... CLOSE`, then LAST(M) = "
"{ `CLOSE` }."
msgstr ""

#: src/macro-ambiguity.md:337
msgid "if M is a non-empty sequence of token-trees `tt uu ...`,"
msgstr ""

#: src/macro-ambiguity.md:339
msgid ""
"If ε ∈ LAST(`uu ...`), then LAST(M) = LAST(`tt`) ∪ (LAST(`uu ...`) \\ { ε })."
msgstr ""

#: src/macro-ambiguity.md:341
msgid ""
"Otherwise, the sequence `uu ...` must be non-empty; then LAST(M) = "
"LAST(`uu ...`)."
msgstr ""

#: src/macro-ambiguity.md:344
msgid "Examples of FIRST and LAST"
msgstr ""

#: src/macro-ambiguity.md:346
msgid ""
"Below are some examples of FIRST and LAST. (Note in particular how the "
"special ε element is introduced and eliminated based on the interaction "
"between the pieces of the input.)"
msgstr ""

#: src/macro-ambiguity.md:350
msgid ""
"Our first example is presented in a tree structure to elaborate on how the "
"analysis of the matcher composes. (Some of the simpler subtrees have been "
"elided.)"
msgstr ""

#: src/macro-ambiguity.md:378
msgid "Thus:"
msgstr ""

#: src/macro-ambiguity.md:380
msgid ""
"FIRST(`$($d:ident $e:expr );* $( $(h)* );* $( f ;)+ g`) = { `$d:ident`, `h`, "
"`;`, `f` }"
msgstr ""

#: src/macro-ambiguity.md:382
msgid "Note however that:"
msgstr ""

#: src/macro-ambiguity.md:384
msgid ""
"FIRST(`$($d:ident $e:expr );* $( $(h)* );* $($( f ;)+ g)*`) = { `$d:ident`, "
"`h`, `;`, `f`, ε }"
msgstr ""

#: src/macro-ambiguity.md:386
msgid "Here are similar examples but now for LAST."
msgstr ""

#: src/macro-ambiguity.md:388
msgid "LAST(`$d:ident $e:expr`) = { `$e:expr` }"
msgstr ""

#: src/macro-ambiguity.md:389
msgid "LAST(`$( $d:ident $e:expr );*`) = { `$e:expr`, ε }"
msgstr ""

#: src/macro-ambiguity.md:390
msgid "LAST(`$( $d:ident $e:expr );* $(h)*`) = { `$e:expr`, ε, `h` }"
msgstr ""

#: src/macro-ambiguity.md:391
msgid "LAST(`$( $d:ident $e:expr );* $(h)* $( f ;)+`) = { `;` }"
msgstr ""

#: src/macro-ambiguity.md:392
msgid "LAST(`$( $d:ident $e:expr );* $(h)* $( f ;)+ g`) = { `g` }"
msgstr ""

#: src/macro-ambiguity.md:396
msgid "FOLLOW(M)"
msgstr ""

#: src/macro-ambiguity.md:400
msgid ""
"Finally, the definition for FOLLOW(M) is built up as follows. pat, expr, "
"etc. represent simple nonterminals with the given fragment specifier."
msgstr ""

#: src/macro-ambiguity.md:405
msgid "FOLLOW(pat) = {`=>`, `,`, `=`, `|`, `if`, `in`}\\`."
msgstr ""

#: src/macro-ambiguity.md:409
msgid "FOLLOW(expr) = FOLLOW(expr_2021) = FOLLOW(stmt) =  {`=>`, `,`, `;`}\\`."
msgstr ""

#: src/macro-ambiguity.md:413
msgid ""
"FOLLOW(ty) = FOLLOW(path) = {`{`, `[`, `,`, `=>`, `:`, `=`, `>`, `>>`, `;`, "
"`|`, `as`, `where`, block nonterminals}."
msgstr ""

#: src/macro-ambiguity.md:418
msgid ""
"FOLLOW(vis) = {`,`l any keyword or identifier except a non-raw `priv`; any "
"token that can begin a type; ident, ty, and path nonterminals}."
msgstr ""

#: src/macro-ambiguity.md:423
msgid ""
"FOLLOW(t) = ANYTOKEN for any other simple token, including block, ident, tt, "
"item, lifetime, literal and meta simple nonterminals, and all terminals."
msgstr ""

#: src/macro-ambiguity.md:428
msgid ""
"FOLLOW(M), for any other M, is defined as the intersection, as t ranges over "
"(LAST(M) \\ {ε}), of FOLLOW(t)."
msgstr ""

#: src/macro-ambiguity.md:433
msgid ""
"The tokens that can begin a type are, as of this writing, {`(`, `[`, `!`, "
"`*`, `&`, `&&`, `?`, lifetimes, `>`, `>>`, `::`, any non-keyword identifier, "
"`super`, `self`, `Self`, `extern`, `crate`, `$crate`, `_`, `for`, `impl`, "
"`fn`, `unsafe`, `typeof`, `dyn`}, although this list may not be complete "
"because people won't always remember to update the appendix when new ones "
"are added."
msgstr ""

#: src/macro-ambiguity.md:439
msgid "Examples of FOLLOW for complex M:"
msgstr ""

#: src/macro-ambiguity.md:441
msgid "FOLLOW(`$( $d:ident $e:expr )*`) = FOLLOW(`$e:expr`)"
msgstr ""

#: src/macro-ambiguity.md:442
msgid ""
"FOLLOW(`$( $d:ident $e:expr )* $(;)*`) = FOLLOW(`$e:expr`) ∩ ANYTOKEN = "
"FOLLOW(`$e:expr`)"
msgstr ""

#: src/macro-ambiguity.md:443
msgid "FOLLOW(`$( $d:ident $e:expr )* $(;)* $( f |)+`) = ANYTOKEN"
msgstr ""

#: src/macro-ambiguity.md:445
msgid "Examples of valid and invalid matchers"
msgstr ""

#: src/macro-ambiguity.md:447
msgid ""
"With the above specification in hand, we can present arguments for why "
"particular matchers are legal and others are not."
msgstr ""

#: src/macro-ambiguity.md:450
msgid ""
"`($ty:ty < foo ,)` : illegal, because FIRST(`< foo ,`) = { `<` } ⊈ "
"FOLLOW(`ty`)"
msgstr ""

#: src/macro-ambiguity.md:452
msgid ""
"`($ty:ty , foo <)` : legal, because FIRST(`, foo <`) = { `,` }  is ⊆ "
"FOLLOW(`ty`)."
msgstr ""

#: src/macro-ambiguity.md:454
msgid ""
"`($pa:pat $pb:pat $ty:ty ,)` : illegal, because FIRST(`$pb:pat $ty:ty ,`) = "
"{ `$pb:pat` } ⊈ FOLLOW(`pat`), and also FIRST(`$ty:ty ,`) = { `$ty:ty` } ⊈ "
"FOLLOW(`pat`)."
msgstr ""

#: src/macro-ambiguity.md:456
msgid ""
"`( $($a:tt $b:tt)* ; )` : legal, because FIRST(`$b:tt`) = { `$b:tt` } is ⊆ "
"FOLLOW(`tt`) = ANYTOKEN, as is FIRST(`;`) = { `;` }."
msgstr ""

#: src/macro-ambiguity.md:458
msgid ""
"`( $($t:tt),* , $(t:tt),* )` : legal,  (though any attempt to actually use "
"this macro will signal a local ambiguity error during expansion)."
msgstr ""

#: src/macro-ambiguity.md:460
msgid ""
"`($ty:ty $(; not sep)* -)` : illegal, because FIRST(`$(; not sep)* -`) = "
"{ `;`, `-` } is not in FOLLOW(`ty`)."
msgstr ""

#: src/macro-ambiguity.md:462
msgid ""
"`($($ty:ty)-+)` : illegal, because separator `-` is not in FOLLOW(`ty`)."
msgstr ""

#: src/macro-ambiguity.md:464
msgid "`($($e:expr)*)` : illegal, because expr NTs are not in FOLLOW(expr NT)."
msgstr ""

#: src/influences.md:3
msgid ""
"Rust is not a particularly original language, with design elements coming "
"from a wide range of sources. Some of these are listed below (including "
"elements that have since been removed):"
msgstr ""

#: src/influences.md:7
msgid ""
"SML, OCaml: algebraic data types, pattern matching, type inference, "
"semicolon statement separation"
msgstr ""

#: src/influences.md:9
msgid ""
"C++: references, RAII, smart pointers, move semantics, monomorphization, "
"memory model"
msgstr ""

#: src/influences.md:11
msgid "ML Kit, Cyclone: region based memory management"
msgstr ""

#: src/influences.md:12
msgid "Haskell (GHC): typeclasses, type families"
msgstr ""

#: src/influences.md:13
msgid "Newsqueak, Alef, Limbo: channels, concurrency"
msgstr ""

#: src/influences.md:14
msgid ""
"Erlang: message passing, thread failure, <strike>linked thread failure</"
"strike>, <strike>lightweight concurrency</strike>"
msgstr ""

#: src/influences.md:16
msgid "Swift: optional bindings"
msgstr ""

#: src/influences.md:17
msgid "Scheme: hygienic macros"
msgstr ""

#: src/influences.md:18
msgid "C#: attributes"
msgstr ""

#: src/influences.md:19
msgid "Ruby: closure syntax, <strike>block syntax</strike>"
msgstr ""

#: src/influences.md:20
msgid "NIL, Hermes: <strike>typestate</strike>"
msgstr ""

#: src/influences.md:21
msgid ""
"[Unicode Annex #31](http://www.unicode.org/reports/tr31/): identifier and "
"pattern syntax"
msgstr ""

#: src/test-summary.md:3
msgid ""
"The following is a summary of the total tests that are linked to individual "
"rule identifiers within the reference."
msgstr ""

#: src/glossary.md:3
msgid "Abstract syntax tree"
msgstr ""

#: src/glossary.md:5
msgid ""
"An ‘abstract syntax tree’, or ‘AST’, is an intermediate representation of "
"the structure of the program when the compiler is compiling it."
msgstr ""

#: src/glossary.md:8
msgid "Alignment"
msgstr ""

#: src/glossary.md:10
msgid ""
"The alignment of a value specifies what addresses values are preferred to "
"start at. Always a power of two. References to a value must be aligned. "
"[More](type-layout.md#size-and-alignment)."
msgstr ""

#: src/glossary.md:14
msgid "Arity"
msgstr ""

#: src/glossary.md:16
msgid ""
"Arity refers to the number of arguments a function or operator takes. For "
"some examples, `f(2, 3)` and `g(4, 6)` have arity 2, while `h(8, 2, 6)` has "
"arity 3. The `!` operator has arity 1."
msgstr ""

#: src/glossary.md:20
msgid "Array"
msgstr ""

#: src/glossary.md:22
msgid ""
"An array, sometimes also called a fixed-size array or an inline array, is a "
"value describing a collection of elements, each selected by an index that "
"can be computed at run time by the program. It occupies a contiguous region "
"of memory."
msgstr ""

#: src/glossary.md:26
msgid "Associated item"
msgstr ""

#: src/glossary.md:28
msgid ""
"An associated item is an item that is associated with another item. "
"Associated items are defined in [implementations](items/implementations.md) "
"and declared in [traits](items/traits.md). Only functions, constants, and "
"type aliases can be associated. Contrast to a [free item](#free-item)."
msgstr ""

#: src/glossary.md:33
msgid "Blanket implementation"
msgstr ""

#: src/glossary.md:35
msgid ""
"Any implementation where a type appears [uncovered](#uncovered-type). "
"`impl<T> Foo for T`, `impl<T> Bar<T> for T`, `impl<T> Bar<Vec<T>> for T`, "
"and `impl<T> Bar<T> for Vec<T>` are considered blanket impls. However, "
"`impl<T> Bar<Vec<T>> for Vec<T>` is not a blanket impl, as all instances of "
"`T` which appear in this `impl` are covered by `Vec`."
msgstr ""

#: src/glossary.md:41
msgid "Bound"
msgstr ""

#: src/glossary.md:43
msgid ""
"Bounds are constraints on a type or trait. For example, if a bound is placed "
"on the argument a function takes, types passed to that function must abide "
"by that constraint."
msgstr ""

#: src/glossary.md:47
msgid "Combinator"
msgstr ""

#: src/glossary.md:49
msgid ""
"Combinators are higher-order functions that apply only functions and earlier "
"defined combinators to provide a result from its arguments. They can be used "
"to manage control flow in a modular fashion."
msgstr ""

#: src/glossary.md:53
msgid "Crate"
msgstr ""

#: src/glossary.md:55
msgid ""
"A crate is the unit of compilation and linking. There are different [types "
"of crates](linkage.md), such as libraries or executables. Crates may link "
"and refer to other library crates, called external crates. A crate has a "
"self-contained tree of [modules](items/modules.md), starting from an unnamed "
"root module called the crate root. [Items](items.md) may be made visible to "
"other crates by marking them as public in the crate root, including through "
"[paths](paths.md) of public modules. [More](crates-and-source-files.md)."
msgstr ""

#: src/glossary.md:63
msgid "Dispatch"
msgstr ""

#: src/glossary.md:65
msgid ""
"Dispatch is the mechanism to determine which specific version of code is "
"actually run when it involves polymorphism. Two major forms of dispatch are "
"static dispatch and dynamic dispatch. While Rust favors static dispatch, it "
"also supports dynamic dispatch through a mechanism called ‘trait objects’."
msgstr ""

#: src/glossary.md:70
msgid "Dynamically sized type"
msgstr ""

#: src/glossary.md:72
msgid ""
"A dynamically sized type (DST) is a type without a statically known size or "
"alignment."
msgstr ""

#: src/glossary.md:74
msgid "Entity"
msgstr ""

#: src/glossary.md:76
msgid ""
"An [_entity_](names.md) is a language construct that can be referred to in "
"some way within the source program, usually via a [path](paths.md). Entities "
"include [types](types.md), [items](items.md), [generic parameters](items/"
"generics.md), [variable bindings](patterns.md), [loop labels]"
"(tokens.md#lifetimes-and-loop-labels), [lifetimes](tokens.md#lifetimes-and-"
"loop-labels), [fields](expressions/field-expr.md), [attributes]"
"(attributes.md), and [lints](attributes/diagnostics.md#lint-check-"
"attributes)."
msgstr ""

#: src/glossary.md:83
msgid ""
"An expression is a combination of values, constants, variables, operators "
"and functions that evaluate to a single value, with or without side-effects."
msgstr ""

#: src/glossary.md:86
msgid "For example, `2 + (3 * 4)` is an expression that returns the value 14."
msgstr ""

#: src/glossary.md:88
msgid "Free item"
msgstr ""

#: src/glossary.md:90
msgid ""
"An [item](items.md) that is not a member of an [implementation](items/"
"implementations.md), such as a _free function_ or a _free const_. Contrast "
"to an [associated item](#associated-item)."
msgstr ""

#: src/glossary.md:93
msgid "Fundamental traits"
msgstr ""

#: src/glossary.md:95
msgid ""
"A fundamental trait is one where adding an impl of it for an existing type "
"is a breaking change. The `Fn` traits and `Sized` are fundamental."
msgstr ""

#: src/glossary.md:98
msgid "Fundamental type constructors"
msgstr ""

#: src/glossary.md:100
msgid ""
"A fundamental type constructor is a type where implementing a [blanket "
"implementation](#blanket-implementation) over it is a breaking change. `&`, "
"`&mut`, `Box`, and `Pin`  are fundamental."
msgstr ""

#: src/glossary.md:103
msgid ""
"Any time a type `T` is considered [local](#local-type), `&T`, `&mut T`, "
"`Box<T>`, and `Pin<T>` are also considered local. Fundamental type "
"constructors cannot [cover](#uncovered-type) other types. Any time the term "
"\"covered type\" is used, the `T` in `&T`, `&mut T`, `Box<T>`, and `Pin<T>` "
"is not considered covered."
msgstr ""

#: src/glossary.md:108
msgid "Inhabited"
msgstr ""

#: src/glossary.md:110
msgid ""
"A type is inhabited if it has constructors and therefore can be "
"instantiated. An inhabited type is not \"empty\" in the sense that there can "
"be values of the type. Opposite of [Uninhabited](#uninhabited)."
msgstr ""

#: src/glossary.md:114
msgid "Inherent implementation"
msgstr ""

#: src/glossary.md:116
msgid ""
"An [implementation](items/implementations.md) that applies to a nominal "
"type, not to a trait-type pair. [More](items/implementations.md#inherent-"
"implementations)."
msgstr ""

#: src/glossary.md:119
msgid "Inherent method"
msgstr ""

#: src/glossary.md:121
msgid ""
"A [method](items/associated-items.md#methods) defined in an [inherent "
"implementation](items/implementations.md#inherent-implementations), not in a "
"trait implementation."
msgstr ""

#: src/glossary.md:124
msgid "Initialized"
msgstr ""

#: src/glossary.md:126
msgid ""
"A variable is initialized if it has been assigned a value and hasn't since "
"been moved from. All other memory locations are assumed to be uninitialized. "
"Only unsafe Rust can create a memory location without initializing it."
msgstr ""

#: src/glossary.md:130
msgid "Local trait"
msgstr ""

#: src/glossary.md:132
msgid ""
"A `trait` which was defined in the current crate. A trait definition is "
"local or not independent of applied type arguments. Given `trait Foo<T, U>`, "
"`Foo` is always local, regardless of the types substituted for `T` and `U`."
msgstr ""

#: src/glossary.md:136
msgid "Local type"
msgstr ""

#: src/glossary.md:138
msgid ""
"A `struct`, `enum`, or `union` which was defined in the current crate. This "
"is not affected by applied type arguments. `struct Foo` is considered local, "
"but `Vec<Foo>` is not. `LocalType<ForeignType>` is local. Type aliases do "
"not affect locality."
msgstr ""

#: src/glossary.md:143
msgid "Module"
msgstr ""

#: src/glossary.md:145
msgid ""
"A module is a container for zero or more [items](items.md). Modules are "
"organized in a tree, starting from an unnamed module at the root called the "
"crate root or the root module. [Paths](paths.md) may be used to refer to "
"items from other modules, which may be restricted by [visibility rules]"
"(visibility-and-privacy.md). [More](items/modules.md)"
msgstr ""

#: src/glossary.md:153
msgid ""
"A [_name_](names.md) is an [identifier](identifiers.md) or [lifetime or loop "
"label](tokens.md#lifetimes-and-loop-labels) that refers to an [entity]"
"(#entity). A _name binding_ is when an entity declaration introduces an "
"identifier or label associated with that entity. [Paths](paths.md), "
"identifiers, and labels are used to refer to an entity."
msgstr ""

#: src/glossary.md:160
msgid ""
"[_Name resolution_](names/name-resolution.md) is the compile-time process of "
"tying [paths](paths.md), [identifiers](identifiers.md), and [labels]"
"(tokens.md#lifetimes-and-loop-labels) to [entity](#entity) declarations."
msgstr ""

#: src/glossary.md:163
msgid "Namespace"
msgstr ""

#: src/glossary.md:165
msgid ""
"A _namespace_ is a logical grouping of declared [names](#name) based on the "
"kind of [entity](#entity) the name refers to. Namespaces allow the "
"occurrence of a name in one namespace to not conflict with the same name in "
"another namespace."
msgstr ""

#: src/glossary.md:170
msgid ""
"Within a namespace, names are organized in a hierarchy, where each level of "
"the hierarchy has its own collection of named entities."
msgstr ""

#: src/glossary.md:173
msgid "Nominal types"
msgstr ""

#: src/glossary.md:175
msgid ""
"Types that can be referred to by a path directly. Specifically [enums](items/"
"enumerations.md), [structs](items/structs.md), [unions](items/unions.md), "
"and [trait object types](types/trait-object.md)."
msgstr ""

#: src/glossary.md:178
msgid "Dyn-compatible traits"
msgstr ""

#: src/glossary.md:180
msgid ""
"[Traits](items/traits.md) that can be used in [trait object types](types/"
"trait-object.md) (`dyn Trait`). Only traits that follow specific [rules]"
"(items/traits.md#dyn-compatibility) are _dyn compatible_."
msgstr ""

#: src/glossary.md:183
msgid "These were formerly known as _object safe_ traits."
msgstr ""

#: src/glossary.md:185
msgid "Path"
msgstr ""

#: src/glossary.md:187
msgid ""
"A [_path_](paths.md) is a sequence of one or more path segments used to "
"refer to an [entity](#entity) in the current scope or other levels of a "
"[namespace](#namespace) hierarchy."
msgstr ""

#: src/glossary.md:191
msgid "Prelude"
msgstr ""

#: src/glossary.md:193
msgid ""
"Prelude, or The Rust Prelude, is a small collection of items - mostly traits "
"- that are imported into every module of every crate. The traits in the "
"prelude are pervasive."
msgstr ""

#: src/glossary.md:198
msgid ""
"A [_scope_](names/scopes.md) is the region of source text where a named "
"[entity](#entity) may be referenced with that name."
msgstr ""

#: src/glossary.md:201
msgid "Scrutinee"
msgstr ""

#: src/glossary.md:203
msgid ""
"A scrutinee is the expression that is matched on in `match` expressions and "
"similar pattern matching constructs. For example, in `match x { A => 1, B => "
"2 }`, the expression `x` is the scrutinee."
msgstr ""

#: src/glossary.md:207
msgid "Size"
msgstr ""

#: src/glossary.md:209
msgid "The size of a value has two definitions."
msgstr ""

#: src/glossary.md:211
msgid ""
"The first is that it is how much memory must be allocated to store that "
"value."
msgstr ""

#: src/glossary.md:213
msgid ""
"The second is that it is the offset in bytes between successive elements in "
"an array with that item type."
msgstr ""

#: src/glossary.md:216
msgid ""
"It is a multiple of the alignment, including zero. The size can change "
"depending on compiler version (as new optimizations are made) and target "
"platform (similar to how `usize` varies per-platform)."
msgstr ""

#: src/glossary.md:220
msgid "[More](type-layout.md#size-and-alignment)."
msgstr ""

#: src/glossary.md:222
msgid "Slice"
msgstr ""

#: src/glossary.md:224
msgid ""
"A slice is dynamically-sized view into a contiguous sequence, written as "
"`[T]`."
msgstr ""

#: src/glossary.md:226
msgid ""
"It is often seen in its borrowed forms, either mutable or shared. The shared "
"slice type is `&[T]`, while the mutable slice type is `&mut [T]`, where `T` "
"represents the element type."
msgstr ""

#: src/glossary.md:230
msgid "Statement"
msgstr ""

#: src/glossary.md:232
msgid ""
"A statement is the smallest standalone element of a programming language "
"that commands a computer to perform an action."
msgstr ""

#: src/glossary.md:235
msgid "String literal"
msgstr ""

#: src/glossary.md:237
msgid ""
"A string literal is a string stored directly in the final binary, and so "
"will be valid for the `'static` duration."
msgstr ""

#: src/glossary.md:240
msgid "Its type is `'static` duration borrowed string slice, `&'static str`."
msgstr ""

#: src/glossary.md:242
msgid "String slice"
msgstr ""

#: src/glossary.md:244
msgid ""
"A string slice is the most primitive string type in Rust, written as `str`. "
"It is often seen in its borrowed forms, either mutable or shared. The shared "
"string slice type is `&str`, while the mutable string slice type is `&mut "
"str`."
msgstr ""

#: src/glossary.md:248
msgid "Strings slices are always valid UTF-8."
msgstr ""

#: src/glossary.md:250
msgid "Trait"
msgstr ""

#: src/glossary.md:252
msgid ""
"A trait is a language item that is used for describing the functionalities a "
"type must provide. It allows a type to make certain promises about its "
"behavior."
msgstr ""

#: src/glossary.md:255
msgid ""
"Generic functions and generic structs can use traits to constrain, or bound, "
"the types they accept."
msgstr ""

#: src/glossary.md:257
msgid "Turbofish"
msgstr ""

#: src/glossary.md:259
msgid ""
"Paths with generic parameters in expressions must prefix the opening "
"brackets with a `::`. Combined with the angular brackets for generics, this "
"looks like a fish `::<>`. As such, this syntax is colloquially referred to "
"as turbofish syntax."
msgstr ""

#: src/glossary.md:270
msgid ""
"This `::` prefix is required to disambiguate generic paths with multiple "
"comparisons in a comma-separate list. See [the bastion of the turbofish]"
"(https://github.com/rust-lang/rust/blob/1.58.0/src/test/ui/parser/bastion-of-"
"the-turbofish.rs) for an example where not having the prefix would be "
"ambiguous."
msgstr ""

#: src/glossary.md:273
msgid "Uncovered type"
msgstr ""

#: src/glossary.md:275
msgid ""
"A type which does not appear as an argument to another type. For example, "
"`T` is uncovered, but the `T` in `Vec<T>` is covered. This is only relevant "
"for type arguments."
msgstr ""

#: src/glossary.md:279
msgid "Undefined behavior"
msgstr ""

#: src/glossary.md:281
msgid ""
"Compile-time or run-time behavior that is not specified. This may result in, "
"but is not limited to: process termination or corruption; improper, "
"incorrect, or unintended computation; or platform-specific results. [More]"
"(behavior-considered-undefined.md)."
msgstr ""

#: src/glossary.md:286
msgid "Uninhabited"
msgstr ""

#: src/glossary.md:288
msgid ""
"A type is uninhabited if it has no constructors and therefore can never be "
"instantiated. An uninhabited type is \"empty\" in the sense that there are "
"no values of the type. The canonical example of an uninhabited type is the "
"[never type](types/never.md) `!`, or an enum with no variants `enum Never { }"
"`. Opposite of [Inhabited](#inhabited)."
msgstr ""
